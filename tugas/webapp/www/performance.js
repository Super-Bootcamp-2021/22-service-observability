/*! For license information please see performance.js.LICENSE.txt */
(()=>{"use strict";var t={873:(t,e,n)=>{n.d(e,{_:()=>l});var r=n(655),i=n(422),o=n(343),a=n(470),s=n(597);t=n.hmd(t);var c=["aggregate","bulkWrite","countDocuments","createIndex","createIndexes","deleteMany","deleteOne","distinct","drop","dropIndex","dropIndexes","estimatedDocumentCount","findOne","findOneAndDelete","findOneAndReplace","findOneAndUpdate","indexes","indexExists","indexInformation","initializeOrderedBulkOp","insertMany","insertOne","isCapped","mapReduce","options","parallelCollectionScan","rename","replaceOne","stats","updateMany","updateOne"],u={bulkWrite:["operations"],countDocuments:["query"],createIndex:["fieldOrSpec"],createIndexes:["indexSpecs"],deleteMany:["filter"],deleteOne:["filter"],distinct:["key","query"],dropIndex:["indexName"],findOne:["query"],findOneAndDelete:["filter"],findOneAndReplace:["filter","replacement"],findOneAndUpdate:["filter","update"],indexExists:["indexes"],insertMany:["docs"],insertOne:["doc"],mapReduce:["map","reduce"],rename:["newName"],replaceOne:["filter","doc"],updateMany:["filter","update"],updateOne:["filter","update"]},l=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._operations=Array.isArray(t.operations)?t.operations:c,this._describeOperations=!("describeOperations"in t)||t.describeOperations}return e.prototype.setupOnce=function(e,n){var r;try{r=(0,i.l)(t,"mongodb").Collection}catch(t){return void o.k.error("Mongo Integration was unable to require `mongodb` package.")}this._instrumentOperations(r,this._operations,n)},e.prototype._instrumentOperations=function(t,e,n){var r=this;e.forEach((function(e){return r._patchOperation(t,e,n)}))},e.prototype._patchOperation=function(t,e,n){if(e in t.prototype){var i=this._getSpanContextFromOperationArguments.bind(this);(0,a.hl)(t.prototype,e,(function(t){return function(){for(var o,a,c,u,l=[],p=0;p<arguments.length;p++)l[p]=arguments[p];var f=l[l.length-1],d=n().getScope(),h=null===(o=d)||void 0===o?void 0:o.getSpan();if("function"!=typeof f||"mapReduce"===e&&2===l.length){var v=null===(a=h)||void 0===a?void 0:a.startChild(i(this,e,l)),m=t.call.apply(t,(0,r.fl)([this],l));return(0,s.J8)(m)?m.then((function(t){var e;return null===(e=v)||void 0===e||e.finish(),t})):(null===(c=v)||void 0===c||c.finish(),m)}var y=null===(u=h)||void 0===u?void 0:u.startChild(i(this,e,l.slice(0,-1)));return t.call.apply(t,(0,r.fl)([this],l.slice(0,-1),[function(t,e){var n;null===(n=y)||void 0===n||n.finish(),f(t,e)}]))}}))}},e.prototype._getSpanContextFromOperationArguments=function(t,e,n){var i={collectionName:t.collectionName,dbName:t.dbName,namespace:t.namespace},o={op:"db",description:e,data:i},a=u[e],s=Array.isArray(this._describeOperations)?this._describeOperations.includes(e):this._describeOperations;if(!a||!s)return o;try{if("mapReduce"===e){var c=(0,r.CR)(n,2),l=c[0],p=c[1];i[a[0]]="string"==typeof l?l:l.name||"<anonymous>",i[a[1]]="string"==typeof p?p:p.name||"<anonymous>"}else for(var f=0;f<a.length;f++)i[a[f]]=JSON.stringify(n[f])}catch(t){}return o},e.id="Mongo",e}()},736:(t,e,n)=>{n.d(e,{m:()=>a});var r=n(422),i=n(343),o=n(470);t=n.hmd(t);var a=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(e,n){var a;try{a=(0,r.l)(t,"mysql/lib/Connection.js")}catch(t){return void i.k.error("Mysql Integration was unable to require `mysql` package.")}(0,o.hl)(a.prototype,"query",(function(t){return function(e,r,i){var o,a,s=null===(a=null===(o=n().getScope())||void 0===o?void 0:o.getSpan())||void 0===a?void 0:a.startChild({description:"string"==typeof e?e:e.sql,op:"db"});return"function"==typeof i?t.call(this,e,r,(function(t,e,n){var r;null===(r=s)||void 0===r||r.finish(),i(t,e,n)})):"function"==typeof r?t.call(this,e,(function(t,e,n){var i;null===(i=s)||void 0===i||i.finish(),r(t,e,n)})):t.call(this,e,r,i)}}))},e.id="Mysql",e}()},136:(t,e,n)=>{n.d(e,{E:()=>a});var r=n(422),i=n(343),o=n(470);t=n.hmd(t);var a=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(e,n){var a;try{a=(0,r.l)(t,"pg").Client}catch(t){return void i.k.error("Postgres Integration was unable to require `pg` package.")}(0,o.hl)(a.prototype,"query",(function(t){return function(e,r,i){var o,a,s=null===(a=null===(o=n().getScope())||void 0===o?void 0:o.getSpan())||void 0===a?void 0:a.startChild({description:"string"==typeof e?e:e.text,op:"db"});return"function"==typeof i?t.call(this,e,r,(function(t,e){var n;null===(n=s)||void 0===n||n.finish(),i(t,e)})):"function"==typeof r?t.call(this,e,(function(t,e){var n;null===(n=s)||void 0===n||n.finish(),r(t,e)})):t.call(this,e,r).then((function(t){var e;return null===(e=s)||void 0===e||e.finish(),t}))}}))},e.id="Postgres",e}()},464:(t,e,n)=>{n.d(e,{R:()=>i});var r=n(597);function i(t){try{for(var e=t,n=[],r=0,i=0,a=" > ".length,s=void 0;e&&r++<5&&!("html"===(s=o(e))||r>1&&i+n.length*a+s.length>=80);)n.push(s),i+=s.length,e=e.parentNode;return n.reverse().join(" > ")}catch(t){return"<unknown>"}}function o(t){var e,n,i,o,a,s=t,c=[];if(!s||!s.tagName)return"";if(c.push(s.tagName.toLowerCase()),s.id&&c.push("#"+s.id),(e=s.className)&&(0,r.HD)(e))for(n=e.split(/\s+/),a=0;a<n.length;a++)c.push("."+n[a]);var u=["type","name","title","alt"];for(a=0;a<u.length;a++)i=u[a],(o=s.getAttribute(i))&&c.push("["+i+'="'+o+'"]');return c.join("")}},597:(t,e,n)=>{function r(t){switch(Object.prototype.toString.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return v(t,Error)}}function i(t){return"[object ErrorEvent]"===Object.prototype.toString.call(t)}function o(t){return"[object DOMError]"===Object.prototype.toString.call(t)}function a(t){return"[object DOMException]"===Object.prototype.toString.call(t)}function s(t){return"[object String]"===Object.prototype.toString.call(t)}function c(t){return null===t||"object"!=typeof t&&"function"!=typeof t}function u(t){return"[object Object]"===Object.prototype.toString.call(t)}function l(t){return"undefined"!=typeof Event&&v(t,Event)}function p(t){return"undefined"!=typeof Element&&v(t,Element)}function f(t){return"[object RegExp]"===Object.prototype.toString.call(t)}function d(t){return Boolean(t&&t.then&&"function"==typeof t.then)}function h(t){return u(t)&&"nativeEvent"in t&&"preventDefault"in t&&"stopPropagation"in t}function v(t,e){try{return t instanceof e}catch(t){return!1}}n.d(e,{VZ:()=>r,VW:()=>i,TX:()=>o,fm:()=>a,HD:()=>s,pt:()=>c,PO:()=>u,cO:()=>l,kK:()=>p,Kj:()=>f,J8:()=>d,Cy:()=>h,V9:()=>v})},343:(t,e,n)=>{n.d(e,{k:()=>s});var r=n(844),i=(0,r.Rf)(),o="Sentry Logger ",a=function(){function t(){this._enabled=!1}return t.prototype.disable=function(){this._enabled=!1},t.prototype.enable=function(){this._enabled=!0},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._enabled&&(0,r.Cf)((function(){i.console.log(o+"[Log]: "+t.join(" "))}))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._enabled&&(0,r.Cf)((function(){i.console.warn(o+"[Warn]: "+t.join(" "))}))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._enabled&&(0,r.Cf)((function(){i.console.error(o+"[Error]: "+t.join(" "))}))},t}();i.__SENTRY__=i.__SENTRY__||{};var s=i.__SENTRY__.logger||(i.__SENTRY__.logger=new a)},844:(t,e,n)=>{n.d(e,{Rf:()=>o,DM:()=>a,en:()=>s,jH:()=>c,Cf:()=>u,Db:()=>l,EG:()=>p,l4:()=>f,JY:()=>d});var r=n(422),i={};function o(){return(0,r.K)()?n.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:i}function a(){var t=o(),e=t.crypto||t.msCrypto;if(void 0!==e&&e.getRandomValues){var n=new Uint16Array(8);e.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;var r=function(t){for(var e=t.toString(16);e.length<4;)e="0"+e;return e};return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))}function s(t){if(!t)return{};var e=t.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!e)return{};var n=e[6]||"",r=e[8]||"";return{host:e[4],path:e[5],protocol:e[2],relative:e[5]+n+r}}function c(t){if(t.message)return t.message;if(t.exception&&t.exception.values&&t.exception.values[0]){var e=t.exception.values[0];return e.type&&e.value?e.type+": "+e.value:e.type||e.value||t.event_id||"<unknown>"}return t.event_id||"<unknown>"}function u(t){var e=o();if(!("console"in e))return t();var n=e.console,r={};["debug","info","warn","error","log","assert"].forEach((function(t){t in e.console&&n[t].__sentry_original__&&(r[t]=n[t],n[t]=n[t].__sentry_original__)}));var i=t();return Object.keys(r).forEach((function(t){n[t]=r[t]})),i}function l(t,e,n){t.exception=t.exception||{},t.exception.values=t.exception.values||[],t.exception.values[0]=t.exception.values[0]||{},t.exception.values[0].value=t.exception.values[0].value||e||"",t.exception.values[0].type=t.exception.values[0].type||n||"Error"}function p(t,e){void 0===e&&(e={});try{t.exception.values[0].mechanism=t.exception.values[0].mechanism||{},Object.keys(e).forEach((function(n){t.exception.values[0].mechanism[n]=e[n]}))}catch(t){}}function f(){try{return document.location.href}catch(t){return""}}function d(t,e){if(!e)return 6e4;var n=parseInt(""+e,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+e);return isNaN(r)?6e4:r-t}},422:(t,e,n)=>{function r(){return"[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0)}function i(t,e){return t.require(e)}n.d(e,{K:()=>r,l:()=>i})},470:(t,e,n)=>{n.d(e,{Jr:()=>y,zf:()=>m,hl:()=>u,Fv:()=>v,Qy:()=>f,_j:()=>l});var r=n(655),i=n(464),o=n(597),a=function(){function t(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return t.prototype.memoize=function(t){if(this._hasWeakSet)return!!this._inner.has(t)||(this._inner.add(t),!1);for(var e=0;e<this._inner.length;e++)if(this._inner[e]===t)return!0;return this._inner.push(t),!1},t.prototype.unmemoize=function(t){if(this._hasWeakSet)this._inner.delete(t);else for(var e=0;e<this._inner.length;e++)if(this._inner[e]===t){this._inner.splice(e,1);break}},t}(),s=n(360),c=n(321);function u(t,e,n){if(e in t){var r=t[e],i=n(r);if("function"==typeof i)try{i.prototype=i.prototype||{},Object.defineProperties(i,{__sentry_original__:{enumerable:!1,value:r}})}catch(t){}t[e]=i}}function l(t){return Object.keys(t).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(t[e])})).join("&")}function p(t){if((0,o.VZ)(t)){var e=t,n={message:e.message,name:e.name,stack:e.stack};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}if((0,o.cO)(t)){var a=t,s={};s.type=a.type;try{s.target=(0,o.kK)(a.target)?(0,i.R)(a.target):Object.prototype.toString.call(a.target)}catch(t){s.target="<unknown>"}try{s.currentTarget=(0,o.kK)(a.currentTarget)?(0,i.R)(a.currentTarget):Object.prototype.toString.call(a.currentTarget)}catch(t){s.currentTarget="<unknown>"}for(var r in"undefined"!=typeof CustomEvent&&(0,o.V9)(t,CustomEvent)&&(s.detail=a.detail),a)Object.prototype.hasOwnProperty.call(a,r)&&(s[r]=a);return s}return t}function f(t,e,n){void 0===e&&(e=3),void 0===n&&(n=102400);var r,i=v(t,e);return r=i,function(t){return~-encodeURI(t).split(/%..|./).length}(JSON.stringify(r))>n?f(t,e-1,n):i}function d(t,e){return"domain"===e&&t&&"object"==typeof t&&t._events?"[Domain]":"domainEmitter"===e?"[DomainEmitter]":void 0!==n.g&&t===n.g?"[Global]":"undefined"!=typeof window&&t===window?"[Window]":"undefined"!=typeof document&&t===document?"[Document]":(0,o.Cy)(t)?"[SyntheticEvent]":"number"==typeof t&&t!=t?"[NaN]":void 0===t?"[undefined]":"function"==typeof t?"[Function: "+(0,s.$)(t)+"]":"symbol"==typeof t?"["+String(t)+"]":"bigint"==typeof t?"[BigInt: "+String(t)+"]":t}function h(t,e,n,r){if(void 0===n&&(n=1/0),void 0===r&&(r=new a),0===n)return function(t){var e=Object.prototype.toString.call(t);if("string"==typeof t)return t;if("[object Object]"===e)return"[Object]";if("[object Array]"===e)return"[Array]";var n=d(t);return(0,o.pt)(n)?n:e}(e);if(null!=e&&"function"==typeof e.toJSON)return e.toJSON();var i=d(e,t);if((0,o.pt)(i))return i;var s=p(e),c=Array.isArray(e)?[]:{};if(r.memoize(e))return"[Circular ~]";for(var u in s)Object.prototype.hasOwnProperty.call(s,u)&&(c[u]=h(u,s[u],n-1,r));return r.unmemoize(e),c}function v(t,e){try{return JSON.parse(JSON.stringify(t,(function(t,n){return h(t,n,e)})))}catch(t){return"**non-serializable**"}}function m(t,e){void 0===e&&(e=40);var n=Object.keys(p(t));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=e)return(0,c.$G)(n[0],e);for(var r=n.length;r>0;r--){var i=n.slice(0,r).join(", ");if(!(i.length>e))return r===n.length?i:(0,c.$G)(i,e)}return""}function y(t){var e,n;if((0,o.PO)(t)){var i=t,a={};try{for(var s=(0,r.XA)(Object.keys(i)),c=s.next();!c.done;c=s.next()){var u=c.value;void 0!==i[u]&&(a[u]=y(i[u]))}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return a}return Array.isArray(t)?t.map(y):t}},360:(t,e,n)=>{n.d(e,{$:()=>i});var r="<anonymous>";function i(t){try{return t&&"function"==typeof t&&t.name||r}catch(t){return r}}},321:(t,e,n)=>{n.d(e,{$G:()=>i,nK:()=>o,zC:()=>a});var r=n(597);function i(t,e){return void 0===e&&(e=0),"string"!=typeof t||0===e||t.length<=e?t:t.substr(0,e)+"..."}function o(t,e){if(!Array.isArray(t))return"";for(var n=[],r=0;r<t.length;r++){var i=t[r];try{n.push(String(i))}catch(t){n.push("[value cannot be serialized]")}}return n.join(e)}function a(t,e){return!!(0,r.HD)(t)&&((0,r.Kj)(e)?e.test(t):"string"==typeof e&&-1!==t.indexOf(e))}},170:(t,e,n)=>{n.d(e,{yW:()=>c,_I:()=>u,Z1:()=>l});var r=n(844),i=n(422);t=n.hmd(t);var o={nowSeconds:function(){return Date.now()/1e3}},a=(0,i.K)()?function(){try{return(0,i.l)(t,"perf_hooks").performance}catch(t){return}}():function(){var t=(0,r.Rf)().performance;if(t&&t.now)return{now:function(){return t.now()},timeOrigin:Date.now()-t.now()}}(),s=void 0===a?o:{nowSeconds:function(){return(a.timeOrigin+a.now())/1e3}},c=o.nowSeconds.bind(o),u=s.nowSeconds.bind(s),l=function(){var t=(0,r.Rf)().performance;if(t)return t.timeOrigin?t.timeOrigin:t.timing&&t.timing.navigationStart||Date.now()}()},1:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/performance/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function a(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],i=0;i<t.length;i++){var s=t[i],c=e.base?s[0]+e.base:s[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var p=a(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(o[p].references++,o[p].updater(f)):o.push({identifier:l,updater:v(f,e),references:1}),r.push(l)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,l=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function p(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,h=0;function v(t,e){var n,r,i;if(e.singleton){var o=h++;n=d||(d=c(e)),r=p.bind(null,n,o,!1),i=p.bind(null,n,o,!0)}else n=c(e),r=f.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var c=s(t,e),u=0;u<n.length;u++){var l=a(n[u]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=c}}}},121:(t,e,n)=>{n.d(e,{Z:()=>r}),t=n.hmd(t);const r=function(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:t)},655:(t,e,n)=>{n.d(e,{ZT:()=>i,pi:()=>o,_T:()=>a,XA:()=>s,CR:()=>c,fl:()=>u});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function s(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function u(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(c(arguments[e]));return t}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r](i,i.exports,n),i.loaded=!0,i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={};n.r(t),n.d(t,{Express:()=>xp,Mongo:()=>Ap._,Mysql:()=>Cp.m,Postgres:()=>Tp.E});var e=Object.freeze({});function r(t){return null==t}function i(t){return null!=t}function o(t){return!0===t}function a(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function s(t){return null!==t&&"object"==typeof t}var c=Object.prototype.toString;function u(t){return"[object Object]"===c.call(t)}function l(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return i(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function f(t){return null==t?"":Array.isArray(t)||u(t)&&t.toString===c?JSON.stringify(t,null,2):String(t)}function d(t){var e=parseFloat(t);return isNaN(e)?t:e}function h(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var v=h("slot,component",!0),m=h("key,ref,slot,slot-scope,is");function y(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var g=Object.prototype.hasOwnProperty;function _(t,e){return g.call(t,e)}function b(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var w=/-(\w)/g,S=b((function(t){return t.replace(w,(function(t,e){return e?e.toUpperCase():""}))})),x=b((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),k=/\B([A-Z])/g,E=b((function(t){return t.replace(k,"-$1").toLowerCase()})),O=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function T(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function C(t,e){for(var n in e)t[n]=e[n];return t}function A(t){for(var e={},n=0;n<t.length;n++)t[n]&&C(e,t[n]);return e}function j(t,e,n){}var $=function(t,e,n){return!1},I=function(t){return t};function R(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every((function(t,n){return R(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(t),c=Object.keys(e);return a.length===c.length&&a.every((function(n){return R(t[n],e[n])}))}catch(t){return!1}}function D(t,e){for(var n=0;n<t.length;n++)if(R(t[n],e))return n;return-1}function N(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var P="data-server-rendered",M=["component","directive","filter"],L=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:$,isReservedAttr:$,isUnknownElement:$,getTagNamespace:j,parsePlatformTagName:I,mustUseProp:$,async:!0,_lifecycleHooks:L},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function B(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q,W=new RegExp("[^"+U.source+".$_\\d]"),z="__proto__"in{},V="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=J&&WXEnvironment.platform.toLowerCase(),G=V&&window.navigator.userAgent.toLowerCase(),Y=G&&/msie|trident/.test(G),X=G&&G.indexOf("msie 9.0")>0,Z=G&&G.indexOf("edge/")>0,Q=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===K),tt=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),et={}.watch,nt=!1;if(V)try{var rt={};Object.defineProperty(rt,"passive",{get:function(){nt=!0}}),window.addEventListener("test-passive",null,rt)}catch(t){}var it=function(){return void 0===q&&(q=!V&&!J&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),q},ot=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function at(t){return"function"==typeof t&&/native code/.test(t.toString())}var st,ct="undefined"!=typeof Symbol&&at(Symbol)&&"undefined"!=typeof Reflect&&at(Reflect.ownKeys);st="undefined"!=typeof Set&&at(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=j,lt=0,pt=function(){this.id=lt++,this.subs=[]};pt.prototype.addSub=function(t){this.subs.push(t)},pt.prototype.removeSub=function(t){y(this.subs,t)},pt.prototype.depend=function(){pt.target&&pt.target.addDep(this)},pt.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},pt.target=null;var ft=[];function dt(t){ft.push(t),pt.target=t}function ht(){ft.pop(),pt.target=ft[ft.length-1]}var vt=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},mt={child:{configurable:!0}};mt.child.get=function(){return this.componentInstance},Object.defineProperties(vt.prototype,mt);var yt=function(t){void 0===t&&(t="");var e=new vt;return e.text=t,e.isComment=!0,e};function gt(t){return new vt(void 0,void 0,void 0,String(t))}function _t(t){var e=new vt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var bt=Array.prototype,wt=Object.create(bt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=bt[t];B(wt,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o}))}));var St=Object.getOwnPropertyNames(wt),xt=!0;function kt(t){xt=t}var Et=function(t){this.value=t,this.dep=new pt,this.vmCount=0,B(t,"__ob__",this),Array.isArray(t)?(z?function(t,e){t.__proto__=e}(t,wt):function(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];B(t,o,e[o])}}(t,wt,St),this.observeArray(t)):this.walk(t)};function Ot(t,e){var n;if(s(t)&&!(t instanceof vt))return _(t,"__ob__")&&t.__ob__ instanceof Et?n=t.__ob__:xt&&!it()&&(Array.isArray(t)||u(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Et(t)),e&&n&&n.vmCount++,n}function Tt(t,e,n,r,i){var o=new pt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!i&&Ot(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return pt.target&&(o.depend(),u&&(u.dep.depend(),Array.isArray(e)&&jt(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!i&&Ot(e),o.notify())}})}}function Ct(t,e,n){if(Array.isArray(t)&&l(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Tt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function At(t,e){if(Array.isArray(t)&&l(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function jt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&jt(e)}Et.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Tt(t,e[n])},Et.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Ot(t[e])};var $t=F.optionMergeStrategies;function It(t,e){if(!e)return t;for(var n,r,i,o=ct?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(r=t[n],i=e[n],_(t,n)?r!==i&&u(r)&&u(i)&&It(r,i):Ct(t,n,i));return t}function Rt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?It(r,i):i}:e?t?function(){return It("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Dt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Nt(t,e,n,r){var i=Object.create(t||null);return e?C(i,e):i}$t.data=function(t,e,n){return n?Rt(t,e,n):e&&"function"!=typeof e?t:Rt(t,e)},L.forEach((function(t){$t[t]=Dt})),M.forEach((function(t){$t[t+"s"]=Nt})),$t.watch=function(t,e,n,r){if(t===et&&(t=void 0),e===et&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var i={};for(var o in C(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},$t.props=$t.methods=$t.inject=$t.computed=function(t,e,n,r){if(!t)return e;var i=Object.create(null);return C(i,t),e&&C(i,e),i},$t.provide=Rt;var Pt=function(t,e){return void 0===e?t:e};function Mt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(o[S(i)]={type:null});else if(u(n))for(var a in n)i=n[a],o[S(a)]=u(i)?i:{type:i};t.props=o}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(u(n))for(var o in n){var a=n[o];r[o]=u(a)?C({from:o},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Mt(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=Mt(t,e.mixins[r],n);var o,a={};for(o in t)s(o);for(o in e)_(t,o)||s(o);function s(r){var i=$t[r]||Pt;a[r]=i(t[r],e[r],n,r)}return a}function Lt(t,e,n,r){if("string"==typeof n){var i=t[e];if(_(i,n))return i[n];var o=S(n);if(_(i,o))return i[o];var a=x(o);return _(i,a)?i[a]:i[n]||i[o]||i[a]}}function Ft(t,e,n,r){var i=e[t],o=!_(n,t),a=n[t],s=Bt(Boolean,i.type);if(s>-1)if(o&&!_(i,"default"))a=!1;else if(""===a||a===E(t)){var c=Bt(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(_(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof r&&"Function"!==Ut(e.type)?r.call(t):r}}(r,i,t);var u=xt;kt(!0),Ot(a),kt(u)}return a}function Ut(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Ht(t,e){return Ut(t)===Ut(e)}function Bt(t,e){if(!Array.isArray(e))return Ht(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Ht(e[n],t))return n;return-1}function qt(t,e,n){dt();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,t,e,n))return}catch(t){zt(t,r,"errorCaptured hook")}}zt(t,e,n)}finally{ht()}}function Wt(t,e,n,r,i){var o;try{(o=n?t.apply(e,n):t.call(e))&&!o._isVue&&p(o)&&!o._handled&&(o.catch((function(t){return qt(t,r,i+" (Promise/async)")})),o._handled=!0)}catch(t){qt(t,r,i)}return o}function zt(t,e,n){if(F.errorHandler)try{return F.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Vt(e)}Vt(t)}function Vt(t,e,n){if(!V&&!J||"undefined"==typeof console)throw t;console.error(t)}var Jt,Kt=!1,Gt=[],Yt=!1;function Xt(){Yt=!1;var t=Gt.slice(0);Gt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&at(Promise)){var Zt=Promise.resolve();Jt=function(){Zt.then(Xt),Q&&setTimeout(j)},Kt=!0}else if(Y||"undefined"==typeof MutationObserver||!at(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Jt="undefined"!=typeof setImmediate&&at(setImmediate)?function(){setImmediate(Xt)}:function(){setTimeout(Xt,0)};else{var Qt=1,te=new MutationObserver(Xt),ee=document.createTextNode(String(Qt));te.observe(ee,{characterData:!0}),Jt=function(){Qt=(Qt+1)%2,ee.data=String(Qt)},Kt=!0}function ne(t,e){var n;if(Gt.push((function(){if(t)try{t.call(e)}catch(t){qt(t,e,"nextTick")}else n&&n(e)})),Yt||(Yt=!0,Jt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var re=new st;function ie(t){oe(t,re),re.clear()}function oe(t,e){var n,r,i=Array.isArray(t);if(!(!i&&!s(t)||Object.isFrozen(t)||t instanceof vt)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i)for(n=t.length;n--;)oe(t[n],e);else for(n=(r=Object.keys(t)).length;n--;)oe(t[r[n]],e)}}var ae=b((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function se(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Wt(r,null,arguments,e,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)Wt(i[o],null,t,e,"v-on handler")}return n.fns=t,n}function ce(t,e,n,i,a,s){var c,u,l,p;for(c in t)u=t[c],l=e[c],p=ae(c),r(u)||(r(l)?(r(u.fns)&&(u=t[c]=se(u,s)),o(p.once)&&(u=t[c]=a(p.name,u,p.capture)),n(p.name,u,p.capture,p.passive,p.params)):u!==l&&(l.fns=u,t[c]=l));for(c in e)r(t[c])&&i((p=ae(c)).name,e[c],p.capture)}function ue(t,e,n){var a;t instanceof vt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),y(a.fns,c)}r(s)?a=se([c]):i(s.fns)&&o(s.merged)?(a=s).fns.push(c):a=se([s,c]),a.merged=!0,t[e]=a}function le(t,e,n,r,o){if(i(e)){if(_(e,n))return t[n]=e[n],o||delete e[n],!0;if(_(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function pe(t){return a(t)?[gt(t)]:Array.isArray(t)?de(t):void 0}function fe(t){return i(t)&&i(t.text)&&function(t){return!1===t}(t.isComment)}function de(t,e){var n,s,c,u,l=[];for(n=0;n<t.length;n++)r(s=t[n])||"boolean"==typeof s||(u=l[c=l.length-1],Array.isArray(s)?s.length>0&&(fe((s=de(s,(e||"")+"_"+n))[0])&&fe(u)&&(l[c]=gt(u.text+s[0].text),s.shift()),l.push.apply(l,s)):a(s)?fe(u)?l[c]=gt(u.text+s):""!==s&&l.push(gt(s)):fe(s)&&fe(u)?l[c]=gt(u.text+s.text):(o(t._isVList)&&i(s.tag)&&r(s.key)&&i(e)&&(s.key="__vlist"+e+"_"+n+"__"),l.push(s)));return l}function he(t,e){if(t){for(var n=Object.create(null),r=ct?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var a=t[o].from,s=e;s;){if(s._provided&&_(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s&&"default"in t[o]){var c=t[o].default;n[o]="function"==typeof c?c.call(e):c}}}return n}}function ve(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var u in n)n[u].every(me)&&delete n[u];return n}function me(t){return t.isComment&&!t.asyncFactory||" "===t.text}function ye(t,n,r){var i,o=Object.keys(n).length>0,a=t?!!t.$stable:!o,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==e&&s===r.$key&&!o&&!r.$hasNormal)return r;for(var c in i={},t)t[c]&&"$"!==c[0]&&(i[c]=ge(n,c,t[c]))}else i={};for(var u in n)u in i||(i[u]=_e(n,u));return t&&Object.isExtensible(t)&&(t._normalized=i),B(i,"$stable",a),B(i,"$key",s),B(i,"$hasNormal",o),i}function ge(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:pe(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function _e(t,e){return function(){return t[e]}}function be(t,e){var n,r,o,a,c;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(s(t))if(ct&&t[Symbol.iterator]){n=[];for(var u=t[Symbol.iterator](),l=u.next();!l.done;)n.push(e(l.value,n.length)),l=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)c=a[r],n[r]=e(t[c],c,r);return i(n)||(n=[]),n._isVList=!0,n}function we(t,e,n,r){var i,o=this.$scopedSlots[t];o?(n=n||{},r&&(n=C(C({},r),n)),i=o(n)||e):i=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function Se(t){return Lt(this.$options,"filters",t)||I}function xe(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function ke(t,e,n,r,i){var o=F.keyCodes[e]||n;return i&&r&&!F.keyCodes[e]?xe(i,r):o?xe(o,t):r?E(r)!==e:void 0}function Ee(t,e,n,r,i){if(n&&s(n)){var o;Array.isArray(n)&&(n=A(n));var a=function(a){if("class"===a||"style"===a||m(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||F.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=S(a),u=E(a);c in o||u in o||(o[a]=n[a],i&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var c in n)a(c)}return t}function Oe(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||Ce(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function Te(t,e,n){return Ce(t,"__once__"+e+(n?"_"+n:""),!0),t}function Ce(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ae(t[r],e+"_"+r,n);else Ae(t,e,n)}function Ae(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function je(t,e){if(e&&u(e)){var n=t.on=t.on?C({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}return t}function $e(t,e,n,r){e=e||{$stable:!n};for(var i=0;i<t.length;i++){var o=t[i];Array.isArray(o)?$e(o,e,n):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function Ie(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Re(t,e){return"string"==typeof t?e+t:t}function De(t){t._o=Te,t._n=d,t._s=f,t._l=be,t._t=we,t._q=R,t._i=D,t._m=Oe,t._f=Se,t._k=ke,t._b=Ee,t._v=gt,t._e=yt,t._u=$e,t._g=je,t._d=Ie,t._p=Re}function Ne(t,n,r,i,a){var s,c=this,u=a.options;_(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var l=o(u._compiled),p=!l;this.data=t,this.props=n,this.children=r,this.parent=i,this.listeners=t.on||e,this.injections=he(u.inject,i),this.slots=function(){return c.$slots||ye(t.scopedSlots,c.$slots=ve(r,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ye(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ye(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var o=Be(s,t,e,n,r,p);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return Be(s,t,e,n,r,p)}}function Pe(t,e,n,r,i){var o=_t(t);return o.fnContext=n,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function Me(t,e){for(var n in e)t[S(n)]=e[n]}De(Ne.prototype);var Le={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Le.prepatch(n,n)}else(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}(t,Qe)).$mount(e?t.elm:void 0,e)},prepatch:function(t,n){var r=n.componentOptions;!function(t,n,r,i,o){var a=i.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==e&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(o||t.$options._renderChildren||c);if(t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=o,t.$attrs=i.data.attrs||e,t.$listeners=r||e,n&&t.$options.props){kt(!1);for(var l=t._props,p=t.$options._propKeys||[],f=0;f<p.length;f++){var d=p[f],h=t.$options.props;l[d]=Ft(d,h,n,t)}kt(!0),t.$options.propsData=n}r=r||e;var v=t.$options._parentListeners;t.$options._parentListeners=r,Ze(t,r,v),u&&(t.$slots=ve(o,i.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,on(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,sn.push(e)):nn(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?rn(e,!0):e.$destroy())}},Fe=Object.keys(Le);function Ue(t,n,a,c,u){if(!r(t)){var l=a.$options._base;if(s(t)&&(t=l.extend(t)),"function"==typeof t){var f;if(r(t.cid)&&void 0===(t=function(t,e){if(o(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;var n=ze;if(n&&i(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),o(t.loading)&&i(t.loadingComp))return t.loadingComp;if(n&&!i(t.owners)){var a=t.owners=[n],c=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return y(a,n)}));var f=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},d=N((function(n){t.resolved=Ve(n,e),c?a.length=0:f(!0)})),h=N((function(e){i(t.errorComp)&&(t.error=!0,f(!0))})),v=t(d,h);return s(v)&&(p(v)?r(t.resolved)&&v.then(d,h):p(v.component)&&(v.component.then(d,h),i(v.error)&&(t.errorComp=Ve(v.error,e)),i(v.loading)&&(t.loadingComp=Ve(v.loading,e),0===v.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,f(!1))}),v.delay||200)),i(v.timeout)&&(l=setTimeout((function(){l=null,r(t.resolved)&&h(null)}),v.timeout)))),c=!1,t.loading?t.loadingComp:t.resolved}}(f=t,l)))return function(t,e,n,r,i){var o=yt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(f,n,a,c,u);n=n||{},On(t),i(n.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),a=o[r],s=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(t.options,n);var d=function(t,e,n){var o=e.options.props;if(!r(o)){var a={},s=t.attrs,c=t.props;if(i(s)||i(c))for(var u in o){var l=E(u);le(a,c,u,l,!0)||le(a,s,u,l,!1)}return a}}(n,t);if(o(t.options.functional))return function(t,n,r,o,a){var s=t.options,c={},u=s.props;if(i(u))for(var l in u)c[l]=Ft(l,u,n||e);else i(r.attrs)&&Me(c,r.attrs),i(r.props)&&Me(c,r.props);var p=new Ne(r,c,a,o,t),f=s.render.call(null,p._c,p);if(f instanceof vt)return Pe(f,r,p.parent,s);if(Array.isArray(f)){for(var d=pe(f)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=Pe(d[v],r,p.parent,s);return h}}(t,d,n,a,c);var h=n.on;if(n.on=n.nativeOn,o(t.options.abstract)){var v=n.slot;n={},v&&(n.slot=v)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Fe.length;n++){var r=Fe[n],i=e[r],o=Le[r];i===o||i&&i._merged||(e[r]=i?He(o,i):o)}}(n);var m=t.options.name||u;return new vt("vue-component-"+t.cid+(m?"-"+m:""),n,void 0,void 0,void 0,a,{Ctor:t,propsData:d,listeners:h,tag:u,children:c},f)}}}function He(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function Be(t,e,n,r,c,u){return(Array.isArray(n)||a(n))&&(c=r,r=n,n=void 0),o(u)&&(c=2),function(t,e,n,r,o){if(i(n)&&i(n.__ob__))return yt();if(i(n)&&i(n.is)&&(e=n.is),!e)return yt();var a,c,u;(Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),2===o?r=pe(r):1===o&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r)),"string"==typeof e)?(c=t.$vnode&&t.$vnode.ns||F.getTagNamespace(e),a=F.isReservedTag(e)?new vt(F.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!i(u=Lt(t.$options,"components",e))?new vt(e,n,r,void 0,void 0,t):Ue(u,n,t,r,e)):a=Ue(e,n,t,r);return Array.isArray(a)?a:i(a)?(i(c)&&qe(a,c),i(n)&&function(t){s(t.style)&&ie(t.style),s(t.class)&&ie(t.class)}(n),a):yt()}(t,e,n,r,c)}function qe(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),i(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];i(c.tag)&&(r(c.ns)||o(n)&&"svg"!==c.tag)&&qe(c,e,n)}}var We,ze=null;function Ve(t,e){return(t.__esModule||ct&&"Module"===t[Symbol.toStringTag])&&(t=t.default),s(t)?e.extend(t):t}function Je(t){return t.isComment&&t.asyncFactory}function Ke(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||Je(n)))return n}}function Ge(t,e){We.$on(t,e)}function Ye(t,e){We.$off(t,e)}function Xe(t,e){var n=We;return function r(){var i=e.apply(null,arguments);null!==i&&n.$off(t,r)}}function Ze(t,e,n){We=t,ce(e,n||{},Ge,Ye,Xe,t),We=void 0}var Qe=null;function tn(t){var e=Qe;return Qe=t,function(){Qe=e}}function en(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function nn(t,e){if(e){if(t._directInactive=!1,en(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)nn(t.$children[n]);on(t,"activated")}}function rn(t,e){if(!(e&&(t._directInactive=!0,en(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)rn(t.$children[n]);on(t,"deactivated")}}function on(t,e){dt();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,o=n.length;i<o;i++)Wt(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),ht()}var an=[],sn=[],cn={},un=!1,ln=!1,pn=0,fn=0,dn=Date.now;if(V&&!Y){var hn=window.performance;hn&&"function"==typeof hn.now&&dn()>document.createEvent("Event").timeStamp&&(dn=function(){return hn.now()})}function vn(){var t,e;for(fn=dn(),ln=!0,an.sort((function(t,e){return t.id-e.id})),pn=0;pn<an.length;pn++)(t=an[pn]).before&&t.before(),e=t.id,cn[e]=null,t.run();var n=sn.slice(),r=an.slice();pn=an.length=sn.length=0,cn={},un=ln=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,nn(t[e],!0)}(n),function(t){for(var e=t.length;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&on(r,"updated")}}(r),ot&&F.devtools&&ot.emit("flush")}var mn=0,yn=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++mn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new st,this.newDepIds=new st,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!W.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=j)),this.value=this.lazy?void 0:this.get()};yn.prototype.get=function(){var t;dt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;qt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ie(t),ht(),this.cleanupDeps()}return t},yn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},yn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},yn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==cn[e]){if(cn[e]=!0,ln){for(var n=an.length-1;n>pn&&an[n].id>t.id;)n--;an.splice(n+1,0,t)}else an.push(t);un||(un=!0,ne(vn))}}(this)},yn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){qt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},yn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},yn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},yn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var gn={enumerable:!0,configurable:!0,get:j,set:j};function _n(t,e,n){gn.get=function(){return this[e][n]},gn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,gn)}var bn={lazy:!0};function wn(t,e,n){var r=!it();"function"==typeof n?(gn.get=r?Sn(e):xn(n),gn.set=j):(gn.get=n.get?r&&!1!==n.cache?Sn(e):xn(n.get):j,gn.set=n.set||j),Object.defineProperty(t,e,gn)}function Sn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),pt.target&&e.depend(),e.value}}function xn(t){return function(){return t.call(this,this)}}function kn(t,e,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var En=0;function On(t){var e=t.options;if(t.super){var n=On(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&C(t.extendOptions,r),(e=t.options=Mt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function Tn(t){this._init(t)}function Cn(t){return t&&(t.Ctor.options.name||t.tag)}function An(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!function(t){return"[object RegExp]"===c.call(t)}(t)&&t.test(e)}function jn(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=Cn(a.componentOptions);s&&!e(s)&&$n(n,o,r,i)}}}function $n(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,y(n,e)}!function(t){t.prototype._init=function(t){var n=this;n._uid=En++,n._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(n,t):n.$options=Mt(On(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(n),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ze(t,e)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,r=t.$vnode=n._parentVnode,i=r&&r.context;t.$slots=ve(n._renderChildren,i),t.$scopedSlots=e,t._c=function(e,n,r,i){return Be(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Be(t,e,n,r,i,!0)};var o=r&&r.data;Tt(t,"$attrs",o&&o.attrs||e,null,!0),Tt(t,"$listeners",n._parentListeners||e,null,!0)}(n),on(n,"beforeCreate"),function(t){var e=he(t.$options.inject,t);e&&(kt(!1),Object.keys(e).forEach((function(n){Tt(t,n,e[n])})),kt(!0))}(n),function(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[];t.$parent&&kt(!1);var o=function(o){i.push(o);var a=Ft(o,e,n,t);Tt(r,o,a),o in t||_n(t,"_props",o)};for(var a in e)o(a);kt(!0)}(t,e.props),e.methods&&function(t,e){for(var n in t.$options.props,e)t[n]="function"!=typeof e[n]?j:O(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;u(e=t._data="function"==typeof e?function(t,e){dt();try{return t.call(e,e)}catch(t){return qt(t,e,"data()"),{}}finally{ht()}}(e,t):e||{})||(e={});for(var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);i--;){var o=n[i];r&&_(r,o)||H(o)||_n(t,"_data",o)}Ot(e,!0)}(t):Ot(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=it();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;r||(n[i]=new yn(t,a||j,j,bn)),i in t||wn(t,i,o)}}(t,e.computed),e.watch&&e.watch!==et&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)kn(t,n,r[i]);else kn(t,n,r)}}(t,e.watch)}(n),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(n),on(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(Tn),function(t){Object.defineProperty(t.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(t.prototype,"$props",{get:function(){return this._props}}),t.prototype.$set=Ct,t.prototype.$delete=At,t.prototype.$watch=function(t,e,n){var r=this;if(u(e))return kn(r,t,e,n);(n=n||{}).user=!0;var i=new yn(r,t,e,n);if(n.immediate)try{e.call(r,i.value)}catch(t){qt(t,r,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(Tn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var o,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((o=a[s])===e||o.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?T(n):n;for(var r=T(arguments,1),i='event handler for "'+t+'"',o=0,a=n.length;o<a;o++)Wt(n[o],e,r,e,i)}return e}}(Tn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,o=tn(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){on(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||y(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),on(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Tn),function(t){De(t.prototype),t.prototype.$nextTick=function(t){return ne(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=ye(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{ze=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){qt(n,e,"render"),t=e._vnode}finally{ze=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof vt||(t=yt()),t.parent=i,t}}(Tn);var In=[String,RegExp,Array],Rn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:In,exclude:In,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)$n(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){jn(t,(function(t){return An(e,t)}))})),this.$watch("exclude",(function(e){jn(t,(function(t){return!An(e,t)}))}))},render:function(){var t=this.$slots.default,e=Ke(t),n=e&&e.componentOptions;if(n){var r=Cn(n),i=this.include,o=this.exclude;if(i&&(!r||!An(i,r))||o&&r&&An(o,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,y(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&$n(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return F}};Object.defineProperty(t,"config",e),t.util={warn:ut,extend:C,mergeOptions:Mt,defineReactive:Tt},t.set=Ct,t.delete=At,t.nextTick=ne,t.observable=function(t){return Ot(t),t},t.options=Object.create(null),M.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,C(t.options.components,Rn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=T(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),function(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name,a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Mt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)_n(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)wn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,M.forEach((function(t){a[t]=n[t]})),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=C({},a.options),i[r]=a,a}}(t),function(t){M.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&u(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(Tn),Object.defineProperty(Tn.prototype,"$isServer",{get:it}),Object.defineProperty(Tn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Tn,"FunctionalRenderContext",{value:Ne}),Tn.version="2.6.12";var Dn=h("style,class"),Nn=h("input,textarea,option,select,progress"),Pn=function(t,e,n){return"value"===n&&Nn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Mn=h("contenteditable,draggable,spellcheck"),Ln=h("events,caret,typing,plaintext-only"),Fn=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Un="http://www.w3.org/1999/xlink",Hn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Bn=function(t){return Hn(t)?t.slice(6,t.length):""},qn=function(t){return null==t||!1===t};function Wn(t,e){return{staticClass:zn(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function zn(t,e){return t?e?t+" "+e:t:e||""}function Vn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=Vn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):s(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Jn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Kn=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Gn=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Yn=function(t){return Kn(t)||Gn(t)};function Xn(t){return Gn(t)?"svg":"math"===t?"math":void 0}var Zn=Object.create(null),Qn=h("text,number,password,search,email,tel,url");function tr(t){return"string"==typeof t?document.querySelector(t)||document.createElement("div"):t}var er=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Jn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),nr={create:function(t,e){rr(e)},update:function(t,e){t.data.ref!==e.data.ref&&(rr(t,!0),rr(e))},destroy:function(t){rr(t,!0)}};function rr(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?y(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var ir=new vt("",{},[]),or=["create","activate","update","remove","destroy"];function ar(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||Qn(r)&&Qn(o)}(t,e)||o(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function sr(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var cr={create:ur,update:ur,destroy:function(t){ur(t,ir)}};function ur(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===ir,a=e===ir,s=pr(t.data.directives,t.context),c=pr(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],i=c[n],r?(i.oldValue=r.value,i.oldArg=r.arg,dr(i,"update",e,t),i.def&&i.def.componentUpdated&&l.push(i)):(dr(i,"bind",e,t),i.def&&i.def.inserted&&u.push(i));if(u.length){var p=function(){for(var n=0;n<u.length;n++)dr(u[n],"inserted",e,t)};o?ue(e,"insert",p):p()}if(l.length&&ue(e,"postpatch",(function(){for(var n=0;n<l.length;n++)dr(l[n],"componentUpdated",e,t)})),!o)for(n in s)c[n]||dr(s[n],"unbind",t,t,a)}(t,e)}var lr=Object.create(null);function pr(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=lr),i[fr(r)]=r,r.def=Lt(e.$options,"directives",r.name);return i}function fr(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function dr(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){qt(r,n.context,"directive "+t.name+" "+e+" hook")}}var hr=[nr,cr];function vr(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||r(t.data.attrs)&&r(e.data.attrs))){var o,a,s=e.elm,c=t.data.attrs||{},u=e.data.attrs||{};for(o in i(u.__ob__)&&(u=e.data.attrs=C({},u)),u)a=u[o],c[o]!==a&&mr(s,o,a);for(o in(Y||Z)&&u.value!==c.value&&mr(s,"value",u.value),c)r(u[o])&&(Hn(o)?s.removeAttributeNS(Un,Bn(o)):Mn(o)||s.removeAttribute(o))}}function mr(t,e,n){t.tagName.indexOf("-")>-1?yr(t,e,n):Fn(e)?qn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Mn(e)?t.setAttribute(e,function(t,e){return qn(e)||"false"===e?"false":"contenteditable"===t&&Ln(e)?e:"true"}(e,n)):Hn(e)?qn(n)?t.removeAttributeNS(Un,Bn(e)):t.setAttributeNS(Un,e,n):yr(t,e,n)}function yr(t,e,n){if(qn(n))t.removeAttribute(e);else{if(Y&&!X&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var gr={create:vr,update:vr};function _r(t,e){var n=e.elm,o=e.data,a=t.data;if(!(r(o.staticClass)&&r(o.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=function(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Wn(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=Wn(e,n.data));return o=e.staticClass,a=e.class,i(o)||i(a)?zn(o,Vn(a)):"";var o,a}(e),c=n._transitionClasses;i(c)&&(s=zn(s,Vn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var br,wr,Sr,xr,kr,Er,Or={create:_r,update:_r},Tr=/[\w).+\-_$\]]/;function Cr(t){var e,n,r,i,o,a=!1,s=!1,c=!1,u=!1,l=0,p=0,f=0,d=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),a)39===e&&92!==n&&(a=!1);else if(s)34===e&&92!==n&&(s=!1);else if(c)96===e&&92!==n&&(c=!1);else if(u)47===e&&92!==n&&(u=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||l||p||f){switch(e){case 34:s=!0;break;case 39:a=!0;break;case 96:c=!0;break;case 40:f++;break;case 41:f--;break;case 91:p++;break;case 93:p--;break;case 123:l++;break;case 125:l--}if(47===e){for(var h=r-1,v=void 0;h>=0&&" "===(v=t.charAt(h));h--);v&&Tr.test(v)||(u=!0)}}else void 0===i?(d=r+1,i=t.slice(0,r).trim()):m();function m(){(o||(o=[])).push(t.slice(d,r).trim()),d=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==d&&m(),o)for(r=0;r<o.length;r++)i=Ar(i,o[r]);return i}function Ar(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function jr(t,e){console.error("[Vue compiler]: "+t)}function $r(t,e){return t?t.map((function(t){return t[e]})).filter((function(t){return t})):[]}function Ir(t,e,n,r,i){(t.props||(t.props=[])).push(Hr({name:e,value:n,dynamic:i},r)),t.plain=!1}function Rr(t,e,n,r,i){(i?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push(Hr({name:e,value:n,dynamic:i},r)),t.plain=!1}function Dr(t,e,n,r){t.attrsMap[e]=n,t.attrsList.push(Hr({name:e,value:n},r))}function Nr(t,e,n,r,i,o,a,s){(t.directives||(t.directives=[])).push(Hr({name:e,rawName:n,value:r,arg:i,isDynamicArg:o,modifiers:a},s)),t.plain=!1}function Pr(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function Mr(t,n,r,i,o,a,s,c){var u;(i=i||e).right?c?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete i.right):i.middle&&(c?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=Pr("!",n,c)),i.once&&(delete i.once,n=Pr("~",n,c)),i.passive&&(delete i.passive,n=Pr("&",n,c)),i.native?(delete i.native,u=t.nativeEvents||(t.nativeEvents={})):u=t.events||(t.events={});var l=Hr({value:r.trim(),dynamic:c},s);i!==e&&(l.modifiers=i);var p=u[n];Array.isArray(p)?o?p.unshift(l):p.push(l):u[n]=p?o?[l,p]:[p,l]:l,t.plain=!1}function Lr(t,e,n){var r=Fr(t,":"+e)||Fr(t,"v-bind:"+e);if(null!=r)return Cr(r);if(!1!==n){var i=Fr(t,e);if(null!=i)return JSON.stringify(i)}}function Fr(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===e){i.splice(o,1);break}return n&&delete t.attrsMap[e],r}function Ur(t,e){for(var n=t.attrsList,r=0,i=n.length;r<i;r++){var o=n[r];if(e.test(o.name))return n.splice(r,1),o}}function Hr(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function Br(t,e,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=qr(e,o);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+a+"}"}}function qr(t,e){var n=function(t){if(t=t.trim(),br=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<br-1)return(xr=t.lastIndexOf("."))>-1?{exp:t.slice(0,xr),key:'"'+t.slice(xr+1)+'"'}:{exp:t,key:null};for(wr=t,xr=kr=Er=0;!zr();)Vr(Sr=Wr())?Kr(Sr):91===Sr&&Jr(Sr);return{exp:t.slice(0,kr),key:t.slice(kr+1,Er)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function Wr(){return wr.charCodeAt(++xr)}function zr(){return xr>=br}function Vr(t){return 34===t||39===t}function Jr(t){var e=1;for(kr=xr;!zr();)if(Vr(t=Wr()))Kr(t);else if(91===t&&e++,93===t&&e--,0===e){Er=xr;break}}function Kr(t){for(var e=t;!zr()&&(t=Wr())!==e;);}var Gr;function Yr(t,e,n){var r=Gr;return function i(){var o=e.apply(null,arguments);null!==o&&Qr(t,i,n,r)}}var Xr=Kt&&!(tt&&Number(tt[1])<=53);function Zr(t,e,n,r){if(Xr){var i=fn,o=e;e=o._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||t.timeStamp<=0||t.target.ownerDocument!==document)return o.apply(this,arguments)}}Gr.addEventListener(t,e,nt?{capture:n,passive:r}:n)}function Qr(t,e,n,r){(r||Gr).removeEventListener(t,e._wrapper||e,n)}function ti(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};Gr=e.elm,function(t){if(i(t.__r)){var e=Y?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}i(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),ce(n,o,Zr,Qr,Yr,e.context),Gr=void 0}}var ei,ni={create:ti,update:ti};function ri(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,o,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in i(c.__ob__)&&(c=e.data.domProps=C({},c)),s)n in c||(a[n]="");for(n in c){if(o=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),o===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=o;var u=r(o)?"":String(o);ii(a,u)&&(a.value=u)}else if("innerHTML"===n&&Gn(a.tagName)&&r(a.innerHTML)){(ei=ei||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var l=ei.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(o!==s[n])try{a[n]=o}catch(t){}}}}function ii(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.number)return d(n)!==d(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var oi={create:ri,update:ri},ai=b((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function si(t){var e=ci(t.style);return t.staticStyle?C(t.staticStyle,e):e}function ci(t){return Array.isArray(t)?A(t):"string"==typeof t?ai(t):t}var ui,li=/^--/,pi=/\s*!important$/,fi=function(t,e,n){if(li.test(e))t.style.setProperty(e,n);else if(pi.test(n))t.style.setProperty(E(e),n.replace(pi,""),"important");else{var r=hi(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},di=["Webkit","Moz","ms"],hi=b((function(t){if(ui=ui||document.createElement("div").style,"filter"!==(t=S(t))&&t in ui)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<di.length;n++){var r=di[n]+e;if(r in ui)return r}}));function vi(t,e){var n=e.data,o=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(o.staticStyle)&&r(o.style))){var a,s,c=e.elm,u=o.staticStyle,l=o.normalizedStyle||o.style||{},p=u||l,f=ci(e.data.style)||{};e.data.normalizedStyle=i(f.__ob__)?C({},f):f;var d=function(t,e){for(var n,r={},i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=si(i.data))&&C(r,n);(n=si(t.data))&&C(r,n);for(var o=t;o=o.parent;)o.data&&(n=si(o.data))&&C(r,n);return r}(e);for(s in p)r(d[s])&&fi(c,s,"");for(s in d)(a=d[s])!==p[s]&&fi(c,s,null==a?"":a)}}var mi={create:vi,update:vi},yi=/\s+/;function gi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(yi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function _i(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(yi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function bi(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&C(e,wi(t.name||"v")),C(e,t),e}return"string"==typeof t?wi(t):void 0}}var wi=b((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Si=V&&!X,xi="transition",ki="animation",Ei="transition",Oi="transitionend",Ti="animation",Ci="animationend";Si&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ei="WebkitTransition",Oi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti="WebkitAnimation",Ci="webkitAnimationEnd"));var Ai=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function ji(t){Ai((function(){Ai(t)}))}function $i(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),gi(t,e))}function Ii(t,e){t._transitionClasses&&y(t._transitionClasses,e),_i(t,e)}function Ri(t,e,n){var r=Ni(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===xi?Oi:Ci,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),o+1),t.addEventListener(s,l)}var Di=/\b(transform|all)(,|$)/;function Ni(t,e){var n,r=window.getComputedStyle(t),i=(r[Ei+"Delay"]||"").split(", "),o=(r[Ei+"Duration"]||"").split(", "),a=Pi(i,o),s=(r[Ti+"Delay"]||"").split(", "),c=(r[Ti+"Duration"]||"").split(", "),u=Pi(s,c),l=0,p=0;return e===xi?a>0&&(n=xi,l=a,p=o.length):e===ki?u>0&&(n=ki,l=u,p=c.length):p=(n=(l=Math.max(a,u))>0?a>u?xi:ki:null)?n===xi?o.length:c.length:0,{type:n,timeout:l,propCount:p,hasTransform:n===xi&&Di.test(r[Ei+"Property"])}}function Pi(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Mi(e)+Mi(t[n])})))}function Mi(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Li(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var o=bi(t.data.transition);if(!r(o)&&!i(n._enterCb)&&1===n.nodeType){for(var a=o.css,c=o.type,u=o.enterClass,l=o.enterToClass,p=o.enterActiveClass,f=o.appearClass,h=o.appearToClass,v=o.appearActiveClass,m=o.beforeEnter,y=o.enter,g=o.afterEnter,_=o.enterCancelled,b=o.beforeAppear,w=o.appear,S=o.afterAppear,x=o.appearCancelled,k=o.duration,E=Qe,O=Qe.$vnode;O&&O.parent;)E=O.context,O=O.parent;var T=!E._isMounted||!t.isRootInsert;if(!T||w||""===w){var C=T&&f?f:u,A=T&&v?v:p,j=T&&h?h:l,$=T&&b||m,I=T&&"function"==typeof w?w:y,R=T&&S||g,D=T&&x||_,P=d(s(k)?k.enter:k),M=!1!==a&&!X,L=Hi(I),F=n._enterCb=N((function(){M&&(Ii(n,j),Ii(n,A)),F.cancelled?(M&&Ii(n,C),D&&D(n)):R&&R(n),n._enterCb=null}));t.data.show||ue(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,F)})),$&&$(n),M&&($i(n,C),$i(n,A),ji((function(){Ii(n,C),F.cancelled||($i(n,j),L||(Ui(P)?setTimeout(F,P):Ri(n,c,F)))}))),t.data.show&&(e&&e(),I&&I(n,F)),M||L||F()}}}function Fi(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var o=bi(t.data.transition);if(r(o)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=o.css,c=o.type,u=o.leaveClass,l=o.leaveToClass,p=o.leaveActiveClass,f=o.beforeLeave,h=o.leave,v=o.afterLeave,m=o.leaveCancelled,y=o.delayLeave,g=o.duration,_=!1!==a&&!X,b=Hi(h),w=d(s(g)?g.leave:g),S=n._leaveCb=N((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),_&&(Ii(n,l),Ii(n,p)),S.cancelled?(_&&Ii(n,u),m&&m(n)):(e(),v&&v(n)),n._leaveCb=null}));y?y(x):x()}function x(){S.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),f&&f(n),_&&($i(n,u),$i(n,p),ji((function(){Ii(n,u),S.cancelled||($i(n,l),b||(Ui(w)?setTimeout(S,w):Ri(n,c,S)))}))),h&&h(n,S),_||b||S())}}function Ui(t){return"number"==typeof t&&!isNaN(t)}function Hi(t){if(r(t))return!1;var e=t.fns;return i(e)?Hi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Bi(t,e){!0!==e.data.show&&Li(e)}var qi=function(t){var e,n,s={},c=t.modules,u=t.nodeOps;for(e=0;e<or.length;++e)for(s[or[e]]=[],n=0;n<c.length;++n)i(c[n][or[e]])&&s[or[e]].push(c[n][or[e]]);function l(t){var e=u.parentNode(t);i(e)&&u.removeChild(e,t)}function p(t,e,n,r,a,c,l){if(i(t.elm)&&i(c)&&(t=c[l]=_t(t)),t.isRootInsert=!a,!function(t,e,n,r){var a=t.data;if(i(a)){var c=i(t.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(t,!1),i(t.componentInstance))return f(t,e),d(n,t.elm,r),o(c)&&function(t,e,n,r){for(var o,a=t;a.componentInstance;)if(i(o=(a=a.componentInstance._vnode).data)&&i(o=o.transition)){for(o=0;o<s.activate.length;++o)s.activate[o](ir,a);e.push(a);break}d(n,t.elm,r)}(t,e,n,r),!0}}(t,e,n,r)){var p=t.data,h=t.children,m=t.tag;i(m)?(t.elm=t.ns?u.createElementNS(t.ns,m):u.createElement(m,t),g(t),v(t,h,e),i(p)&&y(t,e),d(n,t.elm,r)):o(t.isComment)?(t.elm=u.createComment(t.text),d(n,t.elm,r)):(t.elm=u.createTextNode(t.text),d(n,t.elm,r))}}function f(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,m(t)?(y(t,e),g(t)):(rr(t),e.push(t))}function d(t,e,n){i(t)&&(i(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function v(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)p(e[r],n,t.elm,null,!0,e,r);else a(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function m(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function y(t,n){for(var r=0;r<s.create.length;++r)s.create[r](ir,t);i(e=t.data.hook)&&(i(e.create)&&e.create(ir,t),i(e.insert)&&n.push(t))}function g(t){var e;if(i(e=t.fnScopeId))u.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent;i(e=Qe)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function _(t,e,n,r,i,o){for(;r<=i;++r)p(n[r],o,t,e,!1,n,r)}function b(t){var e,n,r=t.data;if(i(r))for(i(e=r.hook)&&i(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)b(t.children[n])}function w(t,e,n){for(;e<=n;++e){var r=t[e];i(r)&&(i(r.tag)?(S(r),b(r)):l(r.elm))}}function S(t,e){if(i(e)||i(t.data)){var n,r=s.remove.length+1;for(i(e)?e.listeners+=r:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,r),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&S(n,e),n=0;n<s.remove.length;++n)s.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else l(t.elm)}function x(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&ar(t,a))return o}}function k(t,e,n,a,c,l){if(t!==e){i(e.elm)&&i(a)&&(e=a[c]=_t(e));var f=e.elm=t.elm;if(o(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?T(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(t.isStatic)&&e.key===t.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=t.componentInstance;else{var d,h=e.data;i(h)&&i(d=h.hook)&&i(d=d.prepatch)&&d(t,e);var v=t.children,y=e.children;if(i(h)&&m(e)){for(d=0;d<s.update.length;++d)s.update[d](t,e);i(d=h.hook)&&i(d=d.update)&&d(t,e)}r(e.text)?i(v)&&i(y)?v!==y&&function(t,e,n,o,a){for(var s,c,l,f=0,d=0,h=e.length-1,v=e[0],m=e[h],y=n.length-1,g=n[0],b=n[y],S=!a;f<=h&&d<=y;)r(v)?v=e[++f]:r(m)?m=e[--h]:ar(v,g)?(k(v,g,o,n,d),v=e[++f],g=n[++d]):ar(m,b)?(k(m,b,o,n,y),m=e[--h],b=n[--y]):ar(v,b)?(k(v,b,o,n,y),S&&u.insertBefore(t,v.elm,u.nextSibling(m.elm)),v=e[++f],b=n[--y]):ar(m,g)?(k(m,g,o,n,d),S&&u.insertBefore(t,m.elm,v.elm),m=e[--h],g=n[++d]):(r(s)&&(s=sr(e,f,h)),r(c=i(g.key)?s[g.key]:x(g,e,f,h))?p(g,o,t,v.elm,!1,n,d):ar(l=e[c],g)?(k(l,g,o,n,d),e[c]=void 0,S&&u.insertBefore(t,l.elm,v.elm)):p(g,o,t,v.elm,!1,n,d),g=n[++d]);f>h?_(t,r(n[y+1])?null:n[y+1].elm,n,d,y,o):d>y&&w(e,f,h)}(f,v,y,n,l):i(y)?(i(t.text)&&u.setTextContent(f,""),_(f,null,y,0,y.length-1,n)):i(v)?w(v,0,v.length-1):i(t.text)&&u.setTextContent(f,""):t.text!==e.text&&u.setTextContent(f,e.text),i(h)&&i(d=h.hook)&&i(d=d.postpatch)&&d(t,e)}}}function E(t,e,n){if(o(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var O=h("attrs,class,staticClass,staticStyle,key");function T(t,e,n,r){var a,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,o(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(a=c.hook)&&i(a=a.init)&&a(e,!0),i(a=e.componentInstance)))return f(e,n),!0;if(i(s)){if(i(u))if(t.hasChildNodes())if(i(a=c)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var l=!0,p=t.firstChild,d=0;d<u.length;d++){if(!p||!T(p,u[d],n,r)){l=!1;break}p=p.nextSibling}if(!l||p)return!1}else v(e,u,n);if(i(c)){var h=!1;for(var m in c)if(!O(m)){h=!0,y(e,n);break}!h&&c.class&&ie(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,a){if(!r(e)){var c,l=!1,f=[];if(r(t))l=!0,p(e,f);else{var d=i(t.nodeType);if(!d&&ar(t,e))k(t,e,f,null,null,a);else{if(d){if(1===t.nodeType&&t.hasAttribute(P)&&(t.removeAttribute(P),n=!0),o(n)&&T(t,e,f))return E(e,f,!0),t;c=t,t=new vt(u.tagName(c).toLowerCase(),{},[],void 0,c)}var h=t.elm,v=u.parentNode(h);if(p(e,f,h._leaveCb?null:v,u.nextSibling(h)),i(e.parent))for(var y=e.parent,g=m(e);y;){for(var _=0;_<s.destroy.length;++_)s.destroy[_](y);if(y.elm=e.elm,g){for(var S=0;S<s.create.length;++S)s.create[S](ir,y);var x=y.data.hook.insert;if(x.merged)for(var O=1;O<x.fns.length;O++)x.fns[O]()}else rr(y);y=y.parent}i(v)?w([t],0,0):i(t.tag)&&b(t)}}return E(e,f,l),e.elm}i(t)&&b(t)}}({nodeOps:er,modules:[gr,Or,ni,oi,mi,V?{create:Bi,activate:Bi,remove:function(t,e){!0!==t.data.show?Fi(t,e):e()}}:{}].concat(hr)});X&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&Xi(t,"input")}));var Wi={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ue(n,"postpatch",(function(){Wi.componentUpdated(t,e,n)})):zi(t,e,n.context),t._vOptions=[].map.call(t.options,Ki)):("textarea"===n.tag||Qn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Gi),t.addEventListener("compositionend",Yi),t.addEventListener("change",Yi),X&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){zi(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Ki);i.some((function(t,e){return!R(t,r[e])}))&&(t.multiple?e.value.some((function(t){return Ji(t,i)})):e.value!==e.oldValue&&Ji(e.value,i))&&Xi(t,"change")}}};function zi(t,e,n){Vi(t,e),(Y||Z)&&setTimeout((function(){Vi(t,e)}),0)}function Vi(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],i)o=D(r,Ki(a))>-1,a.selected!==o&&(a.selected=o);else if(R(Ki(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}}function Ji(t,e){return e.every((function(e){return!R(e,t)}))}function Ki(t){return"_value"in t?t._value:t.value}function Gi(t){t.target.composing=!0}function Yi(t){t.target.composing&&(t.target.composing=!1,Xi(t.target,"input"))}function Xi(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Zi(t){return!t.componentInstance||t.data&&t.data.transition?t:Zi(t.componentInstance._vnode)}var Qi={model:Wi,show:{bind:function(t,e,n){var r=e.value,i=(n=Zi(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Li(n,(function(){t.style.display=o}))):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Zi(n)).data&&n.data.transition?(n.data.show=!0,r?Li(n,(function(){t.style.display=t.__vOriginalDisplay})):Fi(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},to={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function eo(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?eo(Ke(e.children)):t}function no(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[S(o)]=i[o];return e}function ro(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var io=function(t){return t.tag||Je(t)},oo=function(t){return"show"===t.name},ao={name:"transition",props:to,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(io)).length){var r=this.mode,i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var o=eo(i);if(!o)return i;if(this._leaving)return ro(t,i);var s="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?s+"comment":s+o.tag:a(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var c=(o.data||(o.data={})).transition=no(this),u=this._vnode,l=eo(u);if(o.data.directives&&o.data.directives.some(oo)&&(o.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(o,l)&&!Je(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var p=l.data.transition=C({},c);if("out-in"===r)return this._leaving=!0,ue(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),ro(t,i);if("in-out"===r){if(Je(o))return u;var f,d=function(){f()};ue(c,"afterEnter",d),ue(c,"enterCancelled",d),ue(p,"delayLeave",(function(t){f=t}))}}return i}}},so=C({tag:String,moveClass:String},to);function co(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function uo(t){t.data.newPos=t.elm.getBoundingClientRect()}function lo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete so.mode;var po={Transition:ao,TransitionGroup:{props:so,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=no(this),s=0;s<i.length;s++){var c=i[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],p=0;p<r.length;p++){var f=r[p];f.data.transition=a,f.data.pos=f.elm.getBoundingClientRect(),n[f.key]?u.push(f):l.push(f)}this.kept=t(e,null,u),this.removed=l}return t(e,null,o)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(co),t.forEach(uo),t.forEach(lo),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;$i(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Oi,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Oi,t),n._moveCb=null,Ii(n,e))})}})))},methods:{hasMove:function(t,e){if(!Si)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){_i(n,t)})),gi(n,e),n.style.display="none",this.$el.appendChild(n);var r=Ni(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Tn.config.mustUseProp=Pn,Tn.config.isReservedTag=Yn,Tn.config.isReservedAttr=Dn,Tn.config.getTagNamespace=Xn,Tn.config.isUnknownElement=function(t){if(!V)return!0;if(Yn(t))return!1;if(t=t.toLowerCase(),null!=Zn[t])return Zn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Zn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Zn[t]=/HTMLUnknownElement/.test(e.toString())},C(Tn.options.directives,Qi),C(Tn.options.components,po),Tn.prototype.__patch__=V?qi:j,Tn.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=yt),on(t,"beforeMount"),r=function(){t._update(t._render(),n)},new yn(t,r,j,{before:function(){t._isMounted&&!t._isDestroyed&&on(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,on(t,"mounted")),t}(this,t=t&&V?tr(t):void 0,e)},V&&setTimeout((function(){F.devtools&&ot&&ot.emit("init",Tn)}),0);var fo,ho=/\{\{((?:.|\r?\n)+?)\}\}/g,vo=/[-.*+?^${}()|[\]\/\\]/g,mo=b((function(t){var e=t[0].replace(vo,"\\$&"),n=t[1].replace(vo,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")})),yo={staticKeys:["staticClass"],transformNode:function(t,e){e.warn;var n=Fr(t,"class");n&&(t.staticClass=JSON.stringify(n));var r=Lr(t,"class",!1);r&&(t.classBinding=r)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}},go={staticKeys:["staticStyle"],transformNode:function(t,e){e.warn;var n=Fr(t,"style");n&&(t.staticStyle=JSON.stringify(ai(n)));var r=Lr(t,"style",!1);r&&(t.styleBinding=r)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},_o=h("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),bo=h("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),wo=h("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),So=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,xo=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ko="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+U.source+"]*",Eo="((?:"+ko+"\\:)?"+ko+")",Oo=new RegExp("^<"+Eo),To=/^\s*(\/?)>/,Co=new RegExp("^<\\/"+Eo+"[^>]*>"),Ao=/^<!DOCTYPE [^>]+>/i,jo=/^<!\--/,$o=/^<!\[/,Io=h("script,style,textarea",!0),Ro={},Do={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},No=/&(?:lt|gt|quot|amp|#39);/g,Po=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Mo=h("pre,textarea",!0),Lo=function(t,e){return t&&Mo(t)&&"\n"===e[0]};function Fo(t,e){var n=e?Po:No;return t.replace(n,(function(t){return Do[t]}))}var Uo,Ho,Bo,qo,Wo,zo,Vo,Jo,Ko=/^@|^v-on:/,Go=/^v-|^@|^:|^#/,Yo=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Xo=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Zo=/^\(|\)$/g,Qo=/^\[.*\]$/,ta=/:(.*)$/,ea=/^:|^\.|^v-bind:/,na=/\.[^.\]]+(?=[^\]]*$)/g,ra=/^v-slot(:|$)|^#/,ia=/[\r\n]/,oa=/\s+/g,aa=b((function(t){return(fo=fo||document.createElement("div")).innerHTML=t,fo.textContent})),sa="_empty_";function ca(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:ha(e),rawAttrsMap:{},parent:n,children:[]}}function ua(t,e){var n;!function(t){var e=Lr(t,"key");e&&(t.key=e)}(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,function(t){var e=Lr(t,"ref");e&&(t.ref=e,t.refInFor=function(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(t))}(t),function(t){var e;"template"===t.tag?(e=Fr(t,"scope"),t.slotScope=e||Fr(t,"slot-scope")):(e=Fr(t,"slot-scope"))&&(t.slotScope=e);var n=Lr(t,"slot");if(n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||Rr(t,"slot",n,function(t,e){return t.rawAttrsMap[":slot"]||t.rawAttrsMap["v-bind:slot"]||t.rawAttrsMap.slot}(t))),"template"===t.tag){var r=Ur(t,ra);if(r){var i=fa(r),o=i.name,a=i.dynamic;t.slotTarget=o,t.slotTargetDynamic=a,t.slotScope=r.value||sa}}else{var s=Ur(t,ra);if(s){var c=t.scopedSlots||(t.scopedSlots={}),u=fa(s),l=u.name,p=u.dynamic,f=c[l]=ca("template",[],t);f.slotTarget=l,f.slotTargetDynamic=p,f.children=t.children.filter((function(t){if(!t.slotScope)return t.parent=f,!0})),f.slotScope=s.value||sa,t.children=[],t.plain=!1}}}(t),"slot"===(n=t).tag&&(n.slotName=Lr(n,"name")),function(t){var e;(e=Lr(t,"is"))&&(t.component=e),null!=Fr(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var r=0;r<Bo.length;r++)t=Bo[r](t,e)||t;return function(t){var e,n,r,i,o,a,s,c,u=t.attrsList;for(e=0,n=u.length;e<n;e++)if(r=i=u[e].name,o=u[e].value,Go.test(r))if(t.hasBindings=!0,(a=da(r.replace(Go,"")))&&(r=r.replace(na,"")),ea.test(r))r=r.replace(ea,""),o=Cr(o),(c=Qo.test(r))&&(r=r.slice(1,-1)),a&&(a.prop&&!c&&"innerHtml"===(r=S(r))&&(r="innerHTML"),a.camel&&!c&&(r=S(r)),a.sync&&(s=qr(o,"$event"),c?Mr(t,'"update:"+('+r+")",s,null,!1,0,u[e],!0):(Mr(t,"update:"+S(r),s,null,!1,0,u[e]),E(r)!==S(r)&&Mr(t,"update:"+E(r),s,null,!1,0,u[e])))),a&&a.prop||!t.component&&Vo(t.tag,t.attrsMap.type,r)?Ir(t,r,o,u[e],c):Rr(t,r,o,u[e],c);else if(Ko.test(r))r=r.replace(Ko,""),(c=Qo.test(r))&&(r=r.slice(1,-1)),Mr(t,r,o,a,!1,0,u[e],c);else{var l=(r=r.replace(Go,"")).match(ta),p=l&&l[1];c=!1,p&&(r=r.slice(0,-(p.length+1)),Qo.test(p)&&(p=p.slice(1,-1),c=!0)),Nr(t,r,i,o,p,c,a,u[e])}else Rr(t,r,JSON.stringify(o),u[e]),!t.component&&"muted"===r&&Vo(t.tag,t.attrsMap.type,r)&&Ir(t,r,"true",u[e])}(t),t}function la(t){var e;if(e=Fr(t,"v-for")){var n=function(t){var e=t.match(Yo);if(e){var n={};n.for=e[2].trim();var r=e[1].trim().replace(Zo,""),i=r.match(Xo);return i?(n.alias=r.replace(Xo,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r,n}}(e);n&&C(t,n)}}function pa(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function fa(t){var e=t.name.replace(ra,"");return e||"#"!==t.name[0]&&(e="default"),Qo.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function da(t){var e=t.match(na);if(e){var n={};return e.forEach((function(t){n[t.slice(1)]=!0})),n}}function ha(t){for(var e={},n=0,r=t.length;n<r;n++)e[t[n].name]=t[n].value;return e}var va=/^xmlns:NS\d+/,ma=/^NS\d+:/;function ya(t){return ca(t.tag,t.attrsList.slice(),t.parent)}var ga,_a,ba,wa=[yo,go,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Lr(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=Fr(t,"v-if",!0),o=i?"&&("+i+")":"",a=null!=Fr(t,"v-else",!0),s=Fr(t,"v-else-if",!0),c=ya(t);la(c),Dr(c,"type","checkbox"),ua(c,e),c.processed=!0,c.if="("+n+")==='checkbox'"+o,pa(c,{exp:c.if,block:c});var u=ya(t);Fr(u,"v-for",!0),Dr(u,"type","radio"),ua(u,e),pa(c,{exp:"("+n+")==='radio'"+o,block:u});var l=ya(t);return Fr(l,"v-for",!0),Dr(l,":type",n),ua(l,e),pa(c,{exp:i,block:l}),a?c.else=!0:s&&(c.elseif=s),c}}}}],Sa={expectHTML:!0,modules:wa,directives:{model:function(t,e,n){var r=e.value,i=e.modifiers,o=t.tag,a=t.attrsMap.type;if(t.component)return Br(t,r,i),!1;if("select"===o)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";Mr(t,"change",r=r+" "+qr(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}(t,r,i);else if("input"===o&&"checkbox"===a)!function(t,e,n){var r=n&&n.number,i=Lr(t,"value")||"null",o=Lr(t,"true-value")||"true",a=Lr(t,"false-value")||"false";Ir(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),Mr(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+qr(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+qr(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+qr(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===o&&"radio"===a)!function(t,e,n){var r=n&&n.number,i=Lr(t,"value")||"null";Ir(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),Mr(t,"change",qr(e,i),null,!0)}(t,r,i);else if("input"===o||"textarea"===o)!function(t,e,n){var r=t.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,c=!o&&"range"!==r,u=o?"change":"range"===r?"__r":"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var p=qr(e,l);c&&(p="if($event.target.composing)return;"+p),Ir(t,"value","("+e+")"),Mr(t,u,p,null,!0),(s||a)&&Mr(t,"blur","$forceUpdate()")}(t,r,i);else if(!F.isReservedTag(o))return Br(t,r,i),!1;return!0},text:function(t,e){e.value&&Ir(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&Ir(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:_o,mustUseProp:Pn,canBeLeftOpenTag:bo,isReservedTag:Yn,getTagNamespace:Xn,staticKeys:(ba=wa,ba.reduce((function(t,e){return t.concat(e.staticKeys||[])}),[]).join(","))},xa=b((function(t){return h("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))}));function ka(t,e){t&&(ga=xa(e.staticKeys||""),_a=e.isReservedTag||$,Ea(t),Oa(t,!1))}function Ea(t){if(t.static=function(t){return 2!==t.type&&(3===t.type||!(!t.pre&&(t.hasBindings||t.if||t.for||v(t.tag)||!_a(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(ga))))}(t),1===t.type){if(!_a(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var e=0,n=t.children.length;e<n;e++){var r=t.children[e];Ea(r),r.static||(t.static=!1)}if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++){var a=t.ifConditions[i].block;Ea(a),a.static||(t.static=!1)}}}function Oa(t,e){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=e),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var n=0,r=t.children.length;n<r;n++)Oa(t.children[n],e||!!t.for);if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++)Oa(t.ifConditions[i].block,e)}}var Ta=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Ca=/\([^)]*?\);*$/,Aa=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ja={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},$a={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Ia=function(t){return"if("+t+")return null;"},Ra={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Ia("$event.target !== $event.currentTarget"),ctrl:Ia("!$event.ctrlKey"),shift:Ia("!$event.shiftKey"),alt:Ia("!$event.altKey"),meta:Ia("!$event.metaKey"),left:Ia("'button' in $event && $event.button !== 0"),middle:Ia("'button' in $event && $event.button !== 1"),right:Ia("'button' in $event && $event.button !== 2")};function Da(t,e){var n=e?"nativeOn:":"on:",r="",i="";for(var o in t){var a=Na(t[o]);t[o]&&t[o].dynamic?i+=o+","+a+",":r+='"'+o+'":'+a+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function Na(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map((function(t){return Na(t)})).join(",")+"]";var e=Aa.test(t.value),n=Ta.test(t.value),r=Aa.test(t.value.replace(Ca,""));if(t.modifiers){var i="",o="",a=[];for(var s in t.modifiers)if(Ra[s])o+=Ra[s],ja[s]&&a.push(s);else if("exact"===s){var c=t.modifiers;o+=Ia(["ctrl","shift","alt","meta"].filter((function(t){return!c[t]})).map((function(t){return"$event."+t+"Key"})).join("||"))}else a.push(s);return a.length&&(i+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(Pa).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(e?"return "+t.value+"($event)":n?"return ("+t.value+")($event)":r?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(r?"return "+t.value:t.value)+"}"}function Pa(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=ja[t],r=$a[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Ma={on:function(t,e){t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:j},La=function(t){this.options=t,this.warn=t.warn||jr,this.transforms=$r(t.modules,"transformCode"),this.dataGenFns=$r(t.modules,"genData"),this.directives=C(C({},Ma),t.directives);var e=t.isReservedTag||$;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Fa(t,e){var n=new La(e);return{render:"with(this){return "+(t?Ua(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Ua(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return Ha(t,e);if(t.once&&!t.onceProcessed)return Ba(t,e);if(t.for&&!t.forProcessed)return za(t,e);if(t.if&&!t.ifProcessed)return qa(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=Ga(t,e),i="_t("+n+(r?","+r:""),o=t.attrs||t.dynamicAttrs?Za((t.attrs||[]).concat(t.dynamicAttrs||[]).map((function(t){return{name:S(t.name),value:t.value,dynamic:t.dynamic}}))):null,a=t.attrsMap["v-bind"];return!o&&!a||r||(i+=",null"),o&&(i+=","+o),a&&(i+=(o?"":",null")+","+a),i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:Ga(e,n,!0);return"_c("+t+","+Va(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r;(!t.plain||t.pre&&e.maybeComponent(t))&&(r=Va(t,e));var i=t.inlineTemplate?null:Ga(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return Ga(t,e)||"void 0"}function Ha(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+Ua(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function Ba(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return qa(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Ua(t,e)+","+e.onceId+++","+n+")":Ua(t,e)}return Ha(t,e)}function qa(t,e,n,r){return t.ifProcessed=!0,Wa(t.ifConditions.slice(),e,n,r)}function Wa(t,e,n,r){if(!t.length)return r||"_e()";var i=t.shift();return i.exp?"("+i.exp+")?"+o(i.block)+":"+Wa(t,e,n,r):""+o(i.block);function o(t){return n?n(t,e):t.once?Ba(t,e):Ua(t,e)}}function za(t,e,n,r){var i=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||Ua)(t,e)+"})"}function Va(t,e){var n="{",r=function(t,e){var n=t.directives;if(n){var r,i,o,a,s="directives:[",c=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var u=e.directives[o.name];u&&(a=!!u(t,o,e.warn)),a&&(c=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}return c?s.slice(0,-1)+"]":void 0}}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:"+Za(t.attrs)+","),t.props&&(n+="domProps:"+Za(t.props)+","),t.events&&(n+=Da(t.events,!1)+","),t.nativeEvents&&(n+=Da(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var r=t.for||Object.keys(e).some((function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||Ja(n)})),i=!!t.if;if(!r)for(var o=t.parent;o;){if(o.slotScope&&o.slotScope!==sa||o.for){r=!0;break}o.if&&(i=!0),o=o.parent}var a=Object.keys(e).map((function(t){return Ka(e[t],n)})).join(",");return"scopedSlots:_u(["+a+"]"+(r?",null,true":"")+(!r&&i?",null,false,"+function(t){for(var e=5381,n=t.length;n;)e=33*e^t.charCodeAt(--n);return e>>>0}(a):"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=function(t,e){var n=t.children[0];if(n&&1===n.type){var r=Fa(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map((function(t){return"function(){"+t+"}"})).join(",")+"]}"}}(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Za(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function Ja(t){return 1===t.type&&("slot"===t.tag||t.children.some(Ja))}function Ka(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return qa(t,e,Ka,"null");if(t.for&&!t.forProcessed)return za(t,e,Ka);var r=t.slotScope===sa?"":String(t.slotScope),i="function("+r+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+(Ga(t,e)||"undefined")+":undefined":Ga(t,e)||"undefined":Ua(t,e))+"}",o=r?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+i+o+"}"}function Ga(t,e,n,r,i){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?e.maybeComponent(a)?",1":",0":"";return""+(r||Ua)(a,e)+s}var c=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Ya(i)||i.ifConditions&&i.ifConditions.some((function(t){return Ya(t.block)}))){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some((function(t){return e(t.block)})))&&(n=1)}}return n}(o,e.maybeComponent):0,u=i||Xa;return"["+o.map((function(t){return u(t,e)})).join(",")+"]"+(c?","+c:"")}}function Ya(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Xa(t,e){return 1===t.type?Ua(t,e):3===t.type&&t.isComment?function(t){return"_e("+JSON.stringify(t.text)+")"}(t):"_v("+(2===(n=t).type?n.expression:Qa(JSON.stringify(n.text)))+")";var n}function Za(t){for(var e="",n="",r=0;r<t.length;r++){var i=t[r],o=Qa(i.value);i.dynamic?n+=i.name+","+o+",":e+='"'+i.name+'":'+o+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function Qa(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function ts(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),j}}function es(t){var e=Object.create(null);return function(n,r,i){(r=C({},r)).warn,delete r.warn;var o=r.delimiters?String(r.delimiters)+n:n;if(e[o])return e[o];var a=t(n,r),s={},c=[];return s.render=ts(a.render,c),s.staticRenderFns=a.staticRenderFns.map((function(t){return ts(t,c)})),e[o]=s}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");var ns,rs,is=(ns=function(t,e){var n=function(t,e){Uo=e.warn||jr,zo=e.isPreTag||$,Vo=e.mustUseProp||$,Jo=e.getTagNamespace||$,e.isReservedTag,Bo=$r(e.modules,"transformNode"),qo=$r(e.modules,"preTransformNode"),Wo=$r(e.modules,"postTransformNode"),Ho=e.delimiters;var n,r,i=[],o=!1!==e.preserveWhitespace,a=e.whitespace,s=!1,c=!1;function u(t){if(l(t),s||t.processed||(t=ua(t,e)),i.length||t===n||n.if&&(t.elseif||t.else)&&pa(n,{exp:t.elseif,block:t}),r&&!t.forbidden)if(t.elseif||t.else)a=t,(u=function(t){for(var e=t.length;e--;){if(1===t[e].type)return t[e];t.pop()}}(r.children))&&u.if&&pa(u,{exp:a.elseif,block:a});else{if(t.slotScope){var o=t.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[o]=t}r.children.push(t),t.parent=r}var a,u;t.children=t.children.filter((function(t){return!t.slotScope})),l(t),t.pre&&(s=!1),zo(t.tag)&&(c=!1);for(var p=0;p<Wo.length;p++)Wo[p](t,e)}function l(t){if(!c)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}return function(t,e){for(var n,r,i=[],o=e.expectHTML,a=e.isUnaryTag||$,s=e.canBeLeftOpenTag||$,c=0;t;){if(n=t,r&&Io(r)){var u=0,l=r.toLowerCase(),p=Ro[l]||(Ro[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),f=t.replace(p,(function(t,n,r){return u=r.length,Io(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Lo(l,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""}));c+=t.length-f.length,t=f,O(l,c-u,c)}else{var d=t.indexOf("<");if(0===d){if(jo.test(t)){var h=t.indexOf("--\x3e");if(h>=0){e.shouldKeepComment&&e.comment(t.substring(4,h),c,c+h+3),x(h+3);continue}}if($o.test(t)){var v=t.indexOf("]>");if(v>=0){x(v+2);continue}}var m=t.match(Ao);if(m){x(m[0].length);continue}var y=t.match(Co);if(y){var g=c;x(y[0].length),O(y[1],g,c);continue}var _=k();if(_){E(_),Lo(_.tagName,t)&&x(1);continue}}var b=void 0,w=void 0,S=void 0;if(d>=0){for(w=t.slice(d);!(Co.test(w)||Oo.test(w)||jo.test(w)||$o.test(w)||(S=w.indexOf("<",1))<0);)d+=S,w=t.slice(d);b=t.substring(0,d)}d<0&&(b=t),b&&x(b.length),e.chars&&b&&e.chars(b,c-b.length,c)}if(t===n){e.chars&&e.chars(t);break}}function x(e){c+=e,t=t.substring(e)}function k(){var e=t.match(Oo);if(e){var n,r,i={tagName:e[1],attrs:[],start:c};for(x(e[0].length);!(n=t.match(To))&&(r=t.match(xo)||t.match(So));)r.start=c,x(r[0].length),r.end=c,i.attrs.push(r);if(n)return i.unarySlash=n[1],x(n[0].length),i.end=c,i}}function E(t){var n=t.tagName,c=t.unarySlash;o&&("p"===r&&wo(n)&&O(r),s(n)&&r===n&&O(n));for(var u=a(n)||!!c,l=t.attrs.length,p=new Array(l),f=0;f<l;f++){var d=t.attrs[f],h=d[3]||d[4]||d[5]||"",v="a"===n&&"href"===d[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;p[f]={name:d[1],value:Fo(h,v)}}u||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:p,start:t.start,end:t.end}),r=n),e.start&&e.start(n,p,u,t.start,t.end)}function O(t,n,o){var a,s;if(null==n&&(n=c),null==o&&(o=c),t)for(s=t.toLowerCase(),a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var u=i.length-1;u>=a;u--)e.end&&e.end(i[u].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,o):"p"===s&&(e.start&&e.start(t,[],!1,n,o),e.end&&e.end(t,n,o))}O()}(t,{warn:Uo,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,o,a,l,p){var f=r&&r.ns||Jo(t);Y&&"svg"===f&&(o=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];va.test(r.name)||(r.name=r.name.replace(ma,""),e.push(r))}return e}(o));var d,h=ca(t,o,r);f&&(h.ns=f),"style"!==(d=h).tag&&("script"!==d.tag||d.attrsMap.type&&"text/javascript"!==d.attrsMap.type)||it()||(h.forbidden=!0);for(var v=0;v<qo.length;v++)h=qo[v](h,e)||h;s||(function(t){null!=Fr(t,"v-pre")&&(t.pre=!0)}(h),h.pre&&(s=!0)),zo(h.tag)&&(c=!0),s?function(t){var e=t.attrsList,n=e.length;if(n)for(var r=t.attrs=new Array(n),i=0;i<n;i++)r[i]={name:e[i].name,value:JSON.stringify(e[i].value)},null!=e[i].start&&(r[i].start=e[i].start,r[i].end=e[i].end);else t.pre||(t.plain=!0)}(h):h.processed||(la(h),function(t){var e=Fr(t,"v-if");if(e)t.if=e,pa(t,{exp:e,block:t});else{null!=Fr(t,"v-else")&&(t.else=!0);var n=Fr(t,"v-else-if");n&&(t.elseif=n)}}(h),function(t){null!=Fr(t,"v-once")&&(t.once=!0)}(h)),n||(n=h),a?u(h):(r=h,i.push(h))},end:function(t,e,n){var o=i[i.length-1];i.length-=1,r=i[i.length-1],u(o)},chars:function(t,e,n){if(r&&(!Y||"textarea"!==r.tag||r.attrsMap.placeholder!==t)){var i,u,l,p=r.children;(t=c||t.trim()?"script"===(i=r).tag||"style"===i.tag?t:aa(t):p.length?a?"condense"===a&&ia.test(t)?"":" ":o?" ":"":"")&&(c||"condense"!==a||(t=t.replace(oa," ")),!s&&" "!==t&&(u=function(t,e){var n=e?mo(e):ho;if(n.test(t)){for(var r,i,o,a=[],s=[],c=n.lastIndex=0;r=n.exec(t);){(i=r.index)>c&&(s.push(o=t.slice(c,i)),a.push(JSON.stringify(o)));var u=Cr(r[1].trim());a.push("_s("+u+")"),s.push({"@binding":u}),c=i+r[0].length}return c<t.length&&(s.push(o=t.slice(c)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}(t,Ho))?l={type:2,expression:u.expression,tokens:u.tokens,text:t}:" "===t&&p.length&&" "===p[p.length-1].text||(l={type:3,text:t}),l&&p.push(l))}},comment:function(t,e,n){if(r){var i={type:3,text:t,isComment:!0};r.children.push(i)}}}),n}(t.trim(),e);!1!==e.optimize&&ka(n,e);var r=Fa(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],o=[];if(n)for(var a in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=C(Object.create(t.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(r[a]=n[a]);r.warn=function(t,e,n){(n?o:i).push(t)};var s=ns(e.trim(),r);return s.errors=i,s.tips=o,s}return{compile:e,compileToFunctions:es(e)}})(Sa),os=(is.compile,is.compileToFunctions);function as(t){return(rs=rs||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',rs.innerHTML.indexOf("&#10;")>0}var ss=!!V&&as(!1),cs=!!V&&as(!0),us=b((function(t){var e=tr(t);return e&&e.innerHTML})),ls=Tn.prototype.$mount;Tn.prototype.$mount=function(t,e){if((t=t&&tr(t))===document.body||t===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=us(r));else{if(!r.nodeType)return this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){var i=os(r,{outputSourceRange:!1,shouldDecodeNewlines:ss,shouldDecodeNewlinesForHref:cs,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return ls.call(this,t,e)},Tn.compile=os;const ps=Tn,fs=ps.extend({render:t=>t("ul",[t("li",[t("a",{attrs:{href:"worker.html"}},"pekerja")]),t("li",[t("a",{attrs:{href:"tasks.html"}},"pekerjaan")]),t("li",[t("a",{attrs:{href:"performance.html"}},"kinerja")])])}),ds=ps.extend({props:["error"],render(t){var e;return t("p",{class:"error",attrs:{id:"error-text"},domProps:{innerHTML:null!==(e=this.$props.error)&&void 0!==e?e:""}})}}),hs=ps.extend({props:["loading"],render(t){return t("p",{class:"primary",attrs:{id:"loading-text"},style:{display:this.$props.loading?"":"none"},domProps:{innerHTML:"memuat..."}})}}),vs=ps.extend({props:["details"],render(t){return t("ul",[t("li",["jumlah pekerja :",t("span",{attrs:{id:"workers"}},this.$props.details.total_worker)]),t("li",["jumlah tugas:",t("span",{attrs:{id:"tasks"}},this.$props.details.total_task)]),t("li",["yang selesai:",t("span",{attrs:{id:"task-done"}},this.$props.details.task_done)]),t("li",["yang diabtalkan:",t("span",{attrs:{id:"task-canceled"}},this.$props.details.task_cancelled)])])}});function ms(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+t+(n.length?" "+n.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function ys(t){return!!t&&!!t[rc]}function gs(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[nc]||!!t.constructor[nc]||ks(t)||Es(t))}function _s(t,e,n){void 0===n&&(n=!1),0===bs(t)?(n?Object.keys:ic)(t).forEach((function(r){n&&"symbol"==typeof r||e(r,t[r],t)})):t.forEach((function(n,r){return e(r,n,t)}))}function bs(t){var e=t[rc];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:ks(t)?2:Es(t)?3:0}function ws(t,e){return 2===bs(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function Ss(t,e,n){var r=bs(t);2===r?t.set(e,n):3===r?(t.delete(e),t.add(n)):t[e]=n}function xs(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function ks(t){return Zs&&t instanceof Map}function Es(t){return Qs&&t instanceof Set}function Os(t){return t.o||t.t}function Ts(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=oc(t);delete e[rc];for(var n=ic(e),r=0;r<n.length;r++){var i=n[r],o=e[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(e[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:t[i]})}return Object.create(Object.getPrototypeOf(t),e)}function Cs(t,e){return void 0===e&&(e=!1),js(t)||ys(t)||!gs(t)||(bs(t)>1&&(t.set=t.add=t.clear=t.delete=As),Object.freeze(t),e&&_s(t,(function(t,e){return Cs(e,!0)}),!0)),t}function As(){ms(2)}function js(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function $s(t){var e=ac[t];return e||ms(18,t),e}function Is(){return Ys}function Rs(t,e){e&&($s("Patches"),t.u=[],t.s=[],t.v=e)}function Ds(t){Ns(t),t.p.forEach(Ms),t.p=null}function Ns(t){t===Ys&&(Ys=t.l)}function Ps(t){return Ys={p:[],l:Ys,h:t,m:!0,_:0}}function Ms(t){var e=t[rc];0===e.i||1===e.i?e.j():e.g=!0}function Ls(t,e){e._=e.p.length;var n=e.p[0],r=void 0!==t&&t!==n;return e.h.O||$s("ES5").S(e,t,r),r?(n[rc].P&&(Ds(e),ms(4)),gs(t)&&(t=Fs(e,t),e.l||Hs(e,t)),e.u&&$s("Patches").M(n[rc],t,e.u,e.s)):t=Fs(e,n,[]),Ds(e),e.u&&e.v(e.u,e.s),t!==ec?t:void 0}function Fs(t,e,n){if(js(e))return e;var r=e[rc];if(!r)return _s(e,(function(i,o){return Us(t,r,e,i,o,n)}),!0),e;if(r.A!==t)return e;if(!r.P)return Hs(t,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=Ts(r.k):r.o;_s(3===r.i?new Set(i):i,(function(e,o){return Us(t,r,i,e,o,n)})),Hs(t,i,!1),n&&t.u&&$s("Patches").R(r,n,t.u,t.s)}return r.o}function Us(t,e,n,r,i,o){if(ys(i)){var a=Fs(t,i,o&&e&&3!==e.i&&!ws(e.D,r)?o.concat(r):void 0);if(Ss(n,r,a),!ys(a))return;t.m=!1}if(gs(i)&&!js(i)){if(!t.h.N&&t._<1)return;Fs(t,i),e&&e.A.l||Hs(t,i)}}function Hs(t,e,n){void 0===n&&(n=!1),t.h.N&&t.m&&Cs(e,n)}function Bs(t,e){var n=t[rc];return(n?Os(n):t)[e]}function qs(t,e){if(e in t)for(var n=Object.getPrototypeOf(t);n;){var r=Object.getOwnPropertyDescriptor(n,e);if(r)return r;n=Object.getPrototypeOf(n)}}function Ws(t){t.P||(t.P=!0,t.l&&Ws(t.l))}function zs(t){t.o||(t.o=Ts(t.t))}function Vs(t,e,n){var r=ks(e)?$s("MapSet").T(e,n):Es(e)?$s("MapSet").F(e,n):t.O?function(t,e){var n=Array.isArray(t),r={i:n?1:0,A:e?e.A:Is(),P:!1,I:!1,D:{},l:e,t,k:null,o:null,j:null,C:!1},i=r,o=sc;n&&(i=[r],o=cc);var a=Proxy.revocable(i,o),s=a.revoke,c=a.proxy;return r.k=c,r.j=s,c}(e,n):$s("ES5").J(e,n);return(n?n.A:Is()).p.push(r),r}function Js(t){return ys(t)||ms(22,t),function t(e){if(!gs(e))return e;var n,r=e[rc],i=bs(e);if(r){if(!r.P&&(r.i<4||!$s("ES5").K(r)))return r.t;r.I=!0,n=Ks(e,i),r.I=!1}else n=Ks(e,i);return _s(n,(function(e,i){r&&function(t,e){return 2===bs(t)?t.get(e):t[e]}(r.t,e)===i||Ss(n,e,t(i))})),3===i?new Set(n):n}(t)}function Ks(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return Ts(t)}var Gs,Ys,Xs="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Zs="undefined"!=typeof Map,Qs="undefined"!=typeof Set,tc="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ec=Xs?Symbol.for("immer-nothing"):((Gs={})["immer-nothing"]=!0,Gs),nc=Xs?Symbol.for("immer-draftable"):"__$immer_draftable",rc=Xs?Symbol.for("immer-state"):"__$immer_state",ic=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames),oc=Object.getOwnPropertyDescriptors||function(t){var e={};return ic(t).forEach((function(n){e[n]=Object.getOwnPropertyDescriptor(t,n)})),e},ac={},sc={get:function(t,e){if(e===rc)return t;var n=Os(t);if(!ws(n,e))return function(t,e,n){var r,i=qs(e,n);return i?"value"in i?i.value:null===(r=i.get)||void 0===r?void 0:r.call(t.k):void 0}(t,n,e);var r=n[e];return t.I||!gs(r)?r:r===Bs(t.t,e)?(zs(t),t.o[e]=Vs(t.A.h,r,t)):r},has:function(t,e){return e in Os(t)},ownKeys:function(t){return Reflect.ownKeys(Os(t))},set:function(t,e,n){var r=qs(Os(t),e);if(null==r?void 0:r.set)return r.set.call(t.k,n),!0;if(!t.P){var i=Bs(Os(t),e),o=null==i?void 0:i[rc];if(o&&o.t===n)return t.o[e]=n,t.D[e]=!1,!0;if(xs(n,i)&&(void 0!==n||ws(t.t,e)))return!0;zs(t),Ws(t)}return t.o[e]=n,t.D[e]=!0,!0},deleteProperty:function(t,e){return void 0!==Bs(t.t,e)||e in t.t?(t.D[e]=!1,zs(t),Ws(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var n=Os(t),r=Reflect.getOwnPropertyDescriptor(n,e);return r?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:r.enumerable,value:n[e]}:r},defineProperty:function(){ms(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){ms(12)}},cc={};_s(sc,(function(t,e){cc[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),cc.deleteProperty=function(t,e){return sc.deleteProperty.call(this,t[0],e)},cc.set=function(t,e,n){return sc.set.call(this,t[0],e,n,t[0])};var uc=new(function(){function t(t){this.O=tc,this.N=!0,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var e=t.prototype;return e.produce=function(t,e,n){if("function"==typeof t&&"function"!=typeof e){var r=e;e=t;var i=this;return function(t){var n=this;void 0===t&&(t=r);for(var o=arguments.length,a=Array(o>1?o-1:0),s=1;s<o;s++)a[s-1]=arguments[s];return i.produce(t,(function(t){var r;return(r=e).call.apply(r,[n,t].concat(a))}))}}var o;if("function"!=typeof e&&ms(6),void 0!==n&&"function"!=typeof n&&ms(7),gs(t)){var a=Ps(this),s=Vs(this,t,void 0),c=!0;try{o=e(s),c=!1}finally{c?Ds(a):Ns(a)}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(t){return Rs(a,n),Ls(t,a)}),(function(t){throw Ds(a),t})):(Rs(a,n),Ls(o,a))}if(!t||"object"!=typeof t){if((o=e(t))===ec)return;return void 0===o&&(o=t),this.N&&Cs(o,!0),o}ms(21,t)},e.produceWithPatches=function(t,e){var n,r,i=this;return"function"==typeof t?function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return i.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(r))}))}:[this.produce(t,e,(function(t,e){n=t,r=e})),n,r]},e.createDraft=function(t){gs(t)||ms(8),ys(t)&&(t=Js(t));var e=Ps(this),n=Vs(this,t,void 0);return n[rc].C=!0,Ns(e),n},e.finishDraft=function(t,e){var n=(t&&t[rc]).A;return Rs(n,e),Ls(void 0,n)},e.setAutoFreeze=function(t){this.N=t},e.setUseProxies=function(t){t&&!tc&&ms(20),this.O=t},e.applyPatches=function(t,e){var n;for(n=e.length-1;n>=0;n--){var r=e[n];if(0===r.path.length&&"replace"===r.op){t=r.value;break}}var i=$s("Patches").$;return ys(t)?i(t,e):this.produce(t,(function(t){return i(t,e.slice(n+1))}))},t}()),lc=uc.produce;uc.produceWithPatches.bind(uc),uc.setAutoFreeze.bind(uc),uc.setUseProxies.bind(uc),uc.applyPatches.bind(uc),uc.createDraft.bind(uc),uc.finishDraft.bind(uc);const pc=lc;var fc=n(121),dc=function(){return Math.random().toString(36).substring(7).split("").join(".")},hc={INIT:"@@redux/INIT"+dc(),REPLACE:"@@redux/REPLACE"+dc(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+dc()}};function vc(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function mc(t,e,n){var r;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(mc)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,o=e,a=[],s=a,c=!1;function u(){s===a&&(s=a.slice())}function l(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function p(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return u(),s.push(t),function(){if(e){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,u();var n=s.indexOf(t);s.splice(n,1),a=null}}}function f(t){if(!vc(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,o=i(o,t)}finally{c=!1}for(var e=a=s,n=0;n<e.length;n++)(0,e[n])();return t}function d(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");i=t,f({type:hc.REPLACE})}function h(){var t,e=p;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(l())}return n(),{unsubscribe:e(n)}}})[fc.Z]=function(){return this},t}return f({type:hc.INIT}),(r={dispatch:f,subscribe:p,getState:l,replaceReducer:d})[fc.Z]=h,r}function yc(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function gc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _c(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function bc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?_c(n,!0).forEach((function(e){gc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):_c(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function wc(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function Sc(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=e.map((function(t){return t(i)}));return bc({},n,{dispatch:r=wc.apply(void 0,o)(n.dispatch)})}}}function xc(t,e){return t===e}function kc(t,e,n){if(null===e||null===n||e.length!==n.length)return!1;for(var r=e.length,i=0;i<r;i++)if(!t(e[i],n[i]))return!1;return!0}function Ec(t){return function(e){var n=e.dispatch,r=e.getState;return function(e){return function(i){return"function"==typeof i?i(n,r,t):e(i)}}}}!function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r]}((function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xc,n=null,r=null;return function(){return kc(e,n,arguments)||(r=t.apply(null,arguments)),n=arguments,r}}));var Oc=Ec();Oc.withExtraArgument=Ec;const Tc=Oc;function Cc(){return(Cc=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Ac(t){return(Ac=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function jc(t,e){return(jc=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function Ic(t,e,n){return(Ic=$c()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&jc(i,n.prototype),i}).apply(null,arguments)}function Rc(t){var e="function"==typeof Map?new Map:void 0;return(Rc=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return Ic(t,arguments,Ac(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),jc(r,t)})(t)}var Dc="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?wc:wc.apply(null,arguments)};var Nc,Pc=function(t){var e,n;function r(){return t.apply(this,arguments)||this}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.concat=function(){for(var e,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return Ic(r,(e=t.prototype.concat).call.apply(e,[this].concat(i)))},i.prepend=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?Ic(r,e[0].concat(this)):Ic(r,e.concat(this))},r}(Rc(Array));function Mc(t,e){function n(){if(e){var n=e.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return Cc({type:t,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:t,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+t},n.type=t,n.match=function(e){return e.type===t},n}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator"))),function(){function t(t,e){var n=i[t];return n?n.enumerable=e:i[t]=n={configurable:!0,enumerable:e,get:function(){var e=this[rc];return sc.get(e,t)},set:function(e){var n=this[rc];sc.set(n,t,e)}},n}function e(t){for(var e=t.length-1;e>=0;e--){var i=t[e][rc];if(!i.P)switch(i.i){case 5:r(i)&&Ws(i);break;case 4:n(i)&&Ws(i)}}}function n(t){for(var e=t.t,n=t.k,r=ic(n),i=r.length-1;i>=0;i--){var o=r[i];if(o!==rc){var a=e[o];if(void 0===a&&!ws(e,o))return!0;var s=n[o],c=s&&s[rc];if(c?c.t!==a:!xs(s,a))return!0}}var u=!!e[rc];return r.length!==ic(e).length+(u?0:1)}function r(t){var e=t.k;if(e.length!==t.t.length)return!0;var n=Object.getOwnPropertyDescriptor(e,e.length-1);return!(!n||n.get)}var i={};!function(t,e){ac[t]||(ac[t]=e)}("ES5",{J:function(e,n){var r=Array.isArray(e),i=function(e,n){if(e){for(var r=Array(n.length),i=0;i<n.length;i++)Object.defineProperty(r,""+i,t(i,!0));return r}var o=oc(n);delete o[rc];for(var a=ic(o),s=0;s<a.length;s++){var c=a[s];o[c]=t(c,e||!!o[c].enumerable)}return Object.create(Object.getPrototypeOf(n),o)}(r,e),o={i:r?5:4,A:n?n.A:Is(),P:!1,I:!1,D:{},l:n,t:e,k:i,o:null,g:!1,C:!1};return Object.defineProperty(i,rc,{value:o,writable:!0}),i},S:function(t,n,i){i?ys(n)&&n[rc].A===t&&e(t.p):(t.u&&function t(e){if(e&&"object"==typeof e){var n=e[rc];if(n){var i=n.t,o=n.k,a=n.D,s=n.i;if(4===s)_s(o,(function(e){e!==rc&&(void 0!==i[e]||ws(i,e)?a[e]||t(o[e]):(a[e]=!0,Ws(n)))})),_s(i,(function(t){void 0!==o[t]||ws(o,t)||(a[t]=!1,Ws(n))}));else if(5===s){if(r(n)&&(Ws(n),a.length=!0),o.length<i.length)for(var c=o.length;c<i.length;c++)a[c]=!1;else for(var u=i.length;u<o.length;u++)a[u]=!0;for(var l=Math.min(o.length,i.length),p=0;p<l;p++)void 0===a[p]&&t(o[p])}}}}(t.p[0]),e(t.p))},K:function(t){return 4===t.i?n(t):r(t)}})}(),function(t){t.ERROR="error",t.LOADING="loading",t.LOADED="summaryLoaded"}(Nc||(Nc={}));const Lc=Mc(Nc.ERROR),Fc=Mc(Nc.LOADING),Uc=Mc(Nc.LOADED),Hc=function(t){var e,n=function(t){return function(t){void 0===t&&(t={});var e=t,n=e.thunk,r=void 0===n||n,i=(e.immutableCheck,e.serializableCheck,new Pc);return r&&(function(t){return"boolean"==typeof t}(r)?i.push(Tc):i.push(Tc.withExtraArgument(r.extraArgument))),i}(t)},r=t||{},i=r.reducer,o=void 0===i?void 0:i,a=r.middleware,s=void 0===a?n():a,c=r.devTools,u=void 0===c||c,l=r.preloadedState,p=void 0===l?void 0:l,f=r.enhancers,d=void 0===f?void 0:f;if("function"==typeof o)e=o;else{if(!function(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}(o))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');e=function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(n[i]=t[i])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:hc.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:hc.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+hc.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var r=!1,i={},s=0;s<a.length;s++){var c=a[s],u=n[c],l=t[c],p=u(l,e);if(void 0===p){var f=yc(c,e);throw new Error(f)}i[c]=p,r=r||p!==l}return(r=r||a.length!==Object.keys(t).length)?i:t}}(o)}var h=Sc.apply(void 0,"function"==typeof s?s(n):s),v=wc;u&&(v=Dc(Cc({trace:!1},"object"==typeof u&&u)));var m=[h];return Array.isArray(d)?m=[h].concat(d):"function"==typeof d&&(m=d(m)),mc(e,p,v.apply(void 0,m))}({reducer:function(t,e,n,r){void 0===n&&(n=[]);var i="function"==typeof e?function(t){var e,n={},r=[],i={addCase:function(t,e){var r="string"==typeof t?t:t.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=e,i},addMatcher:function(t,e){return r.push({matcher:t,reducer:e}),i},addDefaultCase:function(t){return e=t,i}};return t(i),[n,r,e]}(e):[e,n,r],o=i[0],a=i[1],s=i[2];return function(e,n){void 0===e&&(e=t);var r=[o[n.type]].concat(a.filter((function(t){return(0,t.matcher)(n)})).map((function(t){return t.reducer})));return 0===r.filter((function(t){return!!t})).length&&(r=[s]),r.reduce((function(t,e){if(e){if(ys(t)){var r=e(t,n);return void 0===r?t:r}if(gs(t))return pc(t,(function(t){return e(t,n)}));var i=e(t,n);if(void 0===i){if(null===t)return t;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return t}),e)}}({loading:!1,error:null,summary:{total_task:0,task_done:0,task_cancelled:0,total_worker:0}},{[Nc.ERROR]:function(t,e){t.loading=!1,t.error=e.payload},[Nc.LOADING]:function(t){t.loading=!0,t.error=null},[Nc.LOADED]:function(t,e){return t.summary=e.payload,t.loading=!1,t.error=null,t}}),middleware:[Tc]});function Bc(t,e,n){var r,i;return function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function s(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))}(this,void 0,void 0,(function*(){let o;n&&(o={"Content-Type":"application/json"});const a=Object.assign(Object.assign({method:null!==(r=null==e?void 0:e.method)&&void 0!==r?r:"GET"},null==e?void 0:e.customConf),{headers:Object.assign(Object.assign({},o),null===(i=null==e?void 0:e.customConf)||void 0===i?void 0:i.headers)});if(null==e?void 0:e.body)if(n)a.body=JSON.stringify(null==e?void 0:e.body);else{const t=new FormData;for(const n in null==e?void 0:e.body)t.append(n,null==e?void 0:e.body[n]);a.body=t}let s;try{const e=yield window.fetch(t,a);if(s=yield e.json(),!e.ok)throw new Error(s.statusText);return s}catch(t){return Promise.reject(t.message||s)}}))}Bc.get=(t,e={})=>Bc(t,Object.assign({method:"GET"},e)),Bc.post=(t,e,n={})=>Bc(t,Object.assign({method:"POST",body:e},n)),Bc.put=(t,e,n={})=>Bc(t,Object.assign({method:"PUT",body:e},n)),Bc.del=(t,e,n={})=>Bc(t,Object.assign({method:"DELETE",body:e},n));var qc,Wc=n(655);!function(t){t.Ok="ok",t.Exited="exited",t.Crashed="crashed",t.Abnormal="abnormal"}(qc||(qc={}));var zc,Vc=n(844),Jc=n(170),Kc=n(343),Gc=n(422),Yc=n(597);!function(t){t.PENDING="PENDING",t.RESOLVED="RESOLVED",t.REJECTED="REJECTED"}(zc||(zc={}));var Xc=function(){function t(t){var e=this;this._state=zc.PENDING,this._handlers=[],this._resolve=function(t){e._setResult(zc.RESOLVED,t)},this._reject=function(t){e._setResult(zc.REJECTED,t)},this._setResult=function(t,n){e._state===zc.PENDING&&((0,Yc.J8)(n)?n.then(e._resolve,e._reject):(e._state=t,e._value=n,e._executeHandlers()))},this._attachHandler=function(t){e._handlers=e._handlers.concat(t),e._executeHandlers()},this._executeHandlers=function(){if(e._state!==zc.PENDING){var t=e._handlers.slice();e._handlers=[],t.forEach((function(t){t.done||(e._state===zc.RESOLVED&&t.onfulfilled&&t.onfulfilled(e._value),e._state===zc.REJECTED&&t.onrejected&&t.onrejected(e._value),t.done=!0)}))}};try{t(this._resolve,this._reject)}catch(t){this._reject(t)}}return t.resolve=function(e){return new t((function(t){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.all=function(e){return new t((function(n,r){if(Array.isArray(e))if(0!==e.length){var i=e.length,o=[];e.forEach((function(e,a){t.resolve(e).then((function(t){o[a]=t,0==(i-=1)&&n(o)})).then(null,r)}))}else n([]);else r(new TypeError("Promise.all requires an array as input."))}))},t.prototype.then=function(e,n){var r=this;return new t((function(t,i){r._attachHandler({done:!1,onfulfilled:function(n){if(e)try{return void t(e(n))}catch(t){return void i(t)}else t(n)},onrejected:function(e){if(n)try{return void t(n(e))}catch(t){return void i(t)}else i(e)}})}))},t.prototype.catch=function(t){return this.then((function(t){return t}),t)},t.prototype.finally=function(e){var n=this;return new t((function(t,r){var i,o;return n.then((function(t){o=!1,i=t,e&&e()}),(function(t){o=!0,i=t,e&&e()})).then((function(){o?r(i):t(i)}))}))},t.prototype.toString=function(){return"[object SyncPromise]"},t}(),Zc=function(){function t(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._contexts={}}return t.clone=function(e){var n=new t;return e&&(n._breadcrumbs=(0,Wc.fl)(e._breadcrumbs),n._tags=(0,Wc.pi)({},e._tags),n._extra=(0,Wc.pi)({},e._extra),n._contexts=(0,Wc.pi)({},e._contexts),n._user=e._user,n._level=e._level,n._span=e._span,n._session=e._session,n._transactionName=e._transactionName,n._fingerprint=e._fingerprint,n._eventProcessors=(0,Wc.fl)(e._eventProcessors)),n},t.prototype.addScopeListener=function(t){this._scopeListeners.push(t)},t.prototype.addEventProcessor=function(t){return this._eventProcessors.push(t),this},t.prototype.setUser=function(t){return this._user=t||{},this._session&&this._session.update({user:t}),this._notifyScopeListeners(),this},t.prototype.getUser=function(){return this._user},t.prototype.setTags=function(t){return this._tags=(0,Wc.pi)((0,Wc.pi)({},this._tags),t),this._notifyScopeListeners(),this},t.prototype.setTag=function(t,e){var n;return this._tags=(0,Wc.pi)((0,Wc.pi)({},this._tags),((n={})[t]=e,n)),this._notifyScopeListeners(),this},t.prototype.setExtras=function(t){return this._extra=(0,Wc.pi)((0,Wc.pi)({},this._extra),t),this._notifyScopeListeners(),this},t.prototype.setExtra=function(t,e){var n;return this._extra=(0,Wc.pi)((0,Wc.pi)({},this._extra),((n={})[t]=e,n)),this._notifyScopeListeners(),this},t.prototype.setFingerprint=function(t){return this._fingerprint=t,this._notifyScopeListeners(),this},t.prototype.setLevel=function(t){return this._level=t,this._notifyScopeListeners(),this},t.prototype.setTransactionName=function(t){return this._transactionName=t,this._notifyScopeListeners(),this},t.prototype.setTransaction=function(t){return this.setTransactionName(t)},t.prototype.setContext=function(t,e){var n;return null===e?delete this._contexts[t]:this._contexts=(0,Wc.pi)((0,Wc.pi)({},this._contexts),((n={})[t]=e,n)),this._notifyScopeListeners(),this},t.prototype.setSpan=function(t){return this._span=t,this._notifyScopeListeners(),this},t.prototype.getSpan=function(){return this._span},t.prototype.getTransaction=function(){var t,e,n,r,i=this.getSpan();return(null===(t=i)||void 0===t?void 0:t.transaction)?null===(e=i)||void 0===e?void 0:e.transaction:(null===(r=null===(n=i)||void 0===n?void 0:n.spanRecorder)||void 0===r?void 0:r.spans[0])?i.spanRecorder.spans[0]:void 0},t.prototype.setSession=function(t){return t?this._session=t:delete this._session,this._notifyScopeListeners(),this},t.prototype.getSession=function(){return this._session},t.prototype.update=function(e){if(!e)return this;if("function"==typeof e){var n=e(this);return n instanceof t?n:this}return e instanceof t?(this._tags=(0,Wc.pi)((0,Wc.pi)({},this._tags),e._tags),this._extra=(0,Wc.pi)((0,Wc.pi)({},this._extra),e._extra),this._contexts=(0,Wc.pi)((0,Wc.pi)({},this._contexts),e._contexts),e._user&&Object.keys(e._user).length&&(this._user=e._user),e._level&&(this._level=e._level),e._fingerprint&&(this._fingerprint=e._fingerprint)):(0,Yc.PO)(e)&&(e=e,this._tags=(0,Wc.pi)((0,Wc.pi)({},this._tags),e.tags),this._extra=(0,Wc.pi)((0,Wc.pi)({},this._extra),e.extra),this._contexts=(0,Wc.pi)((0,Wc.pi)({},this._contexts),e.contexts),e.user&&(this._user=e.user),e.level&&(this._level=e.level),e.fingerprint&&(this._fingerprint=e.fingerprint)),this},t.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this},t.prototype.addBreadcrumb=function(t,e){var n=(0,Wc.pi)({timestamp:(0,Jc.yW)()},t);return this._breadcrumbs=void 0!==e&&e>=0?(0,Wc.fl)(this._breadcrumbs,[n]).slice(-e):(0,Wc.fl)(this._breadcrumbs,[n]),this._notifyScopeListeners(),this},t.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},t.prototype.applyToEvent=function(t,e){var n;if(this._extra&&Object.keys(this._extra).length&&(t.extra=(0,Wc.pi)((0,Wc.pi)({},this._extra),t.extra)),this._tags&&Object.keys(this._tags).length&&(t.tags=(0,Wc.pi)((0,Wc.pi)({},this._tags),t.tags)),this._user&&Object.keys(this._user).length&&(t.user=(0,Wc.pi)((0,Wc.pi)({},this._user),t.user)),this._contexts&&Object.keys(this._contexts).length&&(t.contexts=(0,Wc.pi)((0,Wc.pi)({},this._contexts),t.contexts)),this._level&&(t.level=this._level),this._transactionName&&(t.transaction=this._transactionName),this._span){t.contexts=(0,Wc.pi)({trace:this._span.getTraceContext()},t.contexts);var r=null===(n=this._span.transaction)||void 0===n?void 0:n.name;r&&(t.tags=(0,Wc.pi)({transaction:r},t.tags))}return this._applyFingerprint(t),t.breadcrumbs=(0,Wc.fl)(t.breadcrumbs||[],this._breadcrumbs),t.breadcrumbs=t.breadcrumbs.length>0?t.breadcrumbs:void 0,this._notifyEventProcessors((0,Wc.fl)(Qc(),this._eventProcessors),t,e)},t.prototype._notifyEventProcessors=function(t,e,n,r){var i=this;return void 0===r&&(r=0),new Xc((function(o,a){var s=t[r];if(null===e||"function"!=typeof s)o(e);else{var c=s((0,Wc.pi)({},e),n);(0,Yc.J8)(c)?c.then((function(e){return i._notifyEventProcessors(t,e,n,r+1).then(o)})).then(null,a):i._notifyEventProcessors(t,c,n,r+1).then(o).then(null,a)}}))},t.prototype._notifyScopeListeners=function(){var t=this;this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach((function(e){e(t)})),this._notifyingListeners=!1)},t.prototype._applyFingerprint=function(t){t.fingerprint=t.fingerprint?Array.isArray(t.fingerprint)?t.fingerprint:[t.fingerprint]:[],this._fingerprint&&(t.fingerprint=t.fingerprint.concat(this._fingerprint)),t.fingerprint&&!t.fingerprint.length&&delete t.fingerprint},t}();function Qc(){var t=(0,Vc.Rf)();return t.__SENTRY__=t.__SENTRY__||{},t.__SENTRY__.globalEventProcessors=t.__SENTRY__.globalEventProcessors||[],t.__SENTRY__.globalEventProcessors}function tu(t){Qc().push(t)}var eu=n(470),nu=function(){function t(t){this.errors=0,this.sid=(0,Vc.DM)(),this.timestamp=Date.now(),this.started=Date.now(),this.duration=0,this.status=qc.Ok,this.init=!0,t&&this.update(t)}return t.prototype.update=function(t){void 0===t&&(t={}),t.user&&(t.user.ip_address&&(this.ipAddress=t.user.ip_address),t.did||(this.did=t.user.id||t.user.email||t.user.username)),this.timestamp=t.timestamp||Date.now(),t.sid&&(this.sid=32===t.sid.length?t.sid:(0,Vc.DM)()),void 0!==t.init&&(this.init=t.init),t.did&&(this.did=""+t.did),"number"==typeof t.started&&(this.started=t.started),"number"==typeof t.duration?this.duration=t.duration:this.duration=this.timestamp-this.started,t.release&&(this.release=t.release),t.environment&&(this.environment=t.environment),t.ipAddress&&(this.ipAddress=t.ipAddress),t.userAgent&&(this.userAgent=t.userAgent),"number"==typeof t.errors&&(this.errors=t.errors),t.status&&(this.status=t.status)},t.prototype.close=function(t){t?this.update({status:t}):this.status===qc.Ok?this.update({status:qc.Exited}):this.update()},t.prototype.toJSON=function(){return(0,eu.Jr)({sid:""+this.sid,init:this.init,started:new Date(this.started).toISOString(),timestamp:new Date(this.timestamp).toISOString(),status:this.status,errors:this.errors,did:"number"==typeof this.did||"string"==typeof this.did?""+this.did:void 0,duration:this.duration,attrs:(0,eu.Jr)({release:this.release,environment:this.environment,ip_address:this.ipAddress,user_agent:this.userAgent})})},t}(),ru=function(){function t(t,e,n){void 0===e&&(e=new Zc),void 0===n&&(n=3),this._version=n,this._stack=[{}],this.getStackTop().scope=e,this.bindClient(t)}return t.prototype.isOlderThan=function(t){return this._version<t},t.prototype.bindClient=function(t){this.getStackTop().client=t,t&&t.setupIntegrations&&t.setupIntegrations()},t.prototype.pushScope=function(){var t=Zc.clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:t}),t},t.prototype.popScope=function(){return!(this.getStack().length<=1||!this.getStack().pop())},t.prototype.withScope=function(t){var e=this.pushScope();try{t(e)}finally{this.popScope()}},t.prototype.getClient=function(){return this.getStackTop().client},t.prototype.getScope=function(){return this.getStackTop().scope},t.prototype.getStack=function(){return this._stack},t.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},t.prototype.captureException=function(t,e){var n=this._lastEventId=(0,Vc.DM)(),r=e;if(!e){var i=void 0;try{throw new Error("Sentry syntheticException")}catch(t){i=t}r={originalException:t,syntheticException:i}}return this._invokeClient("captureException",t,(0,Wc.pi)((0,Wc.pi)({},r),{event_id:n})),n},t.prototype.captureMessage=function(t,e,n){var r=this._lastEventId=(0,Vc.DM)(),i=n;if(!n){var o=void 0;try{throw new Error(t)}catch(t){o=t}i={originalException:t,syntheticException:o}}return this._invokeClient("captureMessage",t,e,(0,Wc.pi)((0,Wc.pi)({},i),{event_id:r})),r},t.prototype.captureEvent=function(t,e){var n=this._lastEventId=(0,Vc.DM)();return this._invokeClient("captureEvent",t,(0,Wc.pi)((0,Wc.pi)({},e),{event_id:n})),n},t.prototype.lastEventId=function(){return this._lastEventId},t.prototype.addBreadcrumb=function(t,e){var n=this.getStackTop(),r=n.scope,i=n.client;if(r&&i){var o=i.getOptions&&i.getOptions()||{},a=o.beforeBreadcrumb,s=void 0===a?null:a,c=o.maxBreadcrumbs,u=void 0===c?100:c;if(!(u<=0)){var l=(0,Jc.yW)(),p=(0,Wc.pi)({timestamp:l},t),f=s?(0,Vc.Cf)((function(){return s(p,e)})):p;null!==f&&r.addBreadcrumb(f,Math.min(u,100))}}},t.prototype.setUser=function(t){var e=this.getScope();e&&e.setUser(t)},t.prototype.setTags=function(t){var e=this.getScope();e&&e.setTags(t)},t.prototype.setExtras=function(t){var e=this.getScope();e&&e.setExtras(t)},t.prototype.setTag=function(t,e){var n=this.getScope();n&&n.setTag(t,e)},t.prototype.setExtra=function(t,e){var n=this.getScope();n&&n.setExtra(t,e)},t.prototype.setContext=function(t,e){var n=this.getScope();n&&n.setContext(t,e)},t.prototype.configureScope=function(t){var e=this.getStackTop(),n=e.scope,r=e.client;n&&r&&t(n)},t.prototype.run=function(t){var e=ou(this);try{t(this)}finally{ou(e)}},t.prototype.getIntegration=function(t){var e=this.getClient();if(!e)return null;try{return e.getIntegration(t)}catch(e){return Kc.k.warn("Cannot retrieve integration "+t.id+" from the current Hub"),null}},t.prototype.startSpan=function(t){return this._callExtensionMethod("startSpan",t)},t.prototype.startTransaction=function(t,e){return this._callExtensionMethod("startTransaction",t,e)},t.prototype.traceHeaders=function(){return this._callExtensionMethod("traceHeaders")},t.prototype.captureSession=function(t){if(void 0===t&&(t=!1),t)return this.endSession();this._sendSessionUpdate()},t.prototype.endSession=function(){var t,e,n,r,i;null===(n=null===(e=null===(t=this.getStackTop())||void 0===t?void 0:t.scope)||void 0===e?void 0:e.getSession())||void 0===n||n.close(),this._sendSessionUpdate(),null===(i=null===(r=this.getStackTop())||void 0===r?void 0:r.scope)||void 0===i||i.setSession()},t.prototype.startSession=function(t){var e=this.getStackTop(),n=e.scope,r=e.client,i=r&&r.getOptions()||{},o=i.release,a=i.environment,s=new nu((0,Wc.pi)((0,Wc.pi)({release:o,environment:a},n&&{user:n.getUser()}),t));if(n){var c=n.getSession&&n.getSession();c&&c.status===qc.Ok&&c.update({status:qc.Exited}),this.endSession(),n.setSession(s)}return s},t.prototype._sendSessionUpdate=function(){var t=this.getStackTop(),e=t.scope,n=t.client;if(e){var r=e.getSession&&e.getSession();r&&n&&n.captureSession&&n.captureSession(r)}},t.prototype._invokeClient=function(t){for(var e,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.getStackTop(),o=i.scope,a=i.client;a&&a[t]&&(e=a)[t].apply(e,(0,Wc.fl)(n,[o]))},t.prototype._callExtensionMethod=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=iu(),i=r.__SENTRY__;if(i&&i.extensions&&"function"==typeof i.extensions[t])return i.extensions[t].apply(this,e);Kc.k.warn("Extension method "+t+" couldn't be found, doing nothing.")},t}();function iu(){var t=(0,Vc.Rf)();return t.__SENTRY__=t.__SENTRY__||{extensions:{},hub:void 0},t}function ou(t){var e=iu(),n=cu(e);return uu(e,t),n}function au(){var t=iu();return su(t)&&!cu(t).isOlderThan(3)||uu(t,new ru),(0,Gc.K)()?function(t){var e,n,r;try{var i=null===(r=null===(n=null===(e=iu().__SENTRY__)||void 0===e?void 0:e.extensions)||void 0===n?void 0:n.domain)||void 0===r?void 0:r.active;if(!i)return cu(t);if(!su(i)||cu(i).isOlderThan(3)){var o=cu(t).getStackTop();uu(i,new ru(o.client,Zc.clone(o.scope)))}return cu(i)}catch(e){return cu(t)}}(t):cu(t)}function su(t){return!!(t&&t.__SENTRY__&&t.__SENTRY__.hub)}function cu(t){return t&&t.__SENTRY__&&t.__SENTRY__.hub||(t.__SENTRY__=t.__SENTRY__||{},t.__SENTRY__.hub=new ru),t.__SENTRY__.hub}function uu(t,e){return!!t&&(t.__SENTRY__=t.__SENTRY__||{},t.__SENTRY__.hub=e,!0)}function lu(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=au();if(r&&r[t])return r[t].apply(r,(0,Wc.fl)(e));throw new Error("No hub defined or "+t+" was not found on the hub, please open a bug report.")}function pu(t,e){var n;try{throw new Error("Sentry syntheticException")}catch(t){n=t}return lu("captureException",t,{captureContext:e,originalException:t,syntheticException:n})}function fu(t){lu("withScope",t)}const du=t=>function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function s(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))}(void 0,void 0,void 0,(function*(){t(Fc());try{const e=yield Bc.get("http://localhost:7003/summary");t(Uc(e))}catch(e){!function(t,e){var n;try{throw new Error(t)}catch(t){n=t}var r={captureContext:e};lu("captureMessage",t,void 0,(0,Wc.pi)({originalException:t,syntheticException:n},r))}(e),t(Lc("gagal memuat informasi kinerja"))}}));var hu=n(379),vu=n.n(hu),mu=n(1);vu()(mu.Z,{insert:"head",singleton:!1}),mu.Z.locals;var yu,gu="6.1.0",_u=n(321),bu=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],wu=function(){function t(e){void 0===e&&(e={}),this._options=e,this.name=t.id}return t.prototype.setupOnce=function(){tu((function(e){var n=au();if(!n)return e;var r=n.getIntegration(t);if(r){var i=n.getClient(),o=i?i.getOptions():{},a=r._mergeOptions(o);if(r._shouldDropEvent(e,a))return null}return e}))},t.prototype._shouldDropEvent=function(t,e){return this._isSentryError(t,e)?(Kc.k.warn("Event dropped due to being internal Sentry Error.\nEvent: "+(0,Vc.jH)(t)),!0):this._isIgnoredError(t,e)?(Kc.k.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+(0,Vc.jH)(t)),!0):this._isDeniedUrl(t,e)?(Kc.k.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: "+(0,Vc.jH)(t)+".\nUrl: "+this._getEventFilterUrl(t)),!0):!this._isAllowedUrl(t,e)&&(Kc.k.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: "+(0,Vc.jH)(t)+".\nUrl: "+this._getEventFilterUrl(t)),!0)},t.prototype._isSentryError=function(t,e){if(!e.ignoreInternal)return!1;try{return t&&t.exception&&t.exception.values&&t.exception.values[0]&&"SentryError"===t.exception.values[0].type||!1}catch(t){return!1}},t.prototype._isIgnoredError=function(t,e){return!(!e.ignoreErrors||!e.ignoreErrors.length)&&this._getPossibleEventMessages(t).some((function(t){return e.ignoreErrors.some((function(e){return(0,_u.zC)(t,e)}))}))},t.prototype._isDeniedUrl=function(t,e){if(!e.denyUrls||!e.denyUrls.length)return!1;var n=this._getEventFilterUrl(t);return!!n&&e.denyUrls.some((function(t){return(0,_u.zC)(n,t)}))},t.prototype._isAllowedUrl=function(t,e){if(!e.allowUrls||!e.allowUrls.length)return!0;var n=this._getEventFilterUrl(t);return!n||e.allowUrls.some((function(t){return(0,_u.zC)(n,t)}))},t.prototype._mergeOptions=function(t){return void 0===t&&(t={}),{allowUrls:(0,Wc.fl)(this._options.whitelistUrls||[],this._options.allowUrls||[],t.whitelistUrls||[],t.allowUrls||[]),denyUrls:(0,Wc.fl)(this._options.blacklistUrls||[],this._options.denyUrls||[],t.blacklistUrls||[],t.denyUrls||[]),ignoreErrors:(0,Wc.fl)(this._options.ignoreErrors||[],t.ignoreErrors||[],bu),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal}},t.prototype._getPossibleEventMessages=function(t){if(t.message)return[t.message];if(t.exception)try{var e=t.exception.values&&t.exception.values[0]||{},n=e.type,r=void 0===n?"":n,i=e.value,o=void 0===i?"":i;return[""+o,r+": "+o]}catch(e){return Kc.k.error("Cannot extract message for event "+(0,Vc.jH)(t)),[]}return[]},t.prototype._getEventFilterUrl=function(t){try{if(t.stacktrace){var e=t.stacktrace.frames;return e&&e[e.length-1].filename||null}if(t.exception){var n=t.exception.values&&t.exception.values[0].stacktrace&&t.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(e){return Kc.k.error("Cannot extract url for event "+(0,Vc.jH)(t)),null}},t.id="InboundFilters",t}(),Su=function(){function t(){this.name=t.id}return t.prototype.setupOnce=function(){yu=Function.prototype.toString,Function.prototype.toString=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this.__sentry_original__||this;return yu.apply(n,t)}},t.id="FunctionToString",t}(),xu=n(360);function ku(){if(!("fetch"in(0,Vc.Rf)()))return!1;try{return new Headers,new Request(""),new Response,!0}catch(t){return!1}}function Eu(t){return t&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(t.toString())}function Ou(){if(!ku())return!1;try{return new Request("_",{referrerPolicy:"origin"}),!0}catch(t){return!1}}var Tu,Cu,Au,ju=(0,Vc.Rf)(),$u={},Iu={};function Ru(t){t&&"string"==typeof t.type&&"function"==typeof t.callback&&($u[t.type]=$u[t.type]||[],$u[t.type].push(t.callback),function(t){if(!Iu[t])switch(Iu[t]=!0,t){case"console":"console"in ju&&["debug","info","warn","error","log","assert"].forEach((function(t){t in ju.console&&(0,eu.hl)(ju.console,t,(function(e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Du("console",{args:n,level:t}),e&&Function.prototype.apply.call(e,ju.console,n)}}))}));break;case"dom":!function(){if("document"in ju){var t=Du.bind(null,"dom"),e=Mu(t,!0);ju.document.addEventListener("click",e,!1),ju.document.addEventListener("keypress",e,!1),["EventTarget","Node"].forEach((function(e){var n=ju[e]&&ju[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&((0,eu.hl)(n,"addEventListener",(function(e){return function(n,r,i){if("click"===n||"keypress"==n)try{var o=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},a=o[n]=o[n]||{refCount:0};if(!a.handler){var s=Mu(t);a.handler=s,e.call(this,n,s,i)}a.refCount+=1}catch(t){}return e.call(this,n,r,i)}})),(0,eu.hl)(n,"removeEventListener",(function(t){return function(e,n,r){if("click"===e||"keypress"==e)try{var i=this.__sentry_instrumentation_handlers__||{},o=i[e];o&&(o.refCount-=1,o.refCount<=0&&(t.call(this,e,o.handler,r),o.handler=void 0,delete i[e]),0===Object.keys(i).length&&delete this.__sentry_instrumentation_handlers__)}catch(t){}return t.call(this,e,n,r)}})))}))}}();break;case"xhr":!function(){if("XMLHttpRequest"in ju){var t=[],e=[],n=XMLHttpRequest.prototype;(0,eu.hl)(n,"open",(function(n){return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var o=this,a=r[1];o.__sentry_xhr__={method:(0,Yc.HD)(r[0])?r[0].toUpperCase():r[0],url:r[1]},(0,Yc.HD)(a)&&"POST"===o.__sentry_xhr__.method&&a.match(/sentry_key/)&&(o.__sentry_own_request__=!0);var s=function(){if(4===o.readyState){try{o.__sentry_xhr__&&(o.__sentry_xhr__.status_code=o.status)}catch(t){}try{var n=t.indexOf(o);if(-1!==n){t.splice(n);var i=e.splice(n)[0];o.__sentry_xhr__&&void 0!==i[0]&&(o.__sentry_xhr__.body=i[0])}}catch(t){}Du("xhr",{args:r,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:o})}};return"onreadystatechange"in o&&"function"==typeof o.onreadystatechange?(0,eu.hl)(o,"onreadystatechange",(function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return s(),t.apply(o,e)}})):o.addEventListener("readystatechange",s),n.apply(o,r)}})),(0,eu.hl)(n,"send",(function(n){return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return t.push(this),e.push(r),Du("xhr",{args:r,startTimestamp:Date.now(),xhr:this}),n.apply(this,r)}}))}}();break;case"fetch":(function(){if(!ku())return!1;var t=(0,Vc.Rf)();if(Eu(t.fetch))return!0;var e=!1,n=t.document;if(n&&"function"==typeof n.createElement)try{var r=n.createElement("iframe");r.hidden=!0,n.head.appendChild(r),r.contentWindow&&r.contentWindow.fetch&&(e=Eu(r.contentWindow.fetch)),n.head.removeChild(r)}catch(t){Kc.k.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",t)}return e})()&&(0,eu.hl)(ju,"fetch",(function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r={args:e,fetchData:{method:Nu(e),url:Pu(e)},startTimestamp:Date.now()};return Du("fetch",(0,Wc.pi)({},r)),t.apply(ju,e).then((function(t){return Du("fetch",(0,Wc.pi)((0,Wc.pi)({},r),{endTimestamp:Date.now(),response:t})),t}),(function(t){throw Du("fetch",(0,Wc.pi)((0,Wc.pi)({},r),{endTimestamp:Date.now(),error:t})),t}))}}));break;case"history":!function(){if(function(){var t=(0,Vc.Rf)(),e=t.chrome,n=e&&e.app&&e.app.runtime,r="history"in t&&!!t.history.pushState&&!!t.history.replaceState;return!n&&r}()){var t=ju.onpopstate;ju.onpopstate=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=ju.location.href,i=Tu;if(Tu=r,Du("history",{from:i,to:r}),t)return t.apply(this,e)},(0,eu.hl)(ju.history,"pushState",e),(0,eu.hl)(ju.history,"replaceState",e)}function e(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=e.length>2?e[2]:void 0;if(r){var i=Tu,o=String(r);Tu=o,Du("history",{from:i,to:o})}return t.apply(this,e)}}}();break;case"error":Lu=ju.onerror,ju.onerror=function(t,e,n,r,i){return Du("error",{column:r,error:i,line:n,msg:t,url:e}),!!Lu&&Lu.apply(this,arguments)};break;case"unhandledrejection":Fu=ju.onunhandledrejection,ju.onunhandledrejection=function(t){return Du("unhandledrejection",t),!Fu||Fu.apply(this,arguments)};break;default:Kc.k.warn("unknown instrumentation type:",t)}}(t.type))}function Du(t,e){var n,r;if(t&&$u[t])try{for(var i=(0,Wc.XA)($u[t]||[]),o=i.next();!o.done;o=i.next()){var a=o.value;try{a(e)}catch(e){Kc.k.error("Error while triggering instrumentation handler.\nType: "+t+"\nName: "+(0,xu.$)(a)+"\nError: "+e)}}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}}function Nu(t){return void 0===t&&(t=[]),"Request"in ju&&(0,Yc.V9)(t[0],Request)&&t[0].method?String(t[0].method).toUpperCase():t[1]&&t[1].method?String(t[1].method).toUpperCase():"GET"}function Pu(t){return void 0===t&&(t=[]),"string"==typeof t[0]?t[0]:"Request"in ju&&(0,Yc.V9)(t[0],Request)?t[0].url:String(t[0])}function Mu(t,e){return void 0===e&&(e=!1),function(n){if(n&&Au!==n&&!function(t){if("keypress"!==t.type)return!1;try{var e=t.target;if(!e||!e.tagName)return!0;if("INPUT"===e.tagName||"TEXTAREA"===e.tagName||e.isContentEditable)return!1}catch(t){}return!0}(n)){var r="keypress"===n.type?"input":n.type;(void 0===Cu||function(t,e){if(!t)return!0;if(t.type!==e.type)return!0;try{if(t.target!==e.target)return!0}catch(t){}return!1}(Au,n))&&(t({event:n,name:r,global:e}),Au=n),clearTimeout(Cu),Cu=ju.setTimeout((function(){Cu=void 0}),1e3)}}}var Lu=null,Fu=null,Uu=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(t,e){return t.__proto__=e,t}:function(t,e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n]);return t}),Hu=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return r.message=e,r.name=n.prototype.constructor.name,Uu(r,n.prototype),r}return(0,Wc.ZT)(e,t),e}(Error),Bu=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/,qu=function(){function t(t){"string"==typeof t?this._fromString(t):this._fromComponents(t),this._validate()}return t.prototype.toString=function(t){void 0===t&&(t=!1);var e=this,n=e.host,r=e.path,i=e.pass,o=e.port,a=e.projectId;return e.protocol+"://"+e.publicKey+(t&&i?":"+i:"")+"@"+n+(o?":"+o:"")+"/"+(r?r+"/":r)+a},t.prototype._fromString=function(t){var e=Bu.exec(t);if(!e)throw new Hu("Invalid Dsn");var n=(0,Wc.CR)(e.slice(1),6),r=n[0],i=n[1],o=n[2],a=void 0===o?"":o,s=n[3],c=n[4],u=void 0===c?"":c,l="",p=n[5],f=p.split("/");if(f.length>1&&(l=f.slice(0,-1).join("/"),p=f.pop()),p){var d=p.match(/^\d+/);d&&(p=d[0])}this._fromComponents({host:s,pass:a,path:l,projectId:p,port:u,protocol:r,publicKey:i})},t.prototype._fromComponents=function(t){"user"in t&&!("publicKey"in t)&&(t.publicKey=t.user),this.user=t.publicKey||"",this.protocol=t.protocol,this.publicKey=t.publicKey||"",this.pass=t.pass||"",this.host=t.host,this.port=t.port||"",this.path=t.path||"",this.projectId=t.projectId},t.prototype._validate=function(){var t=this;if(["protocol","publicKey","host","projectId"].forEach((function(e){if(!t[e])throw new Hu("Invalid Dsn: "+e+" missing")})),!this.projectId.match(/^\d+$/))throw new Hu("Invalid Dsn: Invalid projectId "+this.projectId);if("http"!==this.protocol&&"https"!==this.protocol)throw new Hu("Invalid Dsn: Invalid protocol "+this.protocol);if(this.port&&isNaN(parseInt(this.port,10)))throw new Hu("Invalid Dsn: Invalid port "+this.port)},t}(),Wu=[];var zu,Vu=function(){function t(t,e){this._integrations={},this._processing=0,this._backend=new t(e),this._options=e,e.dsn&&(this._dsn=new qu(e.dsn))}return t.prototype.captureException=function(t,e,n){var r=this,i=e&&e.event_id;return this._process(this._getBackend().eventFromException(t,e).then((function(t){return r._captureEvent(t,e,n)})).then((function(t){i=t}))),i},t.prototype.captureMessage=function(t,e,n,r){var i=this,o=n&&n.event_id,a=(0,Yc.pt)(t)?this._getBackend().eventFromMessage(String(t),e,n):this._getBackend().eventFromException(t,n);return this._process(a.then((function(t){return i._captureEvent(t,n,r)})).then((function(t){o=t}))),o},t.prototype.captureEvent=function(t,e,n){var r=e&&e.event_id;return this._process(this._captureEvent(t,e,n).then((function(t){r=t}))),r},t.prototype.captureSession=function(t){t.release?(this._sendSession(t),t.update({init:!1})):Kc.k.warn("Discarded session because of missing release")},t.prototype.getDsn=function(){return this._dsn},t.prototype.getOptions=function(){return this._options},t.prototype.flush=function(t){var e=this;return this._isClientProcessing(t).then((function(n){return e._getBackend().getTransport().close(t).then((function(t){return n&&t}))}))},t.prototype.close=function(t){var e=this;return this.flush(t).then((function(t){return e.getOptions().enabled=!1,t}))},t.prototype.setupIntegrations=function(){this._isEnabled()&&(this._integrations=function(t){var e={};return function(t){var e=t.defaultIntegrations&&(0,Wc.fl)(t.defaultIntegrations)||[],n=t.integrations,r=[];if(Array.isArray(n)){var i=n.map((function(t){return t.name})),o=[];e.forEach((function(t){-1===i.indexOf(t.name)&&-1===o.indexOf(t.name)&&(r.push(t),o.push(t.name))})),n.forEach((function(t){-1===o.indexOf(t.name)&&(r.push(t),o.push(t.name))}))}else"function"==typeof n?(r=n(e),r=Array.isArray(r)?r:[r]):r=(0,Wc.fl)(e);var a=r.map((function(t){return t.name})),s="Debug";return-1!==a.indexOf(s)&&r.push.apply(r,(0,Wc.fl)(r.splice(a.indexOf(s),1))),r}(t).forEach((function(t){e[t.name]=t,function(t){-1===Wu.indexOf(t.name)&&(t.setupOnce(tu,au),Wu.push(t.name),Kc.k.log("Integration installed: "+t.name))}(t)})),e}(this._options))},t.prototype.getIntegration=function(t){try{return this._integrations[t.id]||null}catch(e){return Kc.k.warn("Cannot retrieve integration "+t.id+" from the current Client"),null}},t.prototype._updateSessionFromEvent=function(t,e){var n,r,i,o=!1,a=!1,s=e.exception&&e.exception.values;if(s){a=!0;try{for(var c=(0,Wc.XA)(s),u=c.next();!u.done;u=c.next()){var l=u.value.mechanism;if(l&&!1===l.handled){o=!0;break}}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}}var p=e.user;if(!t.userAgent){var f=e.request?e.request.headers:{};for(var d in f)if("user-agent"===d.toLowerCase()){i=f[d];break}}t.update((0,Wc.pi)((0,Wc.pi)({},o&&{status:qc.Crashed}),{user:p,userAgent:i,errors:t.errors+Number(a||o)})),this.captureSession(t)},t.prototype._sendSession=function(t){this._getBackend().sendSession(t)},t.prototype._isClientProcessing=function(t){var e=this;return new Xc((function(n){var r=0,i=setInterval((function(){0==e._processing?(clearInterval(i),n(!0)):(r+=1,t&&r>=t&&(clearInterval(i),n(!1)))}),1)}))},t.prototype._getBackend=function(){return this._backend},t.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},t.prototype._prepareEvent=function(t,e,n){var r=this,i=this.getOptions().normalizeDepth,o=void 0===i?3:i,a=(0,Wc.pi)((0,Wc.pi)({},t),{event_id:t.event_id||(n&&n.event_id?n.event_id:(0,Vc.DM)()),timestamp:t.timestamp||(0,Jc.yW)()});this._applyClientOptions(a),this._applyIntegrationsMetadata(a);var s=e;n&&n.captureContext&&(s=Zc.clone(s).update(n.captureContext));var c=Xc.resolve(a);return s&&(c=s.applyToEvent(a,n)),c.then((function(t){return"number"==typeof o&&o>0?r._normalizeEvent(t,o):t}))},t.prototype._normalizeEvent=function(t,e){if(!t)return null;var n=(0,Wc.pi)((0,Wc.pi)((0,Wc.pi)((0,Wc.pi)((0,Wc.pi)({},t),t.breadcrumbs&&{breadcrumbs:t.breadcrumbs.map((function(t){return(0,Wc.pi)((0,Wc.pi)({},t),t.data&&{data:(0,eu.Fv)(t.data,e)})}))}),t.user&&{user:(0,eu.Fv)(t.user,e)}),t.contexts&&{contexts:(0,eu.Fv)(t.contexts,e)}),t.extra&&{extra:(0,eu.Fv)(t.extra,e)});return t.contexts&&t.contexts.trace&&(n.contexts.trace=t.contexts.trace),n},t.prototype._applyClientOptions=function(t){var e=this.getOptions(),n=e.environment,r=e.release,i=e.dist,o=e.maxValueLength,a=void 0===o?250:o;"environment"in t||(t.environment="environment"in e?n:"production"),void 0===t.release&&void 0!==r&&(t.release=r),void 0===t.dist&&void 0!==i&&(t.dist=i),t.message&&(t.message=(0,_u.$G)(t.message,a));var s=t.exception&&t.exception.values&&t.exception.values[0];s&&s.value&&(s.value=(0,_u.$G)(s.value,a));var c=t.request;c&&c.url&&(c.url=(0,_u.$G)(c.url,a))},t.prototype._applyIntegrationsMetadata=function(t){var e=t.sdk,n=Object.keys(this._integrations);e&&n.length>0&&(e.integrations=n)},t.prototype._sendEvent=function(t){this._getBackend().sendEvent(t)},t.prototype._captureEvent=function(t,e,n){return this._processEvent(t,e,n).then((function(t){return t.event_id}),(function(t){Kc.k.error(t)}))},t.prototype._processEvent=function(t,e,n){var r=this,i=this.getOptions(),o=i.beforeSend,a=i.sampleRate;if(!this._isEnabled())return Xc.reject(new Hu("SDK not enabled, will not send event."));var s="transaction"===t.type;return!s&&"number"==typeof a&&Math.random()>a?Xc.reject(new Hu("Discarding event because it's not included in the random sample (sampling rate = "+a+")")):this._prepareEvent(t,n,e).then((function(t){if(null===t)throw new Hu("An event processor returned null, will not send event.");if(e&&e.data&&!0===e.data.__sentry__||s||!o)return t;var n=o(t,e);if(void 0===n)throw new Hu("`beforeSend` method has to return `null` or a valid event.");return(0,Yc.J8)(n)?n.then((function(t){return t}),(function(t){throw new Hu("beforeSend rejected with "+t)})):n})).then((function(t){if(null===t)throw new Hu("`beforeSend` returned `null`, will not send event.");var e=n&&n.getSession&&n.getSession();return!s&&e&&r._updateSessionFromEvent(e,t),r._sendEvent(t),t})).then(null,(function(t){if(t instanceof Hu)throw t;throw r.captureException(t,{data:{__sentry__:!0},originalException:t}),new Hu("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: "+t)}))},t.prototype._process=function(t){var e=this;this._processing+=1,t.then((function(t){return e._processing-=1,t}),(function(t){return e._processing-=1,t}))},t}();!function(t){t.Unknown="unknown",t.Skipped="skipped",t.Success="success",t.RateLimit="rate_limit",t.Invalid="invalid",t.Failed="failed"}(zu||(zu={})),function(t){t.fromHttpCode=function(e){return e>=200&&e<300?t.Success:429===e?t.RateLimit:e>=400&&e<500?t.Invalid:e>=500?t.Failed:t.Unknown}}(zu||(zu={}));var Ju,Ku=function(){function t(){}return t.prototype.sendEvent=function(t){return Xc.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:zu.Skipped})},t.prototype.close=function(t){return Xc.resolve(!0)},t}(),Gu=function(){function t(t){this._options=t,this._options.dsn||Kc.k.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}return t.prototype.eventFromException=function(t,e){throw new Hu("Backend has to implement `eventFromException` method")},t.prototype.eventFromMessage=function(t,e,n){throw new Hu("Backend has to implement `eventFromMessage` method")},t.prototype.sendEvent=function(t){this._transport.sendEvent(t).then(null,(function(t){Kc.k.error("Error while sending event: "+t)}))},t.prototype.sendSession=function(t){this._transport.sendSession?this._transport.sendSession(t).then(null,(function(t){Kc.k.error("Error while sending session: "+t)})):Kc.k.warn("Dropping session because custom transport doesn't implement sendSession")},t.prototype.getTransport=function(){return this._transport},t.prototype._setupTransport=function(){return new Ku},t}();!function(t){t.Fatal="fatal",t.Error="error",t.Warning="warning",t.Log="log",t.Info="info",t.Debug="debug",t.Critical="critical"}(Ju||(Ju={})),function(t){t.fromString=function(e){switch(e){case"debug":return t.Debug;case"info":return t.Info;case"warn":case"warning":return t.Warning;case"error":return t.Error;case"fatal":return t.Fatal;case"critical":return t.Critical;case"log":default:return t.Log}}}(Ju||(Ju={}));var Yu="?",Xu=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,Zu=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i,Qu=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,tl=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,el=/\((\S*)(?::(\d+))(?::(\d+))\)/,nl=/Minified React error #\d+;/i;function rl(t){var e=null,n=0;t&&("number"==typeof t.framesToPop?n=t.framesToPop:nl.test(t.message)&&(n=1));try{if(e=function(t){if(!t||!t.stacktrace)return null;for(var e,n=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,r=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i,i=t.stacktrace.split("\n"),o=[],a=0;a<i.length;a+=2){var s=null;(e=n.exec(i[a]))?s={url:e[2],func:e[3],args:[],line:+e[1],column:null}:(e=r.exec(i[a]))&&(s={url:e[6],func:e[3]||e[4],args:e[5]?e[5].split(","):[],line:+e[1],column:+e[2]}),s&&(!s.func&&s.line&&(s.func=Yu),o.push(s))}return o.length?{message:ol(t),name:t.name,stack:o}:null}(t))return il(e,n)}catch(t){}try{if(e=function(t){if(!t||!t.stack)return null;for(var e,n,r,i=[],o=t.stack.split("\n"),a=0;a<o.length;++a){if(n=Xu.exec(o[a])){var s=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(e=el.exec(n[2]))&&(n[2]=e[1],n[3]=e[2],n[4]=e[3]),r={url:n[2]&&0===n[2].indexOf("address at ")?n[2].substr("address at ".length):n[2],func:n[1]||Yu,args:s?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=Qu.exec(o[a]))r={url:n[2],func:n[1]||Yu,args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=Zu.exec(o[a])))continue;n[3]&&n[3].indexOf(" > eval")>-1&&(e=tl.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=e[1],n[4]=e[2],n[5]=""):0!==a||n[5]||void 0===t.columnNumber||(i[0].column=t.columnNumber+1),r={url:n[3],func:n[1]||Yu,args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func=Yu),i.push(r)}return i.length?{message:ol(t),name:t.name,stack:i}:null}(t))return il(e,n)}catch(t){}return{message:ol(t),name:t&&t.name,stack:[],failed:!0}}function il(t,e){try{return(0,Wc.pi)((0,Wc.pi)({},t),{stack:t.stack.slice(e)})}catch(e){return t}}function ol(t){var e=t&&t.message;return e?e.error&&"string"==typeof e.error.message?e.error.message:e:"No error message"}function al(t){var e=cl(t.stack),n={type:t.name,value:t.message};return e&&e.length&&(n.stacktrace={frames:e}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function sl(t){return{exception:{values:[al(t)]}}}function cl(t){if(!t||!t.length)return[];var e=t,n=e[0].func||"",r=e[e.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(e=e.slice(1)),-1!==r.indexOf("sentryWrapped")&&(e=e.slice(0,-1)),e.slice(0,50).map((function(t){return{colno:null===t.column?void 0:t.column,filename:t.url||e[0].url,function:t.func||"?",in_app:!0,lineno:null===t.line?void 0:t.line}})).reverse()}function ul(t,e,n){var r;if(void 0===n&&(n={}),(0,Yc.VW)(t)&&t.error)return sl(rl(t=t.error));if((0,Yc.TX)(t)||(0,Yc.fm)(t)){var i=t,o=i.name||((0,Yc.TX)(i)?"DOMError":"DOMException"),a=i.message?o+": "+i.message:o;return r=ll(a,e,n),(0,Vc.Db)(r,a),"code"in i&&(r.tags=(0,Wc.pi)((0,Wc.pi)({},r.tags),{"DOMException.code":""+i.code})),r}return(0,Yc.VZ)(t)?r=sl(rl(t)):(0,Yc.PO)(t)||(0,Yc.cO)(t)?(r=function(t,e,n){var r={exception:{values:[{type:(0,Yc.cO)(t)?t.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+(0,eu.zf)(t)}]},extra:{__serialized__:(0,eu.Qy)(t)}};if(e){var i=cl(rl(e).stack);r.stacktrace={frames:i}}return r}(t,e,n.rejection),(0,Vc.EG)(r,{synthetic:!0}),r):(r=ll(t,e,n),(0,Vc.Db)(r,""+t,void 0),(0,Vc.EG)(r,{synthetic:!0}),r)}function ll(t,e,n){void 0===n&&(n={});var r={message:t};if(n.attachStacktrace&&e){var i=cl(rl(e).stack);r.stacktrace={frames:i}}return r}function pl(t){if(t.metadata&&t.metadata.sdk){var e=t.metadata.sdk;return{name:e.name,version:e.version}}}function fl(t,e){return e?(t.sdk=t.sdk||{name:e.name,version:e.version},t.sdk.name=t.sdk.name||e.name,t.sdk.version=t.sdk.version||e.version,t.sdk.integrations=(0,Wc.fl)(t.sdk.integrations||[],e.integrations||[]),t.sdk.packages=(0,Wc.fl)(t.sdk.packages||[],e.packages||[]),t):t}function dl(t,e){var n=pl(e);return{body:JSON.stringify((0,Wc.pi)({sent_at:(new Date).toISOString()},n&&{sdk:n}))+"\n"+JSON.stringify({type:"session"})+"\n"+JSON.stringify(t),type:"session",url:e.getEnvelopeEndpointWithUrlEncodedAuth()}}function hl(t,e){var n=pl(e),r=t.type||"event",i="transaction"===r,o=t.debug_meta||{},a=o.transactionSampling,s=(0,Wc._T)(o,["transactionSampling"]),c=a||{},u=c.method,l=c.rate;0===Object.keys(s).length?delete t.debug_meta:t.debug_meta=s;var p={body:JSON.stringify(n?fl(t,e.metadata.sdk):t),type:r,url:i?e.getEnvelopeEndpointWithUrlEncodedAuth():e.getStoreEndpointWithUrlEncodedAuth()};if(i){var f=JSON.stringify((0,Wc.pi)({event_id:t.event_id,sent_at:(new Date).toISOString()},n&&{sdk:n}))+"\n"+JSON.stringify({type:t.type,sample_rates:[{id:u,rate:l}]})+"\n"+p.body;p.body=f}return p}var vl=function(){function t(t,e){void 0===e&&(e={}),this.dsn=t,this._dsnObject=new qu(t),this.metadata=e}return t.prototype.getDsn=function(){return this._dsnObject},t.prototype.getBaseApiEndpoint=function(){var t=this._dsnObject,e=t.protocol?t.protocol+":":"",n=t.port?":"+t.port:"";return e+"//"+t.host+n+(t.path?"/"+t.path:"")+"/api/"},t.prototype.getStoreEndpoint=function(){return this._getIngestEndpoint("store")},t.prototype.getStoreEndpointWithUrlEncodedAuth=function(){return this.getStoreEndpoint()+"?"+this._encodedAuth()},t.prototype.getEnvelopeEndpointWithUrlEncodedAuth=function(){return this._getEnvelopeEndpoint()+"?"+this._encodedAuth()},t.prototype.getStoreEndpointPath=function(){var t=this._dsnObject;return(t.path?"/"+t.path:"")+"/api/"+t.projectId+"/store/"},t.prototype.getRequestHeaders=function(t,e){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_client="+t+"/"+e),r.push("sentry_key="+n.publicKey),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},t.prototype.getReportDialogEndpoint=function(t){void 0===t&&(t={});var e=this._dsnObject,n=this.getBaseApiEndpoint()+"embed/error-page/",r=[];for(var i in r.push("dsn="+e.toString()),t)if("dsn"!==i)if("user"===i){if(!t.user)continue;t.user.name&&r.push("name="+encodeURIComponent(t.user.name)),t.user.email&&r.push("email="+encodeURIComponent(t.user.email))}else r.push(encodeURIComponent(i)+"="+encodeURIComponent(t[i]));return r.length?n+"?"+r.join("&"):n},t.prototype._getEnvelopeEndpoint=function(){return this._getIngestEndpoint("envelope")},t.prototype._getIngestEndpoint=function(t){return""+this.getBaseApiEndpoint()+this._dsnObject.projectId+"/"+t+"/"},t.prototype._encodedAuth=function(){var t={sentry_key:this._dsnObject.publicKey,sentry_version:"7"};return(0,eu._j)(t)},t}(),ml=function(){function t(t){this._limit=t,this._buffer=[]}return t.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},t.prototype.add=function(t){var e=this;return this.isReady()?(-1===this._buffer.indexOf(t)&&this._buffer.push(t),t.then((function(){return e.remove(t)})).then(null,(function(){return e.remove(t).then(null,(function(){}))})),t):Xc.reject(new Hu("Not adding Promise due to buffer limit reached."))},t.prototype.remove=function(t){return this._buffer.splice(this._buffer.indexOf(t),1)[0]},t.prototype.length=function(){return this._buffer.length},t.prototype.drain=function(t){var e=this;return new Xc((function(n){var r=setTimeout((function(){t&&t>0&&n(!1)}),t);Xc.all(e._buffer).then((function(){clearTimeout(r),n(!0)})).then(null,(function(){n(!0)}))}))},t}(),yl=function(){function t(t){this.options=t,this._buffer=new ml(30),this._rateLimits={},this._api=new vl(t.dsn,t._metadata),this.url=this._api.getStoreEndpointWithUrlEncodedAuth()}return t.prototype.sendEvent=function(t){throw new Hu("Transport Class has to implement `sendEvent` method")},t.prototype.close=function(t){return this._buffer.drain(t)},t.prototype._handleResponse=function(t){var e=t.requestType,n=t.response,r=t.headers,i=t.resolve,o=t.reject,a=zu.fromHttpCode(n.status);this._handleRateLimit(r)&&Kc.k.warn("Too many requests, backing off until: "+this._disabledUntil(e)),a!==zu.Success?o(n):i({status:a})},t.prototype._disabledUntil=function(t){return this._rateLimits[t]||this._rateLimits.all},t.prototype._isRateLimited=function(t){return this._disabledUntil(t)>new Date(Date.now())},t.prototype._handleRateLimit=function(t){var e,n,r,i,o=Date.now(),a=t["x-sentry-rate-limits"],s=t["retry-after"];if(a){try{for(var c=(0,Wc.XA)(a.trim().split(",")),u=c.next();!u.done;u=c.next()){var l=u.value.split(":",2),p=parseInt(l[0],10),f=1e3*(isNaN(p)?60:p);try{for(var d=(r=void 0,(0,Wc.XA)(l[1].split(";"))),h=d.next();!h.done;h=d.next()){var v=h.value;this._rateLimits[v||"all"]=new Date(o+f)}}catch(t){r={error:t}}finally{try{h&&!h.done&&(i=d.return)&&i.call(d)}finally{if(r)throw r.error}}}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(e)throw e.error}}return!0}return!!s&&(this._rateLimits.all=new Date(o+(0,Vc.JY)(o,s)),!0)},t}(),gl=(0,Vc.Rf)(),_l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,Wc.ZT)(e,t),e.prototype.sendEvent=function(t){return this._sendRequest(hl(t,this._api),t)},e.prototype.sendSession=function(t){return this._sendRequest(dl(t,this._api),t)},e.prototype._sendRequest=function(t,e){var n=this;if(this._isRateLimited(t.type))return Promise.reject({event:e,type:t.type,reason:"Transport locked till "+this._disabledUntil(t.type)+" due to too many requests.",status:429});var r={body:t.body,method:"POST",referrerPolicy:Ou()?"origin":""};return void 0!==this.options.fetchParameters&&Object.assign(r,this.options.fetchParameters),void 0!==this.options.headers&&(r.headers=this.options.headers),this._buffer.add(new Xc((function(e,i){gl.fetch(t.url,r).then((function(r){var o={"x-sentry-rate-limits":r.headers.get("X-Sentry-Rate-Limits"),"retry-after":r.headers.get("Retry-After")};n._handleResponse({requestType:t.type,response:r,headers:o,resolve:e,reject:i})})).catch(i)})))},e}(yl),bl=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,Wc.ZT)(e,t),e.prototype.sendEvent=function(t){return this._sendRequest(hl(t,this._api),t)},e.prototype.sendSession=function(t){return this._sendRequest(dl(t,this._api),t)},e.prototype._sendRequest=function(t,e){var n=this;return this._isRateLimited(t.type)?Promise.reject({event:e,type:t.type,reason:"Transport locked till "+this._disabledUntil(t.type)+" due to too many requests.",status:429}):this._buffer.add(new Xc((function(e,r){var i=new XMLHttpRequest;for(var o in i.onreadystatechange=function(){if(4===i.readyState){var o={"x-sentry-rate-limits":i.getResponseHeader("X-Sentry-Rate-Limits"),"retry-after":i.getResponseHeader("Retry-After")};n._handleResponse({requestType:t.type,response:i,headers:o,resolve:e,reject:r})}},i.open("POST",t.url),n.options.headers)n.options.headers.hasOwnProperty(o)&&i.setRequestHeader(o,n.options.headers[o]);i.send(t.body)})))},e}(yl),wl=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,Wc.ZT)(e,t),e.prototype.eventFromException=function(t,e){return function(t,e,n){var r=ul(e,n&&n.syntheticException||void 0,{attachStacktrace:t.attachStacktrace});return(0,Vc.EG)(r,{handled:!0,type:"generic"}),r.level=Ju.Error,n&&n.event_id&&(r.event_id=n.event_id),Xc.resolve(r)}(this._options,t,e)},e.prototype.eventFromMessage=function(t,e,n){return void 0===e&&(e=Ju.Info),function(t,e,n,r){void 0===n&&(n=Ju.Info);var i=ll(e,r&&r.syntheticException||void 0,{attachStacktrace:t.attachStacktrace});return i.level=n,r&&r.event_id&&(i.event_id=r.event_id),Xc.resolve(i)}(this._options,t,e,n)},e.prototype._setupTransport=function(){if(!this._options.dsn)return t.prototype._setupTransport.call(this);var e=(0,Wc.pi)((0,Wc.pi)({},this._options.transportOptions),{dsn:this._options.dsn,_metadata:this._options._metadata});return this._options.transport?new this._options.transport(e):ku()?new _l(e):new bl(e)},e}(Gu),Sl=0;function xl(){return Sl>0}function kl(){Sl+=1,setTimeout((function(){Sl-=1}))}function El(t,e,n){if(void 0===e&&(e={}),"function"!=typeof t)return t;try{if(t.__sentry__)return t;if(t.__sentry_wrapped__)return t.__sentry_wrapped__}catch(e){return t}var r=function(){var r=Array.prototype.slice.call(arguments);try{n&&"function"==typeof n&&n.apply(this,arguments);var i=r.map((function(t){return El(t,e)}));return t.handleEvent?t.handleEvent.apply(this,i):t.apply(this,i)}catch(t){throw kl(),fu((function(n){n.addEventProcessor((function(t){var n=(0,Wc.pi)({},t);return e.mechanism&&((0,Vc.Db)(n,void 0,void 0),(0,Vc.EG)(n,e.mechanism)),n.extra=(0,Wc.pi)((0,Wc.pi)({},n.extra),{arguments:r}),n})),pu(t)})),t}};try{for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=t[i])}catch(t){}t.prototype=t.prototype||{},r.prototype=t.prototype,Object.defineProperty(t,"__sentry_wrapped__",{enumerable:!1,value:r}),Object.defineProperties(r,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:t}});try{Object.getOwnPropertyDescriptor(r,"name").configurable&&Object.defineProperty(r,"name",{get:function(){return t.name}})}catch(t){}return r}var Ol=n(464),Tl=function(){function t(e){this.name=t.id,this._options=(0,Wc.pi)({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},e)}return t.prototype.addSentryBreadcrumb=function(t){this._options.sentry&&au().addBreadcrumb({category:"sentry."+("transaction"===t.type?"transaction":"event"),event_id:t.event_id,level:t.level,message:(0,Vc.jH)(t)},{event:t})},t.prototype.setupOnce=function(){var t=this;this._options.console&&Ru({callback:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t._consoleBreadcrumb.apply(t,(0,Wc.fl)(e))},type:"console"}),this._options.dom&&Ru({callback:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t._domBreadcrumb.apply(t,(0,Wc.fl)(e))},type:"dom"}),this._options.xhr&&Ru({callback:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t._xhrBreadcrumb.apply(t,(0,Wc.fl)(e))},type:"xhr"}),this._options.fetch&&Ru({callback:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t._fetchBreadcrumb.apply(t,(0,Wc.fl)(e))},type:"fetch"}),this._options.history&&Ru({callback:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t._historyBreadcrumb.apply(t,(0,Wc.fl)(e))},type:"history"})},t.prototype._consoleBreadcrumb=function(t){var e={category:"console",data:{arguments:t.args,logger:"console"},level:Ju.fromString(t.level),message:(0,_u.nK)(t.args," ")};if("assert"===t.level){if(!1!==t.args[0])return;e.message="Assertion failed: "+((0,_u.nK)(t.args.slice(1)," ")||"console.assert"),e.data.arguments=t.args.slice(1)}au().addBreadcrumb(e,{input:t.args,level:t.level})},t.prototype._domBreadcrumb=function(t){var e;try{e=t.event.target?(0,Ol.R)(t.event.target):(0,Ol.R)(t.event)}catch(t){e="<unknown>"}0!==e.length&&au().addBreadcrumb({category:"ui."+t.name,message:e},{event:t.event,name:t.name,global:t.global})},t.prototype._xhrBreadcrumb=function(t){if(t.endTimestamp){if(t.xhr.__sentry_own_request__)return;var e=t.xhr.__sentry_xhr__||{},n=e.method,r=e.url,i=e.status_code,o=e.body;au().addBreadcrumb({category:"xhr",data:{method:n,url:r,status_code:i},type:"http"},{xhr:t.xhr,input:o})}},t.prototype._fetchBreadcrumb=function(t){t.endTimestamp&&(t.fetchData.url.match(/sentry_key/)&&"POST"===t.fetchData.method||(t.error?au().addBreadcrumb({category:"fetch",data:t.fetchData,level:Ju.Error,type:"http"},{data:t.error,input:t.args}):au().addBreadcrumb({category:"fetch",data:(0,Wc.pi)((0,Wc.pi)({},t.fetchData),{status_code:t.response.status}),type:"http"},{input:t.args,response:t.response})))},t.prototype._historyBreadcrumb=function(t){var e=(0,Vc.Rf)(),n=t.from,r=t.to,i=(0,Vc.en)(e.location.href),o=(0,Vc.en)(n),a=(0,Vc.en)(r);o.path||(o=i),i.protocol===a.protocol&&i.host===a.host&&(r=a.relative),i.protocol===o.protocol&&i.host===o.host&&(n=o.relative),au().addBreadcrumb({category:"navigation",data:{from:n,to:r}})},t.id="Breadcrumbs",t}(),Cl=function(t){function e(e){return void 0===e&&(e={}),t.call(this,wl,e)||this}return(0,Wc.ZT)(e,t),e.prototype.showReportDialog=function(t){void 0===t&&(t={}),(0,Vc.Rf)().document&&(this._isEnabled()?function(t){if(void 0===t&&(t={}),t.eventId)if(t.dsn){var e=document.createElement("script");e.async=!0,e.src=new vl(t.dsn).getReportDialogEndpoint(t),t.onLoad&&(e.onload=t.onLoad),(document.head||document.body).appendChild(e)}else Kc.k.error("Missing dsn option in showReportDialog call");else Kc.k.error("Missing eventId option in showReportDialog call")}((0,Wc.pi)((0,Wc.pi)({},t),{dsn:t.dsn||this.getDsn()})):Kc.k.error("Trying to call showReportDialog with Sentry Client disabled"))},e.prototype._prepareEvent=function(e,n,r){return e.platform=e.platform||"javascript",t.prototype._prepareEvent.call(this,e,n,r)},e.prototype._sendEvent=function(e){var n=this.getIntegration(Tl);n&&n.addSentryBreadcrumb(e),t.prototype._sendEvent.call(this,e)},e}(Vu),Al=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"],jl=function(){function t(e){this.name=t.id,this._options=(0,Wc.pi)({XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0},e)}return t.prototype.setupOnce=function(){var t=(0,Vc.Rf)();this._options.setTimeout&&(0,eu.hl)(t,"setTimeout",this._wrapTimeFunction.bind(this)),this._options.setInterval&&(0,eu.hl)(t,"setInterval",this._wrapTimeFunction.bind(this)),this._options.requestAnimationFrame&&(0,eu.hl)(t,"requestAnimationFrame",this._wrapRAF.bind(this)),this._options.XMLHttpRequest&&"XMLHttpRequest"in t&&(0,eu.hl)(XMLHttpRequest.prototype,"send",this._wrapXHR.bind(this)),this._options.eventTarget&&(Array.isArray(this._options.eventTarget)?this._options.eventTarget:Al).forEach(this._wrapEventTarget.bind(this))},t.prototype._wrapTimeFunction=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=e[0];return e[0]=El(r,{mechanism:{data:{function:(0,xu.$)(t)},handled:!0,type:"instrument"}}),t.apply(this,e)}},t.prototype._wrapRAF=function(t){return function(e){return t.call(this,El(e,{mechanism:{data:{function:"requestAnimationFrame",handler:(0,xu.$)(t)},handled:!0,type:"instrument"}}))}},t.prototype._wrapEventTarget=function(t){var e=(0,Vc.Rf)(),n=e[t]&&e[t].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&((0,eu.hl)(n,"addEventListener",(function(e){return function(n,r,i){try{"function"==typeof r.handleEvent&&(r.handleEvent=El(r.handleEvent.bind(r),{mechanism:{data:{function:"handleEvent",handler:(0,xu.$)(r),target:t},handled:!0,type:"instrument"}}))}catch(t){}return e.call(this,n,El(r,{mechanism:{data:{function:"addEventListener",handler:(0,xu.$)(r),target:t},handled:!0,type:"instrument"}}),i)}})),(0,eu.hl)(n,"removeEventListener",(function(t){return function(e,n,r){var i,o=n;try{var a=null===(i=o)||void 0===i?void 0:i.__sentry_wrapped__;a&&t.call(this,e,a,r)}catch(t){}return t.call(this,e,o,r)}})))},t.prototype._wrapXHR=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=this,i=["onload","onerror","onprogress","onreadystatechange"];return i.forEach((function(t){t in r&&"function"==typeof r[t]&&(0,eu.hl)(r,t,(function(e){var n={mechanism:{data:{function:t,handler:(0,xu.$)(e)},handled:!0,type:"instrument"}};return e.__sentry_original__&&(n.mechanism.data.handler=(0,xu.$)(e.__sentry_original__)),El(e,n)}))})),t.apply(this,e)}},t.id="TryCatch",t}(),$l=function(){function t(e){this.name=t.id,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=(0,Wc.pi)({onerror:!0,onunhandledrejection:!0},e)}return t.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(Kc.k.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(Kc.k.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},t.prototype._installGlobalOnErrorHandler=function(){var e=this;this._onErrorHandlerInstalled||(Ru({callback:function(n){var r=n.error,i=au(),o=i.getIntegration(t),a=r&&!0===r.__sentry_own_request__;if(o&&!xl()&&!a){var s=i.getClient(),c=(0,Yc.pt)(r)?e._eventFromIncompleteOnError(n.msg,n.url,n.line,n.column):e._enhanceEventWithInitialFrame(ul(r,void 0,{attachStacktrace:s&&s.getOptions().attachStacktrace,rejection:!1}),n.url,n.line,n.column);(0,Vc.EG)(c,{handled:!1,type:"onerror"}),i.captureEvent(c,{originalException:r})}},type:"error"}),this._onErrorHandlerInstalled=!0)},t.prototype._installGlobalOnUnhandledRejectionHandler=function(){var e=this;this._onUnhandledRejectionHandlerInstalled||(Ru({callback:function(n){var r=n;try{"reason"in n?r=n.reason:"detail"in n&&"reason"in n.detail&&(r=n.detail.reason)}catch(t){}var i=au(),o=i.getIntegration(t),a=r&&!0===r.__sentry_own_request__;if(!o||xl()||a)return!0;var s=i.getClient(),c=(0,Yc.pt)(r)?e._eventFromRejectionWithPrimitive(r):ul(r,void 0,{attachStacktrace:s&&s.getOptions().attachStacktrace,rejection:!0});c.level=Ju.Error,(0,Vc.EG)(c,{handled:!1,type:"onunhandledrejection"}),i.captureEvent(c,{originalException:r})},type:"unhandledrejection"}),this._onUnhandledRejectionHandlerInstalled=!0)},t.prototype._eventFromIncompleteOnError=function(t,e,n,r){var i,o=(0,Yc.VW)(t)?t.message:t;if((0,Yc.HD)(o)){var a=o.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);a&&(i=a[1],o=a[2])}var s={exception:{values:[{type:i||"Error",value:o}]}};return this._enhanceEventWithInitialFrame(s,e,n,r)},t.prototype._eventFromRejectionWithPrimitive=function(t){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+String(t)}]}}},t.prototype._enhanceEventWithInitialFrame=function(t,e,n,r){t.exception=t.exception||{},t.exception.values=t.exception.values||[],t.exception.values[0]=t.exception.values[0]||{},t.exception.values[0].stacktrace=t.exception.values[0].stacktrace||{},t.exception.values[0].stacktrace.frames=t.exception.values[0].stacktrace.frames||[];var i=isNaN(parseInt(r,10))?void 0:r,o=isNaN(parseInt(n,10))?void 0:n,a=(0,Yc.HD)(e)&&e.length>0?e:(0,Vc.l4)();return 0===t.exception.values[0].stacktrace.frames.length&&t.exception.values[0].stacktrace.frames.push({colno:i,filename:a,function:"?",in_app:!0,lineno:o}),t},t.id="GlobalHandlers",t}(),Il=function(){function t(e){void 0===e&&(e={}),this.name=t.id,this._key=e.key||"cause",this._limit=e.limit||5}return t.prototype.setupOnce=function(){tu((function(e,n){var r=au().getIntegration(t);return r?r._handler(e,n):e}))},t.prototype._handler=function(t,e){if(!(t.exception&&t.exception.values&&e&&(0,Yc.V9)(e.originalException,Error)))return t;var n=this._walkErrorTree(e.originalException,this._key);return t.exception.values=(0,Wc.fl)(n,t.exception.values),t},t.prototype._walkErrorTree=function(t,e,n){if(void 0===n&&(n=[]),!(0,Yc.V9)(t[e],Error)||n.length+1>=this._limit)return n;var r=al(rl(t[e]));return this._walkErrorTree(t[e],e,(0,Wc.fl)([r],n))},t.id="LinkedErrors",t}(),Rl=(0,Vc.Rf)(),Dl=function(){function t(){this.name=t.id}return t.prototype.setupOnce=function(){tu((function(e){var n,r,i;if(au().getIntegration(t)){if(!Rl.navigator&&!Rl.location&&!Rl.document)return e;var o=(null===(n=e.request)||void 0===n?void 0:n.url)||(null===(r=Rl.location)||void 0===r?void 0:r.href),a=(Rl.document||{}).referrer,s=(Rl.navigator||{}).userAgent,c=(0,Wc.pi)((0,Wc.pi)((0,Wc.pi)({},null===(i=e.request)||void 0===i?void 0:i.headers),a&&{Referer:a}),s&&{"User-Agent":s}),u=(0,Wc.pi)((0,Wc.pi)({},o&&{url:o}),{headers:c});return(0,Wc.pi)((0,Wc.pi)({},e),{request:u})}return e}))},t.id="UserAgent",t}(),Nl=[new wu,new Su,new jl,new Tl,new $l,new Il,new Dl];var Pl=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;var Ml,Ll,Fl={activate:["activated","deactivated"],create:["beforeCreate","created"],destroy:["beforeDestroy","destroyed"],mount:["beforeMount","mounted"],update:["beforeUpdate","updated"]},Ul=/(?:^|[-_/])(\w)/g,Hl="root",Bl="anonymous component",ql=function(){function t(t){var e=this;this._componentsCache={},this._applyTracingHooks=function(t){if(!t.$options.$_sentryPerfHook){t.$options.$_sentryPerfHook=!0;var n=e._getComponentName(t),r=n===Hl,i={},o=function(n){var r=(0,Jc._I)();e._rootSpan?e._finishRootSpan(r):t.$once("hook:"+n,(function(){var t=Wl();t&&(e._rootSpan=t.startChild({description:"Application Render",op:"Vue"}))}))},a=function(r,o){var a=Array.isArray(e._options.tracingOptions.trackComponents)?e._options.tracingOptions.trackComponents.indexOf(n)>-1:e._options.tracingOptions.trackComponents,s=e._rootSpan||Wl();if(s&&a){var c=(0,Jc._I)(),u=i[o];u?(u.finish(),e._finishRootSpan(c)):t.$once("hook:"+r,(function(){s&&(i[o]=s.startChild({description:"Vue <"+n+">",op:o}))}))}};e._options.tracingOptions.hooks.forEach((function(n){var i=Fl[n];i?i.forEach((function(i){var s=r?o.bind(e,i):a.bind(e,i,n),c=t.$options[i];Array.isArray(c)?t.$options[i]=(0,Wc.fl)([s],c):t.$options[i]="function"==typeof c?[s,c]:[s]})):Kc.k.warn("Unknown hook: "+n)}))}},this._options=t}return t.prototype.setup=function(){this._attachErrorHandler(),("tracesSampleRate"in this._options||"tracesSampler"in this._options)&&this._startTracing()},t.prototype._getComponentName=function(t){if(!t)return Bl;if(t.$root===t)return Hl;if(!t.$options)return Bl;if(t.$options.name)return t.$options.name;if(t.$options._componentTag)return t.$options._componentTag;if(t.$options.__file){var e=function(t,e){var n=function(t){var e=Pl.exec(t);return e?e.slice(1):[]}(t)[2];return n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n}(t.$options.__file.replace(/^[a-zA-Z]:/,"").replace(/\\/g,"/"),".vue");return this._componentsCache[e]||(this._componentsCache[e]=e.replace(Ul,(function(t,e){return e?e.toUpperCase():""})))}return Bl},t.prototype._finishRootSpan=function(t){var e=this;this._rootSpanTimer&&clearTimeout(this._rootSpanTimer),this._rootSpanTimer=setTimeout((function(){e._rootSpan&&(e._rootSpan.finish(t),e._rootSpan=void 0)}),this._options.tracingOptions.timeout)},t.prototype._startTracing=function(){var t=this._applyTracingHooks,e=setTimeout((function(){Kc.k.warn("Didn't apply tracing hooks, make sure you call Sentry.init before initialzing Vue!")}),500);this._options.Vue.mixin({beforeCreate:function(){clearTimeout(e),t(this)}})},t.prototype._attachErrorHandler=function(){var t=this,e=this._options.Vue.config.errorHandler;this._options.Vue.config.errorHandler=function(n,r,i){var o={};if(r)try{o.componentName=t._getComponentName(r),t._options.attachProps&&(o.propsData=r.$options.propsData)}catch(t){Kc.k.warn("Unable to extract metadata from Vue component.")}i&&(o.lifecycleHook=i),setTimeout((function(){au().withScope((function(t){t.setContext("vue",o),au().captureException(n)}))})),"function"==typeof e&&e.call(t._options.Vue,n,r,i),t._options.logErrors&&(t._options.Vue.util&&t._options.Vue.util.warn("Error in "+i+': "'+(n&&n.toString())+'"',r),console.error(n))}},t}();function Wl(){var t;return null===(t=au().getScope())||void 0===t?void 0:t.getTransaction()}!function(t){t.Explicit="explicitly_set",t.Sampler="client_sampler",t.Rate="client_rate",t.Inheritance="inheritance"}(Ml||(Ml={})),function(t){t.Ok="ok",t.DeadlineExceeded="deadline_exceeded",t.Unauthenticated="unauthenticated",t.PermissionDenied="permission_denied",t.NotFound="not_found",t.ResourceExhausted="resource_exhausted",t.InvalidArgument="invalid_argument",t.Unimplemented="unimplemented",t.Unavailable="unavailable",t.InternalError="internal_error",t.UnknownError="unknown_error",t.Cancelled="cancelled",t.AlreadyExists="already_exists",t.FailedPrecondition="failed_precondition",t.Aborted="aborted",t.OutOfRange="out_of_range",t.DataLoss="data_loss"}(Ll||(Ll={})),function(t){t.fromHttpCode=function(e){if(e<400)return t.Ok;if(e>=400&&e<500)switch(e){case 401:return t.Unauthenticated;case 403:return t.PermissionDenied;case 404:return t.NotFound;case 409:return t.AlreadyExists;case 413:return t.FailedPrecondition;case 429:return t.ResourceExhausted;default:return t.InvalidArgument}if(e>=500&&e<600)switch(e){case 501:return t.Unimplemented;case 503:return t.Unavailable;case 504:return t.DeadlineExceeded;default:return t.InternalError}return t.UnknownError}}(Ll||(Ll={}));var zl=new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");function Vl(t){return"tracesSampleRate"in t||"tracesSampler"in t}function Jl(t){var e,n;return void 0===t&&(t=au()),null===(n=null===(e=t)||void 0===e?void 0:e.getScope())||void 0===n?void 0:n.getTransaction()}function Kl(t){return t/1e3}function Gl(){var t=Jl();t&&(Kc.k.log("[Tracing] Transaction: "+Ll.InternalError+" -> Global error occured"),t.setStatus(Ll.InternalError))}var Yl=function(){function t(t){void 0===t&&(t=1e3),this.spans=[],this._maxlen=t}return t.prototype.add=function(t){this.spans.length>this._maxlen?t.spanRecorder=void 0:this.spans.push(t)},t}(),Xl=function(t){function e(e,n){var r=t.call(this,e)||this;return r._metadata={},r._measurements={},r._hub=au(),(0,Yc.V9)(n,ru)&&(r._hub=n),r.name=e.name||"",r._trimEnd=e.trimEnd,r.transaction=r,r}return(0,Wc.ZT)(e,t),e.prototype.setName=function(t){this.name=t},e.prototype.initSpanRecorder=function(t){void 0===t&&(t=1e3),this.spanRecorder||(this.spanRecorder=new Yl(t)),this.spanRecorder.add(this)},e.prototype.setMeasurements=function(t){this._measurements=(0,Wc.pi)({},t)},e.prototype.setMetadata=function(t){this._metadata=(0,Wc.pi)((0,Wc.pi)({},this._metadata),t)},e.prototype.finish=function(e){var n=this;if(void 0===this.endTimestamp){if(this.name||(Kc.k.warn("Transaction has no name, falling back to `<unlabeled transaction>`."),this.name="<unlabeled transaction>"),t.prototype.finish.call(this,e),!0===this.sampled){var r=this.spanRecorder?this.spanRecorder.spans.filter((function(t){return t!==n&&t.endTimestamp})):[];this._trimEnd&&r.length>0&&(this.endTimestamp=r.reduce((function(t,e){return t.endTimestamp&&e.endTimestamp?t.endTimestamp>e.endTimestamp?t:e:t})).endTimestamp);var i={contexts:{trace:this.getTraceContext()},spans:r,start_timestamp:this.startTimestamp,tags:this.tags,timestamp:this.endTimestamp,transaction:this.name,type:"transaction",debug_meta:this._metadata};return Object.keys(this._measurements).length>0&&(Kc.k.log("[Measurements] Adding measurements to transaction",JSON.stringify(this._measurements,void 0,2)),i.measurements=this._measurements),this._hub.captureEvent(i)}Kc.k.log("[Tracing] Discarding transaction because its trace was not chosen to be sampled.")}},e.prototype.toContext=function(){var e=t.prototype.toContext.call(this);return(0,eu.Jr)((0,Wc.pi)((0,Wc.pi)({},e),{name:this.name,trimEnd:this._trimEnd}))},e.prototype.updateWithContext=function(e){var n;return t.prototype.updateWithContext.call(this,e),this.name=null!=(n=e.name)?n:"",this._trimEnd=e.trimEnd,this},e}(function(){function t(t){if(this.traceId=(0,Vc.DM)(),this.spanId=(0,Vc.DM)().substring(16),this.startTimestamp=(0,Jc._I)(),this.tags={},this.data={},!t)return this;t.traceId&&(this.traceId=t.traceId),t.spanId&&(this.spanId=t.spanId),t.parentSpanId&&(this.parentSpanId=t.parentSpanId),"sampled"in t&&(this.sampled=t.sampled),t.op&&(this.op=t.op),t.description&&(this.description=t.description),t.data&&(this.data=t.data),t.tags&&(this.tags=t.tags),t.status&&(this.status=t.status),t.startTimestamp&&(this.startTimestamp=t.startTimestamp),t.endTimestamp&&(this.endTimestamp=t.endTimestamp)}return t.prototype.child=function(t){return this.startChild(t)},t.prototype.startChild=function(e){var n=new t((0,Wc.pi)((0,Wc.pi)({},e),{parentSpanId:this.spanId,sampled:this.sampled,traceId:this.traceId}));return n.spanRecorder=this.spanRecorder,n.spanRecorder&&n.spanRecorder.add(n),n.transaction=this.transaction,n},t.prototype.setTag=function(t,e){var n;return this.tags=(0,Wc.pi)((0,Wc.pi)({},this.tags),((n={})[t]=e,n)),this},t.prototype.setData=function(t,e){var n;return this.data=(0,Wc.pi)((0,Wc.pi)({},this.data),((n={})[t]=e,n)),this},t.prototype.setStatus=function(t){return this.status=t,this},t.prototype.setHttpStatus=function(t){this.setTag("http.status_code",String(t));var e=Ll.fromHttpCode(t);return e!==Ll.UnknownError&&this.setStatus(e),this},t.prototype.isSuccess=function(){return this.status===Ll.Ok},t.prototype.finish=function(t){this.endTimestamp="number"==typeof t?t:(0,Jc._I)()},t.prototype.toTraceparent=function(){var t="";return void 0!==this.sampled&&(t=this.sampled?"-1":"-0"),this.traceId+"-"+this.spanId+t},t.prototype.toContext=function(){return(0,eu.Jr)({data:this.data,description:this.description,endTimestamp:this.endTimestamp,op:this.op,parentSpanId:this.parentSpanId,sampled:this.sampled,spanId:this.spanId,startTimestamp:this.startTimestamp,status:this.status,tags:this.tags,traceId:this.traceId})},t.prototype.updateWithContext=function(t){var e,n,r,i,o;return this.data=null!=(e=t.data)?e:{},this.description=t.description,this.endTimestamp=t.endTimestamp,this.op=t.op,this.parentSpanId=t.parentSpanId,this.sampled=t.sampled,this.spanId=null!=(n=t.spanId)?n:this.spanId,this.startTimestamp=null!=(r=t.startTimestamp)?r:this.startTimestamp,this.status=t.status,this.tags=null!=(i=t.tags)?i:{},this.traceId=null!=(o=t.traceId)?o:this.traceId,this},t.prototype.getTraceContext=function(){return(0,eu.Jr)({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,trace_id:this.traceId})},t.prototype.toJSON=function(){return(0,eu.Jr)({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,start_timestamp:this.startTimestamp,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,timestamp:this.endTimestamp,trace_id:this.traceId})},t}()),Zl=function(t){function e(e,n,r,i){void 0===r&&(r="");var o=t.call(this,i)||this;return o._pushActivity=e,o._popActivity=n,o.transactionSpanId=r,o}return(0,Wc.ZT)(e,t),e.prototype.add=function(e){var n=this;e.spanId!==this.transactionSpanId&&(e.finish=function(t){e.endTimestamp="number"==typeof t?t:(0,Jc._I)(),n._popActivity(e.spanId)},void 0===e.endTimestamp&&this._pushActivity(e.spanId)),t.prototype.add.call(this,e)},e}(Yl),Ql=function(t){function e(e,n,r,i){void 0===r&&(r=1e3),void 0===i&&(i=!1);var o=t.call(this,e,n)||this;return o._idleHub=n,o._idleTimeout=r,o._onScope=i,o.activities={},o._heartbeatTimer=0,o._heartbeatCounter=0,o._finished=!1,o._beforeFinishCallbacks=[],n&&i&&(tp(n),Kc.k.log("Setting idle transaction on scope. Span ID: "+o.spanId),n.configureScope((function(t){return t.setSpan(o)}))),o._initTimeout=setTimeout((function(){o._finished||o.finish()}),o._idleTimeout),o}return(0,Wc.ZT)(e,t),e.prototype.finish=function(e){var n,r,i=this;if(void 0===e&&(e=(0,Jc._I)()),this._finished=!0,this.activities={},this.spanRecorder){Kc.k.log("[Tracing] finishing IdleTransaction",new Date(1e3*e).toISOString(),this.op);try{for(var o=(0,Wc.XA)(this._beforeFinishCallbacks),a=o.next();!a.done;a=o.next())(0,a.value)(this,e)}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.spanRecorder.spans=this.spanRecorder.spans.filter((function(t){if(t.spanId===i.spanId)return!0;t.endTimestamp||(t.endTimestamp=e,t.setStatus(Ll.Cancelled),Kc.k.log("[Tracing] cancelling span since transaction ended early",JSON.stringify(t,void 0,2)));var n=t.startTimestamp<e;return n||Kc.k.log("[Tracing] discarding Span since it happened after Transaction was finished",JSON.stringify(t,void 0,2)),n})),Kc.k.log("[Tracing] flushing IdleTransaction")}else Kc.k.log("[Tracing] No active IdleTransaction");return this._onScope&&tp(this._idleHub),t.prototype.finish.call(this,e)},e.prototype.registerBeforeFinishCallback=function(t){this._beforeFinishCallbacks.push(t)},e.prototype.initSpanRecorder=function(t){var e=this;this.spanRecorder||(this.spanRecorder=new Zl((function(t){e._finished||e._pushActivity(t)}),(function(t){e._finished||e._popActivity(t)}),this.spanId,t),Kc.k.log("Starting heartbeat"),this._pingHeartbeat()),this.spanRecorder.add(this)},e.prototype._pushActivity=function(t){this._initTimeout&&(clearTimeout(this._initTimeout),this._initTimeout=void 0),Kc.k.log("[Tracing] pushActivity: "+t),this.activities[t]=!0,Kc.k.log("[Tracing] new activities count",Object.keys(this.activities).length)},e.prototype._popActivity=function(t){var e=this;if(this.activities[t]&&(Kc.k.log("[Tracing] popActivity "+t),delete this.activities[t],Kc.k.log("[Tracing] new activities count",Object.keys(this.activities).length)),0===Object.keys(this.activities).length){var n=this._idleTimeout,r=(0,Jc._I)()+n/1e3;setTimeout((function(){e._finished||e.finish(r)}),n)}},e.prototype._beat=function(){if(clearTimeout(this._heartbeatTimer),!this._finished){var t=Object.keys(this.activities),e=t.length?t.reduce((function(t,e){return t+e})):"";e===this._prevHeartbeatString?this._heartbeatCounter+=1:this._heartbeatCounter=1,this._prevHeartbeatString=e,this._heartbeatCounter>=3?(Kc.k.log("[Tracing] Transaction finished because of no change for 3 heart beats"),this.setStatus(Ll.DeadlineExceeded),this.setTag("heartbeat","failed"),this.finish()):this._pingHeartbeat()}},e.prototype._pingHeartbeat=function(){var t=this;Kc.k.log("pinging Heartbeat -> current counter: "+this._heartbeatCounter),this._heartbeatTimer=setTimeout((function(){t._beat()}),5e3)},e}(Xl);function tp(t){if(t){var e=t.getScope();e&&e.getTransaction()&&e.setSpan(void 0)}}function ep(t,e,n){var r,i,o,a=t.getClient(),s=a&&a.getOptions()||{};return a&&Vl(s)?void 0!==e.sampled?(e.setMetadata({transactionSampling:{method:Ml.Explicit}}),e):("function"==typeof s.tracesSampler?(i=s.tracesSampler(n),e.setMetadata({transactionSampling:{method:Ml.Sampler,rate:Number(i)}})):void 0!==n.parentSampled?(i=n.parentSampled,e.setMetadata({transactionSampling:{method:Ml.Inheritance}})):(i=s.tracesSampleRate,e.setMetadata({transactionSampling:{method:Ml.Rate,rate:Number(i)}})),o=i,(isNaN(o)||"number"!=typeof o&&"boolean"!=typeof o?(Kc.k.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got "+JSON.stringify(o)+" of type "+JSON.stringify(typeof o)+"."),0):!(o<0||o>1)||(Kc.k.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got "+o+"."),0))?i?(e.sampled=Math.random()<i,e.sampled?(e.initSpanRecorder(null===(r=s._experiments)||void 0===r?void 0:r.maxSpans),Kc.k.log("[Tracing] starting "+e.op+" transaction - "+e.name),e):(Kc.k.log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = "+Number(i)+")"),e)):(Kc.k.log("[Tracing] Discarding transaction because "+("function"==typeof s.tracesSampler?"tracesSampler returned 0 or false":"a negative sampling decision was inherited or tracesSampleRate is set to 0")),e.sampled=!1,e):(Kc.k.warn("[Tracing] Discarding transaction because of invalid sample rate."),e.sampled=!1,e)):(e.sampled=!1,e)}var np,rp,ip=(0,Vc.Rf)(),op=function(t,e,n,r){var i;return function(){n&&e.isFinal&&n.disconnect(),e.value>=0&&(r||e.isFinal||"hidden"===document.visibilityState)&&(e.delta=e.value-(i||0),(e.delta||e.isFinal||void 0===i)&&(t(e),i=e.value))}},ap=function(t,e){return void 0===e&&(e=-1),{name:t,value:e,delta:0,entries:[],id:Date.now()+"-"+(Math.floor(8999999999999*Math.random())+1e12),isFinal:!1}},sp=function(t,e){try{if(PerformanceObserver.supportedEntryTypes.includes(t)){var n=new PerformanceObserver((function(t){return t.getEntries().map(e)}));return n.observe({type:t,buffered:!0}),n}}catch(t){}},cp=!1,up=!1,lp=function(t){cp=!t.persisted},pp=function(t,e){void 0===e&&(e=!1),up||(addEventListener("pagehide",lp),addEventListener("beforeunload",(function(){})),up=!0),addEventListener("visibilitychange",(function(e){var n=e.timeStamp;"hidden"===document.visibilityState&&t({timeStamp:n,isUnloading:cp})}),{capture:!0,once:e})},fp=function(){return void 0===np&&(np="hidden"===document.visibilityState?0:1/0,pp((function(t){var e=t.timeStamp;return np=e}),!0)),{get timeStamp(){return np}}},dp=(0,Vc.Rf)(),hp=(0,Vc.Rf)(),vp=function(){function t(){this._measurements={},this._performanceCursor=0,hp&&hp.performance&&(hp.performance.mark&&hp.performance.mark("sentry-tracing-init"),this._trackCLS(),this._trackLCP(),this._trackFID(),this._trackTTFB())}return t.prototype.addPerformanceEntries=function(t){var e=this;if(hp&&hp.performance&&hp.performance.getEntries&&Jc.Z1){Kc.k.log("[Tracing] Adding & adjusting spans using Performance API");var n,r,i,o=Kl(Jc.Z1);if(hp.document)for(var a=0;a<document.scripts.length;a++)if("true"===document.scripts[a].dataset.entry){n=document.scripts[a].src;break}if(hp.performance.getEntries().slice(this._performanceCursor).forEach((function(a){var s=Kl(a.startTime),c=Kl(a.duration);if(!("navigation"===t.op&&o+s<t.startTimestamp))switch(a.entryType){case"navigation":!function(t,e,n){mp(t,e,"unloadEvent",n),mp(t,e,"redirect",n),mp(t,e,"domContentLoadedEvent",n),mp(t,e,"loadEvent",n),mp(t,e,"connect",n),mp(t,e,"secureConnection",n,"connectEnd"),mp(t,e,"fetch",n,"domainLookupStart"),mp(t,e,"domainLookup",n),function(t,e,n){yp(t,{op:"browser",description:"request",startTimestamp:n+Kl(e.requestStart),endTimestamp:n+Kl(e.responseEnd)}),yp(t,{op:"browser",description:"response",startTimestamp:n+Kl(e.responseStart),endTimestamp:n+Kl(e.responseEnd)})}(t,e,n)}(t,a,o);break;case"mark":case"paint":case"measure":var u=function(t,e,n,r,i){var o=i+n,a=o+r;return yp(t,{description:e.name,endTimestamp:a,op:e.entryType,startTimestamp:o}),o}(t,a,s,c,o);void 0===i&&"sentry-tracing-init"===a.name&&(i=u);var l=fp(),p=a.startTime<l.timeStamp;"first-paint"===a.name&&p&&(Kc.k.log("[Measurements] Adding FP"),e._measurements.fp={value:a.startTime},e._measurements["mark.fp"]={value:u}),"first-contentful-paint"===a.name&&p&&(Kc.k.log("[Measurements] Adding FCP"),e._measurements.fcp={value:a.startTime},e._measurements["mark.fcp"]={value:u});break;case"resource":var f=a.name.replace(window.location.origin,""),d=function(t,e,n,r,i,o){if("xmlhttprequest"!==e.initiatorType&&"fetch"!==e.initiatorType){var a={};"transferSize"in e&&(a["Transfer Size"]=e.transferSize),"encodedBodySize"in e&&(a["Encoded Body Size"]=e.encodedBodySize),"decodedBodySize"in e&&(a["Decoded Body Size"]=e.decodedBodySize);var s=o+r,c=s+i;return yp(t,{description:n,endTimestamp:c,op:e.initiatorType?"resource."+e.initiatorType:"resource",startTimestamp:s,data:a}),c}}(t,a,f,s,c,o);void 0===r&&(n||"").indexOf(f)>-1&&(r=d)}})),void 0!==r&&void 0!==i&&yp(t,{description:"evaluation",endTimestamp:i,op:"script",startTimestamp:r}),this._performanceCursor=Math.max(performance.getEntries().length-1,0),this._trackNavigator(t),"pageload"===t.op){var s=Kl(Jc.Z1);["fcp","fp","lcp","ttfb"].forEach((function(n){if(e._measurements[n]&&!(s>=t.startTimestamp)){var r=e._measurements[n].value,i=s+Kl(r),o=Math.abs(1e3*(i-t.startTimestamp)),a=o-r;Kc.k.log("[Measurements] Normalized "+n+" from "+r+" to "+o+" ("+a+")"),e._measurements[n].value=o}})),this._measurements["mark.fid"]&&this._measurements.fid&&yp(t,{description:"first input delay",endTimestamp:this._measurements["mark.fid"].value+Kl(this._measurements.fid.value),op:"web.vitals",startTimestamp:this._measurements["mark.fid"].value}),t.setMeasurements(this._measurements)}}},t.prototype._trackCLS=function(){var t=this;!function(e,n){void 0===n&&(n=!1);var r,i=ap("CLS",0),o=function(t){t.hadRecentInput||(i.value+=t.value,i.entries.push(t),r())},a=sp("layout-shift",o);a&&(r=op((function(e){e.entries.pop()&&(Kc.k.log("[Measurements] Adding CLS"),t._measurements.cls={value:e.value})}),i,a,n),pp((function(t){var e=t.isUnloading;a.takeRecords().map(o),e&&(i.isFinal=!0),r()})))}()},t.prototype._trackNavigator=function(t){var e=hp.navigator;if(e){var n=e.connection;n&&(n.effectiveType&&t.setTag("effectiveConnectionType",n.effectiveType),n.type&&t.setTag("connectionType",n.type),gp(n.rtt)&&(this._measurements["connection.rtt"]={value:n.rtt}),gp(n.downlink)&&(this._measurements["connection.downlink"]={value:n.downlink})),gp(e.deviceMemory)&&t.setTag("deviceMemory",String(e.deviceMemory)),gp(e.hardwareConcurrency)&&t.setTag("hardwareConcurrency",String(e.hardwareConcurrency))}},t.prototype._trackLCP=function(){var t=this;!function(t,e){void 0===e&&(e=!1);var n,r=ap("LCP"),i=fp(),o=function(t){var e=t.startTime;e<i.timeStamp?(r.value=e,r.entries.push(t)):r.isFinal=!0,n()},a=sp("largest-contentful-paint",o);if(a){n=op(t,r,a,e);var s=function(){r.isFinal||(a.takeRecords().map(o),r.isFinal=!0,n())};(rp||(rp=new Promise((function(t){return["scroll","keydown","pointerdown"].map((function(e){addEventListener(e,t,{once:!0,passive:!0,capture:!0})}))}))),rp).then(s),pp(s,!0)}}((function(e){var n=e.entries.pop();if(n){var r=Kl(performance.timeOrigin),i=Kl(n.startTime);Kc.k.log("[Measurements] Adding LCP"),t._measurements.lcp={value:e.value},t._measurements["mark.lcp"]={value:r+i}}}))},t.prototype._trackFID=function(){var t,e,n,r,i,o,a=this;t=function(t){var e=t.entries.pop();if(e){var n=Kl(performance.timeOrigin),r=Kl(e.startTime);Kc.k.log("[Measurements] Adding FID"),a._measurements.fid={value:t.value},a._measurements["mark.fid"]={value:n+r}}},e=ap("FID"),n=fp(),i=sp("first-input",r=function(t){t.startTime<n.timeStamp&&(e.value=t.processingStart-t.startTime,e.entries.push(t),e.isFinal=!0,o())}),o=op(t,e,i),i?pp((function(){i.takeRecords().map(r),i.disconnect()}),!0):window.perfMetrics&&window.perfMetrics.onFirstInputDelay&&window.perfMetrics.onFirstInputDelay((function(t,r){r.timeStamp<n.timeStamp&&(e.value=t,e.isFinal=!0,e.entries=[{entryType:"first-input",name:r.type,target:r.target,cancelable:r.cancelable,startTime:r.timeStamp,processingStart:r.timeStamp+t}],o())}))},t.prototype._trackTTFB=function(){var t,e,n,r=this;t=function(t){var e,n=t.entries.pop();if(n){Kc.k.log("[Measurements] Adding TTFB"),r._measurements.ttfb={value:t.value};var i=t.value-(e=t.entries[0],null!=e?e:n).requestStart;r._measurements["ttfb.requestTime"]={value:i}}},n=ap("TTFB"),e=function(){try{var e=dp.performance.getEntriesByType("navigation")[0]||function(){var t=dp.performance.timing,e={entryType:"navigation",startTime:0};for(var n in t)"navigationStart"!==n&&"toJSON"!==n&&(e[n]=Math.max(t[n]-t.navigationStart,0));return e}();n.value=n.delta=e.responseStart,n.entries=[e],t(n)}catch(t){}},"complete"===document.readyState?setTimeout(e,0):addEventListener("pageshow",e)},t}();function mp(t,e,n,r,i){var o=i?e[i]:e[n+"End"],a=e[n+"Start"];a&&o&&yp(t,{op:"browser",description:n,startTimestamp:r+Kl(a),endTimestamp:r+Kl(o)})}function yp(t,e){var n=e.startTimestamp,r=(0,Wc._T)(e,["startTimestamp"]);return n&&t.startTimestamp>n&&(t.startTimestamp=n),t.startChild((0,Wc.pi)({startTimestamp:n},r))}function gp(t){return"number"==typeof t&&isFinite(t)}var _p={traceFetch:!0,traceXHR:!0,tracingOrigins:["localhost",/^\//]};var bp=(0,Vc.Rf)(),wp=(0,Wc.pi)({idleTimeout:1e3,markBackgroundTransactions:!0,maxTransactionDuration:600,routingInstrumentation:function(t,e,n){if(void 0===e&&(e=!0),void 0===n&&(n=!0),bp&&bp.location){var r,i=bp.location.href;e&&(r=t({name:bp.location.pathname,op:"pageload"})),n&&Ru({callback:function(e){var n=e.to,o=e.from;void 0===o&&i&&-1!==i.indexOf(n)?i=void 0:o!==n&&(i=void 0,r&&(Kc.k.log("[Tracing] Finishing current transaction with op: "+r.op),r.finish()),r=t({name:bp.location.pathname,op:"navigation"}))},type:"history"})}else Kc.k.warn("Could not initialize routing instrumentation due to invalid location")},startTransactionOnLocationChange:!0,startTransactionOnPageLoad:!0},_p),Sp=function(){function t(e){this.name=t.id,this._metrics=new vp,this._emitOptionsWarning=!1;var n=_p.tracingOrigins;e&&e.tracingOrigins&&Array.isArray(e.tracingOrigins)&&0!==e.tracingOrigins.length?n=e.tracingOrigins:this._emitOptionsWarning=!0,this.options=(0,Wc.pi)((0,Wc.pi)((0,Wc.pi)({},wp),e),{tracingOrigins:n})}return t.prototype.setupOnce=function(t,e){var n=this;this._getCurrentHub=e,this._emitOptionsWarning&&(Kc.k.warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace."),Kc.k.warn("[Tracing] We added a reasonable default for you: "+_p.tracingOrigins));var r=this.options,i=r.routingInstrumentation,o=r.startTransactionOnLocationChange,a=r.startTransactionOnPageLoad,s=r.markBackgroundTransactions,c=r.traceFetch,u=r.traceXHR,l=r.tracingOrigins,p=r.shouldCreateSpanForRequest;i((function(t){return n._createRouteTransaction(t)}),a,o),s&&(ip&&ip.document?ip.document.addEventListener("visibilitychange",(function(){var t=Jl();ip.document.hidden&&t&&(Kc.k.log("[Tracing] Transaction: "+Ll.Cancelled+" -> since tab moved to the background, op: "+t.op),t.status||t.setStatus(Ll.Cancelled),t.setTag("visibilitychange","document.hidden"),t.finish())})):Kc.k.warn("[Tracing] Could not set up background tab detection due to lack of global document")),function(t){var e=(0,Wc.pi)((0,Wc.pi)({},_p),t),n=e.traceFetch,r=e.traceXHR,i=e.tracingOrigins,o=e.shouldCreateSpanForRequest,a={},s=function(t){if(a[t])return a[t];var e=i;return a[t]=e.some((function(e){return(0,_u.zC)(t,e)}))&&!(0,_u.zC)(t,"sentry_key"),a[t]},c=s;"function"==typeof o&&(c=function(t){return s(t)&&o(t)});var u={};n&&Ru({callback:function(t){!function(t,e,n){var r,i=null===(r=au().getClient())||void 0===r?void 0:r.getOptions();if(i&&Vl(i)&&t.fetchData&&e(t.fetchData.url))if(t.endTimestamp&&t.fetchData.__span){if(s=n[t.fetchData.__span]){var o=t.response;o&&s.setHttpStatus(o.status),s.finish(),delete n[t.fetchData.__span]}}else{var a=Jl();if(a){var s=a.startChild({data:(0,Wc.pi)((0,Wc.pi)({},t.fetchData),{type:"fetch"}),description:t.fetchData.method+" "+t.fetchData.url,op:"http"});t.fetchData.__span=s.spanId,n[s.spanId]=s;var c=t.args[0]=t.args[0],u=t.args[1]=t.args[1]||{},l=u.headers;(0,Yc.V9)(c,Request)&&(l=c.headers),l?"function"==typeof l.append?l.append("sentry-trace",s.toTraceparent()):l=Array.isArray(l)?(0,Wc.fl)(l,[["sentry-trace",s.toTraceparent()]]):(0,Wc.pi)((0,Wc.pi)({},l),{"sentry-trace":s.toTraceparent()}):l={"sentry-trace":s.toTraceparent()},u.headers=l}}}(t,c,u)},type:"fetch"}),r&&Ru({callback:function(t){!function(t,e,n){var r,i=null===(r=au().getClient())||void 0===r?void 0:r.getOptions();if(i&&Vl(i)&&t.xhr&&t.xhr.__sentry_xhr__&&e(t.xhr.__sentry_xhr__.url)&&!t.xhr.__sentry_own_request__){var o=t.xhr.__sentry_xhr__;if(t.endTimestamp&&t.xhr.__sentry_xhr_span_id__)(s=n[t.xhr.__sentry_xhr_span_id__])&&(s.setHttpStatus(o.status_code),s.finish(),delete n[t.xhr.__sentry_xhr_span_id__]);else{var a=Jl();if(a){var s=a.startChild({data:(0,Wc.pi)((0,Wc.pi)({},o.data),{type:"xhr",method:o.method,url:o.url}),description:o.method+" "+o.url,op:"http"});if(t.xhr.__sentry_xhr_span_id__=s.spanId,n[t.xhr.__sentry_xhr_span_id__]=s,t.xhr.setRequestHeader)try{t.xhr.setRequestHeader("sentry-trace",s.toTraceparent())}catch(t){}}}}}(t,c,u)},type:"xhr"})}({traceFetch:c,traceXHR:u,tracingOrigins:l,shouldCreateSpanForRequest:p})},t.prototype._createRouteTransaction=function(t){var e=this;if(this._getCurrentHub){var n=this.options,r=n.beforeNavigate,i=n.idleTimeout,o=n.maxTransactionDuration,a="pageload"===t.op?function(){var t,e=("sentry-trace",(t=document.querySelector("meta[name=sentry-trace]"))?t.getAttribute("content"):null);if(e)return function(t){var e=t.match(zl);if(e){var n=void 0;return"1"===e[3]?n=!0:"0"===e[3]&&(n=!1),{traceId:e[1],parentSampled:n,parentSpanId:e[2]}}}(e)}():void 0,s=(0,Wc.pi)((0,Wc.pi)((0,Wc.pi)({},t),a),{trimEnd:!0}),c="function"==typeof r?r(s):s,u=void 0===c?(0,Wc.pi)((0,Wc.pi)({},s),{sampled:!1}):c;!1===u.sampled&&Kc.k.log("[Tracing] Will not send "+u.op+" transaction because of beforeNavigate."),Kc.k.log("[Tracing] Starting "+u.op+" transaction on scope");var l=function(t,e,n,r,i){return ep(t,new Ql(e,t,n,!0),(0,Wc.pi)({parentSampled:e.parentSampled,transactionContext:e},i))}(this._getCurrentHub(),u,i,0,{location:(0,Vc.Rf)().location});return l.registerBeforeFinishCallback((function(t,n){e._metrics.addPerformanceEntries(t),function(t,e,n){var r=n-e.startTimestamp;n&&(r>t||r<0)&&(e.setStatus(Ll.DeadlineExceeded),e.setTag("maxTransactionDurationExceeded","true"))}(function(t){return 1e3*t}(o),t,n)})),l}Kc.k.warn("[Tracing] Did not create "+t.op+" transaction because _getCurrentHub is invalid.")},t.id="BrowserTracing",t}(),xp=function(){function t(e){void 0===e&&(e={}),this.name=t.id,this._router=e.router||e.app,this._methods=(Array.isArray(e.methods)?e.methods:[]).concat("use")}return t.prototype.setupOnce=function(){var t,e;this._router?(t=this._router,void 0===(e=this._methods)&&(e=[]),e.forEach((function(e){return function(t,e){var n=t[e];return t[e]=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return n.call.apply(n,(0,Wc.fl)([this],Ep(t,e)))},t}(t,e)}))):Kc.k.error("ExpressIntegration is missing an Express instance")},t.id="Express",t}();function kp(t,e){var n=t.length;switch(n){case 2:return function(n,r){var i=r.__sentry_transaction;if(i){var o=i.startChild({description:t.name,op:"middleware."+e});r.once("finish",(function(){o.finish()}))}return t.call(this,n,r)};case 3:return function(n,r,i){var o,a=null===(o=r.__sentry_transaction)||void 0===o?void 0:o.startChild({description:t.name,op:"middleware."+e});t.call(this,n,r,(function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];null===(t=a)||void 0===t||t.finish(),i.call.apply(i,(0,Wc.fl)([this],e))}))};case 4:return function(n,r,i,o){var a,s=null===(a=i.__sentry_transaction)||void 0===a?void 0:a.startChild({description:t.name,op:"middleware."+e});t.call(this,n,r,i,(function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];null===(t=s)||void 0===t||t.finish(),o.call.apply(o,(0,Wc.fl)([this],e))}))};default:throw new Error("Express middleware takes 2-4 arguments. Got: "+n)}}function Ep(t,e){return t.map((function(t){return"function"==typeof t?kp(t,e):Array.isArray(t)?t.map((function(t){return"function"==typeof t?kp(t,e):t})):t}))}var Op,Tp=n(136),Cp=n(736),Ap=n(873),jp=(0,Wc.pi)((0,Wc.pi)({},t),{BrowserTracing:Sp});(Op=iu()).__SENTRY__&&(Op.__SENTRY__.extensions=Op.__SENTRY__.extensions||{},Op.__SENTRY__.extensions.startTransaction||(Op.__SENTRY__.extensions.startTransaction=function(t,e){return ep(this,new Xl(t,this),(0,Wc.pi)({parentSampled:t.parentSampled,transactionContext:t},e))}),Op.__SENTRY__.extensions.traceHeaders||(Op.__SENTRY__.extensions.traceHeaders=function(){var t=this.getScope();if(t){var e=t.getSpan();if(e)return{"sentry-trace":e.toTraceparent()}}return{}})),Ru({callback:Gl,type:"error"}),Ru({callback:Gl,type:"unhandledrejection"}),function(t){void 0===t&&(t={});var e=(0,Wc.pi)((0,Wc.pi)({Vue:(0,Vc.Rf)().Vue,attachProps:!0,logErrors:!1,tracing:!1},t),{tracingOptions:(0,Wc.pi)({hooks:["activate","mount","update"],timeout:2e3,trackComponents:!1},t.tracingOptions)});e._metadata=e._metadata||{},e._metadata.sdk={name:"sentry.javascript.vue",packages:[{name:"npm:@sentry/vue",version:gu}],version:gu},function(t){if(void 0===t&&(t={}),void 0===t.defaultIntegrations&&(t.defaultIntegrations=Nl),void 0===t.release){var e=(0,Vc.Rf)();e.SENTRY_RELEASE&&e.SENTRY_RELEASE.id&&(t.release=e.SENTRY_RELEASE.id)}void 0===t.autoSessionTracking&&(t.autoSessionTracking=!0),t._metadata=t._metadata||{},t._metadata.sdk={name:"sentry.javascript.browser",packages:[{name:"npm:@sentry/browser",version:gu}],version:gu},function(t,e){!0===e.debug&&Kc.k.enable();var n=au(),r=new t(e);n.bindClient(r)}(Cl,t),t.autoSessionTracking&&function(){if(void 0!==(0,Vc.Rf)().document){var t=au();t.startSession(),t.captureSession(),Ru({callback:function(){t.startSession(),t.captureSession()},type:"history"})}else Kc.k.warn("Session tracking in non-browser environment with @sentry/browser is not supported.")}()}(e),void 0===e.Vue?(Kc.k.warn("No Vue instance was provided. Also there is no Vue instance on the `window` object."),Kc.k.warn("We will only capture global unhandled errors.")):new ql(e).setup()}({Vue:ps,dsn:"https://7da8f56bcf9f4acf92f95aac16c8e0cd@o526517.ingest.sentry.io/5642134",integrations:[new jp.BrowserTracing],logErrors:!0,tracesSampleRate:1});const $p=ps.extend({render:t=>t("button",{attrs:{id:"refresh"},domProps:{innerHTML:"refresh"},on:{click:t=>{Hc.dispatch(du)}}})});new ps({el:"#performance",components:{navigation:fs,loadingMessage:hs,errorMessage:ds,buttonRefresh:$p,performSummary:vs},render(t){return t("div",[t(fs),t("hr"),t(hs,{props:{loading:this.performance.loading}}),t(ds,{props:{error:this.performance.error}}),t($p),t(vs,{props:{details:this.performance.summary}})])},data:{performance:{}},created(){this.performance=Hc.getState()},mounted(){Hc.subscribe((()=>{this.performance=Hc.getState()})),Hc.dispatch(du)}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9pbnRlZ3JhdGlvbnMvbW9uZ28uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vaW50ZWdyYXRpb25zL215c3FsLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2ludGVncmF0aW9ucy9wb3N0Z3Jlcy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vaXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbWlzYy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbWVtby5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vb2JqZWN0LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9zdGFja3RyYWNlLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RpbWUuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy9wZXJmb3JtYW5jZS9tYWluLmNzcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuZXNtLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvcGVyZm9ybWFuY2UvY29tcG9uZW50cy9uYXZpZ2F0aW9uLnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvcGVyZm9ybWFuY2UvY29tcG9uZW50cy9tZXNzYWdlLnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvcGVyZm9ybWFuY2UvY29tcG9uZW50cy9wZXJmb3JtYW5jZS50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3BlcmZvcm1hbmNlL3N0b3JlLnRzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvcGVyZm9ybWFuY2UvcmVkdWNlci50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL2xpYi9odHRwLWNsaWVudC50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90eXBlcy9lc20vc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc3luY3Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaHViL2VzbS9zY29wZS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZXNtL3Nlc3Npb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaHViL2VzbS9odWIuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbWluaW1hbC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy9wZXJmb3JtYW5jZS9hc3luYy1hY3Rpb24udHMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy9wZXJmb3JtYW5jZS9wZXJmb3JtYW5jZS5jbGllbnQudHMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy9wZXJmb3JtYW5jZS9tYWluLmNzcz82ODQ0Iiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2luYm91bmRmaWx0ZXJzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9zdXBwb3J0cy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vaW5zdHJ1bWVudC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Vycm9yLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kc24uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vYmFzZWNsaWVudC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90eXBlcy9lc20vc3RhdHVzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3RyYW5zcG9ydHMvbm9vcC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90eXBlcy9lc20vc2V2ZXJpdHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vYmFzZWJhY2tlbmQuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhY2VraXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vcGFyc2Vycy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9ldmVudGJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3Byb21pc2VidWZmZXIuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy9iYXNlLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL3RyYW5zcG9ydHMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy94aHIuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vYmFja2VuZC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9oZWxwZXJzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9icmVhZGNydW1icy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL3RyeWNhdGNoLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9nbG9iYWxoYW5kbGVycy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy91c2VyYWdlbnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vc2RrLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9wYXRoLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3Z1ZS9lc20vc2RrLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2VzbS90cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9zcGFuc3RhdHVzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9zcGFuLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL3RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2lkbGV0cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9odWJleHRlbnNpb25zLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvYmFja2dyb3VuZHRhYi5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9icm93c2VyL3dlYi12aXRhbHMvbGliL2dldEZpcnN0SGlkZGVuLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvd2hlbklucHV0LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvYmluZFJlcG9ydGVyLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvaW5pdE1ldHJpYy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9icm93c2VyL3dlYi12aXRhbHMvbGliL2dlbmVyYXRlVW5pcXVlSUQuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vYnJvd3Nlci93ZWItdml0YWxzL2xpYi9vYnNlcnZlLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvb25IaWRkZW4uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vYnJvd3Nlci93ZWItdml0YWxzL2dldFRURkIuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vYnJvd3Nlci9tZXRyaWNzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvd2ViLXZpdGFscy9nZXRDTFMuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHJhY2luZy9lc20vYnJvd3Nlci93ZWItdml0YWxzL2dldExDUC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9icm93c2VyL3dlYi12aXRhbHMvZ2V0RklELmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2Jyb3dzZXIvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9icm93c2VyL3JvdXRlci5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90cmFjaW5nL2VzbS9icm93c2VyL2Jyb3dzZXJ0cmFjaW5nLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2ludGVncmF0aW9ucy9leHByZXNzLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3RyYWNpbmcvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3Nkay5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3NlbnRyeS50cyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3BlcmZvcm1hbmNlL21haW4udHMiXSwibmFtZXMiOlsiT1BFUkFUSU9OUyIsIk9QRVJBVElPTl9TSUdOQVRVUkVTIiwiYnVsa1dyaXRlIiwiY291bnREb2N1bWVudHMiLCJjcmVhdGVJbmRleCIsImNyZWF0ZUluZGV4ZXMiLCJkZWxldGVNYW55IiwiZGVsZXRlT25lIiwiZGlzdGluY3QiLCJkcm9wSW5kZXgiLCJmaW5kT25lIiwiZmluZE9uZUFuZERlbGV0ZSIsImZpbmRPbmVBbmRSZXBsYWNlIiwiZmluZE9uZUFuZFVwZGF0ZSIsImluZGV4RXhpc3RzIiwiaW5zZXJ0TWFueSIsImluc2VydE9uZSIsIm1hcFJlZHVjZSIsInJlbmFtZSIsInJlcGxhY2VPbmUiLCJ1cGRhdGVNYW55IiwidXBkYXRlT25lIiwiTW9uZ28iLCJvcHRpb25zIiwidGhpcyIsIm5hbWUiLCJpZCIsIl9vcGVyYXRpb25zIiwiQXJyYXkiLCJpc0FycmF5Iiwib3BlcmF0aW9ucyIsIl9kZXNjcmliZU9wZXJhdGlvbnMiLCJkZXNjcmliZU9wZXJhdGlvbnMiLCJwcm90b3R5cGUiLCJzZXR1cE9uY2UiLCJfIiwiZ2V0Q3VycmVudEh1YiIsImNvbGxlY3Rpb24iLCJtb2R1bGUiLCJDb2xsZWN0aW9uIiwiZSIsIl9pbnN0cnVtZW50T3BlcmF0aW9ucyIsIl90aGlzIiwiZm9yRWFjaCIsIm9wZXJhdGlvbiIsIl9wYXRjaE9wZXJhdGlvbiIsImdldFNwYW5Db250ZXh0IiwiX2dldFNwYW5Db250ZXh0RnJvbU9wZXJhdGlvbkFyZ3VtZW50cyIsImJpbmQiLCJvcmlnIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJsYXN0QXJnIiwic2NvcGUiLCJnZXRTY29wZSIsInBhcmVudFNwYW4iLCJnZXRTcGFuIiwic3Bhbl8xIiwic3RhcnRDaGlsZCIsIm1heWJlUHJvbWlzZSIsImNhbGwiLCJhcHBseSIsInRoZW4iLCJyZXMiLCJmaW5pc2giLCJzcGFuIiwic2xpY2UiLCJlcnIiLCJyZXN1bHQiLCJkYXRhIiwiY29sbGVjdGlvbk5hbWUiLCJkYk5hbWUiLCJuYW1lc3BhY2UiLCJzcGFuQ29udGV4dCIsIm9wIiwiZGVzY3JpcHRpb24iLCJzaWduYXR1cmUiLCJzaG91bGREZXNjcmliZSIsImluY2x1ZGVzIiwibWFwIiwicmVkdWNlIiwiaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfb08iLCJNeXNxbCIsImNvbm5lY3Rpb24iLCJ2YWx1ZXMiLCJjYWxsYmFjayIsInNxbCIsImZpZWxkcyIsIlBvc3RncmVzIiwiY2xpZW50IiwiQ2xpZW50IiwiY29uZmlnIiwidGV4dCIsImh0bWxUcmVlQXNTdHJpbmciLCJlbGVtIiwiY3VycmVudEVsZW0iLCJvdXQiLCJoZWlnaHQiLCJsZW4iLCJzZXBMZW5ndGgiLCJuZXh0U3RyIiwiX2h0bWxFbGVtZW50QXNTdHJpbmciLCJwdXNoIiwicGFyZW50Tm9kZSIsInJldmVyc2UiLCJqb2luIiwiZWwiLCJjbGFzc05hbWUiLCJjbGFzc2VzIiwia2V5IiwiYXR0ciIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwiYWxsb3dlZEF0dHJzIiwiZ2V0QXR0cmlidXRlIiwiaXNFcnJvciIsIndhdCIsIk9iamVjdCIsInRvU3RyaW5nIiwiaXNJbnN0YW5jZU9mIiwiRXJyb3IiLCJpc0Vycm9yRXZlbnQiLCJpc0RPTUVycm9yIiwiaXNET01FeGNlcHRpb24iLCJpc1N0cmluZyIsImlzUHJpbWl0aXZlIiwiaXNQbGFpbk9iamVjdCIsImlzRXZlbnQiLCJFdmVudCIsImlzRWxlbWVudCIsIkVsZW1lbnQiLCJpc1JlZ0V4cCIsImlzVGhlbmFibGUiLCJCb29sZWFuIiwiaXNTeW50aGV0aWNFdmVudCIsImJhc2UiLCJfZSIsImdsb2JhbCIsIlBSRUZJWCIsIkxvZ2dlciIsIl9lbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImxvZyIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCJfX1NFTlRSWV9fIiwibG9nZ2VyIiwiZmFsbGJhY2tHbG9iYWxPYmplY3QiLCJnZXRHbG9iYWxPYmplY3QiLCJnIiwid2luZG93Iiwic2VsZiIsInV1aWQ0IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJhcnIiLCJVaW50MTZBcnJheSIsInBhZCIsIm51bSIsInYiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwicGFyc2VVcmwiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwicmVsYXRpdmUiLCJnZXRFdmVudERlc2NyaXB0aW9uIiwiZXZlbnQiLCJtZXNzYWdlIiwiZXhjZXB0aW9uIiwidHlwZSIsInZhbHVlIiwiZXZlbnRfaWQiLCJjb25zb2xlU2FuZGJveCIsIm9yaWdpbmFsQ29uc29sZSIsIndyYXBwZWRMZXZlbHMiLCJsZXZlbCIsIl9fc2VudHJ5X29yaWdpbmFsX18iLCJrZXlzIiwiYWRkRXhjZXB0aW9uVHlwZVZhbHVlIiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwibWVjaGFuaXNtIiwiZ2V0TG9jYXRpb25IcmVmIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJvTyIsInBhcnNlUmV0cnlBZnRlckhlYWRlciIsIm5vdyIsImhlYWRlciIsImhlYWRlckRlbGF5IiwicGFyc2VJbnQiLCJpc05hTiIsImhlYWRlckRhdGUiLCJEYXRlIiwicGFyc2UiLCJpc05vZGVFbnYiLCJwcm9jZXNzIiwiZHluYW1pY1JlcXVpcmUiLCJtb2QiLCJyZXF1ZXN0IiwicmVxdWlyZSIsIk1lbW8iLCJfaGFzV2Vha1NldCIsIldlYWtTZXQiLCJfaW5uZXIiLCJtZW1vaXplIiwib2JqIiwiaGFzIiwiYWRkIiwidW5tZW1vaXplIiwiZGVsZXRlIiwic3BsaWNlIiwiZmlsbCIsInNvdXJjZSIsInJlcGxhY2VtZW50RmFjdG9yeSIsIm9yaWdpbmFsIiwid3JhcHBlZCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtZXJhYmxlIiwiX09vIiwidXJsRW5jb2RlIiwib2JqZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0V2Fsa1NvdXJjZSIsImlzIiwic3RhY2siLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50XzEiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJub3JtYWxpemVUb1NpemUiLCJkZXB0aCIsIm1heFNpemUiLCJzZXJpYWxpemVkIiwibm9ybWFsaXplIiwiZW5jb2RlVVJJIiwidXRmOExlbmd0aCIsIm5vcm1hbGl6ZVZhbHVlIiwiX2V2ZW50cyIsIlN0cmluZyIsIndhbGsiLCJtZW1vIiwibm9ybWFsaXplZCIsInNlcmlhbGl6ZVZhbHVlIiwidG9KU09OIiwiYWNjIiwiaW5uZXJLZXkiLCJpbnB1dCIsImV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZSIsIm1heExlbmd0aCIsInNvcnQiLCJpbmNsdWRlZEtleXMiLCJkcm9wVW5kZWZpbmVkS2V5cyIsInZhbCIsImVfMSIsInJ2IiwibmV4dCIsImRvbmUiLCJlXzFfMSIsInJldHVybiIsImRlZmF1bHRGdW5jdGlvbk5hbWUiLCJnZXRGdW5jdGlvbk5hbWUiLCJmbiIsInRydW5jYXRlIiwic3RyIiwibWF4Iiwic3Vic3RyIiwic2FmZUpvaW4iLCJkZWxpbWl0ZXIiLCJvdXRwdXQiLCJpc01hdGNoaW5nUGF0dGVybiIsInBhdHRlcm4iLCJ0ZXN0IiwiaW5kZXhPZiIsImRhdGVUaW1lc3RhbXBTb3VyY2UiLCJub3dTZWNvbmRzIiwicGxhdGZvcm1QZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlIiwiZ2V0Tm9kZVBlcmZvcm1hbmNlIiwidGltZU9yaWdpbiIsImdldEJyb3dzZXJQZXJmb3JtYW5jZSIsInRpbWVzdGFtcFNvdXJjZSIsInVuZGVmaW5lZCIsImRhdGVUaW1lc3RhbXBJblNlY29uZHMiLCJ0aW1lc3RhbXBXaXRoTXMiLCJicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luIiwidGltaW5nIiwibmF2aWdhdGlvblN0YXJ0IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyMiIsIl9pdGVtIiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiY29uc3RydWN0b3IiLCJmcm9tIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJjb3VudCIsImluZGV4IiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwicm9vdCIsIm9ic2VydmFibGUiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJfX2V4dGVuZHMiLCJfXyIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJfX3Jlc3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fdmFsdWVzIiwibSIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJobWQiLCJjaGlsZHJlbiIsInNldCIsInByb3AiLCJ0b1N0cmluZ1RhZyIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJpc1ZhbGlkQXJyYXlJbmRleCIsInBhcnNlRmxvYXQiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwiY2F0Y2giLCJ0b051bWJlciIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwibCIsIl9sZW5ndGgiLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJkZWYiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9pc1NlcnZlciIsImJhaWxSRSIsIlJlZ0V4cCIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiU2V0IiwiY2xlYXIiLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiVk5vZGUiLCJ0YWciLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2QiLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJzcmMiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJob29rcyIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJob29rIiwia2V5JDEiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkaXJlY3RpdmVzIiwiZGVmJCQxIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJ0aW1lckZ1bmMiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsInNldEltbWVkaWF0ZSIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwicGFyYW1zIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiaGFzaCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsImlzRmFsc2UiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJzaGlmdCIsIl9pc1ZMaXN0IiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwiYXR0cnMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsInJlbmRlciIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfdiIsIl91IiwiX2ciLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIl9yZW5kZXJDaGlsZHJlbiIsIiR2bm9kZSIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsIm9sZExpc3RlbmVycyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiY2lkIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsInByZSIsImFwcGx5TlMiLCJjbGFzcyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJmb3JjZSIsImNvbXAiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiaGFuZGxlcnMiLCJqIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwicXVldWUiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwiYmVmb3JlIiwicnVuIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJ1c2VyIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwidXNlckRlZiIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiY29tcG9uZW50cyIsIlZ1ZSIsIl9pbml0IiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiaXNTU1IiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJpbml0U3RhdGUiLCJpbml0UHJvdmlkZSIsImluaXRNaXhpbiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsInJlbmRlck1peGluIiwicGF0dGVyblR5cGVzIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0VXNlIiwibWl4aW4iLCJpbml0TWl4aW4kMSIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsImluaXRFeHRlbmQiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwibWVyZ2VDbGFzc0RhdGEiLCJzdGF0aWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiYXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImJhc2VTZXRBdHRyIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJjaGlsZE5vZGUiLCJkeW5hbWljQ2xhc3MiLCJnZW5DbGFzc0ZvclZub2RlIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsInByZXYiLCJmaWx0ZXJzIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInRyaW0iLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImJhc2VXYXJuIiwibXNnIiwicmFuZ2UiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImR5bmFtaWMiLCJyYW5nZVNldEl0ZW0iLCJwbGFpbiIsImFkZEF0dHIiLCJkeW5hbWljQXR0cnMiLCJhZGRSYXdBdHRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJhZGREaXJlY3RpdmUiLCJpc0R5bmFtaWNBcmciLCJwcmVwZW5kTW9kaWZpZXJNYXJrZXIiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwiZXZlbnRzIiwicmlnaHQiLCJtaWRkbGUiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJuZXdIYW5kbGVyIiwiZ2V0QmluZGluZ0F0dHIiLCJnZXRTdGF0aWMiLCJkeW5hbWljVmFsdWUiLCJnZXRBbmRSZW1vdmVBdHRyIiwic3RhdGljVmFsdWUiLCJyZW1vdmVGcm9tTWFwIiwiZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgiLCJlbmQiLCJnZW5Db21wb25lbnRNb2RlbCIsIm51bWJlciIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsImxhc3RJbmRleE9mIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsInBhcnNlU3RyaW5nIiwicGFyc2VCcmFja2V0IiwicGFyc2VNb2RlbCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiaW5uZXJIVE1MIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwidHJhbnNpdGlvblByb3BzIiwibW9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJoIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJwb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsIm1vdW50Q29tcG9uZW50IiwiZGVjb2RlciIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsIm9wZW4iLCJjbG9zZSIsImtsYXNzJDEiLCJzdGF0aWNLZXlzIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEiLCJzdHlsZSQxIiwic3R5bGVCaW5kaW5nIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJlbmRUYWciLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJodG1sIiwiZGVjb2RlQXR0ciIsInNob3VsZERlY29kZU5ld2xpbmVzIiwicmUiLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zIiwicHJlVHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwicGxhdGZvcm1Jc1ByZVRhZyIsInBsYXRmb3JtTXVzdFVzZVByb3AiLCJwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSIsIm9uUkUiLCJkaXJSRSIsImZvckFsaWFzUkUiLCJmb3JJdGVyYXRvclJFIiwic3RyaXBQYXJlbnNSRSIsImR5bmFtaWNBcmdSRSIsImFyZ1JFIiwiYmluZFJFIiwibW9kaWZpZXJSRSIsInNsb3RSRSIsImxpbmVCcmVha1JFIiwid2hpdGVzcGFjZVJFJDEiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiZW1wdHlTbG90U2NvcGVUb2tlbiIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJyYXdBdHRyc01hcCIsInByb2Nlc3NFbGVtZW50IiwiZWxlbWVudCIsInByb2Nlc3NLZXkiLCJmb3IiLCJjaGVja0luRm9yIiwicHJvY2Vzc1JlZiIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJzbG90VGFyZ2V0RHluYW1pYyIsImdldFJhd0JpbmRpbmdBdHRyIiwic2xvdEJpbmRpbmciLCJnZXRTbG90TmFtZSIsInNsb3RCaW5kaW5nJDEiLCJyZWYkMSIsImR5bmFtaWMkMSIsInNsb3RDb250YWluZXIiLCJwcm9jZXNzU2xvdENvbnRlbnQiLCJzbG90TmFtZSIsInByb2Nlc3NDb21wb25lbnQiLCJzeW5jR2VuIiwiaXNEeW5hbWljIiwiaGFzQmluZGluZ3MiLCJwYXJzZU1vZGlmaWVycyIsImNhbWVsIiwiYXJnTWF0Y2giLCJwcm9jZXNzQXR0cnMiLCJwcm9jZXNzRm9yIiwiaW5NYXRjaCIsImFsaWFzIiwiaXRlcmF0b3JNYXRjaCIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsInBhcnNlRm9yIiwiYWRkSWZDb25kaXRpb24iLCJjb25kaXRpb24iLCJpZkNvbmRpdGlvbnMiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsImNsb25lQVNURWxlbWVudCIsImlzU3RhdGljS2V5IiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwibW9kdWxlcyQxIiwicHJlVHJhbnNmb3JtTm9kZSIsInR5cGVCaW5kaW5nIiwiaWZDb25kaXRpb24iLCJpZkNvbmRpdGlvbkV4dHJhIiwiaGFzRWxzZSIsImVsc2VJZkNvbmRpdGlvbiIsImJyYW5jaDAiLCJwcm9jZXNzZWQiLCJpZiIsImJsb2NrIiwiYnJhbmNoMSIsImJyYW5jaDIiLCJlbHNlIiwiZWxzZWlmIiwiYmFzZU9wdGlvbnMiLCJleHBlY3RIVE1MIiwiX3dhcm4iLCJjb2RlIiwiZ2VuU2VsZWN0IiwidmFsdWVCaW5kaW5nIiwidHJ1ZVZhbHVlQmluZGluZyIsImZhbHNlVmFsdWVCaW5kaW5nIiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsImdlbkRlZmF1bHRNb2RlbCIsImlzUHJlVGFnIiwiZ2VuU3RhdGljS2V5c0NhY2hlZCIsIm9wdGltaXplIiwibWFya1N0YXRpYyQxIiwibWFya1N0YXRpY1Jvb3RzIiwic3RhdGljIiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJsJDEiLCJzdGF0aWNJbkZvciIsInN0YXRpY1Jvb3QiLCJmbkV4cFJFIiwiZm5JbnZva2VSRSIsInNpbXBsZVBhdGhSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJkb3duIiwia2V5TmFtZXMiLCJnZW5HdWFyZCIsIm1vZGlmaWVyQ29kZSIsInN0b3AiLCJwcmV2ZW50IiwiY3RybCIsImFsdCIsIm1ldGEiLCJnZW5IYW5kbGVycyIsInByZWZpeCIsInN0YXRpY0hhbmRsZXJzIiwiZHluYW1pY0hhbmRsZXJzIiwiaGFuZGxlckNvZGUiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0Z1bmN0aW9uSW52b2NhdGlvbiIsImdlbk1vZGlmaWVyQ29kZSIsImtleU1vZGlmaWVyIiwiZ2VuRmlsdGVyQ29kZSIsImdlbktleUZpbHRlciIsImtleVZhbCIsImtleUNvZGUiLCJrZXlOYW1lIiwiYmFzZURpcmVjdGl2ZXMiLCJ3cmFwTGlzdGVuZXJzIiwid3JhcERhdGEiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJtYXliZUNvbXBvbmVudCIsIm9uY2VJZCIsImdlbmVyYXRlIiwiYXN0Iiwic3RhdGUiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuQ2hpbGRyZW4iLCJnZW5Qcm9wcyIsImJpbmQkJDEiLCJnZW5TbG90IiwiY29tcG9uZW50TmFtZSIsImdlbkRhdGEkMiIsImdlbkNvbXBvbmVudCIsIm9yaWdpbmFsUHJlU3RhdGUiLCJhbHRHZW4iLCJhbHRFbXB0eSIsImdlbklmQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZW5UZXJuYXJ5RXhwIiwiYWx0SGVscGVyIiwibmVlZFJ1bnRpbWUiLCJoYXNSdW50aW1lIiwiZ2VuIiwiZ2VuRGlyZWN0aXZlcyIsImNvbnRhaW5zU2xvdENoaWxkIiwibmVlZHNLZXkiLCJnZW5lcmF0ZWRTbG90cyIsImdlblNjb3BlZFNsb3QiLCJpbmxpbmVSZW5kZXJGbnMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsImlzTGVnYWN5U3ludGF4IiwicmV2ZXJzZVByb3h5IiwiY2hlY2tTa2lwIiwiYWx0R2VuRWxlbWVudCIsImFsdEdlbk5vZGUiLCJlbCQxIiwibm9ybWFsaXphdGlvblR5cGUkMSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsImdlbkNvbW1lbnQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJzdGF0aWNQcm9wcyIsImR5bmFtaWNQcm9wcyIsImNyZWF0ZUZ1bmN0aW9uIiwiZXJyb3JzIiwiY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiIsImNvbXBpbGUiLCJ0ZW1wbGF0ZSIsImNvbXBpbGVkIiwiZm5HZW5FcnJvcnMiLCJiYXNlQ29tcGlsZSIsImRpdiIsImN1cnJlbnRQYXJlbnQiLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJ3aGl0ZXNwYWNlT3B0aW9uIiwid2hpdGVzcGFjZSIsImluUHJlIiwiY2xvc2VFbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJmb3JiaWRkZW4iLCJmaW5kUHJldkVsZW1lbnQiLCJsYXN0Tm9kZSIsImxhc3RUYWciLCJpc1VuYXJ5VGFnJCQxIiwiY2FuQmVMZWZ0T3BlblRhZyQkMSIsImVuZFRhZ0xlbmd0aCIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJyZXN0JDEiLCJjaGFycyIsInBhcnNlRW5kVGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJzdGFydFRhZ01hdGNoIiwicGFyc2VTdGFydFRhZyIsImhhbmRsZVN0YXJ0VGFnIiwicmVzdCIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsImxvd2VyQ2FzZWRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsInBhcnNlSFRNTCIsImNvbW1lbnRzIiwib3V0cHV0U291cmNlUmFuZ2UiLCJzdGFydCQxIiwiZ3VhcmRJRVNWR0J1ZyIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsImVuZCQxIiwidGFnUkUiLCJ0b2tlblZhbHVlIiwidG9rZW5zIiwicmF3VG9rZW5zIiwiZXhlYyIsInBhcnNlVGV4dCIsImZpbmFsT3B0aW9ucyIsInRpcHMiLCJ0aXAiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJnZXRTaG91bGREZWNvZGUiLCJpZFRvVGVtcGxhdGUiLCJtb3VudCIsImRvY3VtZW50RWxlbWVudCIsIm91dGVySFRNTCIsImNvbnRhaW5lciIsImdldE91dGVySFRNTCIsIm5hdmlnYXRpb24iLCJlcnJvck1lc3NhZ2UiLCIkcHJvcHMiLCJsb2FkaW5nTWVzc2FnZSIsInN1bW1hcnkiLCJkZXRhaWxzIiwidG90YWxfd29ya2VyIiwidG90YWxfdGFzayIsInRhc2tfZG9uZSIsInRhc2tfY2FuY2VsbGVkIiwiUSIsImdldFByb3RvdHlwZU9mIiwiTCIsIloiLCJ1IiwiZiIsIlgiLCJNYXAiLCJxIiwidHQiLCJ5IiwibnQiLCJVIiwidyIsIlMiLCJPIiwiUCIsIk0iLCJ4IiwiSCIsIkEiLCJJIiwiayIsIlIiLCJEIiwiTiIsInoiLCJFIiwiVCIsIkYiLCJDIiwicnQiLCJldCIsIlByb3h5IiwicmV2b2NhYmxlIiwicmV2b2tlIiwiSiIsIksiLCJHIiwiVyIsIkIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVsZXRlUHJvcGVydHkiLCJvdCIsInVzZVByb3hpZXMiLCJzZXRVc2VQcm94aWVzIiwiYXV0b0ZyZWV6ZSIsInNldEF1dG9GcmVlemUiLCJwcm9kdWNlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsIiQiLCJ1dCIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImRpc3BhdGNoIiwiYWN0aW9uIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIl9yZWYiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiX2RlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJfa2V5IiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJkZWZhdWx0RXF1YWxpdHlDaGVjayIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwiZXF1YWxpdHlDaGVjayIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJtZW1vaXplT3B0aW9ucyIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsImZ1bmMiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX2V4dGVuZHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiaW5zdGFuY2UiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiV3JhcHBlciIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJBY3Rpb25UeXBlIiwiTWlkZGxld2FyZUFycmF5IiwiX0FycmF5Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3Byb3RvIiwiX0FycmF5JHByb3RvdHlwZSRjb25jIiwicHJlcGVuZCIsIl9sZW4yIiwiX2tleTIiLCJjcmVhdGVBY3Rpb24iLCJwcmVwYXJlQWN0aW9uIiwiYWN0aW9uQ3JlYXRvciIsInByZXBhcmVkIiwicGF5bG9hZCIsImFzeW5jSXRlcmF0b3IiLCJtaW4iLCJlcnJvckFjdGlvbiIsIkVSUk9SIiwibG9hZGluZ0FjdGlvbiIsIkxPQURJTkciLCJzdW1tYXJ5TG9hZGVkQWN0aW9uIiwiTE9BREVEIiwic3RvcmUkIiwicm9vdFJlZHVjZXIiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJfb3B0aW9ucyIsIl9vcHRpb25zJHRodW5rIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiX3JlZiRyZWR1Y2VyIiwiX3JlZiRtaWRkbGV3YXJlIiwiX3JlZiRkZXZUb29scyIsImRldlRvb2xzIiwiX3JlZiRwcmVsb2FkZWRTdGF0ZSIsIl9yZWYkZW5oYW5jZXJzIiwiZW5oYW5jZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImNvbmZpZ3VyZVN0b3JlIiwiaW5pdGlhbFN0YXRlIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25NYXRjaGVycyIsImRlZmF1bHRDYXNlUmVkdWNlciIsImJ1aWxkZXJDYWxsYmFjayIsImFjdGlvbnNNYXAiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJjYXNlUmVkdWNlcnMiLCJfcmVmMyIsImNyIiwicHJldmlvdXNTdGF0ZSIsImNhc2VSZWR1Y2VyIiwiZHJhZnQiLCJfcmVzdWx0IiwiY3JlYXRlUmVkdWNlciIsImVuZHBvaW50IiwianNvbiIsImhlYWRlcnMiLCJjdXN0b21Db25mIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInN0YXR1c1RleHQiLCJwb3N0IiwicHV0IiwiU2Vzc2lvblN0YXR1cyIsIlN0YXRlcyIsIlN5bmNQcm9taXNlIiwiZXhlY3V0b3IiLCJfc3RhdGUiLCJQRU5ESU5HIiwiX2hhbmRsZXJzIiwiX3NldFJlc3VsdCIsIlJFU09MVkVEIiwiX3JlamVjdCIsIlJFSkVDVEVEIiwiX2V4ZWN1dGVIYW5kbGVycyIsIl9hdHRhY2hIYW5kbGVyIiwiY2FjaGVkSGFuZGxlcnMiLCJvbmZ1bGZpbGxlZCIsIm9ucmVqZWN0ZWQiLCJyZXNvbHZlZENvbGxlY3Rpb24iLCJmaW5hbGx5Iiwib25maW5hbGx5IiwiaXNSZWplY3RlZCIsIlNjb3BlIiwiX25vdGlmeWluZ0xpc3RlbmVycyIsIl9zY29wZUxpc3RlbmVycyIsIl9ldmVudFByb2Nlc3NvcnMiLCJfYnJlYWRjcnVtYnMiLCJfdXNlciIsIl90YWdzIiwiX2V4dHJhIiwiX2NvbnRleHRzIiwibmV3U2NvcGUiLCJfbGV2ZWwiLCJfc3BhbiIsIl9zZXNzaW9uIiwiX3RyYW5zYWN0aW9uTmFtZSIsIl9maW5nZXJwcmludCIsImFkZFNjb3BlTGlzdGVuZXIiLCJhZGRFdmVudFByb2Nlc3NvciIsInNldFVzZXIiLCJfbm90aWZ5U2NvcGVMaXN0ZW5lcnMiLCJnZXRVc2VyIiwic2V0VGFncyIsInRhZ3MiLCJzZXRUYWciLCJzZXRFeHRyYXMiLCJleHRyYXMiLCJzZXRFeHRyYSIsImV4dHJhIiwic2V0RmluZ2VycHJpbnQiLCJmaW5nZXJwcmludCIsInNldExldmVsIiwic2V0VHJhbnNhY3Rpb25OYW1lIiwic2V0VHJhbnNhY3Rpb24iLCJzZXRDb250ZXh0Iiwic2V0U3BhbiIsImdldFRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJzcGFuUmVjb3JkZXIiLCJzcGFucyIsInNldFNlc3Npb24iLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsImNhcHR1cmVDb250ZXh0IiwidXBkYXRlZFNjb3BlIiwiY29udGV4dHMiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsIm1heEJyZWFkY3J1bWJzIiwibWVyZ2VkQnJlYWRjcnVtYiIsInRpbWVzdGFtcCIsImNsZWFyQnJlYWRjcnVtYnMiLCJhcHBseVRvRXZlbnQiLCJoaW50IiwiZ2V0VHJhY2VDb250ZXh0IiwidHJhbnNhY3Rpb25OYW1lIiwiX2FwcGx5RmluZ2VycHJpbnQiLCJicmVhZGNydW1icyIsIl9ub3RpZnlFdmVudFByb2Nlc3NvcnMiLCJnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMiLCJwcm9jZXNzb3JzIiwicHJvY2Vzc29yIiwiZmluYWwiLCJnbG9iYWxFdmVudFByb2Nlc3NvcnMiLCJhZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsIlNlc3Npb24iLCJzaWQiLCJzdGFydGVkIiwic3RhdHVzIiwiT2siLCJpcF9hZGRyZXNzIiwiaXBBZGRyZXNzIiwiZGlkIiwiZW1haWwiLCJ1c2VybmFtZSIsInJlbGVhc2UiLCJlbnZpcm9ubWVudCIsIkV4aXRlZCIsInRvSVNPU3RyaW5nIiwidXNlcl9hZ2VudCIsIkh1YiIsIl92ZXJzaW9uIiwiX3N0YWNrIiwiZ2V0U3RhY2tUb3AiLCJiaW5kQ2xpZW50IiwiaXNPbGRlclRoYW4iLCJzZXR1cEludGVncmF0aW9ucyIsInB1c2hTY29wZSIsImdldFN0YWNrIiwiZ2V0Q2xpZW50IiwicG9wU2NvcGUiLCJ3aXRoU2NvcGUiLCJjYXB0dXJlRXhjZXB0aW9uIiwiZXZlbnRJZCIsIl9sYXN0RXZlbnRJZCIsImZpbmFsSGludCIsInN5bnRoZXRpY0V4Y2VwdGlvbiIsIm9yaWdpbmFsRXhjZXB0aW9uIiwiX2ludm9rZUNsaWVudCIsImNhcHR1cmVNZXNzYWdlIiwiY2FwdHVyZUV2ZW50IiwibGFzdEV2ZW50SWQiLCJnZXRPcHRpb25zIiwiYmVmb3JlQnJlYWRjcnVtYiIsImZpbmFsQnJlYWRjcnVtYiIsImNvbmZpZ3VyZVNjb3BlIiwib2xkSHViIiwibWFrZU1haW4iLCJnZXRJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uIiwic3RhcnRTcGFuIiwiX2NhbGxFeHRlbnNpb25NZXRob2QiLCJzdGFydFRyYW5zYWN0aW9uIiwiY3VzdG9tU2FtcGxpbmdDb250ZXh0IiwidHJhY2VIZWFkZXJzIiwiY2FwdHVyZVNlc3Npb24iLCJlbmRTZXNzaW9uIiwiX3NlbmRTZXNzaW9uVXBkYXRlIiwic3RhcnRTZXNzaW9uIiwiY3VycmVudFNlc3Npb24iLCJjYXJyaWVyIiwiZ2V0TWFpbkNhcnJpZXIiLCJzZW50cnkiLCJleHRlbnNpb25zIiwiaHViIiwicmVnaXN0cnkiLCJnZXRIdWJGcm9tQ2FycmllciIsInNldEh1Yk9uQ2FycmllciIsImhhc0h1Yk9uQ2FycmllciIsImFjdGl2ZURvbWFpbiIsImRvbWFpbiIsInJlZ2lzdHJ5SHViVG9wU3RhY2siLCJnZXRIdWJGcm9tQWN0aXZlRG9tYWluIiwiY2FsbE9uSHViIiwib3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nIiwiU0RLX1ZFUlNJT04iLCJERUZBVUxUX0lHTk9SRV9FUlJPUlMiLCJJbmJvdW5kRmlsdGVycyIsImNsaWVudE9wdGlvbnMiLCJfbWVyZ2VPcHRpb25zIiwiX3Nob3VsZERyb3BFdmVudCIsIl9pc1NlbnRyeUVycm9yIiwiX2lzSWdub3JlZEVycm9yIiwiX2lzRGVuaWVkVXJsIiwiX2dldEV2ZW50RmlsdGVyVXJsIiwiX2lzQWxsb3dlZFVybCIsImlnbm9yZUludGVybmFsIiwiaWdub3JlRXJyb3JzIiwiX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyIsImRlbnlVcmxzIiwiYWxsb3dVcmxzIiwid2hpdGVsaXN0VXJscyIsImJsYWNrbGlzdFVybHMiLCJzdGFja3RyYWNlIiwiZnJhbWVzXzEiLCJmcmFtZXMiLCJmaWxlbmFtZSIsImZyYW1lc18yIiwiRnVuY3Rpb25Ub1N0cmluZyIsInN1cHBvcnRzRmV0Y2giLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiaXNOYXRpdmVGZXRjaCIsInN1cHBvcnRzUmVmZXJyZXJQb2xpY3kiLCJyZWZlcnJlclBvbGljeSIsImxhc3RIcmVmIiwiZGVib3VuY2VUaW1lcklEIiwibGFzdENhcHR1cmVkRXZlbnQiLCJpbnN0cnVtZW50ZWQiLCJhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwib3JpZ2luYWxDb25zb2xlTGV2ZWwiLCJ0cmlnZ2VySGFuZGxlcnMiLCJ0cmlnZ2VyRE9NSGFuZGxlciIsImdsb2JhbERPTUV2ZW50SGFuZGxlciIsIm1ha2VET01FdmVudEhhbmRsZXIiLCJvcmlnaW5hbEFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyc18xIiwiX19zZW50cnlfaW5zdHJ1bWVudGF0aW9uX2hhbmRsZXJzX18iLCJoYW5kbGVyRm9yVHlwZSIsInJlZkNvdW50Iiwib3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlcnNfMiIsImluc3RydW1lbnRET00iLCJyZXF1ZXN0S2V5cyIsInJlcXVlc3RWYWx1ZXMiLCJ4aHJwcm90byIsIlhNTEh0dHBSZXF1ZXN0Iiwib3JpZ2luYWxPcGVuIiwieGhyIiwiX19zZW50cnlfeGhyX18iLCJfX3NlbnRyeV9vd25fcmVxdWVzdF9fIiwib25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlciIsInJlYWR5U3RhdGUiLCJzdGF0dXNfY29kZSIsInJlcXVlc3RQb3MiLCJhcmdzXzEiLCJlbmRUaW1lc3RhbXAiLCJzdGFydFRpbWVzdGFtcCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGVBcmdzIiwib3JpZ2luYWxTZW5kIiwiaW5zdHJ1bWVudFhIUiIsImRvYyIsInNhbmRib3giLCJoaWRkZW4iLCJjb250ZW50V2luZG93Iiwic3VwcG9ydHNOYXRpdmVGZXRjaCIsIm9yaWdpbmFsRmV0Y2giLCJoYW5kbGVyRGF0YSIsImZldGNoRGF0YSIsImdldEZldGNoTWV0aG9kIiwiZ2V0RmV0Y2hVcmwiLCJjaHJvbWUiLCJpc0Nocm9tZVBhY2thZ2VkQXBwIiwiYXBwIiwicnVudGltZSIsImhhc0hpc3RvcnlBcGkiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwic3VwcG9ydHNIaXN0b3J5Iiwib2xkT25Qb3BTdGF0ZSIsIm9ucG9wc3RhdGUiLCJoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbiIsIm9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uIiwiaW5zdHJ1bWVudEhpc3RvcnkiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJvbmVycm9yIiwibGluZSIsImNvbHVtbiIsIl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsImluc3RydW1lbnQiLCJmZXRjaEFyZ3MiLCJnbG9iYWxMaXN0ZW5lciIsImlzQ29udGVudEVkaXRhYmxlIiwic2hvdWxkU2tpcERPTUV2ZW50IiwicHJldmlvdXMiLCJzaG91bGRTaG9ydGNpcmN1aXRQcmV2aW91c0RlYm91bmNlIiwiU2VudHJ5RXJyb3IiLCJfc3VwZXIiLCJfbmV3VGFyZ2V0IiwiRFNOX1JFR0VYIiwiRHNuIiwiX2Zyb21TdHJpbmciLCJfZnJvbUNvbXBvbmVudHMiLCJfdmFsaWRhdGUiLCJ3aXRoUGFzc3dvcmQiLCJwYXNzIiwicG9ydCIsInByb2plY3RJZCIsInB1YmxpY0tleSIsInByb2plY3RNYXRjaCIsIkVSUk9SX01FU1NBR0UiLCJpbnN0YWxsZWRJbnRlZ3JhdGlvbnMiLCJTdGF0dXMiLCJCYXNlQ2xpZW50IiwiYmFja2VuZENsYXNzIiwiX2ludGVncmF0aW9ucyIsIl9wcm9jZXNzaW5nIiwiX2JhY2tlbmQiLCJkc24iLCJfZHNuIiwiX3Byb2Nlc3MiLCJfZ2V0QmFja2VuZCIsImV2ZW50RnJvbUV4Y2VwdGlvbiIsIl9jYXB0dXJlRXZlbnQiLCJwcm9taXNlZEV2ZW50IiwiZXZlbnRGcm9tTWVzc2FnZSIsIl9zZW5kU2Vzc2lvbiIsImdldERzbiIsImZsdXNoIiwiX2lzQ2xpZW50UHJvY2Vzc2luZyIsInJlYWR5IiwiZ2V0VHJhbnNwb3J0IiwidHJhbnNwb3J0Rmx1c2hlZCIsImVuYWJsZWQiLCJfaXNFbmFibGVkIiwiaW50ZWdyYXRpb25zIiwiZGVmYXVsdEludGVncmF0aW9ucyIsInVzZXJJbnRlZ3JhdGlvbnMiLCJ1c2VySW50ZWdyYXRpb25zTmFtZXNfMSIsInBpY2tlZEludGVncmF0aW9uc05hbWVzXzEiLCJkZWZhdWx0SW50ZWdyYXRpb24iLCJ1c2VySW50ZWdyYXRpb24iLCJpbnRlZ3JhdGlvbnNOYW1lcyIsImFsd2F5c0xhc3RUb1J1biIsImdldEludGVncmF0aW9uc1RvU2V0dXAiLCJzZXR1cEludGVncmF0aW9uIiwiX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQiLCJjcmFzaGVkIiwiZXJyb3JlZCIsImV4Y2VwdGlvbnMiLCJleGNlcHRpb25zXzEiLCJleGNlcHRpb25zXzFfMSIsImhhbmRsZWQiLCJDcmFzaGVkIiwic2VuZFNlc3Npb24iLCJ0aWNrZWQiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl9wcmVwYXJlRXZlbnQiLCJub3JtYWxpemVEZXB0aCIsIl9hcHBseUNsaWVudE9wdGlvbnMiLCJfYXBwbHlJbnRlZ3JhdGlvbnNNZXRhZGF0YSIsImZpbmFsU2NvcGUiLCJldnQiLCJfbm9ybWFsaXplRXZlbnQiLCJkaXN0IiwibWF4VmFsdWVMZW5ndGgiLCJzZGtJbmZvIiwic2RrIiwiaW50ZWdyYXRpb25zQXJyYXkiLCJfc2VuZEV2ZW50Iiwic2VuZEV2ZW50IiwiX3Byb2Nlc3NFdmVudCIsImZpbmFsRXZlbnQiLCJiZWZvcmVTZW5kIiwic2FtcGxlUmF0ZSIsImlzVHJhbnNhY3Rpb24iLCJfX3NlbnRyeV9fIiwiYmVmb3JlU2VuZFJlc3VsdCIsInByb2Nlc3NlZEV2ZW50IiwicHJvbWlzZSIsImZyb21IdHRwQ29kZSIsIlN1Y2Nlc3MiLCJSYXRlTGltaXQiLCJJbnZhbGlkIiwiRmFpbGVkIiwiVW5rbm93biIsIlNldmVyaXR5IiwiTm9vcFRyYW5zcG9ydCIsIlNraXBwZWQiLCJCYXNlQmFja2VuZCIsIl90cmFuc3BvcnQiLCJfc2V0dXBUcmFuc3BvcnQiLCJfZXhjZXB0aW9uIiwiX2hpbnQiLCJfbWVzc2FnZSIsImZyb21TdHJpbmciLCJEZWJ1ZyIsIkluZm8iLCJXYXJuaW5nIiwiRmF0YWwiLCJDcml0aWNhbCIsIkxvZyIsIlVOS05PV05fRlVOQ1RJT04iLCJnZWNrbyIsIndpbmpzIiwiZ2Vja29FdmFsIiwiY2hyb21lRXZhbCIsInJlYWN0TWluaWZpZWRSZWdleHAiLCJjb21wdXRlU3RhY2tUcmFjZSIsImV4IiwicG9wU2l6ZSIsImZyYW1lc1RvUG9wIiwicGFydHMiLCJvcGVyYTEwUmVnZXgiLCJvcGVyYTExUmVnZXgiLCJsaW5lcyIsImV4dHJhY3RNZXNzYWdlIiwiY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AiLCJwb3BGcmFtZXMiLCJzdWJtYXRjaCIsImNvbHVtbk51bWJlciIsImNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcCIsImZhaWxlZCIsImV4Y2VwdGlvbkZyb21TdGFja3RyYWNlIiwicHJlcGFyZUZyYW1lc0ZvckV2ZW50IiwiZXZlbnRGcm9tU3RhY2t0cmFjZSIsImxvY2FsU3RhY2siLCJmaXJzdEZyYW1lRnVuY3Rpb24iLCJsYXN0RnJhbWVGdW5jdGlvbiIsImZyYW1lIiwiY29sbm8iLCJmdW5jdGlvbiIsImluX2FwcCIsImxpbmVubyIsImV2ZW50RnJvbVVua25vd25JbnB1dCIsImRvbUV4Y2VwdGlvbiIsIm5hbWVfMSIsImV2ZW50RnJvbVN0cmluZyIsInJlamVjdGlvbiIsIl9fc2VyaWFsaXplZF9fIiwiZXZlbnRGcm9tUGxhaW5PYmplY3QiLCJzeW50aGV0aWMiLCJhdHRhY2hTdGFja3RyYWNlIiwiZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlciIsImFwaSIsIm1ldGFkYXRhIiwiZW5oYW5jZUV2ZW50V2l0aFNka0luZm8iLCJwYWNrYWdlcyIsInNlc3Npb25Ub1NlbnRyeVJlcXVlc3QiLCJzZW50X2F0IiwiZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCIsImV2ZW50VG9TZW50cnlSZXF1ZXN0IiwiZXZlbnRUeXBlIiwidXNlRW52ZWxvcGUiLCJkZWJ1Z19tZXRhIiwidHJhbnNhY3Rpb25TYW1wbGluZyIsInNhbXBsaW5nTWV0aG9kIiwicmF0ZSIsInJlcSIsImdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgiLCJlbnZlbG9wZSIsInNhbXBsZV9yYXRlcyIsIkFQSSIsIl9kc25PYmplY3QiLCJnZXRCYXNlQXBpRW5kcG9pbnQiLCJnZXRTdG9yZUVuZHBvaW50IiwiX2dldEluZ2VzdEVuZHBvaW50IiwiX2VuY29kZWRBdXRoIiwiX2dldEVudmVsb3BlRW5kcG9pbnQiLCJnZXRTdG9yZUVuZHBvaW50UGF0aCIsImdldFJlcXVlc3RIZWFkZXJzIiwiY2xpZW50TmFtZSIsImNsaWVudFZlcnNpb24iLCJnZXRSZXBvcnREaWFsb2dFbmRwb2ludCIsImRpYWxvZ09wdGlvbnMiLCJlbmNvZGVkT3B0aW9ucyIsImF1dGgiLCJzZW50cnlfa2V5Iiwic2VudHJ5X3ZlcnNpb24iLCJQcm9taXNlQnVmZmVyIiwiX2xpbWl0IiwiX2J1ZmZlciIsImlzUmVhZHkiLCJ0YXNrIiwiZHJhaW4iLCJjYXB0dXJlZFNldFRpbWVvdXQiLCJCYXNlVHJhbnNwb3J0IiwiX3JhdGVMaW1pdHMiLCJfYXBpIiwiX21ldGFkYXRhIiwiX2hhbmRsZVJlc3BvbnNlIiwicmVxdWVzdFR5cGUiLCJfaGFuZGxlUmF0ZUxpbWl0IiwiX2Rpc2FibGVkVW50aWwiLCJjYXRlZ29yeSIsIl9pc1JhdGVMaW1pdGVkIiwiZV8yIiwicmxIZWFkZXIiLCJyYUhlYWRlciIsInBhcmFtZXRlcnMiLCJlXzJfMSIsIkZldGNoVHJhbnNwb3J0IiwiX3NlbmRSZXF1ZXN0Iiwic2VudHJ5UmVxdWVzdCIsIm9yaWdpbmFsUGF5bG9hZCIsImZldGNoUGFyYW1ldGVycyIsIlhIUlRyYW5zcG9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJCcm93c2VyQmFja2VuZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJ0cmFuc3BvcnQiLCJpZ25vcmVPbkVycm9yIiwic2hvdWxkSWdub3JlT25FcnJvciIsImlnbm9yZU5leHRPbkVycm9yIiwid3JhcCIsIl9fc2VudHJ5X3dyYXBwZWRfXyIsInNlbnRyeVdyYXBwZWQiLCJ3cmFwcGVkQXJndW1lbnRzIiwiaGFuZGxlRXZlbnQiLCJCcmVhZGNydW1icyIsImRvbSIsImFkZFNlbnRyeUJyZWFkY3J1bWIiLCJfY29uc29sZUJyZWFkY3J1bWIiLCJfZG9tQnJlYWRjcnVtYiIsIl94aHJCcmVhZGNydW1iIiwiX2ZldGNoQnJlYWRjcnVtYiIsIl9oaXN0b3J5QnJlYWRjcnVtYiIsInBhcnNlZExvYyIsInBhcnNlZEZyb20iLCJwYXJzZWRUbyIsIkJyb3dzZXJDbGllbnQiLCJzaG93UmVwb3J0RGlhbG9nIiwic2NyaXB0Iiwib25Mb2FkIiwib25sb2FkIiwiaW5qZWN0UmVwb3J0RGlhbG9nIiwiREVGQVVMVF9FVkVOVF9UQVJHRVQiLCJUcnlDYXRjaCIsImV2ZW50VGFyZ2V0IiwiX3dyYXBUaW1lRnVuY3Rpb24iLCJfd3JhcFJBRiIsIl93cmFwWEhSIiwiX3dyYXBFdmVudFRhcmdldCIsIm9yaWdpbmFsQ2FsbGJhY2siLCJldmVudE5hbWUiLCJ3cmFwcGVkRXZlbnRIYW5kbGVyIiwib3JpZ2luYWxFdmVudEhhbmRsZXIiLCJ4bWxIdHRwUmVxdWVzdFByb3BzIiwid3JhcE9wdGlvbnMiLCJHbG9iYWxIYW5kbGVycyIsIl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCIsIl9vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXJJbnN0YWxsZWQiLCJzdGFja1RyYWNlTGltaXQiLCJfaW5zdGFsbEdsb2JhbE9uRXJyb3JIYW5kbGVyIiwiX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJjdXJyZW50SHViIiwiaGFzSW50ZWdyYXRpb24iLCJpc0ZhaWxlZE93bkRlbGl2ZXJ5IiwiX2V2ZW50RnJvbUluY29tcGxldGVPbkVycm9yIiwiX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUiLCJfZXZlbnRGcm9tUmVqZWN0aW9uV2l0aFByaW1pdGl2ZSIsImdyb3VwcyIsIkxpbmtlZEVycm9ycyIsImxpbWl0IiwiX2hhbmRsZXIiLCJsaW5rZWRFcnJvcnMiLCJfd2Fsa0Vycm9yVHJlZSIsIlVzZXJBZ2VudCIsInJlZmVycmVyIiwiUmVmZXJlciIsInNwbGl0UGF0aFJlIiwiVHJhbnNhY3Rpb25TYW1wbGluZ01ldGhvZCIsIlNwYW5TdGF0dXMiLCJIT09LUyIsIkNPTVBPTkVOVF9OQU1FX1JFR0VYUCIsIlJPT1RfQ09NUE9ORU5UX05BTUUiLCJBTk9OWU1PVVNfQ09NUE9ORU5UX05BTUUiLCJWdWVIZWxwZXIiLCJfY29tcG9uZW50c0NhY2hlIiwiX2FwcGx5VHJhY2luZ0hvb2tzIiwiJF9zZW50cnlQZXJmSG9vayIsIl9nZXRDb21wb25lbnROYW1lIiwicm9vdE1vdW50Iiwicm9vdEhhbmRsZXIiLCJ0aW1lIiwiX3Jvb3RTcGFuIiwiX2ZpbmlzaFJvb3RTcGFuIiwiYWN0aXZlVHJhbnNhY3Rpb24iLCJnZXRBY3RpdmVUcmFuc2FjdGlvbiIsImNoaWxkSGFuZGxlciIsInNob3VsZFRyYWNrIiwidHJhY2luZ09wdGlvbnMiLCJ0cmFja0NvbXBvbmVudHMiLCJjaGlsZE9mIiwiaW50ZXJuYWxIb29rcyIsImludGVybmFsSG9vayIsImN1cnJlbnRWYWx1ZSIsInNldHVwIiwiX2F0dGFjaEVycm9ySGFuZGxlciIsIl9zdGFydFRyYWNpbmciLCJfX2ZpbGUiLCJleHQiLCJzcGxpdFBhdGgiLCJiYXNlbmFtZSIsIl9yb290U3BhblRpbWVyIiwiYXBwbHlUcmFjaW5nSG9va3MiLCJhcHBsaWVkVHJhY2luZ0hvb2tzIiwiYmVmb3JlQ3JlYXRlIiwiY3VycmVudEVycm9ySGFuZGxlciIsImF0dGFjaFByb3BzIiwibGlmZWN5Y2xlSG9vayIsImxvZ0Vycm9ycyIsImh0dHBTdGF0dXMiLCJVbmF1dGhlbnRpY2F0ZWQiLCJQZXJtaXNzaW9uRGVuaWVkIiwiTm90Rm91bmQiLCJBbHJlYWR5RXhpc3RzIiwiRmFpbGVkUHJlY29uZGl0aW9uIiwiUmVzb3VyY2VFeGhhdXN0ZWQiLCJJbnZhbGlkQXJndW1lbnQiLCJVbmltcGxlbWVudGVkIiwiVW5hdmFpbGFibGUiLCJEZWFkbGluZUV4Y2VlZGVkIiwiSW50ZXJuYWxFcnJvciIsIlVua25vd25FcnJvciIsIlRSQUNFUEFSRU5UX1JFR0VYUCIsImhhc1RyYWNpbmdFbmFibGVkIiwibXNUb1NlYyIsImVycm9yQ2FsbGJhY2siLCJzZXRTdGF0dXMiLCJTcGFuUmVjb3JkZXIiLCJtYXhsZW4iLCJfbWF4bGVuIiwiVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbkNvbnRleHQiLCJfbWVhc3VyZW1lbnRzIiwiX2h1YiIsIl90cmltRW5kIiwidHJpbUVuZCIsInNldE5hbWUiLCJpbml0U3BhblJlY29yZGVyIiwic2V0TWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnRzIiwic2V0TWV0YWRhdGEiLCJuZXdNZXRhZGF0YSIsInNhbXBsZWQiLCJmaW5pc2hlZFNwYW5zIiwic3RhcnRfdGltZXN0YW1wIiwidG9Db250ZXh0IiwidXBkYXRlV2l0aENvbnRleHQiLCJTcGFuIiwidHJhY2VJZCIsInNwYW5JZCIsInBhcmVudFNwYW5JZCIsImNoaWxkU3BhbiIsInNldERhdGEiLCJzZXRIdHRwU3RhdHVzIiwic3BhblN0YXR1cyIsImlzU3VjY2VzcyIsInRvVHJhY2VwYXJlbnQiLCJzYW1wbGVkU3RyaW5nIiwicGFyZW50X3NwYW5faWQiLCJzcGFuX2lkIiwidHJhY2VfaWQiLCJJZGxlVHJhbnNhY3Rpb25TcGFuUmVjb3JkZXIiLCJfcHVzaEFjdGl2aXR5IiwiX3BvcEFjdGl2aXR5IiwidHJhbnNhY3Rpb25TcGFuSWQiLCJJZGxlVHJhbnNhY3Rpb24iLCJfaWRsZUh1YiIsIl9pZGxlVGltZW91dCIsIl9vblNjb3BlIiwiYWN0aXZpdGllcyIsIl9oZWFydGJlYXRUaW1lciIsIl9oZWFydGJlYXRDb3VudGVyIiwiX2ZpbmlzaGVkIiwiX2JlZm9yZUZpbmlzaENhbGxiYWNrcyIsImNsZWFyQWN0aXZlVHJhbnNhY3Rpb24iLCJfaW5pdFRpbWVvdXQiLCJDYW5jZWxsZWQiLCJrZWVwU3BhbiIsInJlZ2lzdGVyQmVmb3JlRmluaXNoQ2FsbGJhY2siLCJfcGluZ0hlYXJ0YmVhdCIsImVuZF8xIiwiX2JlYXQiLCJoZWFydGJlYXRTdHJpbmciLCJfcHJldkhlYXJ0YmVhdFN0cmluZyIsInNhbXBsZSIsInNhbXBsaW5nQ29udGV4dCIsIkV4cGxpY2l0IiwidHJhY2VzU2FtcGxlciIsIlNhbXBsZXIiLCJwYXJlbnRTYW1wbGVkIiwiSW5oZXJpdGFuY2UiLCJ0cmFjZXNTYW1wbGVSYXRlIiwiUmF0ZSIsIl9leHBlcmltZW50cyIsIm1heFNwYW5zIiwiZmlyc3RIaWRkZW5UaW1lIiwiaW5wdXRQcm9taXNlIiwiYmluZFJlcG9ydGVyIiwibWV0cmljIiwicG8iLCJvYnNlcnZlQWxsVXBkYXRlcyIsInByZXZWYWx1ZSIsImlzRmluYWwiLCJkaXNjb25uZWN0IiwidmlzaWJpbGl0eVN0YXRlIiwiZGVsdGEiLCJpbml0TWV0cmljIiwiZW50cmllcyIsIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJzdXBwb3J0ZWRFbnRyeVR5cGVzIiwiZ2V0RW50cmllcyIsImJ1ZmZlcmVkIiwiaXNVbmxvYWRpbmciLCJsaXN0ZW5lcnNBZGRlZCIsIm9uUGFnZUhpZGUiLCJwZXJzaXN0ZWQiLCJvbkhpZGRlbiIsImdldEZpcnN0SGlkZGVuIiwiSW5maW5pdHkiLCJNZXRyaWNzSW5zdHJ1bWVudGF0aW9uIiwiX3BlcmZvcm1hbmNlQ3Vyc29yIiwibWFyayIsIl90cmFja0NMUyIsIl90cmFja0xDUCIsIl90cmFja0ZJRCIsIl90cmFja1RURkIiLCJhZGRQZXJmb3JtYW5jZUVudHJpZXMiLCJlbnRyeVNjcmlwdFNyYyIsImVudHJ5U2NyaXB0U3RhcnRUaW1lc3RhbXAiLCJ0cmFjaW5nSW5pdE1hcmtTdGFydFRpbWUiLCJzY3JpcHRzIiwiZGF0YXNldCIsImVudHJ5Iiwic3RhcnRUaW1lIiwiZW50cnlUeXBlIiwiYWRkUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nIiwiX3N0YXJ0Q2hpbGQiLCJyZXF1ZXN0U3RhcnQiLCJyZXNwb25zZUVuZCIsInJlc3BvbnNlU3RhcnQiLCJhZGRSZXF1ZXN0IiwiYWRkTmF2aWdhdGlvblNwYW5zIiwibWVhc3VyZVN0YXJ0VGltZXN0YW1wIiwibWVhc3VyZUVuZFRpbWVzdGFtcCIsImFkZE1lYXN1cmVTcGFucyIsImZpcnN0SGlkZGVuIiwic2hvdWxkUmVjb3JkIiwicmVzb3VyY2VOYW1lIiwib3JpZ2luIiwiaW5pdGlhdG9yVHlwZSIsInRyYW5zZmVyU2l6ZSIsImVuY29kZWRCb2R5U2l6ZSIsImRlY29kZWRCb2R5U2l6ZSIsImFkZFJlc291cmNlU3BhbnMiLCJfdHJhY2tOYXZpZ2F0b3IiLCJ0aW1lT3JpZ2luXzEiLCJtZWFzdXJlbWVudFRpbWVzdGFtcCIsIm5vcm1hbGl6ZWRWYWx1ZSIsImFicyIsIm9uUmVwb3J0IiwicmVwb3J0QWxsQ2hhbmdlcyIsInJlcG9ydCIsImVudHJ5SGFuZGxlciIsImhhZFJlY2VudElucHV0IiwidGFrZVJlY29yZHMiLCJnZXRDTFMiLCJlZmZlY3RpdmVUeXBlIiwiaXNNZWFzdXJlbWVudFZhbHVlIiwicnR0IiwiZG93bmxpbmsiLCJkZXZpY2VNZW1vcnkiLCJoYXJkd2FyZUNvbmN1cnJlbmN5Iiwib25GaW5hbCIsImdldExDUCIsInByb2Nlc3NpbmdTdGFydCIsInBlcmZNZXRyaWNzIiwib25GaXJzdElucHV0RGVsYXkiLCJjYW5jZWxhYmxlIiwicmVxdWVzdFRpbWUiLCJuYXZpZ2F0aW9uRW50cnkiLCJnZXRFbnRyaWVzQnlUeXBlIiwiZ2V0TmF2aWdhdGlvbkVudHJ5RnJvbVBlcmZvcm1hbmNlVGltaW5nIiwiZXZlbnRFbmQiLCJkZWZhdWx0UmVxdWVzdEluc3RydW1lbnRhdGlvbk9wdGlvbnMiLCJ0cmFjZUZldGNoIiwidHJhY2VYSFIiLCJ0cmFjaW5nT3JpZ2lucyIsIkRFRkFVTFRfQlJPV1NFUl9UUkFDSU5HX09QVElPTlMiLCJpZGxlVGltZW91dCIsIm1hcmtCYWNrZ3JvdW5kVHJhbnNhY3Rpb25zIiwibWF4VHJhbnNhY3Rpb25EdXJhdGlvbiIsInJvdXRpbmdJbnN0cnVtZW50YXRpb24iLCJzdGFydFRyYW5zYWN0aW9uT25QYWdlTG9hZCIsInN0YXJ0VHJhbnNhY3Rpb25PbkxvY2F0aW9uQ2hhbmdlIiwic3RhcnRpbmdVcmwiLCJwYXRobmFtZSIsIkJyb3dzZXJUcmFjaW5nIiwiX21ldHJpY3MiLCJfZW1pdE9wdGlvbnNXYXJuaW5nIiwiX2dldEN1cnJlbnRIdWIiLCJzaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdCIsIl9jcmVhdGVSb3V0ZVRyYW5zYWN0aW9uIiwidXJsTWFwIiwiZGVmYXVsdFNob3VsZENyZWF0ZVNwYW4iLCJvcmlnaW5zIiwic2hvdWxkQ3JlYXRlU3BhbiIsImN1cnJlbnRDbGllbnRPcHRpb25zIiwiX19zcGFuIiwiZmV0Y2hDYWxsYmFjayIsIl9fc2VudHJ5X3hocl9zcGFuX2lkX18iLCJ4aHJDYWxsYmFjayIsInJlZ2lzdGVyUmVxdWVzdEluc3RydW1lbnRhdGlvbiIsImJlZm9yZU5hdmlnYXRlIiwicGFyZW50Q29udGV4dEZyb21IZWFkZXIiLCJ0cmFjZXBhcmVudCIsImV4dHJhY3RUcmFjZXBhcmVudERhdGEiLCJnZXRIZWFkZXJDb250ZXh0IiwiZXhwYW5kZWRDb250ZXh0IiwibW9kaWZpZWRDb250ZXh0IiwiZmluYWxDb250ZXh0IiwiaWRsZVRyYW5zYWN0aW9uIiwib25TY29wZSIsInN0YXJ0SWRsZVRyYW5zYWN0aW9uIiwibWF4RHVyYXRpb24iLCJkaWZmIiwiYWRqdXN0VHJhbnNhY3Rpb25EdXJhdGlvbiIsInNlY1RvTXMiLCJFeHByZXNzIiwiX3JvdXRlciIsInJvdXRlciIsIl9tZXRob2RzIiwid3JhcE1pZGRsZXdhcmVBcmdzIiwicGF0Y2hNaWRkbGV3YXJlIiwiYXJpdHkiLCJfX3NlbnRyeV90cmFuc2FjdGlvbiIsIkludGVncmF0aW9ucyIsInRyYWNpbmciLCJ3aW5kb3dfMSIsIlNFTlRSWV9SRUxFQVNFIiwiYXV0b1Nlc3Npb25UcmFja2luZyIsImNsaWVudENsYXNzIiwiZGVidWciLCJpbml0QW5kQmluZCIsInN0YXJ0U2Vzc2lvblRyYWNraW5nIiwiYnV0dG9uUmVmcmVzaCIsImNsaWNrIiwicGVyZm9ybVN1bW1hcnkiXSwibWFwcGluZ3MiOiI7cUhBRUEsSUFBSUEsRUFBYSxDQUNiLFlBQ0EsWUFDQSxpQkFDQSxjQUNBLGdCQUNBLGFBQ0EsWUFDQSxXQUNBLE9BQ0EsWUFDQSxjQUNBLHlCQUNBLFVBQ0EsbUJBQ0Esb0JBQ0EsbUJBQ0EsVUFDQSxjQUNBLG1CQUNBLDBCQUNBLGFBQ0EsWUFDQSxXQUNBLFlBQ0EsVUFDQSx5QkFDQSxTQUNBLGFBQ0EsUUFDQSxhQUNBLGFBTUFDLEVBQXVCLENBR3ZCQyxVQUFXLENBQUMsY0FDWkMsZUFBZ0IsQ0FBQyxTQUNqQkMsWUFBYSxDQUFDLGVBQ2RDLGNBQWUsQ0FBQyxjQUNoQkMsV0FBWSxDQUFDLFVBQ2JDLFVBQVcsQ0FBQyxVQUNaQyxTQUFVLENBQUMsTUFBTyxTQUNsQkMsVUFBVyxDQUFDLGFBQ1pDLFFBQVMsQ0FBQyxTQUNWQyxpQkFBa0IsQ0FBQyxVQUNuQkMsa0JBQW1CLENBQUMsU0FBVSxlQUM5QkMsaUJBQWtCLENBQUMsU0FBVSxVQUM3QkMsWUFBYSxDQUFDLFdBQ2RDLFdBQVksQ0FBQyxRQUNiQyxVQUFXLENBQUMsT0FDWkMsVUFBVyxDQUFDLE1BQU8sVUFDbkJDLE9BQVEsQ0FBQyxXQUNUQyxXQUFZLENBQUMsU0FBVSxPQUN2QkMsV0FBWSxDQUFDLFNBQVUsVUFDdkJDLFVBQVcsQ0FBQyxTQUFVLFdBR3RCQyxFQUF1QixXQUl2QixTQUFTQSxFQUFNQyxRQUNLLElBQVpBLElBQXNCQSxFQUFVLElBSXBDQyxLQUFLQyxLQUFPSCxFQUFNSSxHQUNsQkYsS0FBS0csWUFBY0MsTUFBTUMsUUFBUU4sRUFBUU8sWUFDbkNQLEVBQVFPLFdBQ1I5QixFQUNOd0IsS0FBS08sc0JBQXNCLHVCQUF3QlIsSUFBVUEsRUFBUVMsbUJBZ0h6RSxPQTNHQVYsRUFBTVcsVUFBVUMsVUFBWSxTQUFVQyxFQUFHQyxHQUNyQyxJQUFJQyxFQUNKLElBRUlBLEdBRG9CLE9BQWVDLEVBQVEsV0FDaEJDLFdBRS9CLE1BQU9DLEdBRUgsWUFEQSxVQUFhLDhEQUdqQmhCLEtBQUtpQixzQkFBc0JKLEVBQVliLEtBQUtHLFlBQWFTLElBSzdEZCxFQUFNVyxVQUFVUSxzQkFBd0IsU0FBVUosRUFBWVAsRUFBWU0sR0FDdEUsSUFBSU0sRUFBUWxCLEtBQ1pNLEVBQVdhLFNBQVEsU0FBVUMsR0FBYSxPQUFPRixFQUFNRyxnQkFBZ0JSLEVBQVlPLEVBQVdSLE9BS2xHZCxFQUFNVyxVQUFVWSxnQkFBa0IsU0FBVVIsRUFBWU8sRUFBV1IsR0FDL0QsR0FBTVEsS0FBYVAsRUFBV0osVUFBOUIsQ0FFQSxJQUFJYSxFQUFpQnRCLEtBQUt1QixzQ0FBc0NDLEtBQUt4QixPQUNyRSxRQUFLYSxFQUFXSixVQUFXVyxHQUFXLFNBQVVLLEdBQzVDLE9BQU8sV0FFSCxJQURBLElBSUlDLEVBQUlDLEVBQUlDLEVBQUlDLEVBSlpDLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FHekIsSUFBSUcsRUFBVUosRUFBS0EsRUFBS0csT0FBUyxHQUM3QkUsRUFBUXZCLElBQWdCd0IsV0FDeEJDLEVBQThCLFFBQWhCWCxFQUFLUyxTQUEwQixJQUFQVCxPQUFnQixFQUFTQSxFQUFHWSxVQUd0RSxHQUF1QixtQkFBWkosR0FBeUMsY0FBZGQsR0FBNkMsSUFBaEJVLEVBQUtHLE9BQWUsQ0FDbkYsSUFBSU0sRUFBK0IsUUFBckJaLEVBQUtVLFNBQStCLElBQVBWLE9BQWdCLEVBQVNBLEVBQUdhLFdBQVdsQixFQUFldEIsS0FBTW9CLEVBQVdVLElBQzlHVyxFQUFlaEIsRUFBS2lCLEtBQUtDLE1BQU1sQixHQUFNLFFBQVMsQ0FBQ3pCLE1BQU84QixJQUMxRCxPQUFJLFFBQVdXLEdBQ0pBLEVBQWFHLE1BQUssU0FBVUMsR0FDL0IsSUFBSW5CLEVBRUosT0FEa0IsUUFBakJBLEVBQUthLFNBQTJCLElBQVBiLEdBQXlCQSxFQUFHb0IsU0FDL0NELE1BSU8sUUFBakJqQixFQUFLVyxTQUEyQixJQUFQWCxHQUF5QkEsRUFBR2tCLFNBQy9DTCxHQUdmLElBQUlNLEVBQTZCLFFBQXJCbEIsRUFBS1EsU0FBK0IsSUFBUFIsT0FBZ0IsRUFBU0EsRUFBR1csV0FBV2xCLEVBQWV0QixLQUFNb0IsRUFBV1UsRUFBS2tCLE1BQU0sR0FBSSxLQUMvSCxPQUFPdkIsRUFBS2lCLEtBQUtDLE1BQU1sQixHQUFNLFFBQVMsQ0FBQ3pCLE1BQU84QixFQUFLa0IsTUFBTSxHQUFJLEdBQUksQ0FBQyxTQUFVQyxFQUFLQyxHQUN6RSxJQUFJeEIsRUFDWSxRQUFmQSxFQUFLcUIsU0FBeUIsSUFBUHJCLEdBQXlCQSxFQUFHb0IsU0FDcERaLEVBQVFlLEVBQUtDLGFBUWpDcEQsRUFBTVcsVUFBVWMsc0NBQXdDLFNBQVVWLEVBQVlPLEVBQVdVLEdBQ3JGLElBQUlxQixFQUFPLENBQ1BDLGVBQWdCdkMsRUFBV3VDLGVBQzNCQyxPQUFReEMsRUFBV3dDLE9BQ25CQyxVQUFXekMsRUFBV3lDLFdBRXRCQyxFQUFjLENBQ2RDLEdBQUksS0FDSkMsWUFBYXJDLEVBQ2IrQixLQUFNQSxHQUlOTyxFQUFZakYsRUFBcUIyQyxHQUNqQ3VDLEVBQWlCdkQsTUFBTUMsUUFBUUwsS0FBS08scUJBQ2xDUCxLQUFLTyxvQkFBb0JxRCxTQUFTeEMsR0FDbENwQixLQUFLTyxvQkFDWCxJQUFLbUQsSUFBY0MsRUFDZixPQUFPSixFQUVYLElBRUksR0FBa0IsY0FBZG5DLEVBQTJCLENBQzNCLElBQUlNLEdBQUssUUFBT0ksRUFBTSxHQUFJK0IsRUFBTW5DLEVBQUcsR0FBSW9DLEVBQVNwQyxFQUFHLEdBQ25EeUIsRUFBS08sRUFBVSxJQUFxQixpQkFBUkcsRUFBbUJBLEVBQU1BLEVBQUk1RCxNQUFRLGNBQ2pFa0QsRUFBS08sRUFBVSxJQUF3QixpQkFBWEksRUFBc0JBLEVBQVNBLEVBQU83RCxNQUFRLG1CQUcxRSxJQUFLLElBQUk4RCxFQUFJLEVBQUdBLEVBQUlMLEVBQVV6QixPQUFROEIsSUFDbENaLEVBQUtPLEVBQVVLLElBQU1DLEtBQUtDLFVBQVVuQyxFQUFLaUMsSUFJckQsTUFBT0csSUFHUCxPQUFPWCxHQUtYekQsRUFBTUksR0FBSyxRQUNKSixFQTdIZSxJLHlFQzlEMUIsSUFBSXFFLEVBQXVCLFdBQ3ZCLFNBQVNBLElBSUxuRSxLQUFLQyxLQUFPa0UsRUFBTWpFLEdBa0R0QixPQTdDQWlFLEVBQU0xRCxVQUFVQyxVQUFZLFNBQVVDLEVBQUdDLEdBQ3JDLElBQUl3RCxFQUNKLElBRUlBLEdBQWEsT0FBZXRELEVBQVEsMkJBRXhDLE1BQU9FLEdBRUgsWUFEQSxVQUFhLDZEQU9qQixRQUFLb0QsRUFBVzNELFVBQVcsU0FBUyxTQUFVZ0IsR0FDMUMsT0FBTyxTQUFVMUIsRUFBU3NFLEVBQVFDLEdBQzlCLElBQUk1QyxFQUFJQyxFQUdKb0IsRUFBNkIsUUFBckJwQixFQURzQixRQUFoQkQsRUFETmQsSUFBZ0J3QixrQkFDcUIsSUFBUFYsT0FBZ0IsRUFBU0EsRUFBR1ksaUJBQ3RCLElBQVBYLE9BQWdCLEVBQVNBLEVBQUdhLFdBQVcsQ0FDNUVpQixZQUFnQyxpQkFBWjFELEVBQXVCQSxFQUFVQSxFQUFRd0UsSUFDN0RmLEdBQUksT0FFUixNQUF3QixtQkFBYmMsRUFDQTdDLEVBQUtpQixLQUFLMUMsS0FBTUQsRUFBU3NFLEdBQVEsU0FBVXBCLEVBQUtDLEVBQVFzQixHQUMzRCxJQUFJOUMsRUFDWSxRQUFmQSxFQUFLcUIsU0FBeUIsSUFBUHJCLEdBQXlCQSxFQUFHb0IsU0FDcER3QixFQUFTckIsRUFBS0MsRUFBUXNCLE1BR1IsbUJBQVhILEVBQ0E1QyxFQUFLaUIsS0FBSzFDLEtBQU1ELEdBQVMsU0FBVWtELEVBQUtDLEVBQVFzQixHQUNuRCxJQUFJOUMsRUFDWSxRQUFmQSxFQUFLcUIsU0FBeUIsSUFBUHJCLEdBQXlCQSxFQUFHb0IsU0FDcER1QixFQUFPcEIsRUFBS0MsRUFBUXNCLE1BR3JCL0MsRUFBS2lCLEtBQUsxQyxLQUFNRCxFQUFTc0UsRUFBUUMsUUFPcERILEVBQU1qRSxHQUFLLFFBQ0ppRSxFQXZEZSxJLHlFQ0ExQixJQUFJTSxFQUEwQixXQUMxQixTQUFTQSxJQUlMekUsS0FBS0MsS0FBT3dFLEVBQVN2RSxHQXdEekIsT0FuREF1RSxFQUFTaEUsVUFBVUMsVUFBWSxTQUFVQyxFQUFHQyxHQUN4QyxJQUFJOEQsRUFDSixJQUVJQSxHQURlLE9BQWU1RCxFQUFRLE1BQ3BCNkQsT0FFdEIsTUFBTzNELEdBRUgsWUFEQSxVQUFhLDZEQVNqQixRQUFLMEQsRUFBT2pFLFVBQVcsU0FBUyxTQUFVZ0IsR0FDdEMsT0FBTyxTQUFVbUQsRUFBUVAsRUFBUUMsR0FDN0IsSUFBSTVDLEVBQUlDLEVBR0pvQixFQUE2QixRQUFyQnBCLEVBRHNCLFFBQWhCRCxFQUROZCxJQUFnQndCLGtCQUNxQixJQUFQVixPQUFnQixFQUFTQSxFQUFHWSxpQkFDdEIsSUFBUFgsT0FBZ0IsRUFBU0EsRUFBR2EsV0FBVyxDQUM1RWlCLFlBQStCLGlCQUFYbUIsRUFBc0JBLEVBQVNBLEVBQU9DLEtBQzFEckIsR0FBSSxPQUVSLE1BQXdCLG1CQUFiYyxFQUNBN0MsRUFBS2lCLEtBQUsxQyxLQUFNNEUsRUFBUVAsR0FBUSxTQUFVcEIsRUFBS0MsR0FDbEQsSUFBSXhCLEVBQ1ksUUFBZkEsRUFBS3FCLFNBQXlCLElBQVByQixHQUF5QkEsRUFBR29CLFNBQ3BEd0IsRUFBU3JCLEVBQUtDLE1BR0EsbUJBQVhtQixFQUNBNUMsRUFBS2lCLEtBQUsxQyxLQUFNNEUsR0FBUSxTQUFVM0IsRUFBS0MsR0FDMUMsSUFBSXhCLEVBQ1ksUUFBZkEsRUFBS3FCLFNBQXlCLElBQVByQixHQUF5QkEsRUFBR29CLFNBQ3BEdUIsRUFBT3BCLEVBQUtDLE1BR2J6QixFQUFLaUIsS0FBSzFDLEtBQU00RSxFQUFRUCxHQUFRekIsTUFBSyxTQUFVQyxHQUNsRCxJQUFJbkIsRUFFSixPQURnQixRQUFmQSxFQUFLcUIsU0FBeUIsSUFBUHJCLEdBQXlCQSxFQUFHb0IsU0FDN0NELFVBUXZCNEIsRUFBU3ZFLEdBQUssV0FDUHVFLEVBN0RrQixJLDRDQ0t0QixTQUFTSyxFQUFpQkMsR0FLN0IsSUFXSSxJQVZBLElBQUlDLEVBQWNELEVBR2RFLEVBQU0sR0FDTkMsRUFBUyxFQUNUQyxFQUFNLEVBRU5DLEVBRFksTUFDVW5ELE9BQ3RCb0QsT0FBVSxFQUVQTCxHQUFlRSxJQVRJLEtBZU4sVUFMaEJHLEVBQVVDLEVBQXFCTixLQUtKRSxFQUFTLEdBQUtDLEVBQU1GLEVBQUloRCxPQUFTbUQsRUFBWUMsRUFBUXBELFFBZC9ELEtBaUJqQmdELEVBQUlNLEtBQUtGLEdBQ1RGLEdBQU9FLEVBQVFwRCxPQUNmK0MsRUFBY0EsRUFBWVEsV0FFOUIsT0FBT1AsRUFBSVEsVUFBVUMsS0FqQkwsT0FtQnBCLE1BQU94QixHQUNILE1BQU8sYUFRZixTQUFTb0IsRUFBcUJLLEdBQzFCLElBRUlDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FoQyxFQU5BZ0IsRUFBT1ksRUFDUFYsRUFBTSxHQU1WLElBQUtGLElBQVNBLEVBQUtpQixRQUNmLE1BQU8sR0FRWCxHQU5BZixFQUFJTSxLQUFLUixFQUFLaUIsUUFBUUMsZUFDbEJsQixFQUFLN0UsSUFDTCtFLEVBQUlNLEtBQUssSUFBTVIsRUFBSzdFLEtBR3hCMEYsRUFBWWIsRUFBS2EsYUFDQSxRQUFTQSxHQUV0QixJQURBQyxFQUFVRCxFQUFVTSxNQUFNLE9BQ3JCbkMsRUFBSSxFQUFHQSxFQUFJOEIsRUFBUTVELE9BQVE4QixJQUM1QmtCLEVBQUlNLEtBQUssSUFBTU0sRUFBUTlCLElBRy9CLElBQUlvQyxFQUFlLENBQUMsT0FBUSxPQUFRLFFBQVMsT0FDN0MsSUFBS3BDLEVBQUksRUFBR0EsRUFBSW9DLEVBQWFsRSxPQUFROEIsSUFDakMrQixFQUFNSyxFQUFhcEMsSUFDbkJnQyxFQUFPaEIsRUFBS3FCLGFBQWFOLEtBRXJCYixFQUFJTSxLQUFLLElBQU1PLEVBQU0sS0FBUUMsRUFBTyxNQUc1QyxPQUFPZCxFQUFJUyxLQUFLLE0sY0NyRWIsU0FBU1csRUFBUUMsR0FDcEIsT0FBUUMsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzRELElBQ25DLElBQUssaUJBRUwsSUFBSyxxQkFFTCxJQUFLLHdCQUNELE9BQU8sRUFDWCxRQUNJLE9BQU9HLEVBQWFILEVBQUtJLFFBVTlCLFNBQVNDLEVBQWFMLEdBQ3pCLE1BQStDLHdCQUF4Q0MsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzRELEdBU25DLFNBQVNNLEVBQVdOLEdBQ3ZCLE1BQStDLHNCQUF4Q0MsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzRELEdBU25DLFNBQVNPLEVBQWVQLEdBQzNCLE1BQStDLDBCQUF4Q0MsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzRELEdBU25DLFNBQVNRLEVBQVNSLEdBQ3JCLE1BQStDLG9CQUF4Q0MsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzRELEdBU25DLFNBQVNTLEVBQVlULEdBQ3hCLE9BQWUsT0FBUkEsR0FBZ0MsaUJBQVJBLEdBQW1DLG1CQUFSQSxFQVN2RCxTQUFTVSxFQUFjVixHQUMxQixNQUErQyxvQkFBeENDLE9BQU85RixVQUFVK0YsU0FBUzlELEtBQUs0RCxHQVNuQyxTQUFTVyxFQUFRWCxHQUNwQixNQUF3QixvQkFBVlksT0FBeUJULEVBQWFILEVBQUtZLE9BU3RELFNBQVNDLEVBQVViLEdBQ3RCLE1BQTBCLG9CQUFaYyxTQUEyQlgsRUFBYUgsRUFBS2MsU0FTeEQsU0FBU0MsRUFBU2YsR0FDckIsTUFBK0Msb0JBQXhDQyxPQUFPOUYsVUFBVStGLFNBQVM5RCxLQUFLNEQsR0FNbkMsU0FBU2dCLEVBQVdoQixHQUV2QixPQUFPaUIsUUFBUWpCLEdBQU9BLEVBQUkxRCxNQUE0QixtQkFBYjBELEVBQUkxRCxNQVMxQyxTQUFTNEUsRUFBaUJsQixHQUM3QixPQUFPVSxFQUFjVixJQUFRLGdCQUFpQkEsR0FBTyxtQkFBb0JBLEdBQU8sb0JBQXFCQSxFQVVsRyxTQUFTRyxFQUFhSCxFQUFLbUIsR0FDOUIsSUFDSSxPQUFPbkIsYUFBZW1CLEVBRTFCLE1BQU9DLEdBQ0gsT0FBTyxHLDJLQzNJWEMsR0FBUyxVQUVUQyxFQUFTLGlCQUVUQyxFQUF3QixXQUV4QixTQUFTQSxJQUNMN0gsS0FBSzhILFVBQVcsRUFpRHBCLE9BOUNBRCxFQUFPcEgsVUFBVXNILFFBQVUsV0FDdkIvSCxLQUFLOEgsVUFBVyxHQUdwQkQsRUFBT3BILFVBQVV1SCxPQUFTLFdBQ3RCaEksS0FBSzhILFVBQVcsR0FHcEJELEVBQU9wSCxVQUFVd0gsSUFBTSxXQUVuQixJQURBLElBQUluRyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXBCL0IsS0FBSzhILFdBR1YsU0FBZSxXQUNYSCxFQUFPTyxRQUFRRCxJQUFJTCxFQUFTLFVBQVk5RixFQUFLNEQsS0FBSyxVQUkxRG1DLEVBQU9wSCxVQUFVMEgsS0FBTyxXQUVwQixJQURBLElBQUlyRyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXBCL0IsS0FBSzhILFdBR1YsU0FBZSxXQUNYSCxFQUFPTyxRQUFRQyxLQUFLUCxFQUFTLFdBQWE5RixFQUFLNEQsS0FBSyxVQUk1RG1DLEVBQU9wSCxVQUFVMkgsTUFBUSxXQUVyQixJQURBLElBQUl0RyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXBCL0IsS0FBSzhILFdBR1YsU0FBZSxXQUNYSCxFQUFPTyxRQUFRRSxNQUFNUixFQUFTLFlBQWM5RixFQUFLNEQsS0FBSyxVQUd2RG1DLEVBcERnQixHQXVEM0JGLEVBQU9VLFdBQWFWLEVBQU9VLFlBQWMsR0FDekMsSUFBSUMsRUFBU1gsRUFBT1UsV0FBV0MsU0FBV1gsRUFBT1UsV0FBV0MsT0FBUyxJQUFJVCxJLHFIQzdEckVVLEVBQXVCLEdBTXBCLFNBQVNDLElBQ1osT0FBUSxTQUNGLEVBQUFDLEVBQ2tCLG9CQUFYQyxPQUNIQSxPQUNnQixvQkFBVEMsS0FDSEEsS0FDQUosRUFPWCxTQUFTSyxJQUNaLElBQUlqQixFQUFTYSxJQUNUSyxFQUFTbEIsRUFBT2tCLFFBQVVsQixFQUFPbUIsU0FDckMsUUFBaUIsSUFBWEQsR0FBc0JBLEVBQU9FLGdCQUFpQixDQUVoRCxJQUFJQyxFQUFNLElBQUlDLFlBQVksR0FDMUJKLEVBQU9FLGdCQUFnQkMsR0FHdkJBLEVBQUksR0FBZSxLQUFUQSxFQUFJLEdBQWMsTUFHNUJBLEVBQUksR0FBZSxNQUFUQSxFQUFJLEdBQWUsTUFDN0IsSUFBSUUsRUFBTSxTQUFVQyxHQUVoQixJQURBLElBQUlDLEVBQUlELEVBQUkzQyxTQUFTLElBQ2Q0QyxFQUFFbkgsT0FBUyxHQUNkbUgsRUFBSSxJQUFNQSxFQUVkLE9BQU9BLEdBRVgsT0FBUUYsRUFBSUYsRUFBSSxJQUFNRSxFQUFJRixFQUFJLElBQU1FLEVBQUlGLEVBQUksSUFBTUUsRUFBSUYsRUFBSSxJQUFNRSxFQUFJRixFQUFJLElBQU1FLEVBQUlGLEVBQUksSUFBTUUsRUFBSUYsRUFBSSxJQUFNRSxFQUFJRixFQUFJLElBR3RILE1BQU8sbUNBQW1DSyxRQUFRLFNBQVMsU0FBVUMsR0FFakUsSUFBSUMsRUFBcUIsR0FBaEJDLEtBQUtDLFNBQWlCLEVBRy9CLE9BRGMsTUFBTkgsRUFBWUMsRUFBUyxFQUFKQSxFQUFXLEdBQzNCL0MsU0FBUyxPQVVuQixTQUFTa0QsRUFBU0MsR0FDckIsSUFBS0EsRUFDRCxNQUFPLEdBRVgsSUFBSUMsRUFBUUQsRUFBSUMsTUFBTSxnRUFDdEIsSUFBS0EsRUFDRCxNQUFPLEdBR1gsSUFBSUMsRUFBUUQsRUFBTSxJQUFNLEdBQ3BCRSxFQUFXRixFQUFNLElBQU0sR0FDM0IsTUFBTyxDQUNIRyxLQUFNSCxFQUFNLEdBQ1pJLEtBQU1KLEVBQU0sR0FDWkssU0FBVUwsRUFBTSxHQUNoQk0sU0FBVU4sRUFBTSxHQUFLQyxFQUFRQyxHQU85QixTQUFTSyxFQUFvQkMsR0FDaEMsR0FBSUEsRUFBTUMsUUFDTixPQUFPRCxFQUFNQyxRQUVqQixHQUFJRCxFQUFNRSxXQUFhRixFQUFNRSxVQUFVakcsUUFBVStGLEVBQU1FLFVBQVVqRyxPQUFPLEdBQUksQ0FDeEUsSUFBSWlHLEVBQVlGLEVBQU1FLFVBQVVqRyxPQUFPLEdBQ3ZDLE9BQUlpRyxFQUFVQyxNQUFRRCxFQUFVRSxNQUNyQkYsRUFBVUMsS0FBTyxLQUFPRCxFQUFVRSxNQUV0Q0YsRUFBVUMsTUFBUUQsRUFBVUUsT0FBU0osRUFBTUssVUFBWSxZQUVsRSxPQUFPTCxFQUFNSyxVQUFZLFlBR3RCLFNBQVNDLEVBQWVwRyxHQUMzQixJQUFJcUQsRUFBU2EsSUFFYixLQUFNLFlBQWFiLEdBQ2YsT0FBT3JELElBR1gsSUFBSXFHLEVBQWtCaEQsRUFBT08sUUFDekIwQyxFQUFnQixHQU5QLENBQUMsUUFBUyxPQUFRLE9BQVEsUUFBUyxNQUFPLFVBUWhEekosU0FBUSxTQUFVMEosR0FFakJBLEtBQVNsRCxFQUFPTyxTQUFXeUMsRUFBZ0JFLEdBQU9DLHNCQUNsREYsRUFBY0MsR0FBU0YsRUFBZ0JFLEdBQ3ZDRixFQUFnQkUsR0FBU0YsRUFBZ0JFLEdBQU9DLHdCQUl4RCxJQUFJNUgsRUFBU29CLElBS2IsT0FIQWlDLE9BQU93RSxLQUFLSCxHQUFlekosU0FBUSxTQUFVMEosR0FDekNGLEVBQWdCRSxHQUFTRCxFQUFjQyxNQUVwQzNILEVBU0osU0FBUzhILEVBQXNCWixFQUFPSSxFQUFPRCxHQUNoREgsRUFBTUUsVUFBWUYsRUFBTUUsV0FBYSxHQUNyQ0YsRUFBTUUsVUFBVWpHLE9BQVMrRixFQUFNRSxVQUFVakcsUUFBVSxHQUNuRCtGLEVBQU1FLFVBQVVqRyxPQUFPLEdBQUsrRixFQUFNRSxVQUFVakcsT0FBTyxJQUFNLEdBQ3pEK0YsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR21HLE1BQVFKLEVBQU1FLFVBQVVqRyxPQUFPLEdBQUdtRyxPQUFTQSxHQUFTLEdBQzlFSixFQUFNRSxVQUFVakcsT0FBTyxHQUFHa0csS0FBT0gsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2tHLE1BQVFBLEdBQVEsUUFReEUsU0FBU1UsRUFBc0JiLEVBQU9jLFFBQ3ZCLElBQWRBLElBQXdCQSxFQUFZLElBRXhDLElBR0lkLEVBQU1FLFVBQVVqRyxPQUFPLEdBQUc2RyxVQUFZZCxFQUFNRSxVQUFVakcsT0FBTyxHQUFHNkcsV0FBYSxHQUM3RTNFLE9BQU93RSxLQUFLRyxHQUFXL0osU0FBUSxTQUFVMkUsR0FHckNzRSxFQUFNRSxVQUFVakcsT0FBTyxHQUFHNkcsVUFBVXBGLEdBQU9vRixFQUFVcEYsTUFHN0QsTUFBTzVCLEtBT0osU0FBU2lILElBQ1osSUFDSSxPQUFPQyxTQUFTQyxTQUFTQyxLQUU3QixNQUFPQyxHQUNILE1BQU8sSUE0QlIsU0FBU0MsRUFBc0JDLEVBQUtDLEdBQ3ZDLElBQUtBLEVBQ0QsT0FSZ0IsSUFVcEIsSUFBSUMsRUFBY0MsU0FBUyxHQUFLRixFQUFRLElBQ3hDLElBQUtHLE1BQU1GLEdBQ1AsT0FBcUIsSUFBZEEsRUFFWCxJQUFJRyxFQUFhQyxLQUFLQyxNQUFNLEdBQUtOLEdBQ2pDLE9BQUtHLE1BQU1DLEdBZlMsSUFnQlRBLEVBQWFMLEksY0N2TXJCLFNBQVNRLElBQ1osTUFBd0YscUJBQWpGMUYsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBd0Isb0JBQVp3SixRQUEwQkEsUUFBVSxHQVE5RSxTQUFTQyxFQUFlQyxFQUFLQyxHQUVoQyxPQUFPRCxFQUFJRSxRQUFRRCxHLHNJQ1ZuQkUsRUFBc0IsV0FDdEIsU0FBU0EsSUFDTHZNLEtBQUt3TSxZQUFpQyxtQkFBWkMsUUFDMUJ6TSxLQUFLME0sT0FBUzFNLEtBQUt3TSxZQUFjLElBQUlDLFFBQVksR0F5Q3JELE9BbkNBRixFQUFLOUwsVUFBVWtNLFFBQVUsU0FBVUMsR0FDL0IsR0FBSTVNLEtBQUt3TSxZQUNMLFFBQUl4TSxLQUFLME0sT0FBT0csSUFBSUQsS0FHcEI1TSxLQUFLME0sT0FBT0ksSUFBSUYsSUFDVCxHQUdYLElBQUssSUFBSTdJLEVBQUksRUFBR0EsRUFBSS9ELEtBQUswTSxPQUFPekssT0FBUThCLElBRXBDLEdBRFkvRCxLQUFLME0sT0FBTzNJLEtBQ1Y2SSxFQUNWLE9BQU8sRUFJZixPQURBNU0sS0FBSzBNLE9BQU9uSCxLQUFLcUgsSUFDVixHQU1YTCxFQUFLOUwsVUFBVXNNLFVBQVksU0FBVUgsR0FDakMsR0FBSTVNLEtBQUt3TSxZQUNMeE0sS0FBSzBNLE9BQU9NLE9BQU9KLFFBR25CLElBQUssSUFBSTdJLEVBQUksRUFBR0EsRUFBSS9ELEtBQUswTSxPQUFPekssT0FBUThCLElBQ3BDLEdBQUkvRCxLQUFLME0sT0FBTzNJLEtBQU82SSxFQUFLLENBQ3hCNU0sS0FBSzBNLE9BQU9PLE9BQU9sSixFQUFHLEdBQ3RCLFFBS1R3SSxFQTVDYyxHLGtCQ1NsQixTQUFTVyxFQUFLQyxFQUFRbE4sRUFBTW1OLEdBQy9CLEdBQU1uTixLQUFRa04sRUFBZCxDQUdBLElBQUlFLEVBQVdGLEVBQU9sTixHQUNsQnFOLEVBQVVGLEVBQW1CQyxHQUdqQyxHQUF1QixtQkFBWkMsRUFDUCxJQUNJQSxFQUFRN00sVUFBWTZNLEVBQVE3TSxXQUFhLEdBQ3pDOEYsT0FBT2dILGlCQUFpQkQsRUFBUyxDQUM3QnhDLG9CQUFxQixDQUNqQjBDLFlBQVksRUFDWmhELE1BQU82QyxLQUluQixNQUFPSSxJQUtYTixFQUFPbE4sR0FBUXFOLEdBUVosU0FBU0ksRUFBVUMsR0FDdEIsT0FBT3BILE9BQU93RSxLQUFLNEMsR0FDZDlKLEtBQUksU0FBVWlDLEdBQU8sT0FBTzhILG1CQUFtQjlILEdBQU8sSUFBTThILG1CQUFtQkQsRUFBTzdILE9BQ3RGSixLQUFLLEtBUWQsU0FBU21JLEVBQWNyRCxHQUNuQixJQUFJLEVBQUFzRCxFQUFBLElBQVF0RCxHQUFRLENBQ2hCLElBQUlwQyxFQUFRb0MsRUFDUnZILEVBQU0sQ0FDTm9ILFFBQVNqQyxFQUFNaUMsUUFDZnBLLEtBQU1tSSxFQUFNbkksS0FDWjhOLE1BQU8zRixFQUFNMkYsT0FFakIsSUFBSyxJQUFJaEssS0FBS3FFLEVBQ043QixPQUFPOUYsVUFBVXVOLGVBQWV0TCxLQUFLMEYsRUFBT3JFLEtBQzVDZCxFQUFJYyxHQUFLcUUsRUFBTXJFLElBR3ZCLE9BQU9kLEVBRVgsSUFBSSxFQUFBNkssRUFBQSxJQUFRdEQsR0FBUSxDQUNoQixJQUFJeUQsRUFBVXpELEVBQ1YyQyxFQUFTLEdBQ2JBLEVBQU81QyxLQUFPMEQsRUFBUTFELEtBRXRCLElBQ0k0QyxFQUFPZSxRQUFTLEVBQUFKLEVBQUEsSUFBVUcsRUFBUUMsU0FDNUIsT0FBaUJELEVBQVFDLFFBQ3pCM0gsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBS3VMLEVBQVFDLFFBRWpELE1BQU9oSyxHQUNIaUosRUFBT2UsT0FBUyxZQUVwQixJQUNJZixFQUFPZ0IsZUFBZ0IsRUFBQUwsRUFBQSxJQUFVRyxFQUFRRSxnQkFDbkMsT0FBaUJGLEVBQVFFLGVBQ3pCNUgsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBS3VMLEVBQVFFLGVBRWpELE1BQU9qSyxHQUNIaUosRUFBT2dCLGNBQWdCLFlBSzNCLElBQUssSUFBSXBLLElBSGtCLG9CQUFoQnFLLGNBQStCLEVBQUFOLEVBQUEsSUFBYXRELEVBQU80RCxlQUMxRGpCLEVBQU9rQixPQUFTSixFQUFRSSxRQUVkSixFQUNOMUgsT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS3VMLEVBQVNsSyxLQUM5Q29KLEVBQU9wSixHQUFLa0ssR0FHcEIsT0FBT2QsRUFFWCxPQUFPM0MsRUFZSixTQUFTOEQsRUFBZ0JYLEVBRWhDWSxFQUVBQyxRQUNrQixJQUFWRCxJQUFvQkEsRUFBUSxRQUNoQixJQUFaQyxJQUFzQkEsRUFBVSxRQUNwQyxJQVhjaEUsRUFXVmlFLEVBQWFDLEVBQVVmLEVBQVFZLEdBQ25DLE9BWmMvRCxFQVlEaUUsRUFqQmpCLFNBQW9CakUsR0FFaEIsUUFBU21FLFVBQVVuRSxHQUFPdEUsTUFBTSxTQUFTakUsT0FJbEMyTSxDQUFXNUssS0FBS0MsVUFBVXVHLElBV05nRSxFQUNoQkYsRUFBZ0JYLEVBQVFZLEVBQVEsRUFBR0MsR0FFdkNDLEVBbUNYLFNBQVNJLEVBQWVyRSxFQUFPMUUsR0FDM0IsTUFBWSxXQUFSQSxHQUFvQjBFLEdBQTBCLGlCQUFWQSxHQUFzQkEsRUFBTXNFLFFBQ3pELFdBRUMsa0JBQVJoSixFQUNPLHVCQUVXLElBQVgsRUFBQTJDLEdBQTBCK0IsSUFBVSxFQUFBL0IsRUFDcEMsV0FFVyxvQkFBWEMsUUFBMEI4QixJQUFVOUIsT0FDcEMsV0FFYSxvQkFBYjBDLFVBQTRCWixJQUFVWSxTQUN0QyxjQUdQLEVBQUEwQyxFQUFBLElBQWlCdEQsR0FDVixtQkFFVSxpQkFBVkEsR0FBc0JBLEdBQVVBLEVBQ2hDLGFBRUcsSUFBVkEsRUFDTyxjQUVVLG1CQUFWQSxFQUNBLGVBQWdCLE9BQWdCQSxHQUFTLElBRy9CLGlCQUFWQSxFQUNBLElBQU11RSxPQUFPdkUsR0FBUyxJQUVaLGlCQUFWQSxFQUNBLFlBQWN1RSxPQUFPdkUsR0FBUyxJQUVsQ0EsRUFXSixTQUFTd0UsRUFBS2xKLEVBQUswRSxFQUFPK0QsRUFBT1UsR0FJcEMsUUFIYyxJQUFWVixJQUFvQkEsRUFBUSxVQUNuQixJQUFUVSxJQUFtQkEsRUFBTyxJQUFJMUMsR0FFcEIsSUFBVmdDLEVBQ0EsT0E1RVIsU0FBd0IvRCxHQUNwQixJQUFJRCxFQUFPaEUsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBSzhILEdBRTFDLEdBQXFCLGlCQUFWQSxFQUNQLE9BQU9BLEVBRVgsR0FBYSxvQkFBVEQsRUFDQSxNQUFPLFdBRVgsR0FBYSxtQkFBVEEsRUFDQSxNQUFPLFVBRVgsSUFBSTJFLEVBQWFMLEVBQWVyRSxHQUNoQyxPQUFPLEVBQUFzRCxFQUFBLElBQVlvQixHQUFjQSxFQUFhM0UsRUErRG5DNEUsQ0FBZTNFLEdBSTFCLEdBQUlBLFNBQWlFLG1CQUFqQkEsRUFBTTRFLE9BQ3RELE9BQU81RSxFQUFNNEUsU0FJakIsSUFBSUYsRUFBYUwsRUFBZXJFLEVBQU8xRSxHQUN2QyxJQUFJLEVBQUFnSSxFQUFBLElBQVlvQixHQUNaLE9BQU9BLEVBR1gsSUFBSS9CLEVBQVNVLEVBQWNyRCxHQUV2QjZFLEVBQU1qUCxNQUFNQyxRQUFRbUssR0FBUyxHQUFLLEdBRXRDLEdBQUl5RSxFQUFLdEMsUUFBUW5DLEdBQ2IsTUFBTyxlQUdYLElBQUssSUFBSThFLEtBQVluQyxFQUVaNUcsT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS3lLLEVBQVFtQyxLQUlsREQsRUFBSUMsR0FBWU4sRUFBS00sRUFBVW5DLEVBQU9tQyxHQUFXZixFQUFRLEVBQUdVLElBS2hFLE9BRkFBLEVBQUtsQyxVQUFVdkMsR0FFUjZFLEVBZUosU0FBU1gsRUFBVWEsRUFBT2hCLEdBQzdCLElBQ0ksT0FBT3ZLLEtBQUtnSSxNQUFNaEksS0FBS0MsVUFBVXNMLEdBQU8sU0FBVXpKLEVBQUswRSxHQUFTLE9BQU93RSxFQUFLbEosRUFBSzBFLEVBQU8rRCxPQUU1RixNQUFPckssR0FDSCxNQUFPLHdCQVNSLFNBQVNzTCxFQUErQmxGLEVBQVdtRixRQUNwQyxJQUFkQSxJQUF3QkEsRUFBWSxJQUN4QyxJQUFJMUUsRUFBT3hFLE9BQU93RSxLQUFLOEMsRUFBY3ZELElBRXJDLEdBREFTLEVBQUsyRSxRQUNBM0UsRUFBSzlJLE9BQ04sTUFBTyx1QkFFWCxHQUFJOEksRUFBSyxHQUFHOUksUUFBVXdOLEVBQ2xCLE9BQU8sUUFBUzFFLEVBQUssR0FBSTBFLEdBRTdCLElBQUssSUFBSUUsRUFBZTVFLEVBQUs5SSxPQUFRME4sRUFBZSxFQUFHQSxJQUFnQixDQUNuRSxJQUFJbEIsRUFBYTFELEVBQUsvSCxNQUFNLEVBQUcyTSxHQUFjakssS0FBSyxNQUNsRCxLQUFJK0ksRUFBV3hNLE9BQVN3TixHQUd4QixPQUFJRSxJQUFpQjVFLEVBQUs5SSxPQUNmd00sR0FFSixRQUFTQSxFQUFZZ0IsR0FFaEMsTUFBTyxHQU1KLFNBQVNHLEVBQWtCQyxHQUM5QixJQUFJQyxFQUFLcE8sRUFDVCxJQUFJLEVBQUFvTSxFQUFBLElBQWMrQixHQUFNLENBQ3BCLElBQUlqRCxFQUFNaUQsRUFDTkUsRUFBSyxHQUNULElBQ0ksSUFBSyxJQUFJcE8sR0FBSyxRQUFTNEUsT0FBT3dFLEtBQUs2QixJQUFPaEwsRUFBS0QsRUFBR3FPLFFBQVNwTyxFQUFHcU8sS0FBTXJPLEVBQUtELEVBQUdxTyxPQUFRLENBQ2hGLElBQUlsSyxFQUFNbEUsRUFBRzRJLFdBQ1csSUFBYm9DLEVBQUk5RyxLQUNYaUssRUFBR2pLLEdBQU84SixFQUFrQmhELEVBQUk5RyxNQUk1QyxNQUFPb0ssR0FBU0osRUFBTSxDQUFFMUgsTUFBTzhILEdBQy9CLFFBQ0ksSUFDUXRPLElBQU9BLEVBQUdxTyxPQUFTdk8sRUFBS0MsRUFBR3dPLFNBQVN6TyxFQUFHZ0IsS0FBS2YsR0FFcEQsUUFBVSxHQUFJbU8sRUFBSyxNQUFNQSxFQUFJMUgsT0FFakMsT0FBTzJILEVBRVgsT0FBSTNQLE1BQU1DLFFBQVF3UCxHQUNQQSxFQUFJaE0sSUFBSStMLEdBRVpDLEksK0JDdFVYLElBQUlPLEVBQXNCLGNBSW5CLFNBQVNDLEVBQWdCQyxHQUM1QixJQUNJLE9BQUtBLEdBQW9CLG1CQUFQQSxHQUdYQSxFQUFHclEsTUFGQ21RLEVBSWYsTUFBT3BQLEdBR0gsT0FBT29QLEssK0RDTlIsU0FBU0csRUFBU0MsRUFBS0MsR0FFMUIsWUFEWSxJQUFSQSxJQUFrQkEsRUFBTSxHQUNULGlCQUFSRCxHQUE0QixJQUFSQyxHQUd4QkQsRUFBSXZPLFFBQVV3TyxFQUZWRCxFQUVzQkEsRUFBSUUsT0FBTyxFQUFHRCxHQUFPLE1BK0NuRCxTQUFTRSxFQUFTcEIsRUFBT3FCLEdBQzVCLElBQUt4USxNQUFNQyxRQUFRa1AsR0FDZixNQUFPLEdBSVgsSUFGQSxJQUFJc0IsRUFBUyxHQUVKOU0sRUFBSSxFQUFHQSxFQUFJd0wsRUFBTXROLE9BQVE4QixJQUFLLENBQ25DLElBQUl5RyxFQUFRK0UsRUFBTXhMLEdBQ2xCLElBQ0k4TSxFQUFPdEwsS0FBS3dKLE9BQU92RSxJQUV2QixNQUFPeEosR0FDSDZQLEVBQU90TCxLQUFLLGlDQUdwQixPQUFPc0wsRUFBT25MLEtBQUtrTCxHQU9oQixTQUFTRSxFQUFrQnRHLEVBQU91RyxHQUNyQyxTQUFLLFFBQVN2RyxNQUdWLFFBQVN1RyxHQUNGQSxFQUFRQyxLQUFLeEcsR0FFRCxpQkFBWnVHLElBQzRCLElBQTVCdkcsRUFBTXlHLFFBQVFGLE0sbUZDakY3QixJQUFJRyxFQUFzQixDQUN0QkMsV0FBWSxXQUFjLE9BQU9wRixLQUFLTixNQUFRLE1Bd0Q5QzJGLEdBQXNCLFNBWjFCLFdBQ0ksSUFFSSxPQURnQixPQUFldFEsRUFBUSxjQUN0QnVRLFlBRXJCLE1BQU8xUSxHQUNILFFBTWdDMlEsR0FoRHhDLFdBQ0ksSUFBSUQsR0FBYyxVQUFrQkEsWUFDcEMsR0FBS0EsR0FBZ0JBLEVBQVk1RixJQXlCakMsTUFBTyxDQUNIQSxJQUFLLFdBQWMsT0FBTzRGLEVBQVk1RixPQUN0QzhGLFdBSGF4RixLQUFLTixNQUFRNEYsRUFBWTVGLE9Bc0JpQitGLEdBQzNEQyxPQUEwQ0MsSUFBeEJOLEVBQ2hCRixFQUNBLENBQ0VDLFdBQVksV0FBYyxPQUFRQyxFQUFvQkcsV0FBYUgsRUFBb0IzRixPQUFTLE1BSzdGa0csRUFBeUJULEVBQW9CQyxXQUFXM1AsS0FBSzBQLEdBYzdEVSxFQUZxQkgsRUFBZ0JOLFdBQVczUCxLQUFLaVEsR0FXckRJLEVBQStCLFdBQ3RDLElBQUlSLEdBQWMsVUFBa0JBLFlBQ3BDLEdBQUtBLEVBR0wsT0FBSUEsRUFBWUUsV0FDTEYsRUFBWUUsV0FRZkYsRUFBWVMsUUFBVVQsRUFBWVMsT0FBT0MsaUJBQW9CaEcsS0FBS04sTUFkcEMsSSwyREMvRnRDdUcsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0J6TSxLQUFLLENBQUN6RSxFQUFPWixHQUFJLHNFQUF1RSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywrQ0FBK0MsTUFBUSxHQUFHLFNBQVcsMENBQTBDLGVBQWlCLENBQUMsdUVBQXVFLFdBQWEsTUFFaFcsVyxRQ0NBWSxFQUFPbVIsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLM0wsU0FBVyxXQUNkLE9BQU94RyxLQUFLNkQsS0FBSSxTQUFVdU8sR0FDeEIsSUFBSUMsRUFBVUgsRUFBdUJFLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxLQUdsREEsS0FDTjNNLEtBQUssS0FLVnlNLEVBQUtwTyxFQUFJLFNBQVV3TyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJMU8sRUFBSSxFQUFHQSxFQUFJL0QsS0FBS2lDLE9BQVE4QixJQUFLLENBRXBDLElBQUk3RCxFQUFLRixLQUFLK0QsR0FBRyxHQUVQLE1BQU43RCxJQUNGd1MsRUFBdUJ4UyxJQUFNLEdBS25DLElBQUssSUFBSTZCLEVBQUssRUFBR0EsRUFBS3dRLEVBQVF0USxPQUFRRixJQUFNLENBQzFDLElBQUlxUSxFQUFPLEdBQUdFLE9BQU9DLEVBQVF4USxJQUV6QjBRLEdBQVVDLEVBQXVCTixFQUFLLE1BS3RDSSxJQUNHSixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHRSxPQUFPRSxFQUFZLFNBQVNGLE9BQU9GLEVBQUssSUFGckRBLEVBQUssR0FBS0ksR0FNZEwsRUFBSzVNLEtBQUs2TSxNQUlQRCxJLE9DeERULFNBQVNRLEVBQWtCM0osRUFBSzdELElBQWtCLE1BQVBBLEdBQWVBLEVBQU02RCxFQUFJL0csVUFBUWtELEVBQU02RCxFQUFJL0csUUFBUSxJQUFLLElBQUk4QixFQUFJLEVBQUc2TyxFQUFPLElBQUl4UyxNQUFNK0UsR0FBTXBCLEVBQUlvQixFQUFLcEIsSUFBTzZPLEVBQUs3TyxHQUFLaUYsRUFBSWpGLEdBQU0sT0FBTzZPLEVBTWhMOVIsRUFBT21SLFFBQVUsU0FBZ0NHLEdBQy9DLElBYnNCcEosRUFBS2pGLEVBYXZCOE8sR0FidUI5TyxFQWFNLEVBSG5DLFNBQXlCaUYsR0FBTyxHQUFJNUksTUFBTUMsUUFBUTJJLEdBQU0sT0FBT0EsRUFWdEI4SixDQUFqQjlKLEVBYUtvSixJQUw3QixTQUErQnBKLEVBQUtqRixHQUFLLEdBQXNCLG9CQUFYZ1AsUUFBNEJBLE9BQU9DLFlBQVl6TSxPQUFPeUMsR0FBakUsQ0FBZ0YsSUFBSWlLLEVBQU8sR0FBUUMsR0FBSyxFQUFVclIsR0FBSyxFQUFXNkYsT0FBS2dLLEVBQVcsSUFBTSxJQUFLLElBQWlDeUIsRUFBN0JwUixFQUFLaUgsRUFBSStKLE9BQU9DLGNBQW1CRSxHQUFNQyxFQUFLcFIsRUFBR2lPLFFBQVFDLFFBQW9CZ0QsRUFBSzFOLEtBQUs0TixFQUFHM0ksUUFBWXpHLEdBQUtrUCxFQUFLaFIsU0FBVzhCLEdBQTNEbVAsR0FBSyxJQUFvRSxNQUFPalEsR0FBT3BCLEdBQUssRUFBTTZGLEVBQUt6RSxFQUFPLFFBQVUsSUFBV2lRLEdBQXNCLE1BQWhCblIsRUFBVyxRQUFXQSxFQUFXLFNBQU8sUUFBVSxHQUFJRixFQUFJLE1BQU02RixHQUFRLE9BQU91TCxHQVJqYUcsQ0FBc0JwSyxFQUFLakYsSUFJNUYsU0FBcUNzUCxFQUFHQyxHQUFVLEdBQUtELEVBQUwsQ0FBZ0IsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU9WLEVBQWtCVSxFQUFHQyxHQUFTLElBQUlDLEVBQUloTixPQUFPOUYsVUFBVStGLFNBQVM5RCxLQUFLMlEsR0FBR3JRLE1BQU0sR0FBSSxHQUFpRSxNQUFuRCxXQUFOdVEsR0FBa0JGLEVBQUVHLGNBQWFELEVBQUlGLEVBQUVHLFlBQVl2VCxNQUFnQixRQUFOc1QsR0FBcUIsUUFBTkEsRUFBb0JuVCxNQUFNcVQsS0FBS0osR0FBYyxjQUFORSxHQUFxQiwyQ0FBMkN2QyxLQUFLdUMsR0FBV1osRUFBa0JVLEVBQUdDLFFBQXpHLEdBSjNNSSxDQUE0QjFLLEVBQUtqRixJQUVuSSxXQUE4QixNQUFNLElBQUk0UCxVQUFVLDZJQUZ1RkMsSUFjbkl2QixFQUFVUSxFQUFNLEdBQ2hCZ0IsRUFBYWhCLEVBQU0sR0FFdkIsR0FBb0IsbUJBQVRpQixLQUFxQixDQUU5QixJQUFJQyxFQUFTRCxLQUFLRSxTQUFTcEcsbUJBQW1CNUosS0FBS0MsVUFBVTRQLE1BQ3pEMVEsRUFBTywrREFBK0RtUCxPQUFPeUIsR0FDN0VFLEVBQWdCLE9BQU8zQixPQUFPblAsRUFBTSxPQUNwQytRLEVBQWFMLEVBQVdNLFFBQVF0USxLQUFJLFNBQVVzSixHQUNoRCxNQUFPLGlCQUFpQm1GLE9BQU91QixFQUFXTyxZQUFjLElBQUk5QixPQUFPbkYsRUFBUSxVQUU3RSxNQUFPLENBQUNrRixHQUFTQyxPQUFPNEIsR0FBWTVCLE9BQU8sQ0FBQzJCLElBQWdCdk8sS0FBSyxNQUduRSxNQUFPLENBQUMyTSxHQUFTM00sS0FBSyxRLGNDNUJ4QixJQUNNdUosRUFlRm9GLEVBQVksV0FDZCxJQUFJcEYsRUFBTyxHQUNYLE9BQU8sU0FBa0JmLEdBQ3ZCLFFBQTRCLElBQWpCZSxFQUFLZixHQUF5QixDQUN2QyxJQUFJb0csRUFBY2xKLFNBQVNtSixjQUFjckcsR0FFekMsR0FBSXhGLE9BQU84TCxtQkFBcUJGLGFBQXVCNUwsT0FBTzhMLGtCQUM1RCxJQUdFRixFQUFjQSxFQUFZRyxnQkFBZ0JDLEtBQzFDLE1BQU8xVCxHQUVQc1QsRUFBYyxLQUlsQnJGLEVBQUtmLEdBQVVvRyxFQUdqQixPQUFPckYsRUFBS2YsSUFwQkEsR0F3Qlp5RyxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUkzUixHQUFVLEVBRUxhLEVBQUksRUFBR0EsRUFBSTRRLEVBQVkxUyxPQUFROEIsSUFDdEMsR0FBSTRRLEVBQVk1USxHQUFHOFEsYUFBZUEsRUFBWSxDQUM1QzNSLEVBQVNhLEVBQ1QsTUFJSixPQUFPYixFQUdULFNBQVM0UixFQUFhM0MsRUFBTXBTLEdBSTFCLElBSEEsSUFBSWdWLEVBQWEsR0FDYkMsRUFBYyxHQUVUalIsRUFBSSxFQUFHQSxFQUFJb08sRUFBS2xRLE9BQVE4QixJQUFLLENBQ3BDLElBQUlxTyxFQUFPRCxFQUFLcE8sR0FDWjdELEVBQUtILEVBQVEwSCxLQUFPMkssRUFBSyxHQUFLclMsRUFBUTBILEtBQU8ySyxFQUFLLEdBQ2xENkMsRUFBUUYsRUFBVzdVLElBQU8sRUFDMUIyVSxFQUFhLEdBQUd2QyxPQUFPcFMsRUFBSSxLQUFLb1MsT0FBTzJDLEdBQzNDRixFQUFXN1UsR0FBTStVLEVBQVEsRUFDekIsSUFBSUMsRUFBUU4sRUFBcUJDLEdBQzdCakksRUFBTSxDQUNSdUksSUFBSy9DLEVBQUssR0FDVmdELE1BQU9oRCxFQUFLLEdBQ1ppRCxVQUFXakQsRUFBSyxLQUdILElBQVg4QyxHQUNGUCxFQUFZTyxHQUFPSSxhQUNuQlgsRUFBWU8sR0FBT0ssUUFBUTNJLElBRTNCK0gsRUFBWXBQLEtBQUssQ0FDZnNQLFdBQVlBLEVBQ1pVLFFBQVNDLEVBQVM1SSxFQUFLN00sR0FDdkJ1VixXQUFZLElBSWhCTixFQUFZelAsS0FBS3NQLEdBR25CLE9BQU9HLEVBR1QsU0FBU1MsRUFBbUIxVixHQUMxQixJQUFJMlYsRUFBUXRLLFNBQVN1SyxjQUFjLFNBQy9CQyxFQUFhN1YsRUFBUTZWLFlBQWMsR0FFdkMsUUFBZ0MsSUFBckJBLEVBQVdDLE1BQXVCLENBQzNDLElBQUlBLEVBQW1ELEtBRW5EQSxJQUNGRCxFQUFXQyxNQUFRQSxHQVF2QixHQUpBdFAsT0FBT3dFLEtBQUs2SyxHQUFZelUsU0FBUSxTQUFVMkUsR0FDeEM0UCxFQUFNSSxhQUFhaFEsRUFBSzhQLEVBQVc5UCxPQUdQLG1CQUFuQi9GLEVBQVFnVyxPQUNqQmhXLEVBQVFnVyxPQUFPTCxPQUNWLENBQ0wsSUFBSXhILEVBQVNtRyxFQUFVdFUsRUFBUWdXLFFBQVUsUUFFekMsSUFBSzdILEVBQ0gsTUFBTSxJQUFJeEgsTUFBTSwyR0FHbEJ3SCxFQUFPOEgsWUFBWU4sR0FHckIsT0FBT0EsRUFjVCxJQUNNTyxFQURGQyxHQUNFRCxFQUFZLEdBQ1QsU0FBaUJmLEVBQU9pQixHQUU3QixPQURBRixFQUFVZixHQUFTaUIsRUFDWkYsRUFBVUcsT0FBTzdPLFNBQVM3QixLQUFLLFFBSTFDLFNBQVMyUSxFQUFvQlgsRUFBT1IsRUFBT29CLEVBQVExSixHQUNqRCxJQUFJdUksRUFBTW1CLEVBQVMsR0FBSzFKLEVBQUl3SSxNQUFRLFVBQVU5QyxPQUFPMUYsRUFBSXdJLE1BQU8sTUFBTTlDLE9BQU8xRixFQUFJdUksSUFBSyxLQUFPdkksRUFBSXVJLElBSWpHLEdBQUlPLEVBQU1hLFdBQ1JiLEVBQU1hLFdBQVdDLFFBQVVOLEVBQVloQixFQUFPQyxPQUN6QyxDQUNMLElBQUlzQixFQUFVckwsU0FBU3NMLGVBQWV2QixHQUNsQ3dCLEVBQWFqQixFQUFNaUIsV0FFbkJBLEVBQVd6QixJQUNiUSxFQUFNa0IsWUFBWUQsRUFBV3pCLElBRzNCeUIsRUFBVzFVLE9BQ2J5VCxFQUFNbUIsYUFBYUosRUFBU0UsRUFBV3pCLElBRXZDUSxFQUFNTSxZQUFZUyxJQUt4QixTQUFTSyxFQUFXcEIsRUFBTzNWLEVBQVM2TSxHQUNsQyxJQUFJdUksRUFBTXZJLEVBQUl1SSxJQUNWQyxFQUFReEksRUFBSXdJLE1BQ1pDLEVBQVl6SSxFQUFJeUksVUFlcEIsR0FiSUQsRUFDRk0sRUFBTUksYUFBYSxRQUFTVixHQUU1Qk0sRUFBTXFCLGdCQUFnQixTQUdwQjFCLEdBQTZCLG9CQUFUdkIsT0FDdEJxQixHQUFPLHVEQUF1RDdDLE9BQU93QixLQUFLRSxTQUFTcEcsbUJBQW1CNUosS0FBS0MsVUFBVW9SLE1BQWUsUUFNbElLLEVBQU1hLFdBQ1JiLEVBQU1hLFdBQVdDLFFBQVVyQixNQUN0QixDQUNMLEtBQU9PLEVBQU1zQixZQUNYdEIsRUFBTWtCLFlBQVlsQixFQUFNc0IsWUFHMUJ0QixFQUFNTSxZQUFZNUssU0FBU3NMLGVBQWV2QixLQUk5QyxJQUFJOEIsRUFBWSxLQUNaQyxFQUFtQixFQUV2QixTQUFTMUIsRUFBUzVJLEVBQUs3TSxHQUNyQixJQUFJMlYsRUFDQXlCLEVBQ0FiLEVBRUosR0FBSXZXLEVBQVFrWCxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCeEIsRUFBUXVCLElBQWNBLEVBQVl4QixFQUFtQjFWLElBQ3JEb1gsRUFBU2QsRUFBb0I3VSxLQUFLLEtBQU1rVSxFQUFPMEIsR0FBWSxHQUMzRGQsRUFBU0QsRUFBb0I3VSxLQUFLLEtBQU1rVSxFQUFPMEIsR0FBWSxRQUUzRDFCLEVBQVFELEVBQW1CMVYsR0FDM0JvWCxFQUFTTCxFQUFXdFYsS0FBSyxLQUFNa1UsRUFBTzNWLEdBRXRDdVcsRUFBUyxZQXhGYixTQUE0QlosR0FFMUIsR0FBeUIsT0FBckJBLEVBQU1sUSxXQUNSLE9BQU8sRUFHVGtRLEVBQU1sUSxXQUFXb1IsWUFBWWxCLEdBbUZ6QjJCLENBQW1CM0IsSUFLdkIsT0FEQXlCLEVBQU92SyxHQUNBLFNBQXFCMEssR0FDMUIsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9uQyxNQUFRdkksRUFBSXVJLEtBQU9tQyxFQUFPbEMsUUFBVXhJLEVBQUl3SSxPQUFTa0MsRUFBT2pDLFlBQWN6SSxFQUFJeUksVUFDbkYsT0FHRjhCLEVBQU92SyxFQUFNMEssUUFFYmhCLEtBS054VixFQUFPbVIsUUFBVSxTQUFVRSxFQUFNcFMsSUFDL0JBLEVBQVVBLEdBQVcsSUFHUmtYLFdBQTBDLGtCQUF0QmxYLEVBQVFrWCxZQUN2Q2xYLEVBQVFrWCxnQkFyT1ksSUFBVGhJLElBTVRBLEVBQU8xSCxRQUFRbUIsUUFBVTBDLFVBQVlBLFNBQVNtTSxNQUFRN08sT0FBTzhPLE9BR3hEdkksSUFnT1QsSUFBSXdJLEVBQWtCM0MsRUFEdEIzQyxFQUFPQSxHQUFRLEdBQzBCcFMsR0FDekMsT0FBTyxTQUFnQjJYLEdBR3JCLEdBRkFBLEVBQVVBLEdBQVcsR0FFMkIsbUJBQTVDblIsT0FBTzlGLFVBQVUrRixTQUFTOUQsS0FBS2dWLEdBQW5DLENBSUEsSUFBSyxJQUFJM1QsRUFBSSxFQUFHQSxFQUFJMFQsRUFBZ0J4VixPQUFROEIsSUFBSyxDQUMvQyxJQUNJbVIsRUFBUU4sRUFESzZDLEVBQWdCMVQsSUFFakM0USxFQUFZTyxHQUFPSSxhQUtyQixJQUZBLElBQUlxQyxFQUFxQjdDLEVBQWE0QyxFQUFTM1gsR0FFdENnQyxFQUFLLEVBQUdBLEVBQUswVixFQUFnQnhWLE9BQVFGLElBQU0sQ0FDbEQsSUFFSTZWLEVBQVNoRCxFQUZLNkMsRUFBZ0IxVixJQUlLLElBQW5DNFMsRUFBWWlELEdBQVF0QyxhQUN0QlgsRUFBWWlELEdBQVFyQyxVQUVwQlosRUFBWTFILE9BQU8ySyxFQUFRLElBSS9CSCxFQUFrQkUsTSwwQ0N4UHRCLFFDbEJlLFNBQWtDRSxHQUNoRCxJQUFJM1UsRUFDQTZQLEVBQVM4RSxFQUFLOUUsT0FhbEIsTUFYc0IsbUJBQVhBLEVBQ05BLEVBQU8rRSxXQUNWNVUsRUFBUzZQLEVBQU8rRSxZQUVoQjVVLEVBQVM2UCxFQUFPLGNBQ2hCQSxFQUFPK0UsV0FBYTVVLEdBR3JCQSxFQUFTLGVBR0hBLEVERUssQ0FaTyxvQkFBVHlGLEtBQ0ZBLEtBQ29CLG9CQUFYRCxPQUNUQSxZQUNvQixJQUFYLEVBQUFELEVBQ1QsRUFBQUEsRUFFQTNILEksNkVFSVQsSUFBSWlYLEVBQWdCLFNBQVNDLEVBQUdDLEdBSTVCLE9BSEFGLEVBQWdCeFIsT0FBTzJSLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCL1gsT0FBUyxTQUFVNFgsRUFBR0MsR0FBS0QsRUFBRUcsVUFBWUYsSUFDdkUsU0FBVUQsRUFBR0MsR0FBSyxJQUFLLElBQUlHLEtBQUtILEVBQU9BLEVBQUVqSyxlQUFlb0ssS0FBSUosRUFBRUksR0FBS0gsRUFBRUcsTUFDcERKLEVBQUdDLElBR3JCLFNBQVNJLEVBQVVMLEVBQUdDLEdBRXpCLFNBQVNLLElBQU90WSxLQUFLd1QsWUFBY3dFLEVBRG5DRCxFQUFjQyxFQUFHQyxHQUVqQkQsRUFBRXZYLFVBQWtCLE9BQU53WCxFQUFhMVIsT0FBT2dTLE9BQU9OLElBQU1LLEVBQUc3WCxVQUFZd1gsRUFBRXhYLFVBQVcsSUFBSTZYLEdBRzVFLElBQUlFLEVBQVcsV0FRbEIsT0FQQUEsRUFBV2pTLE9BQU9rUyxRQUFVLFNBQWtCQyxHQUMxQyxJQUFLLElBQUlDLEVBQUc1VSxFQUFJLEVBQUd3UCxFQUFJdlIsVUFBVUMsT0FBUThCLEVBQUl3UCxFQUFHeFAsSUFFNUMsSUFBSyxJQUFJcVUsS0FEVE8sRUFBSTNXLFVBQVUrQixHQUNPd0MsT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS2lXLEVBQUdQLEtBQUlNLEVBQUVOLEdBQUtPLEVBQUVQLElBRTlFLE9BQU9NLElBRUsvVixNQUFNM0MsS0FBTWdDLFlBR3pCLFNBQVM0VyxFQUFPRCxFQUFHM1gsR0FDdEIsSUFBSTBYLEVBQUksR0FDUixJQUFLLElBQUlOLEtBQUtPLEVBQU9wUyxPQUFPOUYsVUFBVXVOLGVBQWV0TCxLQUFLaVcsRUFBR1AsSUFBTXBYLEVBQUVpUSxRQUFRbUgsR0FBSyxJQUM5RU0sRUFBRU4sR0FBS08sRUFBRVAsSUFDYixHQUFTLE1BQUxPLEdBQXFELG1CQUFqQ3BTLE9BQU9zUyxzQkFDdEIsS0FBSTlVLEVBQUksRUFBYixJQUFnQnFVLEVBQUk3UixPQUFPc1Msc0JBQXNCRixHQUFJNVUsRUFBSXFVLEVBQUVuVyxPQUFROEIsSUFDM0QvQyxFQUFFaVEsUUFBUW1ILEVBQUVyVSxJQUFNLEdBQUt3QyxPQUFPOUYsVUFBVXFZLHFCQUFxQnBXLEtBQUtpVyxFQUFHUCxFQUFFclUsTUFDdkUyVSxFQUFFTixFQUFFclUsSUFBTTRVLEVBQUVQLEVBQUVyVSxLQUUxQixPQUFPMlUsRUFpRUosU0FBU0ssRUFBUzFGLEdBQ3JCLElBQUlzRixFQUFzQixtQkFBWDVGLFFBQXlCQSxPQUFPQyxTQUFVZ0csRUFBSUwsR0FBS3RGLEVBQUVzRixHQUFJNVUsRUFBSSxFQUM1RSxHQUFJaVYsRUFBRyxPQUFPQSxFQUFFdFcsS0FBSzJRLEdBQ3JCLEdBQUlBLEdBQXlCLGlCQUFiQSxFQUFFcFIsT0FBcUIsTUFBTyxDQUMxQytOLEtBQU0sV0FFRixPQURJcUQsR0FBS3RQLEdBQUtzUCxFQUFFcFIsU0FBUW9SLE9BQUksR0FDckIsQ0FBRTdJLE1BQU82SSxHQUFLQSxFQUFFdFAsS0FBTWtNLE1BQU9vRCxLQUc1QyxNQUFNLElBQUlNLFVBQVVnRixFQUFJLDBCQUE0QixtQ0FHakQsU0FBU00sRUFBTzVGLEVBQUdFLEdBQ3RCLElBQUl5RixFQUFzQixtQkFBWGpHLFFBQXlCTSxFQUFFTixPQUFPQyxVQUNqRCxJQUFLZ0csRUFBRyxPQUFPM0YsRUFDZixJQUFtQjlKLEVBQVl2SSxFQUEzQitDLEVBQUlpVixFQUFFdFcsS0FBSzJRLEdBQU82RixFQUFLLEdBQzNCLElBQ0ksV0FBYyxJQUFOM0YsR0FBZ0JBLEtBQU0sTUFBUWhLLEVBQUl4RixFQUFFaU0sUUFBUUMsTUFBTWlKLEVBQUczVCxLQUFLZ0UsRUFBRWlCLE9BRXhFLE1BQU9wQyxHQUFTcEgsRUFBSSxDQUFFb0gsTUFBT0EsR0FDN0IsUUFDSSxJQUNRbUIsSUFBTUEsRUFBRTBHLE9BQVMrSSxFQUFJalYsRUFBVSxTQUFJaVYsRUFBRXRXLEtBQUtxQixHQUVsRCxRQUFVLEdBQUkvQyxFQUFHLE1BQU1BLEVBQUVvSCxPQUU3QixPQUFPOFEsRUFHSixTQUFTQyxJQUNaLElBQUssSUFBSUQsRUFBSyxHQUFJblYsRUFBSSxFQUFHQSxFQUFJL0IsVUFBVUMsT0FBUThCLElBQzNDbVYsRUFBS0EsRUFBRzVHLE9BQU8yRyxFQUFPalgsVUFBVStCLEtBQ3BDLE9BQU9tVixLQ2pKUEUsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVXJILFFBRzNDLElBQUluUixFQUFTc1ksRUFBeUJFLEdBQVksQ0FDakRwWixHQUFJb1osRUFDSkMsUUFBUSxFQUNSdEgsUUFBUyxJQVVWLE9BTkF1SCxFQUFvQkYsR0FBVXhZLEVBQVFBLEVBQU9tUixRQUFTb0gsR0FHdER2WSxFQUFPeVksUUFBUyxFQUdUelksRUFBT21SLFFDdEJmb0gsRUFBb0I5RixFQUFLelMsSUFDeEIsSUFBSTJZLEVBQVMzWSxHQUFVQSxFQUFPNFksV0FDN0IsSUFBTzVZLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBdVksRUFBb0JyQixFQUFFeUIsRUFBUSxDQUFFRSxFQUFHRixJQUM1QkEsR0NMUkosRUFBb0JyQixFQUFJLENBQUMvRixFQUFTMkgsS0FDakMsSUFBSSxJQUFJOVQsS0FBTzhULEVBQ1hQLEVBQW9CaEcsRUFBRXVHLEVBQVk5VCxLQUFTdVQsRUFBb0JoRyxFQUFFcEIsRUFBU25NLElBQzVFUyxPQUFPc1QsZUFBZTVILEVBQVNuTSxFQUFLLENBQUUwSCxZQUFZLEVBQU1zTSxJQUFLRixFQUFXOVQsTUNKM0V1VCxFQUFvQjVRLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZzUixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8vWixNQUFRLElBQUlnYSxTQUFTLGNBQWIsR0FDZCxNQUFPaFosR0FDUixHQUFzQixpQkFBWDBILE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCMlEsRUFBb0JZLElBQU9uWixLQUMxQkEsRUFBU3lGLE9BQU9nUyxPQUFPelgsSUFDWG9aLFdBQVVwWixFQUFPb1osU0FBVyxJQUN4QzNULE9BQU9zVCxlQUFlL1ksRUFBUSxVQUFXLENBQ3hDME0sWUFBWSxFQUNaMk0sSUFBSyxLQUNKLE1BQU0sSUFBSXpULE1BQU0sMEZBQTRGNUYsRUFBT1osT0FHOUdZLEdDVFJ1WSxFQUFvQmhHLEVBQUksQ0FBQ3pHLEVBQUt3TixJQUFVN1QsT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS2tLLEVBQUt3TixHQ0NsRmYsRUFBb0I5UCxFQUFLMEksSUFDSCxvQkFBWGMsUUFBMEJBLE9BQU9zSCxhQUMxQzlULE9BQU9zVCxlQUFlNUgsRUFBU2MsT0FBT3NILFlBQWEsQ0FBRTdQLE1BQU8sV0FFN0RqRSxPQUFPc1QsZUFBZTVILEVBQVMsYUFBYyxDQUFFekgsT0FBTyxLLDhGQ0V2RCxJQUFJOFAsRUFBYy9ULE9BQU9nVSxPQUFPLElBSWhDLFNBQVNDLEVBQVNwUixHQUNoQixPQUFPQSxRQUdULFNBQVNxUixFQUFPclIsR0FDZCxPQUFPQSxRQUdULFNBQVNzUixFQUFRdFIsR0FDZixPQUFhLElBQU5BLEVBVVQsU0FBU3JDLEVBQWF5RCxHQUNwQixNQUNtQixpQkFBVkEsR0FDVSxpQkFBVkEsR0FFVSxpQkFBVkEsR0FDVSxrQkFBVkEsRUFTWCxTQUFTbVEsRUFBVS9OLEdBQ2pCLE9BQWUsT0FBUkEsR0FBK0IsaUJBQVJBLEVBTWhDLElBQUlnTyxFQUFZclUsT0FBTzlGLFVBQVUrRixTQVVqQyxTQUFTUSxFQUFlNEYsR0FDdEIsTUFBK0Isb0JBQXhCZ08sRUFBVWxZLEtBQUtrSyxHQVV4QixTQUFTaU8sRUFBbUJoTCxHQUMxQixJQUFJMEQsRUFBSXVILFdBQVcvTCxPQUFPYyxJQUMxQixPQUFPMEQsR0FBSyxHQUFLL0osS0FBS3VSLE1BQU14SCxLQUFPQSxHQUFLeUgsU0FBU25MLEdBR25ELFNBQVNvTCxFQUFXcEwsR0FDbEIsT0FDRTRLLEVBQU01SyxJQUNjLG1CQUFiQSxFQUFJak4sTUFDVSxtQkFBZGlOLEVBQUlxTCxNQU9mLFNBQVMsRUFBVXJMLEdBQ2pCLE9BQWMsTUFBUEEsRUFDSCxHQUNBelAsTUFBTUMsUUFBUXdQLElBQVM3SSxFQUFjNkksSUFBUUEsRUFBSXJKLFdBQWFvVSxFQUM1RDVXLEtBQUtDLFVBQVU0TCxFQUFLLEtBQU0sR0FDMUJkLE9BQU9jLEdBT2YsU0FBU3NMLEVBQVV0TCxHQUNqQixJQUFJMEQsRUFBSXVILFdBQVdqTCxHQUNuQixPQUFPaEUsTUFBTTBILEdBQUsxRCxFQUFNMEQsRUFPMUIsU0FBUzZILEVBQ1A1SyxFQUNBNkssR0FJQSxJQUZBLElBQUl4WCxFQUFNMEMsT0FBT2dTLE9BQU8sTUFDcEJwRyxFQUFPM0IsRUFBSXRLLE1BQU0sS0FDWm5DLEVBQUksRUFBR0EsRUFBSW9PLEVBQUtsUSxPQUFROEIsSUFDL0JGLEVBQUlzTyxFQUFLcE8sS0FBTSxFQUVqQixPQUFPc1gsRUFDSCxTQUFVeEwsR0FBTyxPQUFPaE0sRUFBSWdNLEVBQUk1SixnQkFDaEMsU0FBVTRKLEdBQU8sT0FBT2hNLEVBQUlnTSxJQU1sQyxJQUFJeUwsRUFBZUYsRUFBUSxrQkFBa0IsR0FLekNHLEVBQXNCSCxFQUFRLDhCQUtsQyxTQUFTOUUsRUFBUXROLEVBQUtvSixHQUNwQixHQUFJcEosRUFBSS9HLE9BQVEsQ0FDZCxJQUFJaVQsRUFBUWxNLEVBQUlpSSxRQUFRbUIsR0FDeEIsR0FBSThDLEdBQVMsRUFDWCxPQUFPbE0sRUFBSWlFLE9BQU9pSSxFQUFPLElBUS9CLElBQUksRUFBaUIzTyxPQUFPOUYsVUFBVXVOLGVBQ3RDLFNBQVN3TixFQUFRNU8sRUFBSzlHLEdBQ3BCLE9BQU8sRUFBZXBELEtBQUtrSyxFQUFLOUcsR0FNbEMsU0FBUzJWLEVBQVFuTCxHQUNmLElBQUlvTCxFQUFRblYsT0FBT2dTLE9BQU8sTUFDMUIsT0FBTyxTQUFvQi9ILEdBRXpCLE9BRFVrTCxFQUFNbEwsS0FDRGtMLEVBQU1sTCxHQUFPRixFQUFHRSxLQU9uQyxJQUFJbUwsRUFBYSxTQUNiQyxFQUFXSCxHQUFPLFNBQVVqTCxHQUM5QixPQUFPQSxFQUFJbkgsUUFBUXNTLEdBQVksU0FBVWhiLEVBQUcySSxHQUFLLE9BQU9BLEVBQUlBLEVBQUV1UyxjQUFnQixTQU01RUMsRUFBYUwsR0FBTyxTQUFVakwsR0FDaEMsT0FBT0EsRUFBSXVMLE9BQU8sR0FBR0YsY0FBZ0JyTCxFQUFJeE4sTUFBTSxNQU03Q2daLEVBQWMsYUFDZEMsRUFBWVIsR0FBTyxTQUFVakwsR0FDL0IsT0FBT0EsRUFBSW5ILFFBQVEyUyxFQUFhLE9BQU8vVixpQkE4QnJDekUsRUFBT3dZLFNBQVN2WixVQUFVZSxLQUo5QixTQUFxQjhPLEVBQUk0TCxHQUN2QixPQUFPNUwsRUFBRzlPLEtBQUswYSxJQWZqQixTQUF1QjVMLEVBQUk0TCxHQUN6QixTQUFTQyxFQUFTeEMsR0FDaEIsSUFBSXlDLEVBQUlwYSxVQUFVQyxPQUNsQixPQUFPbWEsRUFDSEEsRUFBSSxFQUNGOUwsRUFBRzNOLE1BQU11WixFQUFLbGEsV0FDZHNPLEVBQUc1TixLQUFLd1osRUFBS3ZDLEdBQ2ZySixFQUFHNU4sS0FBS3daLEdBSWQsT0FEQUMsRUFBUUUsUUFBVS9MLEVBQUdyTyxPQUNka2EsR0FjVCxTQUFTRyxFQUFTbkssRUFBTW9LLEdBQ3RCQSxFQUFRQSxHQUFTLEVBR2pCLElBRkEsSUFBSXhZLEVBQUlvTyxFQUFLbFEsT0FBU3NhLEVBQ2xCQyxFQUFNLElBQUlwYyxNQUFNMkQsR0FDYkEsS0FDTHlZLEVBQUl6WSxHQUFLb08sRUFBS3BPLEVBQUl3WSxHQUVwQixPQUFPQyxFQU1ULFNBQVNDLEVBQVFDLEVBQUlDLEdBQ25CLElBQUssSUFBSTdXLEtBQU82VyxFQUNkRCxFQUFHNVcsR0FBTzZXLEVBQU03VyxHQUVsQixPQUFPNFcsRUFNVCxTQUFTRSxFQUFVNVQsR0FFakIsSUFEQSxJQUFJbkcsRUFBTSxHQUNEa0IsRUFBSSxFQUFHQSxFQUFJaUYsRUFBSS9HLE9BQVE4QixJQUMxQmlGLEVBQUlqRixJQUNOMFksRUFBTzVaLEVBQUttRyxFQUFJakYsSUFHcEIsT0FBT2xCLEVBVVQsU0FBU2dhLEVBQU1sRCxFQUFHMUIsRUFBRzNPLElBS3JCLElBQUl3VCxFQUFLLFNBQVVuRCxFQUFHMUIsRUFBRzNPLEdBQUssT0FBTyxHQU9qQ3lULEVBQVcsU0FBVXBjLEdBQUssT0FBT0EsR0FlckMsU0FBU3FjLEVBQVlyRCxFQUFHMUIsR0FDdEIsR0FBSTBCLElBQU0xQixFQUFLLE9BQU8sRUFDdEIsSUFBSWdGLEVBQVl0QyxFQUFTaEIsR0FDckJ1RCxFQUFZdkMsRUFBUzFDLEdBQ3pCLElBQUlnRixJQUFhQyxFQXdCVixPQUFLRCxJQUFjQyxHQUNqQm5PLE9BQU80SyxLQUFPNUssT0FBT2tKLEdBeEI1QixJQUNFLElBQUlrRixFQUFXL2MsTUFBTUMsUUFBUXNaLEdBQ3pCeUQsRUFBV2hkLE1BQU1DLFFBQVE0WCxHQUM3QixHQUFJa0YsR0FBWUMsRUFDZCxPQUFPekQsRUFBRTFYLFNBQVdnVyxFQUFFaFcsUUFBVTBYLEVBQUUwRCxPQUFNLFNBQVVyYyxFQUFHK0MsR0FDbkQsT0FBT2laLEVBQVdoYyxFQUFHaVgsRUFBRWxVLE9BRXBCLEdBQUk0VixhQUFhNU4sTUFBUWtNLGFBQWFsTSxLQUMzQyxPQUFPNE4sRUFBRTJELFlBQWNyRixFQUFFcUYsVUFDcEIsR0FBS0gsR0FBYUMsRUFRdkIsT0FBTyxFQVBQLElBQUlHLEVBQVFoWCxPQUFPd0UsS0FBSzRPLEdBQ3BCNkQsRUFBUWpYLE9BQU93RSxLQUFLa04sR0FDeEIsT0FBT3NGLEVBQU10YixTQUFXdWIsRUFBTXZiLFFBQVVzYixFQUFNRixPQUFNLFNBQVV2WCxHQUM1RCxPQUFPa1gsRUFBV3JELEVBQUU3VCxHQUFNbVMsRUFBRW5TLE9BTWhDLE1BQU85RSxHQUVQLE9BQU8sR0FjYixTQUFTeWMsRUFBY3pVLEVBQUs2RyxHQUMxQixJQUFLLElBQUk5TCxFQUFJLEVBQUdBLEVBQUlpRixFQUFJL0csT0FBUThCLElBQzlCLEdBQUlpWixFQUFXaFUsRUFBSWpGLEdBQUk4TCxHQUFRLE9BQU85TCxFQUV4QyxPQUFRLEVBTVYsU0FBUzJaLEVBQU1wTixHQUNiLElBQUlxTixHQUFTLEVBQ2IsT0FBTyxXQUNBQSxJQUNIQSxHQUFTLEVBQ1RyTixFQUFHM04sTUFBTTNDLEtBQU1nQyxhQUtyQixJQUFJNGIsRUFBVyx1QkFFWEMsRUFBYyxDQUNoQixZQUNBLFlBQ0EsVUFHRUMsRUFBa0IsQ0FDcEIsZUFDQSxVQUNBLGNBQ0EsVUFDQSxlQUNBLFVBQ0EsZ0JBQ0EsWUFDQSxZQUNBLGNBQ0EsZ0JBQ0Esa0JBT0VsWixFQUFTLENBS1htWixzQkFBdUJ4WCxPQUFPZ1MsT0FBTyxNQUtyQ3lGLFFBQVEsRUFLUkMsZUFBZSxFQUtmQyxVQUFVLEVBS1Y3TSxhQUFhLEVBS2I4TSxhQUFjLEtBS2RDLFlBQWEsS0FLYkMsZ0JBQWlCLEdBTWpCQyxTQUFVL1gsT0FBT2dTLE9BQU8sTUFNeEJnRyxjQUFlekIsRUFNZjBCLGVBQWdCMUIsRUFNaEIyQixpQkFBa0IzQixFQUtsQjRCLGdCQUFpQjdCLEVBS2pCOEIscUJBQXNCNUIsRUFNdEI2QixZQUFhOUIsRUFNYitCLE9BQU8sRUFLUEMsZ0JBQWlCaEIsR0FVZmlCLEVBQWdCLDhKQUtwQixTQUFTQyxFQUFZeE8sR0FDbkIsSUFBSWxILEdBQUtrSCxFQUFNLElBQUl5TyxXQUFXLEdBQzlCLE9BQWEsS0FBTjNWLEdBQW9CLEtBQU5BLEVBTXZCLFNBQVM0VixFQUFLdFMsRUFBSzlHLEVBQUsrSixFQUFLckMsR0FDM0JqSCxPQUFPc1QsZUFBZWpOLEVBQUs5RyxFQUFLLENBQzlCMEUsTUFBT3FGLEVBQ1ByQyxhQUFjQSxFQUNkMlIsVUFBVSxFQUNWQyxjQUFjLElBT2xCLElBcURJQyxFQXJEQUMsRUFBUyxJQUFJQyxPQUFRLEtBQVFSLEVBQW9CLE9BQUksV0FrQnJEUyxFQUFXLGFBQWUsR0FHMUJDLEVBQThCLG9CQUFYL1csT0FDbkJnWCxFQUFrQyxvQkFBbEJDLGlCQUFtQ0EsY0FBY0MsU0FDakVDLEVBQWVILEdBQVVDLGNBQWNDLFNBQVMzWixjQUNoRDZaLEVBQUtMLEdBQWEvVyxPQUFPcVgsVUFBVUMsVUFBVS9aLGNBQzdDZ2EsRUFBT0gsR0FBTSxlQUFlOU8sS0FBSzhPLEdBQ2pDSSxFQUFRSixHQUFNQSxFQUFHN08sUUFBUSxZQUFjLEVBQ3ZDa1AsRUFBU0wsR0FBTUEsRUFBRzdPLFFBQVEsU0FBVyxFQUVyQ21QLEdBRGFOLEdBQU1BLEVBQUc3TyxRQUFRLFdBQ3JCNk8sR0FBTSx1QkFBdUI5TyxLQUFLOE8sSUFBMEIsUUFBakJELEdBR3BEUSxJQUZXUCxHQUFNLGNBQWM5TyxLQUFLOE8sR0FDdEJBLEdBQU0sWUFBWTlPLEtBQUs4TyxHQUM5QkEsR0FBTUEsRUFBR2xXLE1BQU0sbUJBR3RCMFcsR0FBYyxHQUFLQyxNQUVuQkMsSUFBa0IsRUFDdEIsR0FBSWYsRUFDRixJQUNFLElBQUlnQixHQUFPLEdBQ1hsYSxPQUFPc1QsZUFBZTRHLEdBQU0sVUFBVyxDQUNyQzNHLElBQUssV0FFSDBHLElBQWtCLEtBR3RCOVgsT0FBT2dZLGlCQUFpQixlQUFnQixLQUFNRCxJQUM5QyxNQUFPemYsSUFNWCxJQUFJMmYsR0FBb0IsV0FXdEIsWUFWa0JqUCxJQUFkMk4sSUFPQUEsR0FMR0ksSUFBY0MsUUFBNEIsSUFBWCxFQUFBalgsR0FHdEIsRUFBQUEsRUFBZ0IsU0FBdUMsV0FBbEMsRUFBQUEsRUFBZ0IsUUFBRW1ZLElBQUlDLFNBS3BEeEIsR0FJTG5CLEdBQVd1QixHQUFhL1csT0FBT29ZLDZCQUduQyxTQUFTQyxHQUFVQyxHQUNqQixNQUF1QixtQkFBVEEsR0FBdUIsY0FBY2hRLEtBQUtnUSxFQUFLeGEsWUFHL0QsSUFJSXlhLEdBSkFDLEdBQ2dCLG9CQUFYbk8sUUFBMEJnTyxHQUFTaE8sU0FDdkIsb0JBQVpvTyxTQUEyQkosR0FBU0ksUUFBUUMsU0FNbkRILEdBRmlCLG9CQUFSSSxLQUF1Qk4sR0FBU00sS0FFbENBLElBR2MsV0FDbkIsU0FBU0EsSUFDUHJoQixLQUFLbWEsSUFBTTVULE9BQU9nUyxPQUFPLE1BWTNCLE9BVkE4SSxFQUFJNWdCLFVBQVVvTSxJQUFNLFNBQWMvRyxHQUNoQyxPQUF5QixJQUFsQjlGLEtBQUttYSxJQUFJclUsSUFFbEJ1YixFQUFJNWdCLFVBQVVxTSxJQUFNLFNBQWNoSCxHQUNoQzlGLEtBQUttYSxJQUFJclUsSUFBTyxHQUVsQnViLEVBQUk1Z0IsVUFBVTZnQixNQUFRLFdBQ3BCdGhCLEtBQUttYSxJQUFNNVQsT0FBT2dTLE9BQU8sT0FHcEI4SSxFQWRXLEdBb0J0QixJQUFJbFosR0FBTzBVLEVBOEZQMEUsR0FBTSxFQU1OQyxHQUFNLFdBQ1J4aEIsS0FBS0UsR0FBS3FoQixLQUNWdmhCLEtBQUt5aEIsS0FBTyxJQUdkRCxHQUFJL2dCLFVBQVVpaEIsT0FBUyxTQUFpQkMsR0FDdEMzaEIsS0FBS3loQixLQUFLbGMsS0FBS29jLElBR2pCSCxHQUFJL2dCLFVBQVVtaEIsVUFBWSxTQUFvQkQsR0FDNUNyTCxFQUFPdFcsS0FBS3loQixLQUFNRSxJQUdwQkgsR0FBSS9nQixVQUFVb2hCLE9BQVMsV0FDakJMLEdBQUl0VCxRQUNOc1QsR0FBSXRULE9BQU80VCxPQUFPOWhCLE9BSXRCd2hCLEdBQUkvZ0IsVUFBVXNoQixPQUFTLFdBU3JCLElBUEEsSUFBSU4sRUFBT3poQixLQUFLeWhCLEtBQUt6ZSxRQU9aZSxFQUFJLEVBQUdxWSxFQUFJcUYsRUFBS3hmLE9BQVE4QixFQUFJcVksRUFBR3JZLElBQ3RDMGQsRUFBSzFkLEdBQUdvVCxVQU9acUssR0FBSXRULE9BQVMsS0FDYixJQUFJOFQsR0FBYyxHQUVsQixTQUFTQyxHQUFZL1QsR0FDbkI4VCxHQUFZemMsS0FBSzJJLEdBQ2pCc1QsR0FBSXRULE9BQVNBLEVBR2YsU0FBU2dVLEtBQ1BGLEdBQVlHLE1BQ1pYLEdBQUl0VCxPQUFTOFQsR0FBWUEsR0FBWS9mLE9BQVMsR0FLaEQsSUFBSW1nQixHQUFRLFNBQ1ZDLEVBQ0FsZixFQUNBK1csRUFDQXJWLEVBQ0F5ZCxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBemlCLEtBQUtxaUIsSUFBTUEsRUFDWHJpQixLQUFLbUQsS0FBT0EsRUFDWm5ELEtBQUtrYSxTQUFXQSxFQUNoQmxhLEtBQUs2RSxLQUFPQSxFQUNaN0UsS0FBS3NpQixJQUFNQSxFQUNYdGlCLEtBQUswaUIsUUFBS2hSLEVBQ1YxUixLQUFLdWlCLFFBQVVBLEVBQ2Z2aUIsS0FBSzJpQixlQUFZalIsRUFDakIxUixLQUFLNGlCLGVBQVlsUixFQUNqQjFSLEtBQUs2aUIsZUFBWW5SLEVBQ2pCMVIsS0FBSzhGLElBQU0zQyxHQUFRQSxFQUFLMkMsSUFDeEI5RixLQUFLd2lCLGlCQUFtQkEsRUFDeEJ4aUIsS0FBSzhpQix1QkFBb0JwUixFQUN6QjFSLEtBQUsraUIsWUFBU3JSLEVBQ2QxUixLQUFLZ2pCLEtBQU0sRUFDWGhqQixLQUFLaWpCLFVBQVcsRUFDaEJqakIsS0FBS2tqQixjQUFlLEVBQ3BCbGpCLEtBQUttakIsV0FBWSxFQUNqQm5qQixLQUFLb2pCLFVBQVcsRUFDaEJwakIsS0FBS3FqQixRQUFTLEVBQ2RyakIsS0FBS3lpQixhQUFlQSxFQUNwQnppQixLQUFLc2pCLGVBQVk1UixFQUNqQjFSLEtBQUt1akIsb0JBQXFCLEdBR3hCQyxHQUFxQixDQUFFQyxNQUFPLENBQUVyRSxjQUFjLElBSWxEb0UsR0FBbUJDLE1BQU0zSixJQUFNLFdBQzdCLE9BQU85WixLQUFLOGlCLG1CQUdkdmMsT0FBT2dILGlCQUFrQjZVLEdBQU0zaEIsVUFBVytpQixJQUUxQyxJQUFJRSxHQUFtQixTQUFVN2UsUUFDakIsSUFBVEEsSUFBa0JBLEVBQU8sSUFFOUIsSUFBSThlLEVBQU8sSUFBSXZCLEdBR2YsT0FGQXVCLEVBQUs5ZSxLQUFPQSxFQUNaOGUsRUFBS1IsV0FBWSxFQUNWUSxHQUdULFNBQVNDLEdBQWlCL1QsR0FDeEIsT0FBTyxJQUFJdVMsUUFBTTFRLE9BQVdBLE9BQVdBLEVBQVczQyxPQUFPYyxJQU8zRCxTQUFTZ1UsR0FBWUMsR0FDbkIsSUFBSUMsRUFBUyxJQUFJM0IsR0FDZjBCLEVBQU16QixJQUNOeUIsRUFBTTNnQixLQUlOMmdCLEVBQU01SixVQUFZNEosRUFBTTVKLFNBQVNsWCxRQUNqQzhnQixFQUFNamYsS0FDTmlmLEVBQU14QixJQUNOd0IsRUFBTXZCLFFBQ051QixFQUFNdEIsaUJBQ05zQixFQUFNckIsY0FXUixPQVRBc0IsRUFBT3JCLEdBQUtvQixFQUFNcEIsR0FDbEJxQixFQUFPZCxTQUFXYSxFQUFNYixTQUN4QmMsRUFBT2plLElBQU1nZSxFQUFNaGUsSUFDbkJpZSxFQUFPWixVQUFZVyxFQUFNWCxVQUN6QlksRUFBT3BCLFVBQVltQixFQUFNbkIsVUFDekJvQixFQUFPbkIsVUFBWWtCLEVBQU1sQixVQUN6Qm1CLEVBQU9sQixVQUFZaUIsRUFBTWpCLFVBQ3pCa0IsRUFBT1QsVUFBWVEsRUFBTVIsVUFDekJTLEVBQU9YLFVBQVcsRUFDWFcsRUFRVCxJQUFJQyxHQUFhNWpCLE1BQU1LLFVBQ25Cd2pCLEdBQWUxZCxPQUFPZ1MsT0FBT3lMLElBRVosQ0FDbkIsT0FDQSxNQUNBLFFBQ0EsVUFDQSxTQUNBLE9BQ0EsV0FNYTdpQixTQUFRLFNBQVUraUIsR0FFL0IsSUFBSTdXLEVBQVcyVyxHQUFXRSxHQUMxQmhGLEVBQUkrRSxHQUFjQyxHQUFRLFdBRXhCLElBREEsSUFBSXBpQixFQUFPLEdBQUlxRCxFQUFNbkQsVUFBVUMsT0FDdkJrRCxLQUFRckQsRUFBTXFELEdBQVFuRCxVQUFXbUQsR0FFekMsSUFFSWdmLEVBRkFqaEIsRUFBU21LLEVBQVMxSyxNQUFNM0MsS0FBTThCLEdBQzlCc2lCLEVBQUtwa0IsS0FBS3FrQixPQUVkLE9BQVFILEdBQ04sSUFBSyxPQUNMLElBQUssVUFDSEMsRUFBV3JpQixFQUNYLE1BQ0YsSUFBSyxTQUNIcWlCLEVBQVdyaUIsRUFBS2tCLE1BQU0sR0FNMUIsT0FISW1oQixHQUFZQyxFQUFHRSxhQUFhSCxHQUVoQ0MsRUFBR0csSUFBSXhDLFNBQ0E3ZSxRQU1YLElBQUlzaEIsR0FBWWplLE9BQU9rZSxvQkFBb0JSLElBTXZDUyxJQUFnQixFQUVwQixTQUFTQyxHQUFpQm5hLEdBQ3hCa2EsR0FBZ0JsYSxFQVNsQixJQUFJb2EsR0FBVyxTQUFtQnBhLEdBQ2hDeEssS0FBS3dLLE1BQVFBLEVBQ2J4SyxLQUFLdWtCLElBQU0sSUFBSS9DLEdBQ2Z4aEIsS0FBSzZrQixRQUFVLEVBQ2YzRixFQUFJMVUsRUFBTyxTQUFVeEssTUFDakJJLE1BQU1DLFFBQVFtSyxJQUNaZ1YsRUFzQ1IsU0FBdUJ0UixFQUFRNFcsR0FFN0I1VyxFQUFPaUssVUFBWTJNLEVBdkNmQyxDQUFhdmEsRUFBT3laLElBZ0QxQixTQUFzQi9WLEVBQVE0VyxFQUFLL1osR0FDakMsSUFBSyxJQUFJaEgsRUFBSSxFQUFHcVksRUFBSXJSLEVBQUs5SSxPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUFLLENBQzNDLElBQUkrQixFQUFNaUYsRUFBS2hILEdBQ2ZtYixFQUFJaFIsRUFBUXBJLEVBQUtnZixFQUFJaGYsS0FqRG5Ca2YsQ0FBWXhhLEVBQU95WixHQUFjTyxJQUVuQ3hrQixLQUFLc2tCLGFBQWE5WixJQUVsQnhLLEtBQUtnUCxLQUFLeEUsSUFzRGQsU0FBU3lhLEdBQVN6YSxFQUFPMGEsR0FJdkIsSUFBSWQsRUFISixHQUFLekosRUFBU25RLE1BQVVBLGFBQWlCNFgsSUFrQnpDLE9BZEk1RyxFQUFPaFIsRUFBTyxXQUFhQSxFQUFNNlosa0JBQWtCTyxHQUNyRFIsRUFBSzVaLEVBQU02WixPQUVYSyxLQUNDL0QsT0FDQXZnQixNQUFNQyxRQUFRbUssSUFBVXhELEVBQWN3RCxLQUN2Q2pFLE9BQU80ZSxhQUFhM2EsS0FDbkJBLEVBQU00YSxTQUVQaEIsRUFBSyxJQUFJUSxHQUFTcGEsSUFFaEIwYSxHQUFjZCxHQUNoQkEsRUFBR1MsVUFFRVQsRUFNVCxTQUFTaUIsR0FDUHpZLEVBQ0E5RyxFQUNBK0osRUFDQXlWLEVBQ0FDLEdBRUEsSUFBSWhCLEVBQU0sSUFBSS9DLEdBRVZnRSxFQUFXamYsT0FBT2tmLHlCQUF5QjdZLEVBQUs5RyxHQUNwRCxJQUFJMGYsSUFBc0MsSUFBMUJBLEVBQVNwRyxhQUF6QixDQUtBLElBQUkzRixFQUFTK0wsR0FBWUEsRUFBUzFMLElBQzlCNEwsRUFBU0YsR0FBWUEsRUFBU3JMLElBQzVCVixJQUFVaU0sR0FBZ0MsSUFBckIxakIsVUFBVUMsU0FDbkM0TixFQUFNakQsRUFBSTlHLElBR1osSUFBSTZmLEdBQVdKLEdBQVdOLEdBQVFwVixHQUNsQ3RKLE9BQU9zVCxlQUFlak4sRUFBSzlHLEVBQUssQ0FDOUIwSCxZQUFZLEVBQ1o0UixjQUFjLEVBQ2R0RixJQUFLLFdBQ0gsSUFBSXRQLEVBQVFpUCxFQUFTQSxFQUFPL1csS0FBS2tLLEdBQU9pRCxFQVV4QyxPQVRJMlIsR0FBSXRULFNBQ05xVyxFQUFJMUMsU0FDQThELElBQ0ZBLEVBQVFwQixJQUFJMUMsU0FDUnpoQixNQUFNQyxRQUFRbUssSUFDaEJvYixHQUFZcGIsS0FJWEEsR0FFVDJQLElBQUssU0FBeUIwTCxHQUM1QixJQUFJcmIsRUFBUWlQLEVBQVNBLEVBQU8vVyxLQUFLa0ssR0FBT2lELEVBRXBDZ1csSUFBV3JiLEdBQVVxYixHQUFXQSxHQUFVcmIsR0FBVUEsR0FRcERpUCxJQUFXaU0sSUFDWEEsRUFDRkEsRUFBT2hqQixLQUFLa0ssRUFBS2laLEdBRWpCaFcsRUFBTWdXLEVBRVJGLEdBQVdKLEdBQVdOLEdBQVFZLEdBQzlCdEIsRUFBSXhDLGNBVVYsU0FBUzVILEdBQUtqTSxFQUFRcEksRUFBSytKLEdBTXpCLEdBQUl6UCxNQUFNQyxRQUFRNk4sSUFBVzJNLEVBQWtCL1UsR0FHN0MsT0FGQW9JLEVBQU9qTSxPQUFTdUgsS0FBS2lILElBQUl2QyxFQUFPak0sT0FBUTZELEdBQ3hDb0ksRUFBT2pCLE9BQU9uSCxFQUFLLEVBQUcrSixHQUNmQSxFQUVULEdBQUkvSixLQUFPb0ksS0FBWXBJLEtBQU9TLE9BQU85RixXQUVuQyxPQURBeU4sRUFBT3BJLEdBQU8rSixFQUNQQSxFQUVULElBQUl1VSxFQUFLLEVBQVNDLE9BQ2xCLE9BQUluVyxFQUFPa1gsUUFBV2hCLEdBQU1BLEVBQUdTLFFBS3RCaFYsRUFFSnVVLEdBSUxpQixHQUFrQmpCLEVBQUc1WixNQUFPMUUsRUFBSytKLEdBQ2pDdVUsRUFBR0csSUFBSXhDLFNBQ0FsUyxJQUxMM0IsRUFBT3BJLEdBQU8rSixFQUNQQSxHQVVYLFNBQVNpVyxHQUFLNVgsRUFBUXBJLEdBTXBCLEdBQUkxRixNQUFNQyxRQUFRNk4sSUFBVzJNLEVBQWtCL1UsR0FDN0NvSSxFQUFPakIsT0FBT25ILEVBQUssT0FEckIsQ0FJQSxJQUFJc2UsRUFBSyxFQUFTQyxPQUNkblcsRUFBT2tYLFFBQVdoQixHQUFNQSxFQUFHUyxTQU8xQnJKLEVBQU90TixFQUFRcEksWUFHYm9JLEVBQU9wSSxHQUNUc2UsR0FHTEEsRUFBR0csSUFBSXhDLFdBT1QsU0FBUzZELEdBQWFwYixHQUNwQixJQUFLLElBQUl4SixPQUFJLEVBQVUrQyxFQUFJLEVBQUdxWSxFQUFJNVIsRUFBTXZJLE9BQVE4QixFQUFJcVksRUFBR3JZLEtBQ3JEL0MsRUFBSXdKLEVBQU16RyxLQUNML0MsRUFBRXFqQixRQUFVcmpCLEVBQUVxakIsT0FBT0UsSUFBSTFDLFNBQzFCemhCLE1BQU1DLFFBQVFXLElBQ2hCNGtCLEdBQVk1a0IsR0FoTmxCNGpCLEdBQVNua0IsVUFBVXVPLEtBQU8sU0FBZXBDLEdBRXZDLElBREEsSUFBSTdCLEVBQU94RSxPQUFPd0UsS0FBSzZCLEdBQ2Q3SSxFQUFJLEVBQUdBLEVBQUlnSCxFQUFLOUksT0FBUThCLElBQy9Cc2hCLEdBQWtCelksRUFBSzdCLEVBQUtoSCxLQU9oQzZnQixHQUFTbmtCLFVBQVU2akIsYUFBZSxTQUF1QnlCLEdBQ3ZELElBQUssSUFBSWhpQixFQUFJLEVBQUdxWSxFQUFJMkosRUFBTTlqQixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUN2Q2toQixHQUFRYyxFQUFNaGlCLEtBZ05sQixJQUFJaWlCLEdBQVNwaEIsRUFBT21aLHNCQW9CcEIsU0FBU2tJLEdBQVd2SixFQUFJakosR0FDdEIsSUFBS0EsRUFBUSxPQUFPaUosRUFPcEIsSUFOQSxJQUFJNVcsRUFBS29nQixFQUFPQyxFQUVacGIsRUFBT21XLEdBQ1BDLFFBQVFDLFFBQVEzTixHQUNoQmxOLE9BQU93RSxLQUFLMEksR0FFUDFQLEVBQUksRUFBR0EsRUFBSWdILEVBQUs5SSxPQUFROEIsSUFHbkIsWUFGWitCLEVBQU1pRixFQUFLaEgsTUFHWG1pQixFQUFReEosRUFBRzVXLEdBQ1hxZ0IsRUFBVTFTLEVBQUszTixHQUNWMFYsRUFBT2tCLEVBQUk1VyxHQUdkb2dCLElBQVVDLEdBQ1ZuZixFQUFja2YsSUFDZGxmLEVBQWNtZixJQUVkRixHQUFVQyxFQUFPQyxHQU5qQmhNLEdBQUl1QyxFQUFJNVcsRUFBS3FnQixJQVNqQixPQUFPekosRUFNVCxTQUFTMEosR0FDUEMsRUFDQUMsRUFDQUMsR0FFQSxPQUFLQSxFQW9CSSxXQUVMLElBQUlDLEVBQW1DLG1CQUFiRixFQUN0QkEsRUFBUzVqQixLQUFLNmpCLEVBQUlBLEdBQ2xCRCxFQUNBRyxFQUFtQyxtQkFBZEosRUFDckJBLEVBQVUzakIsS0FBSzZqQixFQUFJQSxHQUNuQkYsRUFDSixPQUFJRyxFQUNLUCxHQUFVTyxFQUFjQyxHQUV4QkEsR0E3Qk5ILEVBR0FELEVBUUUsV0FDTCxPQUFPSixHQUNlLG1CQUFiSyxFQUEwQkEsRUFBUzVqQixLQUFLMUMsS0FBTUEsTUFBUXNtQixFQUN4QyxtQkFBZEQsRUFBMkJBLEVBQVUzakIsS0FBSzFDLEtBQU1BLE1BQVFxbUIsSUFWMURDLEVBSEFELEVBMkRiLFNBQVNLLEdBQ1BMLEVBQ0FDLEdBRUEsSUFBSXpqQixFQUFNeWpCLEVBQ05ELEVBQ0VBLEVBQVUvVCxPQUFPZ1UsR0FDakJsbUIsTUFBTUMsUUFBUWltQixHQUNaQSxFQUNBLENBQUNBLEdBQ0xELEVBQ0osT0FBT3hqQixFQUtULFNBQXNCOGpCLEdBRXBCLElBREEsSUFBSTlqQixFQUFNLEdBQ0RrQixFQUFJLEVBQUdBLEVBQUk0aUIsRUFBTTFrQixPQUFROEIsS0FDRCxJQUEzQmxCLEVBQUlvTyxRQUFRMFYsRUFBTTVpQixLQUNwQmxCLEVBQUkwQyxLQUFLb2hCLEVBQU01aUIsSUFHbkIsT0FBT2xCLEVBWEgrakIsQ0FBWS9qQixHQUNaQSxFQXdCTixTQUFTZ2tCLEdBQ1BSLEVBQ0FDLEVBQ0FDLEVBQ0F6Z0IsR0FFQSxJQUFJakQsRUFBTTBELE9BQU9nUyxPQUFPOE4sR0FBYSxNQUNyQyxPQUFJQyxFQUVLN0osRUFBTzVaLEVBQUt5akIsR0FFWnpqQixFQXpFWG1qQixHQUFPN2lCLEtBQU8sU0FDWmtqQixFQUNBQyxFQUNBQyxHQUVBLE9BQUtBLEVBY0VILEdBQWNDLEVBQVdDLEVBQVVDLEdBYnBDRCxHQUFnQyxtQkFBYkEsRUFRZEQsRUFFRkQsR0FBY0MsRUFBV0MsSUFtQ3BDeEksRUFBZ0IzYyxTQUFRLFNBQVUybEIsR0FDaENkLEdBQU9jLEdBQVFKLE1BeUJqQjdJLEVBQVkxYyxTQUFRLFNBQVVvSixHQUM1QnliLEdBQU96YixFQUFPLEtBQU9zYyxNQVN2QmIsR0FBT3pGLE1BQVEsU0FDYjhGLEVBQ0FDLEVBQ0FDLEVBQ0F6Z0IsR0FNQSxHQUhJdWdCLElBQWMvRixLQUFlK0YsT0FBWTNVLEdBQ3pDNFUsSUFBYWhHLEtBQWVnRyxPQUFXNVUsSUFFdEM0VSxFQUFZLE9BQU8vZixPQUFPZ1MsT0FBTzhOLEdBQWEsTUFJbkQsSUFBS0EsRUFBYSxPQUFPQyxFQUN6QixJQUFJOUosRUFBTSxHQUVWLElBQUssSUFBSXVLLEtBRFR0SyxFQUFPRCxFQUFLNkosR0FDTUMsRUFBVSxDQUMxQixJQUFJdkQsRUFBU3ZHLEVBQUl1SyxHQUNidEQsRUFBUTZDLEVBQVNTLEdBQ2pCaEUsSUFBVzNpQixNQUFNQyxRQUFRMGlCLEtBQzNCQSxFQUFTLENBQUNBLElBRVp2RyxFQUFJdUssR0FBU2hFLEVBQ1RBLEVBQU96USxPQUFPbVIsR0FDZHJqQixNQUFNQyxRQUFRb2pCLEdBQVNBLEVBQVEsQ0FBQ0EsR0FFdEMsT0FBT2pILEdBTVR3SixHQUFPZ0IsTUFDUGhCLEdBQU9pQixRQUNQakIsR0FBT2tCLE9BQ1BsQixHQUFPbUIsU0FBVyxTQUNoQmQsRUFDQUMsRUFDQUMsRUFDQXpnQixHQUtBLElBQUt1Z0IsRUFBYSxPQUFPQyxFQUN6QixJQUFJOUosRUFBTWpXLE9BQU9nUyxPQUFPLE1BR3hCLE9BRkFrRSxFQUFPRCxFQUFLNkosR0FDUkMsR0FBWTdKLEVBQU9ELEVBQUs4SixHQUNyQjlKLEdBRVR3SixHQUFPb0IsUUFBVWhCLEdBS2pCLElBQUlpQixHQUFlLFNBQVVoQixFQUFXQyxHQUN0QyxZQUFvQjVVLElBQWI0VSxFQUNIRCxFQUNBQyxHQXlITixTQUFTZ0IsR0FDUHZFLEVBQ0FVLEVBQ0E4QyxHQWtCQSxHQVpxQixtQkFBVjlDLElBQ1RBLEVBQVFBLEVBQU0xakIsU0FwR2xCLFNBQXlCQSxFQUFTd21CLEdBQ2hDLElBQUlTLEVBQVFqbkIsRUFBUWluQixNQUNwQixHQUFLQSxFQUFMLENBQ0EsSUFDSWpqQixFQUFHOEwsRUFESGhOLEVBQU0sR0FFVixHQUFJekMsTUFBTUMsUUFBUTJtQixHQUVoQixJQURBampCLEVBQUlpakIsRUFBTS9rQixPQUNIOEIsS0FFYyxpQkFEbkI4TCxFQUFNbVgsRUFBTWpqQixNQUdWbEIsRUFETytZLEVBQVMvTCxJQUNKLENBQUV0RixLQUFNLFlBS25CLEdBQUl2RCxFQUFjZ2dCLEdBQ3ZCLElBQUssSUFBSWxoQixLQUFPa2hCLEVBQ2RuWCxFQUFNbVgsRUFBTWxoQixHQUVaakQsRUFETytZLEVBQVM5VixJQUNKa0IsRUFBYzZJLEdBQ3RCQSxFQUNBLENBQUV0RixLQUFNc0YsR0FTaEI5UCxFQUFRaW5CLE1BQVFua0IsR0F3RWhCMGtCLENBQWU5RCxHQWxFakIsU0FBMEIxakIsRUFBU3dtQixHQUNqQyxJQUFJVyxFQUFTbm5CLEVBQVFtbkIsT0FDckIsR0FBS0EsRUFBTCxDQUNBLElBQUloWSxFQUFhblAsRUFBUW1uQixPQUFTLEdBQ2xDLEdBQUk5bUIsTUFBTUMsUUFBUTZtQixHQUNoQixJQUFLLElBQUluakIsRUFBSSxFQUFHQSxFQUFJbWpCLEVBQU9qbEIsT0FBUThCLElBQ2pDbUwsRUFBV2dZLEVBQU9uakIsSUFBTSxDQUFFMFAsS0FBTXlULEVBQU9uakIsU0FFcEMsR0FBSWlELEVBQWNrZ0IsR0FDdkIsSUFBSyxJQUFJcGhCLEtBQU9vaEIsRUFBUSxDQUN0QixJQUFJclgsRUFBTXFYLEVBQU9waEIsR0FDakJvSixFQUFXcEosR0FBT2tCLEVBQWM2SSxHQUM1QjRNLEVBQU8sQ0FBRWhKLEtBQU0zTixHQUFPK0osR0FDdEIsQ0FBRTRELEtBQU01RCxLQXNEaEIyWCxDQUFnQi9ELEdBeENsQixTQUE4QjFqQixHQUM1QixJQUFJMG5CLEVBQU8xbkIsRUFBUTJuQixXQUNuQixHQUFJRCxFQUNGLElBQUssSUFBSTNoQixLQUFPMmhCLEVBQU0sQ0FDcEIsSUFBSUUsRUFBU0YsRUFBSzNoQixHQUNJLG1CQUFYNmhCLElBQ1RGLEVBQUszaEIsR0FBTyxDQUFFdEUsS0FBTW1tQixFQUFReFEsT0FBUXdRLEtBbUMxQ0MsQ0FBb0JuRSxJQU1mQSxFQUFNb0UsUUFDTHBFLEVBQU1xRSxVQUNSL0UsRUFBU3VFLEdBQWF2RSxFQUFRVSxFQUFNcUUsUUFBU3ZCLElBRTNDOUMsRUFBTXNFLFFBQ1IsSUFBSyxJQUFJaGtCLEVBQUksRUFBR3FZLEVBQUlxSCxFQUFNc0UsT0FBTzlsQixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUM5Q2dmLEVBQVN1RSxHQUFhdkUsRUFBUVUsRUFBTXNFLE9BQU9oa0IsR0FBSXdpQixHQUtyRCxJQUNJemdCLEVBREEvRixFQUFVLEdBRWQsSUFBSytGLEtBQU9pZCxFQUNWaUYsRUFBV2xpQixHQUViLElBQUtBLEtBQU8yZCxFQUNMakksRUFBT3VILEVBQVFqZCxJQUNsQmtpQixFQUFXbGlCLEdBR2YsU0FBU2tpQixFQUFZbGlCLEdBQ25CLElBQUltaUIsRUFBUWpDLEdBQU9sZ0IsSUFBUXVoQixHQUMzQnRuQixFQUFRK0YsR0FBT21pQixFQUFNbEYsRUFBT2pkLEdBQU0yZCxFQUFNM2QsR0FBTXlnQixFQUFJemdCLEdBRXBELE9BQU8vRixFQVFULFNBQVNtb0IsR0FDUG5vQixFQUNBd0ssRUFDQXJLLEVBQ0Fpb0IsR0FHQSxHQUFrQixpQkFBUGpvQixFQUFYLENBR0EsSUFBSWtvQixFQUFTcm9CLEVBQVF3SyxHQUVyQixHQUFJaVIsRUFBTzRNLEVBQVFsb0IsR0FBTyxPQUFPa29CLEVBQU9sb0IsR0FDeEMsSUFBSW1vQixFQUFjek0sRUFBUzFiLEdBQzNCLEdBQUlzYixFQUFPNE0sRUFBUUMsR0FBZ0IsT0FBT0QsRUFBT0MsR0FDakQsSUFBSUMsRUFBZXhNLEVBQVd1TSxHQUM5QixPQUFJN00sRUFBTzRNLEVBQVFFLEdBQXdCRixFQUFPRSxHQUV4Q0YsRUFBT2xvQixJQUFPa29CLEVBQU9DLElBQWdCRCxFQUFPRSxJQWN4RCxTQUFTQyxHQUNQemlCLEVBQ0EwaUIsRUFDQUMsRUFDQWxDLEdBRUEsSUFBSW5NLEVBQU9vTyxFQUFZMWlCLEdBQ25CNGlCLEdBQVVsTixFQUFPaU4sRUFBVzNpQixHQUM1QjBFLEVBQVFpZSxFQUFVM2lCLEdBRWxCNmlCLEVBQWVDLEdBQWFyaEIsUUFBUzZTLEVBQUs3UCxNQUM5QyxHQUFJb2UsR0FBZ0IsRUFDbEIsR0FBSUQsSUFBV2xOLEVBQU9wQixFQUFNLFdBQzFCNVAsR0FBUSxPQUNILEdBQWMsS0FBVkEsR0FBZ0JBLElBQVV5UixFQUFVblcsR0FBTSxDQUduRCxJQUFJK2lCLEVBQWNELEdBQWE3WixPQUFRcUwsRUFBSzdQLE9BQ3hDc2UsRUFBYyxHQUFLRixFQUFlRSxLQUNwQ3JlLEdBQVEsR0FLZCxRQUFja0gsSUFBVmxILEVBQXFCLENBQ3ZCQSxFQXFCSixTQUE4QitiLEVBQUluTSxFQUFNdFUsR0FFdEMsR0FBSzBWLEVBQU9wQixFQUFNLFdBQWxCLENBR0EsSUFBSThFLEVBQU05RSxFQUFLME8sUUFZZixPQUFJdkMsR0FBTUEsRUFBR3dDLFNBQVNOLGdCQUNXL1csSUFBL0I2VSxFQUFHd0MsU0FBU04sVUFBVTNpQixTQUNINEwsSUFBbkI2VSxFQUFHeUMsT0FBT2xqQixHQUVIeWdCLEVBQUd5QyxPQUFPbGpCLEdBSUcsbUJBQVJvWixHQUE2QyxhQUF2QitKLEdBQVE3TyxFQUFLN1AsTUFDN0MyVSxFQUFJeGMsS0FBSzZqQixHQUNUckgsR0FoRE1nSyxDQUFvQjNDLEVBQUluTSxFQUFNdFUsR0FHdEMsSUFBSXFqQixFQUFvQnpFLEdBQ3hCQyxJQUFnQixHQUNoQk0sR0FBUXphLEdBQ1JtYSxHQUFnQndFLEdBU2xCLE9BQU8zZSxFQXNIVCxTQUFTeWUsR0FBUzNZLEdBQ2hCLElBQUkxRyxFQUFRMEcsR0FBTUEsRUFBRzlKLFdBQVdvRCxNQUFNLHNCQUN0QyxPQUFPQSxFQUFRQSxFQUFNLEdBQUssR0FHNUIsU0FBU3dmLEdBQVl6UCxFQUFHMUIsR0FDdEIsT0FBT2dSLEdBQVF0UCxLQUFPc1AsR0FBUWhSLEdBR2hDLFNBQVMyUSxHQUFjcmUsRUFBTThlLEdBQzNCLElBQUtqcEIsTUFBTUMsUUFBUWdwQixHQUNqQixPQUFPRCxHQUFXQyxFQUFlOWUsR0FBUSxHQUFLLEVBRWhELElBQUssSUFBSXhHLEVBQUksRUFBR29CLEVBQU1ra0IsRUFBY3BuQixPQUFROEIsRUFBSW9CLEVBQUtwQixJQUNuRCxHQUFJcWxCLEdBQVdDLEVBQWN0bEIsR0FBSXdHLEdBQy9CLE9BQU94RyxFQUdYLE9BQVEsRUFnRFYsU0FBU3VsQixHQUFhcm1CLEVBQUtzakIsRUFBSWdELEdBRzdCdEgsS0FDQSxJQUNFLEdBQUlzRSxFQUVGLElBREEsSUFBSWlELEVBQU1qRCxFQUNGaUQsRUFBTUEsRUFBSUMsU0FBVSxDQUMxQixJQUFJOUMsRUFBUTZDLEVBQUlULFNBQVNXLGNBQ3pCLEdBQUkvQyxFQUNGLElBQUssSUFBSTVpQixFQUFJLEVBQUdBLEVBQUk0aUIsRUFBTTFrQixPQUFROEIsSUFDaEMsSUFFRSxJQURvRCxJQUF0QzRpQixFQUFNNWlCLEdBQUdyQixLQUFLOG1CLEVBQUt2bUIsRUFBS3NqQixFQUFJZ0QsR0FDM0IsT0FDZixNQUFPdm9CLEdBQ1Ayb0IsR0FBa0Izb0IsRUFBR3dvQixFQUFLLHVCQU1wQ0csR0FBa0IxbUIsRUFBS3NqQixFQUFJZ0QsR0FDM0IsUUFDQXJILE1BSUosU0FBUzBILEdBQ1BDLEVBQ0F0SCxFQUNBemdCLEVBQ0F5a0IsRUFDQWdELEdBRUEsSUFBSTFtQixFQUNKLEtBQ0VBLEVBQU1mLEVBQU8rbkIsRUFBUWxuQixNQUFNNGYsRUFBU3pnQixHQUFRK25CLEVBQVFubkIsS0FBSzZmLE1BQzdDMWYsRUFBSXVpQixRQUFVbkssRUFBVXBZLEtBQVNBLEVBQUlpbkIsV0FDL0NqbkIsRUFBSXFZLE9BQU0sU0FBVWxhLEdBQUssT0FBT3NvQixHQUFZdG9CLEVBQUd1bEIsRUFBSWdELEVBQU8sdUJBRzFEMW1CLEVBQUlpbkIsVUFBVyxHQUVqQixNQUFPOW9CLEdBQ1Bzb0IsR0FBWXRvQixFQUFHdWxCLEVBQUlnRCxHQUVyQixPQUFPMW1CLEVBR1QsU0FBUzhtQixHQUFtQjFtQixFQUFLc2pCLEVBQUlnRCxHQUNuQyxHQUFJM2tCLEVBQU91WixhQUNULElBQ0UsT0FBT3ZaLEVBQU91WixhQUFhemIsS0FBSyxLQUFNTyxFQUFLc2pCLEVBQUlnRCxHQUMvQyxNQUFPdm9CLEdBR0hBLElBQU1pQyxHQUNSOG1CLEdBQVMvb0IsR0FJZitvQixHQUFTOW1CLEdBR1gsU0FBUzhtQixHQUFVOW1CLEVBQUtzakIsRUFBSWdELEdBSzFCLElBQUs5SixJQUFhQyxHQUE4QixvQkFBWnhYLFFBR2xDLE1BQU1qRixFQUZOaUYsUUFBUUUsTUFBTW5GLEdBUWxCLElBeUJJK21CLEdBekJBQyxJQUFtQixFQUVuQkMsR0FBWSxHQUNaQyxJQUFVLEVBRWQsU0FBU0MsS0FDUEQsSUFBVSxFQUNWLElBQUlFLEVBQVNILEdBQVVsbkIsTUFBTSxHQUM3QmtuQixHQUFVam9CLE9BQVMsRUFDbkIsSUFBSyxJQUFJOEIsRUFBSSxFQUFHQSxFQUFJc21CLEVBQU9wb0IsT0FBUThCLElBQ2pDc21CLEVBQU90bUIsS0F3QlgsR0FBdUIsb0JBQVp1bUIsU0FBMkJ2SixHQUFTdUosU0FBVSxDQUN2RCxJQUFJbFMsR0FBSWtTLFFBQVFDLFVBQ2hCUCxHQUFZLFdBQ1Y1UixHQUFFeFYsS0FBS3duQixJQU1IaEssR0FBU29LLFdBQVczTixJQUUxQm9OLElBQW1CLE9BQ2QsR0FBS2hLLEdBQW9DLG9CQUFyQndLLG1CQUN6QjFKLEdBQVMwSixtQkFFdUIseUNBQWhDQSxpQkFBaUJqa0IsV0FvQmpCd2pCLEdBSmlDLG9CQUFqQlUsY0FBZ0MzSixHQUFTMkosY0FJN0MsV0FDVkEsYUFBYU4sS0FJSCxXQUNWSSxXQUFXSixHQUFnQixRQXpCNUIsQ0FJRCxJQUFJTyxHQUFVLEVBQ1ZDLEdBQVcsSUFBSUgsaUJBQWlCTCxJQUNoQ1MsR0FBV3pmLFNBQVNzTCxlQUFlM0gsT0FBTzRiLEtBQzlDQyxHQUFTM0YsUUFBUTRGLEdBQVUsQ0FDekJDLGVBQWUsSUFFakJkLEdBQVksV0FDVlcsSUFBV0EsR0FBVSxHQUFLLEVBQzFCRSxHQUFTMW5CLEtBQU80TCxPQUFPNGIsS0FFekJWLElBQW1CLEVBZXJCLFNBQVNjLEdBQVVDLEVBQUk5TyxHQUNyQixJQUFJK08sRUFpQkosR0FoQkFmLEdBQVUza0IsTUFBSyxXQUNiLEdBQUl5bEIsRUFDRixJQUNFQSxFQUFHdG9CLEtBQUt3WixHQUNSLE1BQU9sYixHQUNQc29CLEdBQVl0b0IsRUFBR2tiLEVBQUssaUJBRWIrTyxHQUNUQSxFQUFTL08sTUFHUmlPLEtBQ0hBLElBQVUsRUFDVkgsT0FHR2dCLEdBQXlCLG9CQUFaVixRQUNoQixPQUFPLElBQUlBLFNBQVEsU0FBVUMsR0FDM0JVLEVBQVdWLEtBd0hqQixJQUFJVyxHQUFjLElBQUlqSyxHQU90QixTQUFTa0ssR0FBVXRiLEdBQ2pCdWIsR0FBVXZiLEVBQUtxYixJQUNmQSxHQUFZNUosUUFHZCxTQUFTOEosR0FBV3ZiLEVBQUt3YixHQUN2QixJQUFJdG5CLEVBQUdnSCxFQUNIdWdCLEVBQU1sckIsTUFBTUMsUUFBUXdQLEdBQ3hCLE1BQU15YixJQUFRM1EsRUFBUzlLLElBQVN0SixPQUFPZ2xCLFNBQVMxYixJQUFRQSxhQUFldVMsSUFBdkUsQ0FHQSxHQUFJdlMsRUFBSXdVLE9BQVEsQ0FDZCxJQUFJbUgsRUFBUTNiLEVBQUl3VSxPQUFPRSxJQUFJcmtCLEdBQzNCLEdBQUltckIsRUFBS3hlLElBQUkyZSxHQUNYLE9BRUZILEVBQUt2ZSxJQUFJMGUsR0FFWCxHQUFJRixFQUVGLElBREF2bkIsRUFBSThMLEVBQUk1TixPQUNEOEIsS0FBT3FuQixHQUFVdmIsRUFBSTlMLEdBQUlzbkIsUUFJaEMsSUFEQXRuQixHQURBZ0gsRUFBT3hFLE9BQU93RSxLQUFLOEUsSUFDVjVOLE9BQ0Y4QixLQUFPcW5CLEdBQVV2YixFQUFJOUUsRUFBS2hILElBQUtzbkIsSUFNMUMsSUFBSUksR0FBaUJoUSxHQUFPLFNBQVV4YixHQUNwQyxJQUFJeXJCLEVBQTZCLE1BQW5CenJCLEVBQUs4YixPQUFPLEdBRXRCNFAsRUFBNkIsT0FEakMxckIsRUFBT3lyQixFQUFVenJCLEVBQUsrQyxNQUFNLEdBQUsvQyxHQUNkOGIsT0FBTyxHQUV0QjZQLEVBQTZCLE9BRGpDM3JCLEVBQU8wckIsRUFBVTFyQixFQUFLK0MsTUFBTSxHQUFLL0MsR0FDZDhiLE9BQU8sR0FFMUIsTUFBTyxDQUNMOWIsS0FGRkEsRUFBTzJyQixFQUFVM3JCLEVBQUsrQyxNQUFNLEdBQUsvQyxFQUcvQnlkLEtBQU1pTyxFQUNOQyxRQUFTQSxFQUNURixRQUFTQSxNQUliLFNBQVNHLEdBQWlCQyxFQUFLdkYsR0FDN0IsU0FBU3dGLElBQ1AsSUFBSUMsRUFBY2hxQixVQUVkOHBCLEVBQU1DLEVBQVFELElBQ2xCLElBQUkxckIsTUFBTUMsUUFBUXlyQixHQU9oQixPQUFPbEMsR0FBd0JrQyxFQUFLLEtBQU05cEIsVUFBV3VrQixFQUFJLGdCQUx6RCxJQURBLElBQUl4QyxFQUFTK0gsRUFBSTlvQixRQUNSZSxFQUFJLEVBQUdBLEVBQUlnZ0IsRUFBTzloQixPQUFROEIsSUFDakM2bEIsR0FBd0I3RixFQUFPaGdCLEdBQUksS0FBTWlvQixFQUFhekYsRUFBSSxnQkFRaEUsT0FEQXdGLEVBQVFELElBQU1BLEVBQ1BDLEVBR1QsU0FBU0UsR0FDUEMsRUFDQUMsRUFDQXJmLEVBQ0FzZixFQUNBQyxFQUNBOUYsR0FFQSxJQUFJdG1CLEVBQWN1cEIsRUFBSzhDLEVBQUtsaUIsRUFDNUIsSUFBS25LLEtBQVFpc0IsRUFDRjFDLEVBQU0wQyxFQUFHanNCLEdBQ2xCcXNCLEVBQU1ILEVBQU1sc0IsR0FDWm1LLEVBQVFxaEIsR0FBZXhyQixHQUNuQnVhLEVBQVFnUCxLQUtEaFAsRUFBUThSLElBQ2I5UixFQUFRZ1AsRUFBSXNDLE9BQ2R0QyxFQUFNMEMsRUFBR2pzQixHQUFRNHJCLEdBQWdCckMsRUFBS2pELElBRXBDN0wsRUFBT3RRLEVBQU1zVCxRQUNmOEwsRUFBTTBDLEVBQUdqc0IsR0FBUW9zQixFQUFrQmppQixFQUFNbkssS0FBTXVwQixFQUFLcGYsRUFBTXdoQixVQUU1RDllLEVBQUkxQyxFQUFNbkssS0FBTXVwQixFQUFLcGYsRUFBTXdoQixRQUFTeGhCLEVBQU1zaEIsUUFBU3RoQixFQUFNbWlCLFNBQ2hEL0MsSUFBUThDLElBQ2pCQSxFQUFJUixJQUFNdEMsRUFDVjBDLEVBQUdqc0IsR0FBUXFzQixJQUdmLElBQUtyc0IsS0FBUWtzQixFQUNQM1IsRUFBUTBSLEVBQUdqc0IsS0FFYm1zQixHQURBaGlCLEVBQVFxaEIsR0FBZXhyQixJQUNQQSxLQUFNa3NCLEVBQU1sc0IsR0FBT21LLEVBQU13aEIsU0FPL0MsU0FBU1ksR0FBZ0J0TixFQUFLdU4sRUFBUzNGLEdBSXJDLElBQUlpRixFQUhBN00sYUFBZWtELEtBQ2pCbEQsRUFBTUEsRUFBSS9iLEtBQUsyakIsT0FBUzVILEVBQUkvYixLQUFLMmpCLEtBQU8sS0FHMUMsSUFBSTRGLEVBQVV4TixFQUFJdU4sR0FFbEIsU0FBU0UsSUFDUDdGLEVBQUtua0IsTUFBTTNDLEtBQU1nQyxXQUdqQnNVLEVBQU95VixFQUFRRCxJQUFLYSxHQUdsQm5TLEVBQVFrUyxHQUVWWCxFQUFVRixHQUFnQixDQUFDYyxJQUd2QmxTLEVBQU1pUyxFQUFRWixNQUFRcFIsRUFBT2dTLEVBQVFFLFNBRXZDYixFQUFVVyxHQUNGWixJQUFJdm1CLEtBQUtvbkIsR0FHakJaLEVBQVVGLEdBQWdCLENBQUNhLEVBQVNDLElBSXhDWixFQUFRYSxRQUFTLEVBQ2pCMU4sRUFBSXVOLEdBQVdWLEVBOENqQixTQUFTYyxHQUNQaHFCLEVBQ0FpcUIsRUFDQWhuQixFQUNBaW5CLEVBQ0FDLEdBRUEsR0FBSXZTLEVBQU1xUyxHQUFPLENBQ2YsR0FBSXRSLEVBQU9zUixFQUFNaG5CLEdBS2YsT0FKQWpELEVBQUlpRCxHQUFPZ25CLEVBQUtobkIsR0FDWGtuQixVQUNJRixFQUFLaG5CLElBRVAsRUFDRixHQUFJMFYsRUFBT3NSLEVBQU1DLEdBS3RCLE9BSkFscUIsRUFBSWlELEdBQU9nbkIsRUFBS0MsR0FDWEMsVUFDSUYsRUFBS0MsSUFFUCxFQUdYLE9BQU8sRUE4QlQsU0FBU0UsR0FBbUIvUyxHQUMxQixPQUFPblQsRUFBWW1ULEdBQ2YsQ0FBQzBKLEdBQWdCMUosSUFDakI5WixNQUFNQyxRQUFRNlosR0FDWmdULEdBQXVCaFQsUUFDdkJ4SSxFQUdSLFNBQVN5YixHQUFZeEosR0FDbkIsT0FBT2xKLEVBQU1rSixJQUFTbEosRUFBTWtKLEVBQUs5ZSxPQTd5RW5DLFNBQWtCdUUsR0FDaEIsT0FBYSxJQUFOQSxFQTR5RW1DZ2tCLENBQVF6SixFQUFLUixXQUd6RCxTQUFTK0osR0FBd0JoVCxFQUFVbVQsR0FDekMsSUFDSXRwQixFQUFHdUYsRUFBR2drQixFQUFXQyxFQURqQjFxQixFQUFNLEdBRVYsSUFBS2tCLEVBQUksRUFBR0EsRUFBSW1XLEVBQVNqWSxPQUFROEIsSUFFM0J5VyxFQURKbFIsRUFBSTRRLEVBQVNuVyxLQUNrQixrQkFBTnVGLElBRXpCaWtCLEVBQU8xcUIsRUFEUHlxQixFQUFZenFCLEVBQUlaLE9BQVMsR0FHckI3QixNQUFNQyxRQUFRaUosR0FDWkEsRUFBRXJILE9BQVMsSUFHVGtyQixJQUZKN2pCLEVBQUk0akIsR0FBdUI1akIsR0FBSytqQixHQUFlLElBQU0sSUFBTXRwQixJQUUxQyxLQUFPb3BCLEdBQVdJLEtBQ2pDMXFCLEVBQUl5cUIsR0FBYTFKLEdBQWdCMkosRUFBSzFvQixLQUFReUUsRUFBRSxHQUFJekUsTUFDcER5RSxFQUFFa2tCLFNBRUozcUIsRUFBSTBDLEtBQUs1QyxNQUFNRSxFQUFLeUcsSUFFYnZDLEVBQVl1QyxHQUNqQjZqQixHQUFXSSxHQUliMXFCLEVBQUl5cUIsR0FBYTFKLEdBQWdCMkosRUFBSzFvQixLQUFPeUUsR0FDOUIsS0FBTkEsR0FFVHpHLEVBQUkwQyxLQUFLcWUsR0FBZ0J0YSxJQUd2QjZqQixHQUFXN2pCLElBQU02akIsR0FBV0ksR0FFOUIxcUIsRUFBSXlxQixHQUFhMUosR0FBZ0IySixFQUFLMW9CLEtBQU95RSxFQUFFekUsT0FHM0M2VixFQUFPUixFQUFTdVQsV0FDbEJoVCxFQUFNblIsRUFBRStZLE1BQ1I3SCxFQUFRbFIsRUFBRXhELE1BQ1YyVSxFQUFNNFMsS0FDTi9qQixFQUFFeEQsSUFBTSxVQUFZdW5CLEVBQWMsSUFBTXRwQixFQUFJLE1BRTlDbEIsRUFBSTBDLEtBQUsrRCxLQUlmLE9BQU96RyxFQXFDVCxTQUFTNnFCLEdBQWV4RyxFQUFRWCxHQUM5QixHQUFJVyxFQUFRLENBT1YsSUFMQSxJQUFJaGtCLEVBQVNxRCxPQUFPZ1MsT0FBTyxNQUN2QnhOLEVBQU9tVyxHQUNQQyxRQUFRQyxRQUFROEYsR0FDaEIzZ0IsT0FBT3dFLEtBQUttYyxHQUVQbmpCLEVBQUksRUFBR0EsRUFBSWdILEVBQUs5SSxPQUFROEIsSUFBSyxDQUNwQyxJQUFJK0IsRUFBTWlGLEVBQUtoSCxHQUVmLEdBQVksV0FBUitCLEVBQUosQ0FHQSxJQUZBLElBQUk2bkIsRUFBYXpHLEVBQU9waEIsR0FBSzJOLEtBQ3pCdEcsRUFBU29aLEVBQ05wWixHQUFRLENBQ2IsR0FBSUEsRUFBT3lnQixXQUFhcFMsRUFBT3JPLEVBQU95Z0IsVUFBV0QsR0FBYSxDQUM1RHpxQixFQUFPNEMsR0FBT3FILEVBQU95Z0IsVUFBVUQsR0FDL0IsTUFFRnhnQixFQUFTQSxFQUFPc2MsUUFFbEIsSUFBS3RjLEdBQ0MsWUFBYStaLEVBQU9waEIsR0FBTSxDQUM1QixJQUFJK25CLEVBQWlCM0csRUFBT3BoQixHQUFLZ2pCLFFBQ2pDNWxCLEVBQU80QyxHQUFpQyxtQkFBbkIrbkIsRUFDakJBLEVBQWVuckIsS0FBSzZqQixHQUNwQnNILElBTVYsT0FBTzNxQixHQVdYLFNBQVM0cUIsR0FDUDVULEVBQ0FxSSxHQUVBLElBQUtySSxJQUFhQSxFQUFTalksT0FDekIsTUFBTyxHQUdULElBREEsSUFBSThyQixFQUFRLEdBQ0hocUIsRUFBSSxFQUFHcVksRUFBSWxDLEVBQVNqWSxPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUFLLENBQy9DLElBQUkwZixFQUFRdkosRUFBU25XLEdBQ2pCWixFQUFPc2dCLEVBQU10Z0IsS0FPakIsR0FMSUEsR0FBUUEsRUFBSzZxQixPQUFTN3FCLEVBQUs2cUIsTUFBTUMsYUFDNUI5cUIsRUFBSzZxQixNQUFNQyxLQUlmeEssRUFBTWxCLFVBQVlBLEdBQVdrQixFQUFNZCxZQUFjSixJQUNwRHBmLEdBQXFCLE1BQWJBLEVBQUs4cUIsTUFVWkYsRUFBTWpGLFVBQVlpRixFQUFNakYsUUFBVSxLQUFLdmpCLEtBQUtrZSxPQVQ3QyxDQUNBLElBQUl4akIsRUFBT2tELEVBQUs4cUIsS0FDWkEsRUFBUUYsRUFBTTl0QixLQUFVOHRCLEVBQU05dEIsR0FBUSxJQUN4QixhQUFkd2pCLEVBQU1wQixJQUNSNEwsRUFBSzFvQixLQUFLNUMsTUFBTXNyQixFQUFNeEssRUFBTXZKLFVBQVksSUFFeEMrVCxFQUFLMW9CLEtBQUtrZSxJQU9oQixJQUFLLElBQUl5SyxLQUFVSCxFQUNiQSxFQUFNRyxHQUFRN1EsTUFBTThRLFlBQ2ZKLEVBQU1HLEdBR2pCLE9BQU9ILEVBR1QsU0FBU0ksR0FBY3hLLEdBQ3JCLE9BQVFBLEVBQUtSLFlBQWNRLEVBQUtsQixjQUErQixNQUFka0IsRUFBSzllLEtBS3hELFNBQVN1cEIsR0FDUEwsRUFDQU0sRUFDQUMsR0FFQSxJQUFJenJCLEVBQ0EwckIsRUFBaUJob0IsT0FBT3dFLEtBQUtzakIsR0FBYXBzQixPQUFTLEVBQ25EdXNCLEVBQVdULElBQVVBLEVBQU1VLFNBQVdGLEVBQ3RDem9CLEVBQU1pb0IsR0FBU0EsRUFBTVcsS0FDekIsR0FBS1gsRUFFRSxJQUFJQSxFQUFNWSxZQUVmLE9BQU9aLEVBQU1ZLFlBQ1IsR0FDTEgsR0FDQUYsR0FDQUEsSUFBY2hVLEdBQ2R4VSxJQUFRd29CLEVBQVVJLE9BQ2pCSCxJQUNBRCxFQUFVTSxXQUlYLE9BQU9OLEVBR1AsSUFBSyxJQUFJdkgsS0FEVGxrQixFQUFNLEdBQ1lrckIsRUFDWkEsRUFBTWhILElBQXVCLE1BQWJBLEVBQU0sS0FDeEJsa0IsRUFBSWtrQixHQUFTOEgsR0FBb0JSLEVBQWF0SCxFQUFPZ0gsRUFBTWhILFVBbkIvRGxrQixFQUFNLEdBd0JSLElBQUssSUFBSWlzQixLQUFTVCxFQUNWUyxLQUFTanNCLElBQ2JBLEVBQUlpc0IsR0FBU0MsR0FBZ0JWLEVBQWFTLElBVzlDLE9BTklmLEdBQVN4bkIsT0FBTzRlLGFBQWE0SSxLQUMvQixFQUFRWSxZQUFjOXJCLEdBRXhCcWMsRUFBSXJjLEVBQUssVUFBVzJyQixHQUNwQnRQLEVBQUlyYyxFQUFLLE9BQVFpRCxHQUNqQm9aLEVBQUlyYyxFQUFLLGFBQWMwckIsR0FDaEIxckIsRUFHVCxTQUFTZ3NCLEdBQW9CUixFQUFhdm9CLEVBQUt3SyxHQUM3QyxJQUFJcEIsRUFBYSxXQUNmLElBQUlyTSxFQUFNYixVQUFVQyxPQUFTcU8sRUFBRzNOLE1BQU0sS0FBTVgsV0FBYXNPLEVBQUcsSUFJNUQsT0FIQXpOLEVBQU1BLEdBQXNCLGlCQUFSQSxJQUFxQnpDLE1BQU1DLFFBQVF3QyxHQUNuRCxDQUFDQSxHQUNEb3FCLEdBQWtCcHFCLE1BRUwsSUFBZkEsRUFBSVosUUFDWSxJQUFmWSxFQUFJWixRQUFnQlksRUFBSSxHQUFHc2dCLGdCQUMxQnpSLEVBQ0E3TyxHQVlOLE9BUEl5TixFQUFHMGUsT0FDTHpvQixPQUFPc1QsZUFBZXdVLEVBQWF2b0IsRUFBSyxDQUN0Q2dVLElBQUs1SyxFQUNMMUIsWUFBWSxFQUNaNFIsY0FBYyxJQUdYbFEsRUFHVCxTQUFTNmYsR0FBZ0JoQixFQUFPam9CLEdBQzlCLE9BQU8sV0FBYyxPQUFPaW9CLEVBQU1qb0IsSUFRcEMsU0FBU21wQixHQUNQcGYsRUFDQXFmLEdBRUEsSUFBSTFTLEVBQUt6WSxFQUFHcVksRUFBR3JSLEVBQU1qRixFQUNyQixHQUFJMUYsTUFBTUMsUUFBUXdQLElBQXVCLGlCQUFSQSxFQUUvQixJQURBMk0sRUFBTSxJQUFJcGMsTUFBTXlQLEVBQUk1TixRQUNmOEIsRUFBSSxFQUFHcVksRUFBSXZNLEVBQUk1TixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUNqQ3lZLEVBQUl6WSxHQUFLbXJCLEVBQU9yZixFQUFJOUwsR0FBSUEsUUFFckIsR0FBbUIsaUJBQVI4TCxFQUVoQixJQURBMk0sRUFBTSxJQUFJcGMsTUFBTXlQLEdBQ1g5TCxFQUFJLEVBQUdBLEVBQUk4TCxFQUFLOUwsSUFDbkJ5WSxFQUFJelksR0FBS21yQixFQUFPbnJCLEVBQUksRUFBR0EsUUFFcEIsR0FBSTRXLEVBQVM5SyxHQUNsQixHQUFJcVIsSUFBYXJSLEVBQUlrRCxPQUFPQyxVQUFXLENBQ3JDd0osRUFBTSxHQUdOLElBRkEsSUFBSXhKLEVBQVduRCxFQUFJa0QsT0FBT0MsWUFDdEI5UCxFQUFTOFAsRUFBU2hELFFBQ2Q5TSxFQUFPK00sTUFDYnVNLEVBQUlqWCxLQUFLMnBCLEVBQU9oc0IsRUFBT3NILE1BQU9nUyxFQUFJdmEsU0FDbENpQixFQUFTOFAsRUFBU2hELFlBS3BCLElBRkFqRixFQUFPeEUsT0FBT3dFLEtBQUs4RSxHQUNuQjJNLEVBQU0sSUFBSXBjLE1BQU0ySyxFQUFLOUksUUFDaEI4QixFQUFJLEVBQUdxWSxFQUFJclIsRUFBSzlJLE9BQVE4QixFQUFJcVksRUFBR3JZLElBQ2xDK0IsRUFBTWlGLEVBQUtoSCxHQUNYeVksRUFBSXpZLEdBQUttckIsRUFBT3JmLEVBQUkvSixHQUFNQSxFQUFLL0IsR0FRckMsT0FKSzBXLEVBQU0rQixLQUNUQSxFQUFNLElBRVIsRUFBTWlSLFVBQVcsRUFDVmpSLEVBUVQsU0FBUzJTLEdBQ1BsdkIsRUFDQW12QixFQUNBcEksRUFDQXFJLEdBRUEsSUFDSUMsRUFEQUMsRUFBZXZ2QixLQUFLd3ZCLGFBQWF2dkIsR0FFakNzdkIsR0FDRnZJLEVBQVFBLEdBQVMsR0FDYnFJLElBT0ZySSxFQUFRdkssRUFBT0EsRUFBTyxHQUFJNFMsR0FBYXJJLElBRXpDc0ksRUFBUUMsRUFBYXZJLElBQVVvSSxHQUUvQkUsRUFBUXR2QixLQUFLeXZCLE9BQU94dkIsSUFBU212QixFQUcvQixJQUFJbGhCLEVBQVM4WSxHQUFTQSxFQUFNaUgsS0FDNUIsT0FBSS9mLEVBQ0tsTyxLQUFLMHZCLGVBQWUsV0FBWSxDQUFFekIsS0FBTS9mLEdBQVVvaEIsR0FFbERBLEVBU1gsU0FBU0ssR0FBZXp2QixHQUN0QixPQUFPZ29CLEdBQWFsb0IsS0FBSytvQixTQUFVLFVBQVc3b0IsSUFBYTZjLEVBSzdELFNBQVM2UyxHQUFlQyxFQUFRQyxHQUM5QixPQUFJMXZCLE1BQU1DLFFBQVF3dkIsSUFDbUIsSUFBNUJBLEVBQU81ZSxRQUFRNmUsR0FFZkQsSUFBV0MsRUFTdEIsU0FBU0MsR0FDUEMsRUFDQWxxQixFQUNBbXFCLEVBQ0FDLEVBQ0FDLEdBRUEsSUFBSUMsRUFBZ0J4ckIsRUFBTzBaLFNBQVN4WSxJQUFRbXFCLEVBQzVDLE9BQUlFLEdBQWtCRCxJQUFpQnRyQixFQUFPMFosU0FBU3hZLEdBQzlDOHBCLEdBQWNPLEVBQWdCRCxHQUM1QkUsRUFDRlIsR0FBY1EsRUFBZUosR0FDM0JFLEVBQ0ZqVSxFQUFVaVUsS0FBa0JwcUIsT0FEOUIsRUFVVCxTQUFTdXFCLEdBQ1BsdEIsRUFDQWtmLEVBQ0E3WCxFQUNBOGxCLEVBQ0FDLEdBRUEsR0FBSS9sQixHQUNHbVEsRUFBU25RLEdBS1AsQ0FJTCxJQUFJc2lCLEVBSEExc0IsTUFBTUMsUUFBUW1LLEtBQ2hCQSxFQUFRb1MsRUFBU3BTLElBR25CLElBQUlnbUIsRUFBTyxTQUFXMXFCLEdBQ3BCLEdBQ1UsVUFBUkEsR0FDUSxVQUFSQSxHQUNBeVYsRUFBb0J6VixHQUVwQmduQixFQUFPM3BCLE1BQ0YsQ0FDTCxJQUFJb0gsRUFBT3BILEVBQUs2cUIsT0FBUzdxQixFQUFLNnFCLE1BQU16akIsS0FDcEN1aUIsRUFBT3dELEdBQVUxckIsRUFBT2dhLFlBQVl5RCxFQUFLOVgsRUFBTXpFLEdBQzNDM0MsRUFBS3N0QixXQUFhdHRCLEVBQUtzdEIsU0FBVyxJQUNsQ3R0QixFQUFLNnFCLFFBQVU3cUIsRUFBSzZxQixNQUFRLElBRWxDLElBQUkwQyxFQUFlOVUsRUFBUzlWLEdBQ3hCNnFCLEVBQWdCMVUsRUFBVW5XLEdBQ3hCNHFCLEtBQWdCNUQsR0FBVzZELEtBQWlCN0QsSUFDaERBLEVBQUtobkIsR0FBTzBFLEVBQU0xRSxHQUVkeXFCLEtBQ09wdEIsRUFBSytvQixLQUFPL29CLEVBQUsrb0IsR0FBSyxLQUMzQixVQUFZcG1CLEdBQVEsU0FBVThxQixHQUNoQ3BtQixFQUFNMUUsR0FBTzhxQixNQU1yQixJQUFLLElBQUk5cUIsS0FBTzBFLEVBQU9nbUIsRUFBTTFxQixHQUdqQyxPQUFPM0MsRUFRVCxTQUFTMHRCLEdBQ1AzYixFQUNBNGIsR0FFQSxJQUFJclYsRUFBU3piLEtBQUsrd0IsZUFBaUIvd0IsS0FBSyt3QixhQUFlLElBQ25EQyxFQUFPdlYsRUFBT3ZHLEdBR2xCLE9BQUk4YixJQUFTRixHQVNiRyxHQUxBRCxFQUFPdlYsRUFBT3ZHLEdBQVNsVixLQUFLK29CLFNBQVNtSSxnQkFBZ0JoYyxHQUFPeFMsS0FDMUQxQyxLQUFLbXhCLGFBQ0wsS0FDQW54QixNQUVnQixhQUFla1YsR0FBUSxHQVJoQzhiLEVBZ0JYLFNBQVNJLEdBQ1BKLEVBQ0E5YixFQUNBcFAsR0FHQSxPQURBbXJCLEdBQVdELEVBQU8sV0FBYTliLEdBQVNwUCxFQUFPLElBQU1BLEVBQU8sS0FBTSxHQUMzRGtyQixFQUdULFNBQVNDLEdBQ1BELEVBQ0FsckIsRUFDQXVkLEdBRUEsR0FBSWpqQixNQUFNQyxRQUFRMndCLEdBQ2hCLElBQUssSUFBSWp0QixFQUFJLEVBQUdBLEVBQUlpdEIsRUFBSy91QixPQUFROEIsSUFDM0JpdEIsRUFBS2p0QixJQUF5QixpQkFBWml0QixFQUFLanRCLElBQ3pCc3RCLEdBQWVMLEVBQUtqdEIsR0FBSytCLEVBQU0sSUFBTS9CLEVBQUlzZixRQUk3Q2dPLEdBQWVMLEVBQU1sckIsRUFBS3VkLEdBSTlCLFNBQVNnTyxHQUFnQjFOLEVBQU03ZCxFQUFLdWQsR0FDbENNLEVBQUtWLFVBQVcsRUFDaEJVLEVBQUs3ZCxJQUFNQSxFQUNYNmQsRUFBS04sT0FBU0EsRUFLaEIsU0FBU2lPLEdBQXFCbnVCLEVBQU1xSCxHQUNsQyxHQUFJQSxHQUNHeEQsRUFBY3dELEdBS1osQ0FDTCxJQUFJMGhCLEVBQUsvb0IsRUFBSytvQixHQUFLL29CLEVBQUsrb0IsR0FBS3pQLEVBQU8sR0FBSXRaLEVBQUsrb0IsSUFBTSxHQUNuRCxJQUFLLElBQUlwbUIsS0FBTzBFLEVBQU8sQ0FDckIsSUFBSSttQixFQUFXckYsRUFBR3BtQixHQUNkMHJCLEVBQU9obkIsRUFBTTFFLEdBQ2pCb21CLEVBQUdwbUIsR0FBT3lyQixFQUFXLEdBQUdqZixPQUFPaWYsRUFBVUMsR0FBUUEsR0FJdkQsT0FBT3J1QixFQUtULFNBQVNzdUIsR0FDUDNGLEVBQ0FqcEIsRUFFQTZ1QixFQUNBQyxHQUVBOXVCLEVBQU1BLEdBQU8sQ0FBRTRyQixTQUFVaUQsR0FDekIsSUFBSyxJQUFJM3RCLEVBQUksRUFBR0EsRUFBSStuQixFQUFJN3BCLE9BQVE4QixJQUFLLENBQ25DLElBQUlrcUIsRUFBT25DLEVBQUkvbkIsR0FDWDNELE1BQU1DLFFBQVE0dEIsR0FDaEJ3RCxHQUFtQnhELEVBQU1wckIsRUFBSzZ1QixHQUNyQnpELElBRUxBLEVBQUtlLFFBQ1BmLEVBQUszZCxHQUFHMGUsT0FBUSxHQUVsQm5zQixFQUFJb3JCLEVBQUtub0IsS0FBT21vQixFQUFLM2QsSUFNekIsT0FISXFoQixJQUNGLEVBQU1qRCxLQUFPaUQsR0FFUjl1QixFQUtULFNBQVMrdUIsR0FBaUJDLEVBQVN4dEIsR0FDakMsSUFBSyxJQUFJTixFQUFJLEVBQUdBLEVBQUlNLEVBQU9wQyxPQUFROEIsR0FBSyxFQUFHLENBQ3pDLElBQUkrQixFQUFNekIsRUFBT04sR0FDRSxpQkFBUitCLEdBQW9CQSxJQUM3QityQixFQUFReHRCLEVBQU9OLElBQU1NLEVBQU9OLEVBQUksSUFTcEMsT0FBTzh0QixFQU1ULFNBQVNDLEdBQWlCdG5CLEVBQU91bkIsR0FDL0IsTUFBd0IsaUJBQVZ2bkIsRUFBcUJ1bkIsRUFBU3ZuQixFQUFRQSxFQUt0RCxTQUFTd25CLEdBQXNCOWpCLEdBQzdCQSxFQUFPK2pCLEdBQUtiLEdBQ1psakIsRUFBT2dGLEdBQUtpSSxFQUNaak4sRUFBT2lGLEdBQUssRUFDWmpGLEVBQU9na0IsR0FBS2pELEdBQ1ovZ0IsRUFBT2lrQixHQUFLaEQsR0FDWmpoQixFQUFPa2tCLEdBQUtwVixFQUNaOU8sRUFBT25NLEdBQUswYixFQUNadlAsRUFBT21rQixHQUFLeEIsR0FDWjNpQixFQUFPb2tCLEdBQUszQyxHQUNaemhCLEVBQU9xa0IsR0FBS3hDLEdBQ1o3aEIsRUFBT3ZNLEdBQUswdUIsR0FDWm5pQixFQUFPc2tCLEdBQUs1TyxHQUNaMVYsRUFBT3hHLEdBQUtnYyxHQUNaeFYsRUFBT3VrQixHQUFLaEIsR0FDWnZqQixFQUFPd2tCLEdBQUtwQixHQUNacGpCLEVBQU9yTSxHQUFLK3ZCLEdBQ1oxakIsRUFBT3lrQixHQUFLYixHQUtkLFNBQVNjLEdBQ1B6dkIsRUFDQTZqQixFQUNBOU0sRUFDQTZJLEVBQ0EvQixHQUVBLElBS0k2UixFQUxBQyxFQUFTOXlCLEtBRVRELEVBQVVpaEIsRUFBS2poQixRQUlmeWIsRUFBT3VILEVBQVEsU0FDakI4UCxFQUFZdHNCLE9BQU9nUyxPQUFPd0ssSUFFaEJnUSxVQUFZaFEsR0FLdEI4UCxFQUFZOVAsRUFFWkEsRUFBU0EsRUFBT2dRLFdBRWxCLElBQUlDLEVBQWF0WSxFQUFPM2EsRUFBUWt6QixXQUM1QkMsR0FBcUJGLEVBRXpCaHpCLEtBQUttRCxLQUFPQSxFQUNabkQsS0FBS2duQixNQUFRQSxFQUNiaG5CLEtBQUtrYSxTQUFXQSxFQUNoQmxhLEtBQUsraUIsT0FBU0EsRUFDZC9pQixLQUFLbXpCLFVBQVlod0IsRUFBSytvQixJQUFNNVIsRUFDNUJ0YSxLQUFLb3pCLFdBQWExRixHQUFjM3RCLEVBQVFtbkIsT0FBUW5FLEdBQ2hEL2lCLEtBQUsrdEIsTUFBUSxXQU9YLE9BTksrRSxFQUFPckQsUUFDVnJCLEdBQ0VqckIsRUFBS2t3QixZQUNMUCxFQUFPckQsT0FBUzNCLEdBQWE1VCxFQUFVNkksSUFHcEMrUCxFQUFPckQsUUFHaEJscEIsT0FBT3NULGVBQWU3WixLQUFNLGNBQWUsQ0FDekN3TixZQUFZLEVBQ1pzTSxJQUFLLFdBQ0gsT0FBT3NVLEdBQXFCanJCLEVBQUtrd0IsWUFBYXJ6QixLQUFLK3RCLFlBS25EaUYsSUFFRmh6QixLQUFLK29CLFNBQVdocEIsRUFFaEJDLEtBQUt5dkIsT0FBU3p2QixLQUFLK3RCLFFBQ25CL3RCLEtBQUt3dkIsYUFBZXBCLEdBQXFCanJCLEVBQUtrd0IsWUFBYXJ6QixLQUFLeXZCLFNBRzlEMXZCLEVBQVF1ekIsU0FDVnR6QixLQUFLNEIsR0FBSyxTQUFVK1gsRUFBRzFCLEVBQUczTyxFQUFHME8sR0FDM0IsSUFBSThMLEVBQVFuTyxHQUFja2QsRUFBV2xaLEVBQUcxQixFQUFHM08sRUFBRzBPLEVBQUdrYixHQUtqRCxPQUpJcFAsSUFBVTFqQixNQUFNQyxRQUFReWpCLEtBQzFCQSxFQUFNakIsVUFBWTlpQixFQUFRdXpCLFNBQzFCeFAsRUFBTW5CLFVBQVlJLEdBRWJlLEdBR1Q5akIsS0FBSzRCLEdBQUssU0FBVStYLEVBQUcxQixFQUFHM08sRUFBRzBPLEdBQUssT0FBT3JDLEdBQWNrZCxFQUFXbFosRUFBRzFCLEVBQUczTyxFQUFHME8sRUFBR2tiLElBK0NsRixTQUFTSyxHQUE4QnpQLEVBQU8zZ0IsRUFBTTB2QixFQUFXOXlCLEVBQVN5ekIsR0FJdEUsSUFBSUMsRUFBUTVQLEdBQVdDLEdBU3ZCLE9BUkEyUCxFQUFNOVEsVUFBWWtRLEVBQ2xCWSxFQUFNN1EsVUFBWTdpQixFQUlkb0QsRUFBSzhxQixRQUNOd0YsRUFBTXR3QixPQUFTc3dCLEVBQU10d0IsS0FBTyxLQUFLOHFCLEtBQU85cUIsRUFBSzhxQixNQUV6Q3dGLEVBR1QsU0FBU0MsR0FBWWhYLEVBQUlqSixHQUN2QixJQUFLLElBQUkzTixLQUFPMk4sRUFDZGlKLEVBQUdkLEVBQVM5VixJQUFRMk4sRUFBSzNOLEdBN0Q3QmtzQixHQUFxQlksR0FBd0JueUIsV0EwRTdDLElBQUlrekIsR0FBc0IsQ0FDeEJDLEtBQU0sU0FBZTlQLEVBQU8rUCxHQUMxQixHQUNFL1AsRUFBTWhCLG9CQUNMZ0IsRUFBTWhCLGtCQUFrQmdSLGNBQ3pCaFEsRUFBTTNnQixLQUFLNHdCLFVBQ1gsQ0FFQSxJQUFJQyxFQUFjbFEsRUFDbEI2UCxHQUFvQk0sU0FBU0QsRUFBYUEsUUFFOUJsUSxFQUFNaEIsa0JBMEp4QixTQUNFZ0IsRUFDQWYsR0FFQSxJQUFJaGpCLEVBQVUsQ0FDWm0wQixjQUFjLEVBQ2RDLGFBQWNyUSxFQUNkZixPQUFRQSxHQUdOcVIsRUFBaUJ0USxFQUFNM2dCLEtBQUtpeEIsZUFLaEMsT0FKSTNaLEVBQU0yWixLQUNScjBCLEVBQVFtdkIsT0FBU2tGLEVBQWVsRixPQUNoQ252QixFQUFRbXhCLGdCQUFrQmtELEVBQWVsRCxpQkFFcEMsSUFBSXBOLEVBQU10QixpQkFBaUJ4QixLQUFLamhCLEdBektHczBCLENBQ3BDdlEsRUFDQXdRLEtBRUlDLE9BQU9WLEVBQVkvUCxFQUFNeEIsU0FBTTVRLEVBQVdtaUIsSUFJcERJLFNBQVUsU0FBbUJPLEVBQVUxUSxHQUNyQyxJQUFJL2pCLEVBQVUrakIsRUFBTXRCLGtCQXc4QnhCLFNBQ0UrRCxFQUNBa0MsRUFDQTBLLEVBQ0FzQixFQUNBQyxHQVlBLElBQUlDLEVBQWlCRixFQUFZdHhCLEtBQUtrd0IsWUFDbEN1QixFQUFpQnJPLEVBQUdpSixhQUNwQnFGLEtBQ0RGLElBQW1CQSxFQUFlbEcsU0FDbENtRyxJQUFtQnRhLElBQWdCc2EsRUFBZW5HLFNBQ2xEa0csR0FBa0JwTyxFQUFHaUosYUFBYWQsT0FBU2lHLEVBQWVqRyxNQU16RG9HLEtBQ0ZKLEdBQ0FuTyxFQUFHd0MsU0FBU2dNLGlCQUNaRixHQWtCRixHQWZBdE8sRUFBR3dDLFNBQVNvTCxhQUFlTSxFQUMzQmxPLEVBQUd5TyxPQUFTUCxFQUVSbE8sRUFBRzBPLFNBQ0wxTyxFQUFHME8sT0FBT2xTLE9BQVMwUixHQUVyQmxPLEVBQUd3QyxTQUFTZ00sZ0JBQWtCTCxFQUs5Qm5PLEVBQUcyTyxPQUFTVCxFQUFZdHhCLEtBQUs2cUIsT0FBUzFULEVBQ3RDaU0sRUFBRzRPLFdBQWFoQyxHQUFhN1ksRUFHekJtTyxHQUFhbEMsRUFBR3dDLFNBQVMvQixNQUFPLENBQ2xDckMsSUFBZ0IsR0FHaEIsSUFGQSxJQUFJcUMsRUFBUVQsRUFBR3lDLE9BQ1hvTSxFQUFXN08sRUFBR3dDLFNBQVNzTSxXQUFhLEdBQy9CdHhCLEVBQUksRUFBR0EsRUFBSXF4QixFQUFTbnpCLE9BQVE4QixJQUFLLENBQ3hDLElBQUkrQixFQUFNc3ZCLEVBQVNyeEIsR0FDZnlrQixFQUFjakMsRUFBR3dDLFNBQVMvQixNQUM5QkEsRUFBTWxoQixHQUFPeWlCLEdBQWF6aUIsRUFBSzBpQixFQUFhQyxFQUFXbEMsR0FFekQ1QixJQUFnQixHQUVoQjRCLEVBQUd3QyxTQUFTTixVQUFZQSxFQUkxQjBLLEVBQVlBLEdBQWE3WSxFQUN6QixJQUFJZ2IsRUFBZS9PLEVBQUd3QyxTQUFTd00saUJBQy9CaFAsRUFBR3dDLFNBQVN3TSxpQkFBbUJwQyxFQUMvQnFDLEdBQXlCalAsRUFBSTRNLEVBQVdtQyxHQUdwQ1IsSUFDRnZPLEVBQUdrSixPQUFTM0IsR0FBYTRHLEVBQWdCRCxFQUFZbFMsU0FDckRnRSxFQUFHa1AsZ0JBOWdDSEMsQ0FEWTVSLEVBQU1oQixrQkFBb0IwUixFQUFTMVIsa0JBRzdDL2lCLEVBQVEwb0IsVUFDUjFvQixFQUFRb3pCLFVBQ1JyUCxFQUNBL2pCLEVBQVFtYSxXQUlabkUsT0FBUSxTQUFpQitOLEdBQ3ZCLElBeXNDOEJ5QyxFQXpzQzFCaEUsRUFBVXVCLEVBQU12QixRQUNoQk8sRUFBb0JnQixFQUFNaEIsa0JBQ3pCQSxFQUFrQjZTLGFBQ3JCN1MsRUFBa0I2UyxZQUFhLEVBQy9CQyxHQUFTOVMsRUFBbUIsWUFFMUJnQixFQUFNM2dCLEtBQUs0d0IsWUFDVHhSLEVBQVFvVCxhQWtzQ2dCcFAsRUE1ckNGekQsR0ErckMzQitTLFdBQVksRUFDZkMsR0FBa0J2d0IsS0FBS2doQixJQTlyQ2pCd1AsR0FBdUJqVCxHQUFtQixLQUtoRGtULFFBQVMsU0FBa0JsUyxHQUN6QixJQUFJaEIsRUFBb0JnQixFQUFNaEIsa0JBQ3pCQSxFQUFrQmdSLGVBQ2hCaFEsRUFBTTNnQixLQUFLNHdCLFVBR2RrQyxHQUF5Qm5ULEdBQW1CLEdBRjVDQSxFQUFrQm9ULGNBUXRCQyxHQUFlNXZCLE9BQU93RSxLQUFLNG9CLElBRS9CLFNBQVN5QyxHQUNQcFYsRUFDQTdkLEVBQ0FvZixFQUNBckksRUFDQW1JLEdBRUEsSUFBSTdILEVBQVF3RyxHQUFaLENBSUEsSUFBSXFWLEVBQVc5VCxFQUFRd0csU0FBU2xCLE1BU2hDLEdBTklsTixFQUFTcUcsS0FDWEEsRUFBT3FWLEVBQVM1WixPQUFPdUUsSUFLTCxtQkFBVEEsRUFBWCxDQVFBLElBQUl5QixFQUNKLEdBQUlqSSxFQUFRd0csRUFBS3NWLFdBR0Y1a0IsS0FEYnNQLEVBK1pKLFNBQ0V1VixFQUNBRixHQUVBLEdBQUkzYixFQUFPNmIsRUFBUW51QixRQUFVcVMsRUFBTThiLEVBQVFDLFdBQ3pDLE9BQU9ELEVBQVFDLFVBR2pCLEdBQUkvYixFQUFNOGIsRUFBUUUsVUFDaEIsT0FBT0YsRUFBUUUsU0FHakIsSUFBSUMsRUFBUUMsR0FNWixHQUxJRCxHQUFTamMsRUFBTThiLEVBQVFLLFVBQThDLElBQW5DTCxFQUFRSyxPQUFPM2xCLFFBQVF5bEIsSUFFM0RILEVBQVFLLE9BQU9yeEIsS0FBS214QixHQUdsQmhjLEVBQU82YixFQUFRTSxVQUFZcGMsRUFBTThiLEVBQVFPLGFBQzNDLE9BQU9QLEVBQVFPLFlBR2pCLEdBQUlKLElBQVVqYyxFQUFNOGIsRUFBUUssUUFBUyxDQUNuQyxJQUFJQSxFQUFTTCxFQUFRSyxPQUFTLENBQUNGLEdBQzNCSyxHQUFPLEVBQ1BDLEVBQWUsS0FDZkMsRUFBZSxLQUVsQixFQUFRQyxJQUFJLGtCQUFrQixXQUFjLE9BQU81Z0IsRUFBT3NnQixFQUFRRixNQUVuRSxJQUFJUyxFQUFjLFNBQVVDLEdBQzFCLElBQUssSUFBSXJ6QixFQUFJLEVBQUdxWSxFQUFJd2EsRUFBTzMwQixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUN2QzZ5QixFQUFPN3lCLEdBQUkweEIsZUFHVjJCLElBQ0ZSLEVBQU8zMEIsT0FBUyxFQUNLLE9BQWpCKzBCLElBQ0ZLLGFBQWFMLEdBQ2JBLEVBQWUsTUFFSSxPQUFqQkMsSUFDRkksYUFBYUosR0FDYkEsRUFBZSxRQUtqQjFNLEVBQVU3TSxHQUFLLFNBQVU3YSxHQUUzQjB6QixFQUFRRSxTQUFXYSxHQUFXejBCLEVBQUt3ekIsR0FHOUJVLEVBR0hILEVBQU8zMEIsT0FBUyxFQUZoQmsxQixHQUFZLE1BTVpJLEVBQVM3WixHQUFLLFNBQVU4WixHQUt0Qi9jLEVBQU04YixFQUFRQyxhQUNoQkQsRUFBUW51QixPQUFRLEVBQ2hCK3VCLEdBQVksT0FJWnQwQixFQUFNMHpCLEVBQVFoTSxFQUFTZ04sR0ErQzNCLE9BN0NJNWMsRUFBUzlYLEtBQ1BvWSxFQUFVcFksR0FFUjJYLEVBQVErYixFQUFRRSxXQUNsQjV6QixFQUFJRCxLQUFLMm5CLEVBQVNnTixHQUVYdGMsRUFBVXBZLEVBQUk0MEIsYUFDdkI1MEIsRUFBSTQwQixVQUFVNzBCLEtBQUsybkIsRUFBU2dOLEdBRXhCOWMsRUFBTTVYLEVBQUl1RixTQUNabXVCLEVBQVFDLFVBQVljLEdBQVd6MEIsRUFBSXVGLE1BQU9pdUIsSUFHeEM1YixFQUFNNVgsRUFBSWcwQixXQUNaTixFQUFRTyxZQUFjUSxHQUFXejBCLEVBQUlnMEIsUUFBU1IsR0FDNUIsSUFBZHh6QixFQUFJNjBCLE1BQ05uQixFQUFRTSxTQUFVLEVBRWxCRyxFQUFleE0sWUFBVyxXQUN4QndNLEVBQWUsS0FDWHhjLEVBQVErYixFQUFRRSxXQUFhamMsRUFBUStiLEVBQVFudUIsU0FDL0NtdUIsRUFBUU0sU0FBVSxFQUNsQk0sR0FBWSxNQUVidDBCLEVBQUk2MEIsT0FBUyxNQUloQmpkLEVBQU01WCxFQUFJODBCLFdBQ1pWLEVBQWV6TSxZQUFXLFdBQ3hCeU0sRUFBZSxLQUNYemMsRUFBUStiLEVBQVFFLFdBQ2xCYyxFQUdNLFFBR1AxMEIsRUFBSTgwQixZQUtiWixHQUFPLEVBRUFSLEVBQVFNLFFBQ1hOLEVBQVFPLFlBQ1JQLEVBQVFFLFVBdmhCTG1CLENBRFBuVixFQUFlekIsRUFDNEJxVixJQUt6QyxPQTZZTixTQUNFRSxFQUNBcHpCLEVBQ0FvZixFQUNBckksRUFDQW1JLEdBRUEsSUFBSXNCLEVBQU9ELEtBR1gsT0FGQUMsRUFBS2xCLGFBQWU4VCxFQUNwQjVTLEVBQUtMLFVBQVksQ0FBRW5nQixLQUFNQSxFQUFNb2YsUUFBU0EsRUFBU3JJLFNBQVVBLEVBQVVtSSxJQUFLQSxHQUNuRXNCLEVBdlpJa1UsQ0FDTHBWLEVBQ0F0ZixFQUNBb2YsRUFDQXJJLEVBQ0FtSSxHQUtObGYsRUFBT0EsR0FBUSxHQUlmMjBCLEdBQTBCOVcsR0FHdEJ2RyxFQUFNdFgsRUFBSzQwQixRQXdGakIsU0FBeUJoNEIsRUFBU29ELEdBQ2hDLElBQUlpWCxFQUFRcmEsRUFBUWc0QixPQUFTaDRCLEVBQVFnNEIsTUFBTTNkLE1BQVMsUUFDaERoUSxFQUFTckssRUFBUWc0QixPQUFTaDRCLEVBQVFnNEIsTUFBTTN0QixPQUFVLFNBQ3BEakgsRUFBSzZxQixRQUFVN3FCLEVBQUs2cUIsTUFBUSxLQUFLNVQsR0FBUWpYLEVBQUs0MEIsTUFBTXZ0QixNQUN0RCxJQUFJMGhCLEVBQUsvb0IsRUFBSytvQixLQUFPL29CLEVBQUsrb0IsR0FBSyxJQUMzQnFGLEVBQVdyRixFQUFHOWhCLEdBQ2Q5RixFQUFXbkIsRUFBSzQwQixNQUFNenpCLFNBQ3RCbVcsRUFBTThXLElBRU5ueEIsTUFBTUMsUUFBUWt4QixJQUNzQixJQUFoQ0EsRUFBU3RnQixRQUFRM00sR0FDakJpdEIsSUFBYWp0QixLQUVqQjRuQixFQUFHOWhCLEdBQVMsQ0FBQzlGLEdBQVVnTyxPQUFPaWYsSUFHaENyRixFQUFHOWhCLEdBQVM5RixFQXZHWjB6QixDQUFlaFgsRUFBS2poQixRQUFTb0QsR0FJL0IsSUFBSXNsQixFQXI4Qk4sU0FDRXRsQixFQUNBNmQsRUFDQXFCLEdBS0EsSUFBSW1HLEVBQWN4SCxFQUFLamhCLFFBQVFpbkIsTUFDL0IsSUFBSXhNLEVBQVFnTyxHQUFaLENBR0EsSUFBSTNsQixFQUFNLEdBQ05tckIsRUFBUTdxQixFQUFLNnFCLE1BQ2JoSCxFQUFRN2pCLEVBQUs2akIsTUFDakIsR0FBSXZNLEVBQU11VCxJQUFVdlQsRUFBTXVNLEdBQ3hCLElBQUssSUFBSWxoQixLQUFPMGlCLEVBQWEsQ0FDM0IsSUFBSXVFLEVBQVM5USxFQUFVblcsR0FpQnZCK21CLEdBQVVocUIsRUFBS21rQixFQUFPbGhCLEVBQUtpbkIsR0FBUSxJQUNuQ0YsR0FBVWhxQixFQUFLbXJCLEVBQU9sb0IsRUFBS2luQixHQUFRLEdBR3ZDLE9BQU9scUIsR0ErNUJTbzFCLENBQTBCOTBCLEVBQU02ZCxHQUdoRCxHQUFJdEcsRUFBT3NHLEVBQUtqaEIsUUFBUW00QixZQUN0QixPQXhNSixTQUNFbFgsRUFDQXlILEVBQ0F0bEIsRUFDQTB2QixFQUNBM1ksR0FFQSxJQUFJbmEsRUFBVWloQixFQUFLamhCLFFBQ2ZpbkIsRUFBUSxHQUNSd0IsRUFBY3pvQixFQUFRaW5CLE1BQzFCLEdBQUl2TSxFQUFNK04sR0FDUixJQUFLLElBQUkxaUIsS0FBTzBpQixFQUNkeEIsRUFBTWxoQixHQUFPeWlCLEdBQWF6aUIsRUFBSzBpQixFQUFhQyxHQUFhbk8sUUFHdkRHLEVBQU10WCxFQUFLNnFCLFFBQVUwRixHQUFXMU0sRUFBTzdqQixFQUFLNnFCLE9BQzVDdlQsRUFBTXRYLEVBQUs2akIsUUFBVTBNLEdBQVcxTSxFQUFPN2pCLEVBQUs2akIsT0FHbEQsSUFBSXdNLEVBQWdCLElBQUlaLEdBQ3RCenZCLEVBQ0E2akIsRUFDQTlNLEVBQ0EyWSxFQUNBN1IsR0FHRThDLEVBQVEvakIsRUFBUW12QixPQUFPeHNCLEtBQUssS0FBTTh3QixFQUFjNXhCLEdBQUk0eEIsR0FFeEQsR0FBSTFQLGFBQWlCMUIsR0FDbkIsT0FBT21SLEdBQTZCelAsRUFBTzNnQixFQUFNcXdCLEVBQWN6USxPQUFRaGpCLEdBQ2xFLEdBQUlLLE1BQU1DLFFBQVF5akIsR0FBUSxDQUcvQixJQUZBLElBQUlxVSxFQUFTbEwsR0FBa0JuSixJQUFVLEdBQ3JDamhCLEVBQU0sSUFBSXpDLE1BQU0rM0IsRUFBT2wyQixRQUNsQjhCLEVBQUksRUFBR0EsRUFBSW8wQixFQUFPbDJCLE9BQVE4QixJQUNqQ2xCLEVBQUlrQixHQUFLd3ZCLEdBQTZCNEUsRUFBT3AwQixHQUFJWixFQUFNcXdCLEVBQWN6USxPQUFRaGpCLEdBRS9FLE9BQU84QyxHQW1LQXUxQixDQUEwQnBYLEVBQU15SCxFQUFXdGxCLEVBQU1vZixFQUFTckksR0FLbkUsSUFBSWlaLEVBQVlod0IsRUFBSytvQixHQUtyQixHQUZBL29CLEVBQUsrb0IsR0FBSy9vQixFQUFLazFCLFNBRVgzZCxFQUFPc0csRUFBS2poQixRQUFRdTRCLFVBQVcsQ0FLakMsSUFBSXJLLEVBQU85cUIsRUFBSzhxQixLQUNoQjlxQixFQUFPLEdBQ0g4cUIsSUFDRjlxQixFQUFLOHFCLEtBQU9BLElBcUNsQixTQUFnQzlxQixHQUU5QixJQURBLElBQUl3akIsRUFBUXhqQixFQUFLMmpCLE9BQVMzakIsRUFBSzJqQixLQUFPLElBQzdCL2lCLEVBQUksRUFBR0EsRUFBSW95QixHQUFhbDBCLE9BQVE4QixJQUFLLENBQzVDLElBQUkrQixFQUFNcXdCLEdBQWFweUIsR0FDbkJ3dEIsRUFBVzVLLEVBQU03Z0IsR0FDakJ5eUIsRUFBVTVFLEdBQW9CN3RCLEdBQzlCeXJCLElBQWFnSCxHQUFhaEgsR0FBWUEsRUFBU2lILFVBQ2pEN1IsRUFBTTdnQixHQUFPeXJCLEVBQVdrSCxHQUFZRixFQUFTaEgsR0FBWWdILElBdkM3REcsQ0FBc0J2MUIsR0FHdEIsSUFBSWxELEVBQU8rZ0IsRUFBS2poQixRQUFRRSxNQUFRb2lCLEVBUWhDLE9BUFksSUFBSUQsR0FDYixpQkFBb0JwQixFQUFRLEtBQUsvZ0IsRUFBUSxJQUFNQSxFQUFRLElBQ3hEa0QsT0FBTXVPLE9BQVdBLE9BQVdBLEVBQVc2USxFQUN2QyxDQUFFdkIsS0FBTUEsRUFBTXlILFVBQVdBLEVBQVcwSyxVQUFXQSxFQUFXOVEsSUFBS0EsRUFBS25JLFNBQVVBLEdBQzlFdUksS0FvQ0osU0FBU2dXLEdBQWFFLEVBQUlDLEdBQ3hCLElBQUloTSxFQUFTLFNBQVVqVCxFQUFHMUIsR0FFeEIwZ0IsRUFBR2hmLEVBQUcxQixHQUNOMmdCLEVBQUdqZixFQUFHMUIsSUFHUixPQURBMlUsRUFBTzRMLFNBQVUsRUFDVjVMLEVBZ0NULFNBQVNqWCxHQUNQNE0sRUFDQUYsRUFDQWxmLEVBQ0ErVyxFQUNBMmUsRUFDQUMsR0FVQSxPQVJJMTRCLE1BQU1DLFFBQVE4QyxJQUFTNEQsRUFBWTVELE1BQ3JDMDFCLEVBQW9CM2UsRUFDcEJBLEVBQVcvVyxFQUNYQSxPQUFPdU8sR0FFTGdKLEVBQU9vZSxLQUNURCxFQWxCbUIsR0F1QnZCLFNBQ0V0VyxFQUNBRixFQUNBbGYsRUFDQStXLEVBQ0EyZSxHQUVBLEdBQUlwZSxFQUFNdFgsSUFBU3NYLEVBQU0sRUFBTzRKLFFBTTlCLE9BQU9YLEtBTVQsR0FISWpKLEVBQU10WCxJQUFTc1gsRUFBTXRYLEVBQUsySyxNQUM1QnVVLEVBQU1sZixFQUFLMkssS0FFUnVVLEVBRUgsT0FBT3FCLEtBMkJULElBQUlJLEVBQU9wQixFQUVMMUIsR0FkRjVnQixNQUFNQyxRQUFRNlosSUFDTyxtQkFBaEJBLEVBQVMsTUFFaEIvVyxFQUFPQSxHQUFRLElBQ1Zrd0IsWUFBYyxDQUFFdkssUUFBUzVPLEVBQVMsSUFDdkNBLEVBQVNqWSxPQUFTLEdBaEVDLElBa0VqQjQyQixFQUNGM2UsRUFBVytTLEdBQWtCL1MsR0FwRVYsSUFxRVYyZSxJQUNUM2UsRUFwaUNKLFNBQWtDQSxHQUNoQyxJQUFLLElBQUluVyxFQUFJLEVBQUdBLEVBQUltVyxFQUFTalksT0FBUThCLElBQ25DLEdBQUkzRCxNQUFNQyxRQUFRNlosRUFBU25XLElBQ3pCLE9BQU8zRCxNQUFNSyxVQUFVNlIsT0FBTzNQLE1BQU0sR0FBSXVYLEdBRzVDLE9BQU9BLEVBOGhDTTZlLENBQXdCN2UsSUFHbEIsaUJBQVJtSSxJQUVUSyxFQUFNSCxFQUFReVMsUUFBVXpTLEVBQVF5UyxPQUFPdFMsSUFBTzlkLEVBQU84WixnQkFBZ0IyRCxHQVNuRXlCLEVBUkVsZixFQUFPMlosY0FBYzhELEdBUWYsSUFBSUQsR0FDVnhkLEVBQU8rWixxQkFBcUIwRCxHQUFNbGYsRUFBTStXLE9BQ3hDeEksT0FBV0EsRUFBVzZRLEdBRWJwZixHQUFTQSxFQUFLNjFCLE1BQVF2ZSxFQUFNdUcsRUFBT2tILEdBQWEzRixFQUFRd0csU0FBVSxhQUFjMUcsSUFPbkYsSUFBSUQsR0FDVkMsRUFBS2xmLEVBQU0rVyxPQUNYeEksT0FBV0EsRUFBVzZRLEdBUGhCNlQsR0FBZ0JwVixFQUFNN2QsRUFBTW9mLEVBQVNySSxFQUFVbUksSUFZekR5QixFQUFRc1MsR0FBZ0IvVCxFQUFLbGYsRUFBTW9mLEVBQVNySSxHQUU5QyxPQUFJOVosTUFBTUMsUUFBUXlqQixHQUNUQSxFQUNFckosRUFBTXFKLElBQ1hySixFQUFNaUksSUFBT3VXLEdBQVFuVixFQUFPcEIsR0FDNUJqSSxFQUFNdFgsSUE0QmQsU0FBK0JBLEdBQ3pCd1gsRUFBU3hYLEVBQUt1UyxRQUNoQnlWLEdBQVNob0IsRUFBS3VTLE9BRVppRixFQUFTeFgsRUFBSysxQixRQUNoQi9OLEdBQVNob0IsRUFBSysxQixPQWpDS0MsQ0FBcUJoMkIsR0FDakMyZ0IsR0FFQUosS0ExRkYwVixDQUFlN1csRUFBU0YsRUFBS2xmLEVBQU0rVyxFQUFVMmUsR0E4RnRELFNBQVNJLEdBQVNuVixFQUFPcEIsRUFBSTJXLEdBTzNCLEdBTkF2VixFQUFNcEIsR0FBS0EsRUFDTyxrQkFBZG9CLEVBQU16QixNQUVSSyxPQUFLaFIsRUFDTDJuQixHQUFRLEdBRU41ZSxFQUFNcUosRUFBTTVKLFVBQ2QsSUFBSyxJQUFJblcsRUFBSSxFQUFHcVksRUFBSTBILEVBQU01SixTQUFTalksT0FBUThCLEVBQUlxWSxFQUFHclksSUFBSyxDQUNyRCxJQUFJMGYsRUFBUUssRUFBTTVKLFNBQVNuVyxHQUN2QjBXLEVBQU1nSixFQUFNcEIsT0FDZDdILEVBQVFpSixFQUFNZixLQUFRaEksRUFBTzJlLElBQXdCLFFBQWQ1VixFQUFNcEIsTUFDN0M0VyxHQUFReFYsRUFBT2YsRUFBSTJXLElBdUQzQixJQWtRSW5yQixHQWxRQXlvQixHQUEyQixLQTRFL0IsU0FBU1csR0FBWWdDLEVBQU03eEIsR0FPekIsT0FMRTZ4QixFQUFLNWYsWUFDSndILElBQTBDLFdBQTdCb1ksRUFBS3ZtQixPQUFPc0gsZ0JBRTFCaWYsRUFBT0EsRUFBS3hRLFNBRVBuTyxFQUFTMmUsR0FDWjd4QixFQUFLZ1YsT0FBTzZjLEdBQ1pBLEVBOElOLFNBQVMvVixHQUFvQkksR0FDM0IsT0FBT0EsRUFBS1IsV0FBYVEsRUFBS2xCLGFBS2hDLFNBQVM4VyxHQUF3QnJmLEdBQy9CLEdBQUk5WixNQUFNQyxRQUFRNlosR0FDaEIsSUFBSyxJQUFJblcsRUFBSSxFQUFHQSxFQUFJbVcsRUFBU2pZLE9BQVE4QixJQUFLLENBQ3hDLElBQUl1RixFQUFJNFEsRUFBU25XLEdBQ2pCLEdBQUkwVyxFQUFNblIsS0FBT21SLEVBQU1uUixFQUFFa1osbUJBQXFCZSxHQUFtQmphLElBQy9ELE9BQU9BLEdBc0JmLFNBQVN3RCxHQUFLMUMsRUFBT2tHLEdBQ25CcEMsR0FBT2dwQixJQUFJOXNCLEVBQU9rRyxHQUdwQixTQUFTa3BCLEdBQVVwdkIsRUFBT2tHLEdBQ3hCcEMsR0FBT3VyQixLQUFLcnZCLEVBQU9rRyxHQUdyQixTQUFTK2IsR0FBbUJqaUIsRUFBT2tHLEdBQ2pDLElBQUlvcEIsRUFBVXhyQixHQUNkLE9BQU8sU0FBU3lyQixJQUNkLElBQUk5MkIsRUFBTXlOLEVBQUczTixNQUFNLEtBQU1YLFdBQ2IsT0FBUmEsR0FDRjYyQixFQUFRRCxLQUFLcnZCLEVBQU91dkIsSUFLMUIsU0FBU25FLEdBQ1BqUCxFQUNBNE0sRUFDQW1DLEdBRUFwbkIsR0FBU3FZLEVBQ1QwRixHQUFnQmtILEVBQVdtQyxHQUFnQixHQUFJeG9CLEdBQUswc0IsR0FBVW5OLEdBQW1COUYsR0FDakZyWSxRQUFTd0QsRUFrR1gsSUFBSTRpQixHQUFpQixLQUdyQixTQUFTc0YsR0FBa0JyVCxHQUN6QixJQUFJc1QsRUFBcUJ2RixHQUV6QixPQURBQSxHQUFpQi9OLEVBQ1YsV0FDTCtOLEdBQWlCdUYsR0EyUXJCLFNBQVNDLEdBQWtCdlQsR0FDekIsS0FBT0EsSUFBT0EsRUFBS0EsRUFBR2tELFVBQ3BCLEdBQUlsRCxFQUFHc1AsVUFBYSxPQUFPLEVBRTdCLE9BQU8sRUFHVCxTQUFTRSxHQUF3QnhQLEVBQUl3VCxHQUNuQyxHQUFJQSxHQUVGLEdBREF4VCxFQUFHeVQsaUJBQWtCLEVBQ2pCRixHQUFpQnZULEdBQ25CLFlBRUcsR0FBSUEsRUFBR3lULGdCQUNaLE9BRUYsR0FBSXpULEVBQUdzUCxXQUE4QixPQUFqQnRQLEVBQUdzUCxVQUFvQixDQUN6Q3RQLEVBQUdzUCxXQUFZLEVBQ2YsSUFBSyxJQUFJOXhCLEVBQUksRUFBR0EsRUFBSXdpQixFQUFHMFQsVUFBVWg0QixPQUFROEIsSUFDdkNneUIsR0FBdUJ4UCxFQUFHMFQsVUFBVWwyQixJQUV0QzZ4QixHQUFTclAsRUFBSSxjQUlqQixTQUFTMFAsR0FBMEIxUCxFQUFJd1QsR0FDckMsS0FBSUEsSUFDRnhULEVBQUd5VCxpQkFBa0IsRUFDakJGLEdBQWlCdlQsS0FJbEJBLEVBQUdzUCxXQUFXLENBQ2pCdFAsRUFBR3NQLFdBQVksRUFDZixJQUFLLElBQUk5eEIsRUFBSSxFQUFHQSxFQUFJd2lCLEVBQUcwVCxVQUFVaDRCLE9BQVE4QixJQUN2Q2t5QixHQUF5QjFQLEVBQUcwVCxVQUFVbDJCLElBRXhDNnhCLEdBQVNyUCxFQUFJLGdCQUlqQixTQUFTcVAsR0FBVXJQLEVBQUlPLEdBRXJCN0UsS0FDQSxJQUFJaVksRUFBVzNULEVBQUd3QyxTQUFTakMsR0FDdkJ5QyxFQUFPekMsRUFBTyxRQUNsQixHQUFJb1QsRUFDRixJQUFLLElBQUluMkIsRUFBSSxFQUFHbzJCLEVBQUlELEVBQVNqNEIsT0FBUThCLEVBQUlvMkIsRUFBR3AyQixJQUMxQzZsQixHQUF3QnNRLEVBQVNuMkIsR0FBSXdpQixFQUFJLEtBQU1BLEVBQUlnRCxHQUduRGhELEVBQUc2VCxlQUNMN1QsRUFBRzhULE1BQU0sUUFBVXZULEdBRXJCNUUsS0FLRixJQUVJb1ksR0FBUSxHQUNSeEUsR0FBb0IsR0FDcEJqcEIsR0FBTSxHQUVOMHRCLElBQVUsRUFDVkMsSUFBVyxFQUNYdGxCLEdBQVEsRUFtQlJ1bEIsR0FBd0IsRUFHeEJDLEdBQVMzdUIsS0FBS04sSUFRbEIsR0FBSWdVLElBQWNRLEVBQU0sQ0FDdEIsSUFBSSxHQUFjdlgsT0FBTzJJLFlBRXZCLElBQzJCLG1CQUFwQixHQUFZNUYsS0FDbkJpdkIsS0FBV3R2QixTQUFTdXZCLFlBQVksU0FBU0MsWUFNekNGLEdBQVMsV0FBYyxPQUFPLEdBQVlqdkIsUUFPOUMsU0FBU292QixLQUdQLElBQUlDLEVBQVM1NkIsRUFjYixJQWhCQXU2QixHQUF3QkMsS0FDeEJGLElBQVcsRUFXWEYsR0FBTTVxQixNQUFLLFNBQVVpSyxFQUFHMUIsR0FBSyxPQUFPMEIsRUFBRXpaLEdBQUsrWCxFQUFFL1gsTUFJeENnVixHQUFRLEVBQUdBLEdBQVFvbEIsR0FBTXI0QixPQUFRaVQsTUFDcEM0bEIsRUFBVVIsR0FBTXBsQixLQUNKNmxCLFFBQ1ZELEVBQVFDLFNBRVY3NkIsRUFBSzQ2QixFQUFRNTZCLEdBQ2IyTSxHQUFJM00sR0FBTSxLQUNWNDZCLEVBQVFFLE1BbUJWLElBQUlDLEVBQWlCbkYsR0FBa0I5eUIsUUFDbkNrNEIsRUFBZVosR0FBTXQzQixRQXRGekJrUyxHQUFRb2xCLEdBQU1yNEIsT0FBUzZ6QixHQUFrQjd6QixPQUFTLEVBQ2xENEssR0FBTSxHQUlOMHRCLEdBQVVDLElBQVcsRUFzSHZCLFNBQTZCRixHQUMzQixJQUFLLElBQUl2MkIsRUFBSSxFQUFHQSxFQUFJdTJCLEVBQU1yNEIsT0FBUThCLElBQ2hDdTJCLEVBQU12MkIsR0FBRzh4QixXQUFZLEVBQ3JCRSxHQUF1QnVFLEVBQU12MkIsSUFBSSxHQW5DbkNvM0IsQ0FBbUJGLEdBVXJCLFNBQTJCWCxHQUV6QixJQURBLElBQUl2MkIsRUFBSXUyQixFQUFNcjRCLE9BQ1A4QixLQUFLLENBQ1YsSUFBSSsyQixFQUFVUixFQUFNdjJCLEdBQ2hCd2lCLEVBQUt1VSxFQUFRdlUsR0FDYkEsRUFBRzZVLFdBQWFOLEdBQVd2VSxFQUFHb1AsYUFBZXBQLEVBQUd1TixjQUNsRDhCLEdBQVNyUCxFQUFJLFlBZmpCOFUsQ0FBaUJILEdBSWJoZCxJQUFZdFosRUFBT3NaLFVBQ3JCQSxHQUFTb2QsS0FBSyxTQXNFbEIsSUFBSUMsR0FBUSxFQU9SQyxHQUFVLFNBQ1pqVixFQUNBa1YsRUFDQXpRLEVBQ0FqckIsRUFDQTI3QixHQUVBMTdCLEtBQUt1bUIsR0FBS0EsRUFDTm1WLElBQ0ZuVixFQUFHNlUsU0FBV3A3QixNQUVoQnVtQixFQUFHb1YsVUFBVXAyQixLQUFLdkYsTUFFZEQsR0FDRkMsS0FBSzQ3QixPQUFTNzdCLEVBQVE2N0IsS0FDdEI1N0IsS0FBSzY3QixPQUFTOTdCLEVBQVE4N0IsS0FDdEI3N0IsS0FBSzg3QixPQUFTLzdCLEVBQVErN0IsS0FDdEI5N0IsS0FBSysyQixPQUFTaDNCLEVBQVFnM0IsS0FDdEIvMkIsS0FBSys2QixPQUFTaDdCLEVBQVFnN0IsUUFFdEIvNkIsS0FBSzQ3QixLQUFPNTdCLEtBQUs2N0IsS0FBTzc3QixLQUFLODdCLEtBQU85N0IsS0FBSysyQixNQUFPLEVBRWxELzJCLEtBQUtnckIsR0FBS0EsRUFDVmhyQixLQUFLRSxLQUFPcTdCLEdBQ1p2N0IsS0FBSys3QixRQUFTLEVBQ2QvN0IsS0FBS2c4QixNQUFRaDhCLEtBQUs4N0IsS0FDbEI5N0IsS0FBS2k4QixLQUFPLEdBQ1pqOEIsS0FBS2s4QixRQUFVLEdBQ2ZsOEIsS0FBS204QixPQUFTLElBQUlsYixHQUNsQmpoQixLQUFLbzhCLFVBQVksSUFBSW5iLEdBQ3JCamhCLEtBQUtxOEIsV0FFRCxHQUVtQixtQkFBWlosRUFDVHo3QixLQUFLeVosT0FBU2dpQixHQUVkejdCLEtBQUt5WixPQXgzSFQsU0FBb0J6UCxHQUNsQixJQUFJc1YsRUFBT3RPLEtBQUtoSCxHQUFoQixDQUdBLElBQUlzeUIsRUFBV3R5QixFQUFLOUQsTUFBTSxLQUMxQixPQUFPLFNBQVUwRyxHQUNmLElBQUssSUFBSTdJLEVBQUksRUFBR0EsRUFBSXU0QixFQUFTcjZCLE9BQVE4QixJQUFLLENBQ3hDLElBQUs2SSxFQUFPLE9BQ1pBLEVBQU1BLEVBQUkwdkIsRUFBU3Y0QixJQUVyQixPQUFPNkksSUE4MkhPMnZCLENBQVVkLEdBQ25CejdCLEtBQUt5WixTQUNSelosS0FBS3laLE9BQVNvRCxJQVNsQjdjLEtBQUt3SyxNQUFReEssS0FBSzg3QixVQUNkcHFCLEVBQ0ExUixLQUFLOFosT0FNWDBoQixHQUFRLzZCLFVBQVVxWixJQUFNLFdBRXRCLElBQUl0UCxFQURKeVgsR0FBV2ppQixNQUVYLElBQUl1bUIsRUFBS3ZtQixLQUFLdW1CLEdBQ2QsSUFDRS9iLEVBQVF4SyxLQUFLeVosT0FBTy9XLEtBQUs2akIsRUFBSUEsR0FDN0IsTUFBT3ZsQixHQUNQLElBQUloQixLQUFLNjdCLEtBR1AsTUFBTTc2QixFQUZOc29CLEdBQVl0b0IsRUFBR3VsQixFQUFLLHVCQUEyQnZtQixLQUFlLFdBQUksS0FJcEUsUUFHSUEsS0FBSzQ3QixNQUNQelEsR0FBUzNnQixHQUVYMFgsS0FDQWxpQixLQUFLdzhCLGNBRVAsT0FBT2h5QixHQU1UZ3hCLEdBQVEvNkIsVUFBVXFoQixPQUFTLFNBQWlCeUMsR0FDMUMsSUFBSXJrQixFQUFLcWtCLEVBQUlya0IsR0FDUkYsS0FBS284QixVQUFVdnZCLElBQUkzTSxLQUN0QkYsS0FBS284QixVQUFVdHZCLElBQUk1TSxHQUNuQkYsS0FBS2s4QixRQUFRMzJCLEtBQUtnZixHQUNidmtCLEtBQUttOEIsT0FBT3R2QixJQUFJM00sSUFDbkJxa0IsRUFBSTdDLE9BQU8xaEIsUUFRakJ3N0IsR0FBUS82QixVQUFVKzdCLFlBQWMsV0FFOUIsSUFEQSxJQUFJejRCLEVBQUkvRCxLQUFLaThCLEtBQUtoNkIsT0FDWDhCLEtBQUssQ0FDVixJQUFJd2dCLEVBQU12a0IsS0FBS2k4QixLQUFLbDRCLEdBQ2YvRCxLQUFLbzhCLFVBQVV2dkIsSUFBSTBYLEVBQUlya0IsS0FDMUJxa0IsRUFBSTNDLFVBQVU1aEIsTUFHbEIsSUFBSXk4QixFQUFNejhCLEtBQUttOEIsT0FDZm44QixLQUFLbThCLE9BQVNuOEIsS0FBS284QixVQUNuQnA4QixLQUFLbzhCLFVBQVlLLEVBQ2pCejhCLEtBQUtvOEIsVUFBVTlhLFFBQ2ZtYixFQUFNejhCLEtBQUtpOEIsS0FDWGo4QixLQUFLaThCLEtBQU9qOEIsS0FBS2s4QixRQUNqQmw4QixLQUFLazhCLFFBQVVPLEVBQ2Z6OEIsS0FBS2s4QixRQUFRajZCLE9BQVMsR0FPeEJ1NUIsR0FBUS82QixVQUFVMFcsT0FBUyxXQUVyQm5YLEtBQUs4N0IsS0FDUDk3QixLQUFLZzhCLE9BQVEsRUFDSmg4QixLQUFLKzJCLEtBQ2QvMkIsS0FBS2c3QixNQW5LVCxTQUF1QkYsR0FDckIsSUFBSTU2QixFQUFLNDZCLEVBQVE1NkIsR0FDakIsR0FBZSxNQUFYMk0sR0FBSTNNLEdBQWEsQ0FFbkIsR0FEQTJNLEdBQUkzTSxJQUFNLEVBQ0xzNkIsR0FFRSxDQUlMLElBREEsSUFBSXoyQixFQUFJdTJCLEdBQU1yNEIsT0FBUyxFQUNoQjhCLEVBQUltUixJQUFTb2xCLEdBQU12MkIsR0FBRzdELEdBQUs0NkIsRUFBUTU2QixJQUN4QzZELElBRUZ1MkIsR0FBTXJ0QixPQUFPbEosRUFBSSxFQUFHLEVBQUcrMkIsUUFSdkJSLEdBQU0vMEIsS0FBS3UxQixHQVdSUCxLQUNIQSxJQUFVLEVBTVZ4UCxHQUFTOFAsTUE4SVg2QixDQUFhMThCLE9BUWpCdzdCLEdBQVEvNkIsVUFBVXU2QixJQUFNLFdBQ3RCLEdBQUloN0IsS0FBSys3QixPQUFRLENBQ2YsSUFBSXZ4QixFQUFReEssS0FBSzhaLE1BQ2pCLEdBQ0V0UCxJQUFVeEssS0FBS3dLLE9BSWZtUSxFQUFTblEsSUFDVHhLLEtBQUs0N0IsS0FDTCxDQUVBLElBQUllLEVBQVczOEIsS0FBS3dLLE1BRXBCLEdBREF4SyxLQUFLd0ssTUFBUUEsRUFDVHhLLEtBQUs2N0IsS0FDUCxJQUNFNzdCLEtBQUtnckIsR0FBR3RvQixLQUFLMUMsS0FBS3VtQixHQUFJL2IsRUFBT215QixHQUM3QixNQUFPMzdCLEdBQ1Bzb0IsR0FBWXRvQixFQUFHaEIsS0FBS3VtQixHQUFLLHlCQUE2QnZtQixLQUFlLFdBQUksVUFHM0VBLEtBQUtnckIsR0FBR3RvQixLQUFLMUMsS0FBS3VtQixHQUFJL2IsRUFBT215QixNQVVyQ25CLEdBQVEvNkIsVUFBVW04QixTQUFXLFdBQzNCNThCLEtBQUt3SyxNQUFReEssS0FBSzhaLE1BQ2xCOVosS0FBS2c4QixPQUFRLEdBTWZSLEdBQVEvNkIsVUFBVW9oQixPQUFTLFdBRXpCLElBREEsSUFBSTlkLEVBQUkvRCxLQUFLaThCLEtBQUtoNkIsT0FDWDhCLEtBQ0wvRCxLQUFLaThCLEtBQUtsNEIsR0FBRzhkLFVBT2pCMlosR0FBUS82QixVQUFVbzhCLFNBQVcsV0FDM0IsR0FBSTc4QixLQUFLKzdCLE9BQVEsQ0FJVi83QixLQUFLdW1CLEdBQUd1VyxtQkFDWHhtQixFQUFPdFcsS0FBS3VtQixHQUFHb1YsVUFBVzM3QixNQUc1QixJQURBLElBQUkrRCxFQUFJL0QsS0FBS2k4QixLQUFLaDZCLE9BQ1g4QixLQUNML0QsS0FBS2k4QixLQUFLbDRCLEdBQUc2ZCxVQUFVNWhCLE1BRXpCQSxLQUFLKzdCLFFBQVMsSUFNbEIsSUFBSWdCLEdBQTJCLENBQzdCdnZCLFlBQVksRUFDWjRSLGNBQWMsRUFDZHRGLElBQUsrQyxFQUNMMUMsSUFBSzBDLEdBR1AsU0FBU21TLEdBQU85Z0IsRUFBUTh1QixFQUFXbDNCLEdBQ2pDaTNCLEdBQXlCampCLElBQU0sV0FDN0IsT0FBTzlaLEtBQUtnOUIsR0FBV2wzQixJQUV6QmkzQixHQUF5QjVpQixJQUFNLFNBQXNCdEssR0FDbkQ3UCxLQUFLZzlCLEdBQVdsM0IsR0FBTytKLEdBRXpCdEosT0FBT3NULGVBQWUzTCxFQUFRcEksRUFBS2kzQixJQTRIckMsSUFBSUUsR0FBeUIsQ0FBRW5CLE1BQU0sR0EyQ3JDLFNBQVNvQixHQUNQaHZCLEVBQ0FwSSxFQUNBcTNCLEdBRUEsSUFBSUMsR0FBZXpjLEtBQ0ksbUJBQVp3YyxHQUNUSixHQUF5QmpqQixJQUFNc2pCLEVBQzNCQyxHQUFxQnYzQixHQUNyQnczQixHQUFvQkgsR0FDeEJKLEdBQXlCNWlCLElBQU0wQyxJQUUvQmtnQixHQUF5QmpqQixJQUFNcWpCLEVBQVFyakIsSUFDbkNzakIsSUFBaUMsSUFBbEJELEVBQVF6aEIsTUFDckIyaEIsR0FBcUJ2M0IsR0FDckJ3M0IsR0FBb0JILEVBQVFyakIsS0FDOUIrQyxFQUNKa2dCLEdBQXlCNWlCLElBQU1nakIsRUFBUWhqQixLQUFPMEMsR0FXaER0VyxPQUFPc1QsZUFBZTNMLEVBQVFwSSxFQUFLaTNCLElBR3JDLFNBQVNNLEdBQXNCdjNCLEdBQzdCLE9BQU8sV0FDTCxJQUFJZzFCLEVBQVU5NkIsS0FBS3U5QixtQkFBcUJ2OUIsS0FBS3U5QixrQkFBa0J6M0IsR0FDL0QsR0FBSWcxQixFQU9GLE9BTklBLEVBQVFrQixPQUNWbEIsRUFBUThCLFdBRU5wYixHQUFJdFQsUUFDTjRzQixFQUFRalosU0FFSGlaLEVBQVF0d0IsT0FLckIsU0FBUzh5QixHQUFvQmh0QixHQUMzQixPQUFPLFdBQ0wsT0FBT0EsRUFBRzVOLEtBQUsxQyxLQUFNQSxPQTZDekIsU0FBU3c5QixHQUNQalgsRUFDQWtWLEVBQ0E1UixFQUNBOXBCLEdBU0EsT0FQSWlILEVBQWM2aUIsS0FDaEI5cEIsRUFBVThwQixFQUNWQSxFQUFVQSxFQUFRQSxTQUVHLGlCQUFaQSxJQUNUQSxFQUFVdEQsRUFBR3NELElBRVJ0RCxFQUFHa1gsT0FBT2hDLEVBQVM1UixFQUFTOXBCLEdBd0RyQyxJQUFJMjlCLEdBQVEsRUFnRlosU0FBUzVGLEdBQTJCOVcsR0FDbEMsSUFBSWpoQixFQUFVaWhCLEVBQUtqaEIsUUFDbkIsR0FBSWloQixFQUFLMmMsTUFBTyxDQUNkLElBQUlDLEVBQWU5RixHQUEwQjlXLEVBQUsyYyxPQUVsRCxHQUFJQyxJQURxQjVjLEVBQUs0YyxhQUNXLENBR3ZDNWMsRUFBSzRjLGFBQWVBLEVBRXBCLElBQUlDLEVBY1YsU0FBaUM3YyxHQUMvQixJQUFJOGMsRUFDQUMsRUFBUy9jLEVBQUtqaEIsUUFDZGkrQixFQUFTaGQsRUFBS2lkLGNBQ2xCLElBQUssSUFBSW40QixLQUFPaTRCLEVBQ1ZBLEVBQU9qNEIsS0FBU2s0QixFQUFPbDRCLEtBQ3BCZzRCLElBQVlBLEVBQVcsSUFDNUJBLEVBQVNoNEIsR0FBT2k0QixFQUFPajRCLElBRzNCLE9BQU9nNEIsRUF4Qm1CSSxDQUF1QmxkLEdBRXpDNmMsR0FDRnBoQixFQUFPdUUsRUFBS21kLGNBQWVOLElBRTdCOTlCLEVBQVVpaEIsRUFBS2poQixRQUFVdW5CLEdBQWFzVyxFQUFjNWMsRUFBS21kLGdCQUM3Q2wrQixPQUNWRixFQUFRcStCLFdBQVdyK0IsRUFBUUUsTUFBUStnQixJQUl6QyxPQUFPamhCLEVBZ0JULFNBQVNzK0IsR0FBS3QrQixHQU1aQyxLQUFLcytCLE1BQU12K0IsR0F3S2IsU0FBU3crQixHQUFrQjlkLEdBQ3pCLE9BQU9BLElBQVNBLEVBQUtPLEtBQUtqaEIsUUFBUUUsTUFBUXdnQixFQUFLNEIsS0FHakQsU0FBU21jLEdBQVN6dEIsRUFBUzlRLEdBQ3pCLE9BQUlHLE1BQU1DLFFBQVEwUSxHQUNUQSxFQUFRRSxRQUFRaFIsSUFBUyxFQUNKLGlCQUFaOFEsRUFDVEEsRUFBUTdLLE1BQU0sS0FBSytLLFFBQVFoUixJQUFTLElBbmxLL0MsU0FBbUJtSixHQUNqQixNQUE2QixvQkFBdEJ3UixFQUFVbFksS0FBSzBHLEdBbWxLWC9CLENBQVMwSixJQUNYQSxFQUFRQyxLQUFLL1EsR0FNeEIsU0FBU3crQixHQUFZQyxFQUFtQnRvQixHQUN0QyxJQUFJc0YsRUFBUWdqQixFQUFrQmhqQixNQUMxQjNRLEVBQU8yekIsRUFBa0IzekIsS0FDekJrcUIsRUFBU3lKLEVBQWtCekosT0FDL0IsSUFBSyxJQUFJbnZCLEtBQU80VixFQUFPLENBQ3JCLElBQUlpakIsRUFBYWpqQixFQUFNNVYsR0FDdkIsR0FBSTY0QixFQUFZLENBQ2QsSUFBSTErQixFQUFPcytCLEdBQWlCSSxFQUFXbmMsa0JBQ25DdmlCLElBQVNtVyxFQUFPblcsSUFDbEIyK0IsR0FBZ0JsakIsRUFBTzVWLEVBQUtpRixFQUFNa3FCLEtBTTFDLFNBQVMySixHQUNQbGpCLEVBQ0E1VixFQUNBaUYsRUFDQTh6QixHQUVBLElBQUlDLEVBQVlwakIsRUFBTTVWLElBQ2xCZzVCLEdBQWVELEdBQVdDLEVBQVV6YyxNQUFRd2MsRUFBUXhjLEtBQ3REeWMsRUFBVWhjLGtCQUFrQm9ULFdBRTlCeGEsRUFBTTVWLEdBQU8sS0FDYndRLEVBQU92TCxFQUFNakYsSUEzVWYsU0FBb0J1NEIsR0FDbEJBLEVBQUk1OUIsVUFBVTY5QixNQUFRLFNBQVV2K0IsR0FDOUIsSUFBSXdtQixFQUFLdm1CLEtBRVR1bUIsRUFBR3dZLEtBQU9yQixLQVdWblgsRUFBR25CLFFBQVMsRUFFUnJsQixHQUFXQSxFQUFRbTBCLGFBMEMzQixTQUFnQzNOLEVBQUl4bUIsR0FDbEMsSUFBSTBnQixFQUFPOEYsRUFBR3dDLFNBQVd4aUIsT0FBT2dTLE9BQU9nTyxFQUFHL1MsWUFBWXpULFNBRWxEMDBCLEVBQWMxMEIsRUFBUW8wQixhQUMxQjFULEVBQUtzQyxPQUFTaGpCLEVBQVFnakIsT0FDdEJ0QyxFQUFLMFQsYUFBZU0sRUFFcEIsSUFBSXVLLEVBQXdCdkssRUFBWWpTLGlCQUN4Qy9CLEVBQUtnSSxVQUFZdVcsRUFBc0J2VyxVQUN2Q2hJLEVBQUs4VSxpQkFBbUJ5SixFQUFzQjdMLFVBQzlDMVMsRUFBS3NVLGdCQUFrQmlLLEVBQXNCOWtCLFNBQzdDdUcsRUFBS3dlLGNBQWdCRCxFQUFzQjNjLElBRXZDdGlCLEVBQVFtdkIsU0FDVnpPLEVBQUt5TyxPQUFTbnZCLEVBQVFtdkIsT0FDdEJ6TyxFQUFLeVEsZ0JBQWtCbnhCLEVBQVFteEIsaUJBckQ3QmdPLENBQXNCM1ksRUFBSXhtQixHQUUxQndtQixFQUFHd0MsU0FBV3pCLEdBQ1p3USxHQUEwQnZSLEVBQUcvUyxhQUM3QnpULEdBQVcsR0FDWHdtQixHQU9GQSxFQUFHNEssYUFBZTVLLEVBR3BCQSxFQUFHNFksTUFBUTVZLEVBcGtDZixTQUF3QkEsR0FDdEIsSUFBSXhtQixFQUFVd21CLEVBQUd3QyxTQUdiaEcsRUFBU2hqQixFQUFRZ2pCLE9BQ3JCLEdBQUlBLElBQVdoakIsRUFBUXU0QixTQUFVLENBQy9CLEtBQU92VixFQUFPZ0csU0FBU3VQLFVBQVl2VixFQUFPMEcsU0FDeEMxRyxFQUFTQSxFQUFPMEcsUUFFbEIxRyxFQUFPa1gsVUFBVTEwQixLQUFLZ2hCLEdBR3hCQSxFQUFHa0QsUUFBVTFHLEVBQ2J3RCxFQUFHNlksTUFBUXJjLEVBQVNBLEVBQU9xYyxNQUFRN1ksRUFFbkNBLEVBQUcwVCxVQUFZLEdBQ2YxVCxFQUFHOFksTUFBUSxHQUVYOVksRUFBRzZVLFNBQVcsS0FDZDdVLEVBQUdzUCxVQUFZLEtBQ2Z0UCxFQUFHeVQsaUJBQWtCLEVBQ3JCelQsRUFBR29QLFlBQWEsRUFDaEJwUCxFQUFHdU4sY0FBZSxFQUNsQnZOLEVBQUd1VyxtQkFBb0IsRUE4aUNyQndDLENBQWMvWSxHQXZ0Q2xCLFNBQXFCQSxHQUNuQkEsRUFBR3pYLFFBQVV2SSxPQUFPZ1MsT0FBTyxNQUMzQmdPLEVBQUc2VCxlQUFnQixFQUVuQixJQUFJakgsRUFBWTVNLEVBQUd3QyxTQUFTd00saUJBQ3hCcEMsR0FDRnFDLEdBQXlCalAsRUFBSTRNLEdBa3RDN0JvTSxDQUFXaFosR0FuL0NmLFNBQXFCQSxHQUNuQkEsRUFBRzBPLE9BQVMsS0FDWjFPLEVBQUd3SyxhQUFlLEtBQ2xCLElBQUloeEIsRUFBVXdtQixFQUFHd0MsU0FDYjBMLEVBQWNsTyxFQUFHeU8sT0FBU2oxQixFQUFRbzBCLGFBQ2xDWCxFQUFnQmlCLEdBQWVBLEVBQVlsUyxRQUMvQ2dFLEVBQUdrSixPQUFTM0IsR0FBYS90QixFQUFRZzFCLGdCQUFpQnZCLEdBQ2xEak4sRUFBR2lKLGFBQWVsVixFQUtsQmlNLEVBQUcza0IsR0FBSyxTQUFVK1gsRUFBRzFCLEVBQUczTyxFQUFHME8sR0FBSyxPQUFPckMsR0FBYzRRLEVBQUk1TSxFQUFHMUIsRUFBRzNPLEVBQUcwTyxHQUFHLElBR3JFdU8sRUFBR21KLGVBQWlCLFNBQVUvVixFQUFHMUIsRUFBRzNPLEVBQUcwTyxHQUFLLE9BQU9yQyxHQUFjNFEsRUFBSTVNLEVBQUcxQixFQUFHM08sRUFBRzBPLEdBQUcsSUFJakYsSUFBSXduQixFQUFhL0ssR0FBZUEsRUFBWXR4QixLQVcxQ2tpQixHQUFrQmtCLEVBQUksU0FBVWlaLEdBQWNBLEVBQVd4UixPQUFTMVQsRUFBYSxNQUFNLEdBQ3JGK0ssR0FBa0JrQixFQUFJLGFBQWN4bUIsRUFBUXcxQixrQkFBb0JqYixFQUFhLE1BQU0sR0FxOUNuRm1sQixDQUFXbFosR0FDWHFQLEdBQVNyUCxFQUFJLGdCQWxoRmpCLFNBQXlCQSxHQUN2QixJQUFJcmpCLEVBQVN3cUIsR0FBY25ILEVBQUd3QyxTQUFTN0IsT0FBUVgsR0FDM0NyakIsSUFDRnloQixJQUFnQixHQUNoQnBlLE9BQU93RSxLQUFLN0gsR0FBUS9CLFNBQVEsU0FBVTJFLEdBWWxDdWYsR0FBa0JrQixFQUFJemdCLEVBQUs1QyxFQUFPNEMsT0FHdEM2ZSxJQUFnQixJQWdnRmhCK2EsQ0FBZW5aLEdBalhuQixTQUFvQkEsR0FDbEJBLEVBQUdvVixVQUFZLEdBQ2YsSUFBSWxiLEVBQU84RixFQUFHd0MsU0FDVnRJLEVBQUt1RyxPQWFYLFNBQW9CVCxFQUFJb1osR0FDdEIsSUFBSWxYLEVBQVlsQyxFQUFHd0MsU0FBU04sV0FBYSxHQUNyQ3pCLEVBQVFULEVBQUd5QyxPQUFTLEdBR3BCamUsRUFBT3diLEVBQUd3QyxTQUFTc00sVUFBWSxHQUNyQjlPLEVBQUdrRCxTQUdmOUUsSUFBZ0IsR0FFbEIsSUFBSTZMLEVBQU8sU0FBVzFxQixHQUNwQmlGLEVBQUt4RixLQUFLTyxHQUNWLElBQUkwRSxFQUFRK2QsR0FBYXppQixFQUFLNjVCLEVBQWNsWCxFQUFXbEMsR0F1QnJEbEIsR0FBa0IyQixFQUFPbGhCLEVBQUswRSxHQUsxQjFFLEtBQU95Z0IsR0FDWHlJLEdBQU16SSxFQUFJLFNBQVV6Z0IsSUFJeEIsSUFBSyxJQUFJQSxLQUFPNjVCLEVBQWNuUCxFQUFNMXFCLEdBQ3BDNmUsSUFBZ0IsR0E1REVpYixDQUFVclosRUFBSTlGLEVBQUt1RyxPQUNqQ3ZHLEVBQUt3RyxTQW9OWCxTQUFzQlYsRUFBSVUsR0FFeEIsSUFBSyxJQUFJbmhCLEtBREd5Z0IsRUFBR3dDLFNBQVMvQixNQUNSQyxFQXNCZFYsRUFBR3pnQixHQUErQixtQkFBakJtaEIsRUFBUW5oQixHQUFzQitXLEVBQU9yYixFQUFLeWxCLEVBQVFuaEIsR0FBTXlnQixHQTVPdkRzWixDQUFZdFosRUFBSTlGLEVBQUt3RyxTQUNyQ3hHLEVBQUt0ZCxLQTZEWCxTQUFtQm9qQixHQUNqQixJQUFJcGpCLEVBQU9vakIsRUFBR3dDLFNBQVM1bEIsS0FJbEI2RCxFQUhMN0QsRUFBT29qQixFQUFHdVosTUFBd0IsbUJBQVQzOEIsRUF3QzNCLFNBQWtCQSxFQUFNb2pCLEdBRXRCdEUsS0FDQSxJQUNFLE9BQU85ZSxFQUFLVCxLQUFLNmpCLEVBQUlBLEdBQ3JCLE1BQU92bEIsR0FFUCxPQURBc29CLEdBQVl0b0IsRUFBR3VsQixFQUFJLFVBQ1osR0FDUCxRQUNBckUsTUFoREU2ZCxDQUFRNThCLEVBQU1vakIsR0FDZHBqQixHQUFRLE1BRVZBLEVBQU8sSUFZVCxJQUpBLElBQUk0SCxFQUFPeEUsT0FBT3dFLEtBQUs1SCxHQUNuQjZqQixFQUFRVCxFQUFHd0MsU0FBUy9CLE1BRXBCampCLEdBRFV3aUIsRUFBR3dDLFNBQVM5QixRQUNsQmxjLEVBQUs5SSxRQUNOOEIsS0FBSyxDQUNWLElBQUkrQixFQUFNaUYsRUFBS2hILEdBU1hpakIsR0FBU3hMLEVBQU93TCxFQUFPbGhCLElBTWZrWixFQUFXbFosSUFDckJrcEIsR0FBTXpJLEVBQUksUUFBU3pnQixHQUl2Qm1mLEdBQVE5aEIsR0FBTSxHQW5HWjY4QixDQUFTelosR0FFVHRCLEdBQVFzQixFQUFHdVosTUFBUSxJQUFJLEdBRXJCcmYsRUFBSzBHLFVBaUhYLFNBQXVCWixFQUFJWSxHQUV6QixJQUFJOFksRUFBVzFaLEVBQUdnWCxrQkFBb0JoM0IsT0FBT2dTLE9BQU8sTUFFaEQybkIsRUFBUXZmLEtBRVosSUFBSyxJQUFJN2EsS0FBT3FoQixFQUFVLENBQ3hCLElBQUlnVyxFQUFVaFcsRUFBU3JoQixHQUNuQjJULEVBQTRCLG1CQUFaMGpCLEVBQXlCQSxFQUFVQSxFQUFRcmpCLElBUTFEb21CLElBRUhELEVBQVNuNkIsR0FBTyxJQUFJMDFCLEdBQ2xCalYsRUFDQTlNLEdBQVVvRCxFQUNWQSxFQUNBb2dCLEtBT0VuM0IsS0FBT3lnQixHQUNYMlcsR0FBZTNXLEVBQUl6Z0IsRUFBS3EzQixJQS9JUGdELENBQWE1WixFQUFJOUYsRUFBSzBHLFVBQ3ZDMUcsRUFBS0YsT0FBU0UsRUFBS0YsUUFBVUQsSUF5T25DLFNBQW9CaUcsRUFBSWhHLEdBQ3RCLElBQUssSUFBSXphLEtBQU95YSxFQUFPLENBQ3JCLElBQUlzSixFQUFVdEosRUFBTXphLEdBQ3BCLEdBQUkxRixNQUFNQyxRQUFRd3BCLEdBQ2hCLElBQUssSUFBSTlsQixFQUFJLEVBQUdBLEVBQUk4bEIsRUFBUTVuQixPQUFROEIsSUFDbEN5NUIsR0FBY2pYLEVBQUl6Z0IsRUFBSytqQixFQUFROWxCLFNBR2pDeTVCLEdBQWNqWCxFQUFJemdCLEVBQUsrakIsSUFoUHpCdVcsQ0FBVTdaLEVBQUk5RixFQUFLRixPQXNXbkI4ZixDQUFVOVosR0E3aEZkLFNBQXNCQSxHQUNwQixJQUFJYSxFQUFVYixFQUFHd0MsU0FBUzNCLFFBQ3RCQSxJQUNGYixFQUFHcUgsVUFBK0IsbUJBQVp4RyxFQUNsQkEsRUFBUTFrQixLQUFLNmpCLEdBQ2JhLEdBeWhGSmtaLENBQVkvWixHQUNacVAsR0FBU3JQLEVBQUksV0FTVEEsRUFBR3dDLFNBQVNwakIsSUFDZDRnQixFQUFHZ08sT0FBT2hPLEVBQUd3QyxTQUFTcGpCLEtBc0U1QjQ2QixDQUFVbEMsSUFuTFYsU0FBcUJBLEdBb0JuQjkzQixPQUFPc1QsZUFBZXdrQixFQUFJNTlCLFVBQVcsUUFoQnZCLENBQ2QsSUFBYyxXQUFjLE9BQU9ULEtBQUs4L0IsU0FnQnhDdjVCLE9BQU9zVCxlQUFld2tCLEVBQUk1OUIsVUFBVyxTQWZ0QixDQUNmLElBQWUsV0FBYyxPQUFPVCxLQUFLZ3BCLFVBZ0J6Q3FWLEVBQUk1OUIsVUFBVSsvQixLQUFPcm1CLEdBQ3JCa2tCLEVBQUk1OUIsVUFBVWdnQyxRQUFVM2EsR0FFeEJ1WSxFQUFJNTlCLFVBQVVnOUIsT0FBUyxTQUNyQmhDLEVBQ0F6USxFQUNBanJCLEdBRUEsSUFBSXdtQixFQUFLdm1CLEtBQ1QsR0FBSWdILEVBQWNna0IsR0FDaEIsT0FBT3dTLEdBQWNqWCxFQUFJa1YsRUFBU3pRLEVBQUlqckIsSUFFeENBLEVBQVVBLEdBQVcsSUFDYjg3QixNQUFPLEVBQ2YsSUFBSWYsRUFBVSxJQUFJVSxHQUFRalYsRUFBSWtWLEVBQVN6USxFQUFJanJCLEdBQzNDLEdBQUlBLEVBQVEyZ0MsVUFDVixJQUNFMVYsRUFBR3RvQixLQUFLNmpCLEVBQUl1VSxFQUFRdHdCLE9BQ3BCLE1BQU9wQyxHQUNQa2hCLEdBQVlsaEIsRUFBT21lLEVBQUssbUNBQXVDdVUsRUFBa0IsV0FBSSxLQUd6RixPQUFPLFdBQ0xBLEVBQVErQixhQXNJZDhELENBQVd0QyxJQXZ3Q1gsU0FBc0JBLEdBQ3BCLElBQUl1QyxFQUFTLFNBQ2J2QyxFQUFJNTlCLFVBQVV5MkIsSUFBTSxTQUFVOXNCLEVBQU9rRyxHQUNuQyxJQUFJaVcsRUFBS3ZtQixLQUNULEdBQUlJLE1BQU1DLFFBQVErSixHQUNoQixJQUFLLElBQUlyRyxFQUFJLEVBQUdxWSxFQUFJaFMsRUFBTW5JLE9BQVE4QixFQUFJcVksRUFBR3JZLElBQ3ZDd2lCLEVBQUcyUSxJQUFJOXNCLEVBQU1yRyxHQUFJdU0sUUFHbEJpVyxFQUFHelgsUUFBUTFFLEtBQVdtYyxFQUFHelgsUUFBUTFFLEdBQVMsS0FBSzdFLEtBQUsrSyxHQUdqRHN3QixFQUFPNXZCLEtBQUs1RyxLQUNkbWMsRUFBRzZULGVBQWdCLEdBR3ZCLE9BQU83VCxHQUdUOFgsRUFBSTU5QixVQUFVb2dDLE1BQVEsU0FBVXoyQixFQUFPa0csR0FDckMsSUFBSWlXLEVBQUt2bUIsS0FDVCxTQUFTa3NCLElBQ1AzRixFQUFHa1QsS0FBS3J2QixFQUFPOGhCLEdBQ2Y1YixFQUFHM04sTUFBTTRqQixFQUFJdmtCLFdBSWYsT0FGQWtxQixFQUFHNWIsR0FBS0EsRUFDUmlXLEVBQUcyUSxJQUFJOXNCLEVBQU84aEIsR0FDUDNGLEdBR1Q4WCxFQUFJNTlCLFVBQVVnNUIsS0FBTyxTQUFVcnZCLEVBQU9rRyxHQUNwQyxJQUFJaVcsRUFBS3ZtQixLQUVULElBQUtnQyxVQUFVQyxPQUViLE9BREFza0IsRUFBR3pYLFFBQVV2SSxPQUFPZ1MsT0FBTyxNQUNwQmdPLEVBR1QsR0FBSW5tQixNQUFNQyxRQUFRK0osR0FBUSxDQUN4QixJQUFLLElBQUkwMkIsRUFBTSxFQUFHMWtCLEVBQUloUyxFQUFNbkksT0FBUTYrQixFQUFNMWtCLEVBQUcwa0IsSUFDM0N2YSxFQUFHa1QsS0FBS3J2QixFQUFNMDJCLEdBQU14d0IsR0FFdEIsT0FBT2lXLEVBR1QsSUFTSXlFLEVBVEErVixFQUFNeGEsRUFBR3pYLFFBQVExRSxHQUNyQixJQUFLMjJCLEVBQ0gsT0FBT3hhLEVBRVQsSUFBS2pXLEVBRUgsT0FEQWlXLEVBQUd6WCxRQUFRMUUsR0FBUyxLQUNibWMsRUFLVCxJQURBLElBQUl4aUIsRUFBSWc5QixFQUFJOStCLE9BQ0w4QixLQUVMLElBREFpbkIsRUFBSytWLEVBQUloOUIsTUFDRXVNLEdBQU0wYSxFQUFHMWEsS0FBT0EsRUFBSSxDQUM3Qnl3QixFQUFJOXpCLE9BQU9sSixFQUFHLEdBQ2QsTUFHSixPQUFPd2lCLEdBR1Q4WCxFQUFJNTlCLFVBQVU0NUIsTUFBUSxTQUFVandCLEdBQzlCLElBQUltYyxFQUFLdm1CLEtBYUwrZ0MsRUFBTXhhLEVBQUd6WCxRQUFRMUUsR0FDckIsR0FBSTIyQixFQUFLLENBQ1BBLEVBQU1BLEVBQUk5K0IsT0FBUyxFQUFJcWEsRUFBUXlrQixHQUFPQSxFQUd0QyxJQUZBLElBQUlqL0IsRUFBT3dhLEVBQVF0YSxVQUFXLEdBQzFCdW5CLEVBQU8sc0JBQXlCbmYsRUFBUSxJQUNuQ3JHLEVBQUksRUFBR3FZLEVBQUkya0IsRUFBSTkrQixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUNyQzZsQixHQUF3Qm1YLEVBQUloOUIsR0FBSXdpQixFQUFJemtCLEVBQU15a0IsRUFBSWdELEdBR2xELE9BQU9oRCxHQStxQ1h5YSxDQUFZM0MsSUFwb0NaLFNBQXlCQSxHQUN2QkEsRUFBSTU5QixVQUFVd2dDLFFBQVUsU0FBVW5kLEVBQU8rUCxHQUN2QyxJQUFJdE4sRUFBS3ZtQixLQUNMa2hDLEVBQVMzYSxFQUFHNGEsSUFDWkMsRUFBWTdhLEVBQUcwTyxPQUNmb00sRUFBd0J6SCxHQUFrQnJULEdBQzlDQSxFQUFHME8sT0FBU25SLEVBUVZ5QyxFQUFHNGEsSUFMQUMsRUFLTTdhLEVBQUcrYSxVQUFVRixFQUFXdGQsR0FIeEJ5QyxFQUFHK2EsVUFBVS9hLEVBQUc0YSxJQUFLcmQsRUFBTytQLEdBQVcsR0FLbER3TixJQUVJSCxJQUNGQSxFQUFPSyxRQUFVLE1BRWZoYixFQUFHNGEsTUFDTDVhLEVBQUc0YSxJQUFJSSxRQUFVaGIsR0FHZkEsRUFBR3lPLFFBQVV6TyxFQUFHa0QsU0FBV2xELEVBQUd5TyxTQUFXek8sRUFBR2tELFFBQVF3TCxTQUN0RDFPLEVBQUdrRCxRQUFRMFgsSUFBTTVhLEVBQUc0YSxNQU14QjlDLEVBQUk1OUIsVUFBVWcxQixhQUFlLFdBQ2xCejFCLEtBQ0ZvN0IsVUFERXA3QixLQUVKbzdCLFNBQVNqa0IsVUFJaEJrbkIsRUFBSTU5QixVQUFVeTFCLFNBQVcsV0FDdkIsSUFBSTNQLEVBQUt2bUIsS0FDVCxJQUFJdW1CLEVBQUd1VyxrQkFBUCxDQUdBbEgsR0FBU3JQLEVBQUksaUJBQ2JBLEVBQUd1VyxtQkFBb0IsRUFFdkIsSUFBSS9aLEVBQVN3RCxFQUFHa0QsU0FDWjFHLEdBQVdBLEVBQU8rWixtQkFBc0J2VyxFQUFHd0MsU0FBU3VQLFVBQ3REaGlCLEVBQU95TSxFQUFPa1gsVUFBVzFULEdBR3ZCQSxFQUFHNlUsVUFDTDdVLEVBQUc2VSxTQUFTeUIsV0FHZCxJQURBLElBQUk5NEIsRUFBSXdpQixFQUFHb1YsVUFBVTE1QixPQUNkOEIsS0FDTHdpQixFQUFHb1YsVUFBVTUzQixHQUFHODRCLFdBSWR0VyxFQUFHdVosTUFBTXpiLFFBQ1hrQyxFQUFHdVosTUFBTXpiLE9BQU9RLFVBR2xCMEIsRUFBR3VOLGNBQWUsRUFFbEJ2TixFQUFHK2EsVUFBVS9hLEVBQUcwTyxPQUFRLE1BRXhCVyxHQUFTclAsRUFBSSxhQUViQSxFQUFHa1QsT0FFQ2xULEVBQUc0YSxNQUNMNWEsRUFBRzRhLElBQUlJLFFBQVUsTUFHZmhiLEVBQUd5TyxTQUNMek8sRUFBR3lPLE9BQU9qUyxPQUFTLFFBdWpDekJ5ZSxDQUFlbkQsSUF2aURmLFNBQXNCQSxHQUVwQnJNLEdBQXFCcU0sRUFBSTU5QixXQUV6QjQ5QixFQUFJNTlCLFVBQVVnaEMsVUFBWSxTQUFVbnhCLEdBQ2xDLE9BQU95YSxHQUFTemEsRUFBSXRRLE9BR3RCcStCLEVBQUk1OUIsVUFBVWloQyxRQUFVLFdBQ3RCLElBaUJJNWQsRUFqQkF5QyxFQUFLdm1CLEtBQ0wyaEMsRUFBTXBiLEVBQUd3QyxTQUNUbUcsRUFBU3lTLEVBQUl6UyxPQUNiaUYsRUFBZXdOLEVBQUl4TixhQUVuQkEsSUFDRjVOLEVBQUdpSixhQUFlcEIsR0FDaEIrRixFQUFhaHhCLEtBQUtrd0IsWUFDbEI5TSxFQUFHa0osT0FDSGxKLEVBQUdpSixlQU1QakosRUFBR3lPLE9BQVNiLEVBR1osSUFJRXdDLEdBQTJCcFEsRUFDM0J6QyxFQUFRb0wsRUFBT3hzQixLQUFLNmpCLEVBQUc0SyxhQUFjNUssRUFBR21KLGdCQUN4QyxNQUFPMXVCLEdBQ1Bzb0IsR0FBWXRvQixFQUFHdWxCLEVBQUksVUFZakJ6QyxFQUFReUMsRUFBRzBPLE9BRWIsUUFDQTBCLEdBQTJCLEtBbUI3QixPQWhCSXYyQixNQUFNQyxRQUFReWpCLElBQTJCLElBQWpCQSxFQUFNN2hCLFNBQ2hDNmhCLEVBQVFBLEVBQU0sSUFHVkEsYUFBaUIxQixLQVFyQjBCLEVBQVFKLE1BR1ZJLEVBQU1mLE9BQVNvUixFQUNSclEsR0FvK0NYOGQsQ0FBWXZELElBOE1aLElBQUl3RCxHQUFlLENBQUM5eUIsT0FBUXdRLE9BQVFuZixPQWlGaEMwaEMsR0FBb0IsQ0FDdEJDLFVBaEZjLENBQ2Q5aEMsS0FBTSxhQUNOcTRCLFVBQVUsRUFFVnRSLE1BQU8sQ0FDTGdiLFFBQVNILEdBQ1RJLFFBQVNKLEdBQ1RweEIsSUFBSyxDQUFDMUIsT0FBUW16QixTQUdoQkMsUUFBUyxXQUNQbmlDLEtBQUswYixNQUFRblYsT0FBT2dTLE9BQU8sTUFDM0J2WSxLQUFLK0ssS0FBTyxJQUdkcTNCLFVBQVcsV0FDVCxJQUFLLElBQUl0OEIsS0FBTzlGLEtBQUswYixNQUNuQmtqQixHQUFnQjUrQixLQUFLMGIsTUFBTzVWLEVBQUs5RixLQUFLK0ssT0FJMUNzM0IsUUFBUyxXQUNQLElBQUl2UCxFQUFTOXlCLEtBRWJBLEtBQUt5OUIsT0FBTyxXQUFXLFNBQVU1dEIsR0FDL0I0dUIsR0FBVzNMLEdBQVEsU0FBVTd5QixHQUFRLE9BQU91K0IsR0FBUTN1QixFQUFLNVAsU0FFM0RELEtBQUt5OUIsT0FBTyxXQUFXLFNBQVU1dEIsR0FDL0I0dUIsR0FBVzNMLEdBQVEsU0FBVTd5QixHQUFRLE9BQVF1K0IsR0FBUTN1QixFQUFLNVAsVUFJOURpdkIsT0FBUSxXQUNOLElBQUlqQixFQUFPanVCLEtBQUt5dkIsT0FBTzNHLFFBQ25CaEYsRUFBUXlWLEdBQXVCdEwsR0FDL0J6TCxFQUFtQnNCLEdBQVNBLEVBQU10QixpQkFDdEMsR0FBSUEsRUFBa0IsQ0FFcEIsSUFBSXZpQixFQUFPcytCLEdBQWlCL2IsR0FFeEJ3ZixFQURNaGlDLEtBQ1FnaUMsUUFDZEMsRUFGTWppQyxLQUVRaWlDLFFBQ2xCLEdBRUdELEtBQWEvaEMsSUFBU3UrQixHQUFRd0QsRUFBUy9oQyxLQUV2Q2dpQyxHQUFXaGlDLEdBQVF1K0IsR0FBUXlELEVBQVNoaUMsR0FFckMsT0FBTzZqQixFQUdULElBQ0lwSSxFQURRMWIsS0FDTTBiLE1BQ2QzUSxFQUZRL0ssS0FFSytLLEtBQ2JqRixFQUFtQixNQUFiZ2UsRUFBTWhlLElBR1owYyxFQUFpQnhCLEtBQUtzVixLQUFPOVQsRUFBaUJILElBQU8sS0FBUUcsRUFBb0IsSUFBSyxJQUN0RnNCLEVBQU1oZSxJQUNONFYsRUFBTTVWLElBQ1JnZSxFQUFNaEIsa0JBQW9CcEgsRUFBTTVWLEdBQUtnZCxrQkFFckN4TSxFQUFPdkwsRUFBTWpGLEdBQ2JpRixFQUFLeEYsS0FBS08sS0FFVjRWLEVBQU01VixHQUFPZ2UsRUFDYi9ZLEVBQUt4RixLQUFLTyxHQUVOOUYsS0FBS3lRLEtBQU8xRixFQUFLOUksT0FBUzJKLFNBQVM1TCxLQUFLeVEsTUFDMUNtdUIsR0FBZ0JsakIsRUFBTzNRLEVBQUssR0FBSUEsRUFBTS9LLEtBQUtpMUIsU0FJL0NuUixFQUFNM2dCLEtBQUs0d0IsV0FBWSxFQUV6QixPQUFPalEsR0FBVW1LLEdBQVFBLEVBQUssT0FVbEMsU0FBd0JvUSxHQUV0QixJQUFJaUUsRUFBWSxDQUNoQixJQUFnQixXQUFjLE9BQU8xOUIsSUFRckMyQixPQUFPc1QsZUFBZXdrQixFQUFLLFNBQVVpRSxHQUtyQ2pFLEVBQUlrRSxLQUFPLENBQ1RwNkIsS0FBTUEsR0FDTnNVLE9BQVFBLEVBQ1I2SyxhQUFjQSxHQUNka2IsZUFBZ0JuZCxJQUdsQmdaLEVBQUlsa0IsSUFBTUEsR0FDVmtrQixFQUFJcnhCLE9BQVM4WSxHQUNidVksRUFBSXRULFNBQVdBLEdBR2ZzVCxFQUFJdm1CLFdBQWEsU0FBVWxMLEdBRXpCLE9BREFxWSxHQUFRclksR0FDREEsR0FHVHl4QixFQUFJdCtCLFFBQVV3RyxPQUFPZ1MsT0FBTyxNQUM1QnNGLEVBQVkxYyxTQUFRLFNBQVVvSixHQUM1Qjh6QixFQUFJdCtCLFFBQVF3SyxFQUFPLEtBQU9oRSxPQUFPZ1MsT0FBTyxTQUsxQzhsQixFQUFJdCtCLFFBQVE4bkIsTUFBUXdXLEVBRXBCNWhCLEVBQU80aEIsRUFBSXQrQixRQUFRcStCLFdBQVkwRCxJQTNVakMsU0FBa0J6RCxHQUNoQkEsRUFBSW9FLElBQU0sU0FBVUMsR0FDbEIsSUFBSUMsRUFBb0IzaUMsS0FBSzRpQyxvQkFBc0I1aUMsS0FBSzRpQyxrQkFBb0IsSUFDNUUsR0FBSUQsRUFBaUIxeEIsUUFBUXl4QixJQUFXLEVBQ3RDLE9BQU8xaUMsS0FJVCxJQUFJOEIsRUFBT3dhLEVBQVF0YSxVQUFXLEdBUTlCLE9BUEFGLEVBQUsrZ0MsUUFBUTdpQyxNQUNpQixtQkFBbkIwaUMsRUFBT0ksUUFDaEJKLEVBQU9JLFFBQVFuZ0MsTUFBTSsvQixFQUFRNWdDLEdBQ0YsbUJBQVg0Z0MsR0FDaEJBLEVBQU8vL0IsTUFBTSxLQUFNYixHQUVyQjZnQyxFQUFpQnA5QixLQUFLbTlCLEdBQ2YxaUMsTUE2VFQraUMsQ0FBUTFFLEdBdlRWLFNBQXNCQSxHQUNwQkEsRUFBSTJFLE1BQVEsU0FBVUEsR0FFcEIsT0FEQWhqQyxLQUFLRCxRQUFVdW5CLEdBQWF0bkIsS0FBS0QsUUFBU2lqQyxHQUNuQ2hqQyxNQXFUVGlqQyxDQUFZNUUsR0EvU2QsU0FBcUJBLEdBTW5CQSxFQUFJL0gsSUFBTSxFQUNWLElBQUlBLEVBQU0sRUFLVitILEVBQUk1aEIsT0FBUyxTQUFVMGhCLEdBQ3JCQSxFQUFnQkEsR0FBaUIsR0FDakMsSUFBSStFLEVBQVFsakMsS0FDUm1qQyxFQUFVRCxFQUFNNU0sSUFDaEI4TSxFQUFjakYsRUFBY2tGLFFBQVVsRixFQUFja0YsTUFBUSxJQUNoRSxHQUFJRCxFQUFZRCxHQUNkLE9BQU9DLEVBQVlELEdBR3JCLElBQUlsakMsRUFBT2srQixFQUFjbCtCLE1BQVFpakMsRUFBTW5qQyxRQUFRRSxLQUszQ3FqQyxFQUFNLFNBQXVCdmpDLEdBQy9CQyxLQUFLcytCLE1BQU12K0IsSUE2Q2IsT0EzQ0F1akMsRUFBSTdpQyxVQUFZOEYsT0FBT2dTLE9BQU8ycUIsRUFBTXppQyxZQUN0QitTLFlBQWM4dkIsRUFDNUJBLEVBQUloTixJQUFNQSxJQUNWZ04sRUFBSXZqQyxRQUFVdW5CLEdBQ1o0YixFQUFNbmpDLFFBQ05vK0IsR0FFRm1GLEVBQVcsTUFBSUosRUFLWEksRUFBSXZqQyxRQUFRaW5CLE9BbUNwQixTQUFzQnVjLEdBQ3BCLElBQUl2YyxFQUFRdWMsRUFBS3hqQyxRQUFRaW5CLE1BQ3pCLElBQUssSUFBSWxoQixLQUFPa2hCLEVBQ2RnSSxHQUFNdVUsRUFBSzlpQyxVQUFXLFNBQVVxRixHQXJDOUIwOUIsQ0FBWUYsR0FFVkEsRUFBSXZqQyxRQUFRb25CLFVBdUNwQixTQUF5Qm9jLEdBQ3ZCLElBQUlwYyxFQUFXb2MsRUFBS3hqQyxRQUFRb25CLFNBQzVCLElBQUssSUFBSXJoQixLQUFPcWhCLEVBQ2QrVixHQUFlcUcsRUFBSzlpQyxVQUFXcUYsRUFBS3FoQixFQUFTcmhCLElBekMzQzI5QixDQUFlSCxHQUlqQkEsRUFBSTdtQixPQUFTeW1CLEVBQU16bUIsT0FDbkI2bUIsRUFBSU4sTUFBUUUsRUFBTUYsTUFDbEJNLEVBQUliLElBQU1TLEVBQU1ULElBSWhCNWtCLEVBQVkxYyxTQUFRLFNBQVVvSixHQUM1Qis0QixFQUFJLzRCLEdBQVEyNEIsRUFBTTM0QixNQUdoQnRLLElBQ0ZxakMsRUFBSXZqQyxRQUFRcStCLFdBQVduK0IsR0FBUXFqQyxHQU1qQ0EsRUFBSTFGLGFBQWVzRixFQUFNbmpDLFFBQ3pCdWpDLEVBQUluRixjQUFnQkEsRUFDcEJtRixFQUFJckYsY0FBZ0J4aEIsRUFBTyxHQUFJNm1CLEVBQUl2akMsU0FHbkNxakMsRUFBWUQsR0FBV0csRUFDaEJBLEdBd09USSxDQUFXckYsR0FwTmIsU0FBNkJBLEdBSTNCeGdCLEVBQVkxYyxTQUFRLFNBQVVvSixHQUM1Qjh6QixFQUFJOXpCLEdBQVEsU0FDVnJLLEVBQ0EwWixHQUVBLE9BQUtBLEdBT1UsY0FBVHJQLEdBQXdCdkQsRUFBYzRTLEtBQ3hDQSxFQUFXM1osS0FBTzJaLEVBQVczWixNQUFRQyxFQUNyQzBaLEVBQWE1WixLQUFLRCxRQUFROG5CLE1BQU1wTCxPQUFPN0MsSUFFNUIsY0FBVHJQLEdBQThDLG1CQUFmcVAsSUFDakNBLEVBQWEsQ0FBRXBZLEtBQU1vWSxFQUFZekMsT0FBUXlDLElBRTNDNVosS0FBS0QsUUFBUXdLLEVBQU8sS0FBS3JLLEdBQU0wWixFQUN4QkEsR0FkQTVaLEtBQUtELFFBQVF3SyxFQUFPLEtBQUtySyxPQTJNdEN5akMsQ0FBbUJ0RixHQUdyQnVGLENBQWN2RixJQUVkOTNCLE9BQU9zVCxlQUFld2tCLEdBQUk1OUIsVUFBVyxZQUFhLENBQ2hEcVosSUFBSzZHLEtBR1BwYSxPQUFPc1QsZUFBZXdrQixHQUFJNTlCLFVBQVcsY0FBZSxDQUNsRHFaLElBQUssV0FFSCxPQUFPOVosS0FBS2cxQixRQUFVaDFCLEtBQUtnMUIsT0FBTzZPLGNBS3RDdDlCLE9BQU9zVCxlQUFld2tCLEdBQUssMEJBQTJCLENBQ3BEN3pCLE1BQU9vb0IsS0FHVHlMLEdBQUl5RixRQUFVLFNBTWQsSUFBSXRsQixHQUFpQnBELEVBQVEsZUFHekIyb0IsR0FBYzNvQixFQUFRLHlDQUN0QndELEdBQWMsU0FBVXlELEVBQUs5WCxFQUFNeEUsR0FDckMsTUFDWSxVQUFUQSxHQUFvQmcrQixHQUFZMWhCLElBQWtCLFdBQVQ5WCxHQUNoQyxhQUFUeEUsR0FBK0IsV0FBUnNjLEdBQ2QsWUFBVHRjLEdBQThCLFVBQVJzYyxHQUNiLFVBQVR0YyxHQUE0QixVQUFSc2MsR0FJckIyaEIsR0FBbUI1b0IsRUFBUSx3Q0FFM0I2b0IsR0FBOEI3b0IsRUFBUSxzQ0FXdEM4b0IsR0FBZ0I5b0IsRUFDbEIsd1lBUUUrb0IsR0FBVSwrQkFFVkMsR0FBVSxTQUFVbmtDLEdBQ3RCLE1BQTBCLE1BQW5CQSxFQUFLOGIsT0FBTyxJQUFtQyxVQUFyQjliLEVBQUsrQyxNQUFNLEVBQUcsSUFHN0NxaEMsR0FBZSxTQUFVcGtDLEdBQzNCLE9BQU9ta0MsR0FBUW5rQyxHQUFRQSxFQUFLK0MsTUFBTSxFQUFHL0MsRUFBS2dDLFFBQVUsSUFHbERxaUMsR0FBbUIsU0FBVXowQixHQUMvQixPQUFjLE1BQVBBLElBQXVCLElBQVJBLEdBdUJ4QixTQUFTMDBCLEdBQWdCOWdCLEVBQU9WLEdBQzlCLE1BQU8sQ0FDTHloQixZQUFhbHlCLEdBQU9tUixFQUFNK2dCLFlBQWF6aEIsRUFBT3loQixhQUM5Q3RMLE1BQU96ZSxFQUFNZ0osRUFBTXlWLE9BQ2YsQ0FBQ3pWLEVBQU15VixNQUFPblcsRUFBT21XLE9BQ3JCblcsRUFBT21XLE9BZWYsU0FBUzVtQixHQUFRcUgsRUFBRzFCLEdBQ2xCLE9BQU8wQixFQUFJMUIsRUFBSzBCLEVBQUksSUFBTTFCLEVBQUswQixFQUFLMUIsR0FBSyxHQUczQyxTQUFTd3NCLEdBQWdCajZCLEdBQ3ZCLE9BQUlwSyxNQUFNQyxRQUFRbUssR0FhcEIsU0FBeUJBLEdBR3ZCLElBRkEsSUFDSWs2QixFQURBN2hDLEVBQU0sR0FFRGtCLEVBQUksRUFBR3FZLEVBQUk1UixFQUFNdkksT0FBUThCLEVBQUlxWSxFQUFHclksSUFDbkMwVyxFQUFNaXFCLEVBQWNELEdBQWVqNkIsRUFBTXpHLE1BQXdCLEtBQWhCMmdDLElBQy9DN2hDLElBQU9BLEdBQU8sS0FDbEJBLEdBQU82aEMsR0FHWCxPQUFPN2hDLEVBckJFOGhDLENBQWVuNkIsR0FFcEJtUSxFQUFTblEsR0FzQmYsU0FBMEJBLEdBQ3hCLElBQUkzSCxFQUFNLEdBQ1YsSUFBSyxJQUFJaUQsS0FBTzBFLEVBQ1ZBLEVBQU0xRSxLQUNKakQsSUFBT0EsR0FBTyxLQUNsQkEsR0FBT2lELEdBR1gsT0FBT2pELEVBN0JFK2hDLENBQWdCcDZCLEdBRUosaUJBQVZBLEVBQ0ZBLEVBR0YsR0E0QlQsSUFBSXE2QixHQUFlLENBQ2pCQyxJQUFLLDZCQUNMQyxLQUFNLHNDQUdKQyxHQUFZNXBCLEVBQ2Qsc25CQWVFNnBCLEdBQVE3cEIsRUFDVixrTkFHQSxHQUtFbUQsR0FBZ0IsU0FBVThELEdBQzVCLE9BQU8yaUIsR0FBVTNpQixJQUFRNGlCLEdBQU01aUIsSUFHakMsU0FBUzNELEdBQWlCMkQsR0FDeEIsT0FBSTRpQixHQUFNNWlCLEdBQ0QsTUFJRyxTQUFSQSxFQUNLLFlBRFQsRUFLRixJQUFJNmlCLEdBQXNCMytCLE9BQU9nUyxPQUFPLE1BMEJwQzRzQixHQUFrQi9wQixFQUFRLDZDQU85QixTQUFTdlIsR0FBT2xFLEdBQ2QsTUFBa0IsaUJBQVBBLEVBQ015RixTQUFTbUosY0FBYzVPLElBSzdCeUYsU0FBU3VLLGNBQWMsT0FJekJoUSxFQThEWCxJQUFJeS9CLEdBQXVCNytCLE9BQU9nVSxPQUFPLENBQ3ZDNUUsY0F6REYsU0FBMEIzUCxFQUFTOGQsR0FDakMsSUFBSXhCLEVBQU1sWCxTQUFTdUssY0FBYzNQLEdBQ2pDLE1BQWdCLFdBQVpBLEdBSUE4ZCxFQUFNM2dCLE1BQVEyZ0IsRUFBTTNnQixLQUFLNnFCLFlBQXVDdGMsSUFBOUJvUyxFQUFNM2dCLEtBQUs2cUIsTUFBTXFYLFVBQ3JEL2lCLEVBQUl4TSxhQUFhLFdBQVksWUFKdEJ3TSxHQXVEVGdqQixnQkE5Q0YsU0FBMEJoaUMsRUFBVzBDLEdBQ25DLE9BQU9vRixTQUFTazZCLGdCQUFnQlQsR0FBYXZoQyxHQUFZMEMsSUE4Q3pEMFEsZUEzQ0YsU0FBeUI3UixHQUN2QixPQUFPdUcsU0FBU3NMLGVBQWU3UixJQTJDL0IwZ0MsY0F4Q0YsU0FBd0IxZ0MsR0FDdEIsT0FBT3VHLFNBQVNtNkIsY0FBYzFnQyxJQXdDOUJnUyxhQXJDRixTQUF1QnJSLEVBQVlnZ0MsRUFBU0MsR0FDMUNqZ0MsRUFBV3FSLGFBQWEydUIsRUFBU0MsSUFxQ2pDN3VCLFlBbENGLFNBQXNCK00sRUFBTUYsR0FDMUJFLEVBQUsvTSxZQUFZNk0sSUFrQ2pCek4sWUEvQkYsU0FBc0IyTixFQUFNRixHQUMxQkUsRUFBSzNOLFlBQVl5TixJQStCakJqZSxXQTVCRixTQUFxQm1lLEdBQ25CLE9BQU9BLEVBQUtuZSxZQTRCWmtnQyxZQXpCRixTQUFzQi9oQixHQUNwQixPQUFPQSxFQUFLK2hCLGFBeUJaMS9CLFFBdEJGLFNBQWtCMmQsR0FDaEIsT0FBT0EsRUFBSzNkLFNBc0JaMi9CLGVBbkJGLFNBQXlCaGlCLEVBQU05ZSxHQUM3QjhlLEVBQUtpaUIsWUFBYy9nQyxHQW1CbkJnaEMsY0FoQkYsU0FBd0JsaUIsRUFBTW1pQixHQUM1Qm5pQixFQUFLN04sYUFBYWd3QixFQUFTLE9Bb0J6Qm5FLEdBQU0sQ0FDUnBwQixPQUFRLFNBQWlCNVgsRUFBR21qQixHQUMxQmlpQixHQUFZamlCLElBRWQzTSxPQUFRLFNBQWlCcWQsRUFBVTFRLEdBQzdCMFEsRUFBU3J4QixLQUFLdytCLE1BQVE3ZCxFQUFNM2dCLEtBQUt3K0IsTUFDbkNvRSxHQUFZdlIsR0FBVSxHQUN0QnVSLEdBQVlqaUIsS0FHaEJrUyxRQUFTLFNBQWtCbFMsR0FDekJpaUIsR0FBWWppQixHQUFPLEtBSXZCLFNBQVNpaUIsR0FBYWppQixFQUFPa2lCLEdBQzNCLElBQUlsZ0MsRUFBTWdlLEVBQU0zZ0IsS0FBS3crQixJQUNyQixHQUFLbG5CLEVBQU0zVSxHQUFYLENBRUEsSUFBSXlnQixFQUFLekMsRUFBTXZCLFFBQ1hvZixFQUFNN2QsRUFBTWhCLG1CQUFxQmdCLEVBQU14QixJQUN2QzJqQixFQUFPMWYsRUFBRzhZLE1BQ1YyRyxFQUNFNWxDLE1BQU1DLFFBQVE0bEMsRUFBS25nQyxJQUNyQndRLEVBQU8ydkIsRUFBS25nQyxHQUFNNjdCLEdBQ1RzRSxFQUFLbmdDLEtBQVM2N0IsSUFDdkJzRSxFQUFLbmdDLFFBQU80TCxHQUdWb1MsRUFBTTNnQixLQUFLK2lDLFNBQ1I5bEMsTUFBTUMsUUFBUTRsQyxFQUFLbmdDLElBRWJtZ0MsRUFBS25nQyxHQUFLbUwsUUFBUTB3QixHQUFPLEdBRWxDc0UsRUFBS25nQyxHQUFLUCxLQUFLbzhCLEdBSGZzRSxFQUFLbmdDLEdBQU8sQ0FBQzY3QixHQU1mc0UsRUFBS25nQyxHQUFPNjdCLEdBaUJsQixJQUFJd0UsR0FBWSxJQUFJL2pCLEdBQU0sR0FBSSxHQUFJLElBRTlCdUUsR0FBUSxDQUFDLFNBQVUsV0FBWSxTQUFVLFNBQVUsV0FFdkQsU0FBU3lmLEdBQVd6c0IsRUFBRzFCLEdBQ3JCLE9BQ0UwQixFQUFFN1QsTUFBUW1TLEVBQUVuUyxNQUVSNlQsRUFBRTBJLE1BQVFwSyxFQUFFb0ssS0FDWjFJLEVBQUV3SixZQUFjbEwsRUFBRWtMLFdBQ2xCMUksRUFBTWQsRUFBRXhXLFFBQVVzWCxFQUFNeEMsRUFBRTlVLE9BV2xDLFNBQXdCd1csRUFBRzFCLEdBQ3pCLEdBQWMsVUFBVjBCLEVBQUUwSSxJQUFtQixPQUFPLEVBQ2hDLElBQUl0ZSxFQUNBc2lDLEVBQVE1ckIsRUFBTTFXLEVBQUk0VixFQUFFeFcsT0FBU3NYLEVBQU0xVyxFQUFJQSxFQUFFaXFCLFFBQVVqcUIsRUFBRXdHLEtBQ3JEKzdCLEVBQVE3ckIsRUFBTTFXLEVBQUlrVSxFQUFFOVUsT0FBU3NYLEVBQU0xVyxFQUFJQSxFQUFFaXFCLFFBQVVqcUIsRUFBRXdHLEtBQ3pELE9BQU84N0IsSUFBVUMsR0FBU25CLEdBQWdCa0IsSUFBVWxCLEdBQWdCbUIsR0FmOURDLENBQWM1c0IsRUFBRzFCLElBRWpCeUMsRUFBT2YsRUFBRTRKLHFCQUNUNUosRUFBRThJLGVBQWlCeEssRUFBRXdLLGNBQ3JCakksRUFBUXZDLEVBQUV3SyxhQUFhcmEsUUFjL0IsU0FBU28rQixHQUFtQnRzQixFQUFVdXNCLEVBQVVDLEdBQzlDLElBQUkzaUMsRUFBRytCLEVBQ0hqQyxFQUFNLEdBQ1YsSUFBS0UsRUFBSTBpQyxFQUFVMWlDLEdBQUsyaUMsSUFBVTNpQyxFQUU1QjBXLEVBREozVSxFQUFNb1UsRUFBU25XLEdBQUcrQixPQUNBakMsRUFBSWlDLEdBQU8vQixHQUUvQixPQUFPRixFQXF0QlQsSUFBSTZqQixHQUFhLENBQ2ZuUCxPQUFRb3VCLEdBQ1J4dkIsT0FBUXd2QixHQUNSM1EsUUFBUyxTQUEyQmxTLEdBQ2xDNmlCLEdBQWlCN2lCLEVBQU9xaUIsTUFJNUIsU0FBU1EsR0FBa0JuUyxFQUFVMVEsSUFDL0IwUSxFQUFTcnhCLEtBQUt1a0IsWUFBYzVELEVBQU0zZ0IsS0FBS3VrQixhQUs3QyxTQUFrQjhNLEVBQVUxUSxHQUMxQixJQVFJaGUsRUFBSzhnQyxFQUFRQyxFQVJiQyxFQUFXdFMsSUFBYTJSLEdBQ3hCWSxFQUFZampCLElBQVVxaUIsR0FDdEJhLEVBQVVDLEdBQXNCelMsRUFBU3J4QixLQUFLdWtCLFdBQVk4TSxFQUFTalMsU0FDbkUya0IsRUFBVUQsR0FBc0JuakIsRUFBTTNnQixLQUFLdWtCLFdBQVk1RCxFQUFNdkIsU0FFN0Q0a0IsRUFBaUIsR0FDakJDLEVBQW9CLEdBR3hCLElBQUt0aEMsS0FBT29oQyxFQUNWTixFQUFTSSxFQUFRbGhDLEdBQ2pCK2dDLEVBQU1LLEVBQVFwaEMsR0FDVDhnQyxHQVFIQyxFQUFJbEssU0FBV2lLLEVBQU9wOEIsTUFDdEJxOEIsRUFBSVEsT0FBU1QsRUFBT1UsSUFDcEJDLEdBQVdWLEVBQUssU0FBVS9pQixFQUFPMFEsR0FDN0JxUyxFQUFJM25CLEtBQU8ybkIsRUFBSTNuQixJQUFJc29CLGtCQUNyQkosRUFBa0I3aEMsS0FBS3NoQyxLQVZ6QlUsR0FBV1YsRUFBSyxPQUFRL2lCLEVBQU8wUSxHQUMzQnFTLEVBQUkzbkIsS0FBTzJuQixFQUFJM25CLElBQUlpRixVQUNyQmdqQixFQUFlNWhDLEtBQUtzaEMsSUFhMUIsR0FBSU0sRUFBZWxsQyxPQUFRLENBQ3pCLElBQUl3bEMsRUFBYSxXQUNmLElBQUssSUFBSTFqQyxFQUFJLEVBQUdBLEVBQUlvakMsRUFBZWxsQyxPQUFROEIsSUFDekN3akMsR0FBV0osRUFBZXBqQyxHQUFJLFdBQVkrZixFQUFPMFEsSUFHakRzUyxFQUNGdGEsR0FBZTFJLEVBQU8sU0FBVTJqQixHQUVoQ0EsSUFZSixHQVJJTCxFQUFrQm5sQyxRQUNwQnVxQixHQUFlMUksRUFBTyxhQUFhLFdBQ2pDLElBQUssSUFBSS9mLEVBQUksRUFBR0EsRUFBSXFqQyxFQUFrQm5sQyxPQUFROEIsSUFDNUN3akMsR0FBV0gsRUFBa0JyakMsR0FBSSxtQkFBb0IrZixFQUFPMFEsT0FLN0RzUyxFQUNILElBQUtoaEMsS0FBT2toQyxFQUNMRSxFQUFRcGhDLElBRVh5aEMsR0FBV1AsRUFBUWxoQyxHQUFNLFNBQVUwdUIsRUFBVUEsRUFBVXVTLEdBM0QzRDlGLENBQVF6TSxFQUFVMVEsR0FpRXRCLElBQUk0akIsR0FBaUJuaEMsT0FBT2dTLE9BQU8sTUFFbkMsU0FBUzB1QixHQUNQeGYsRUFDQWxCLEdBRUEsSUFLSXhpQixFQUFHOGlDLEVBTEhoa0MsRUFBTTBELE9BQU9nUyxPQUFPLE1BQ3hCLElBQUtrUCxFQUVILE9BQU81a0IsRUFHVCxJQUFLa0IsRUFBSSxFQUFHQSxFQUFJMGpCLEVBQUt4bEIsT0FBUThCLEtBQzNCOGlDLEVBQU1wZixFQUFLMWpCLElBQ0Y0akMsWUFFUGQsRUFBSWMsVUFBWUQsSUFFbEI3a0MsRUFBSStrQyxHQUFjZixJQUFRQSxFQUMxQkEsRUFBSTNuQixJQUFNZ0osR0FBYTNCLEVBQUd3QyxTQUFVLGFBQWM4ZCxFQUFJNW1DLE1BR3hELE9BQU80QyxFQUdULFNBQVMra0MsR0FBZWYsR0FDdEIsT0FBT0EsRUFBSWdCLFNBQWFoQixFQUFRLEtBQUksSUFBT3RnQyxPQUFPd0UsS0FBSzg3QixFQUFJYyxXQUFhLElBQUlqaUMsS0FBSyxLQUduRixTQUFTNmhDLEdBQVlWLEVBQUsvZixFQUFNaEQsRUFBTzBRLEVBQVV1UyxHQUMvQyxJQUFJejJCLEVBQUt1MkIsRUFBSTNuQixLQUFPMm5CLEVBQUkzbkIsSUFBSTRILEdBQzVCLEdBQUl4VyxFQUNGLElBQ0VBLEVBQUd3VCxFQUFNeEIsSUFBS3VrQixFQUFLL2lCLEVBQU8wUSxFQUFVdVMsR0FDcEMsTUFBTy9sQyxHQUNQc29CLEdBQVl0b0IsRUFBRzhpQixFQUFNdkIsUUFBVSxhQUFnQnNrQixFQUFRLEtBQUksSUFBTS9mLEVBQU8sVUFLOUUsSUFBSWdoQixHQUFjLENBQ2hCbkcsR0FDQWphLElBS0YsU0FBU3FnQixHQUFhdlQsRUFBVTFRLEdBQzlCLElBQUlyRCxFQUFPcUQsRUFBTXRCLGlCQUNqQixLQUFJL0gsRUFBTWdHLEtBQTRDLElBQW5DQSxFQUFLTyxLQUFLamhCLFFBQVFpb0MsY0FHakN4dEIsRUFBUWdhLEVBQVNyeEIsS0FBSzZxQixRQUFVeFQsRUFBUXNKLEVBQU0zZ0IsS0FBSzZxQixRQUF2RCxDQUdBLElBQUlsb0IsRUFBSzBqQixFQUNMbEgsRUFBTXdCLEVBQU14QixJQUNaMmxCLEVBQVd6VCxFQUFTcnhCLEtBQUs2cUIsT0FBUyxHQUNsQ0EsRUFBUWxLLEVBQU0zZ0IsS0FBSzZxQixPQUFTLEdBTWhDLElBQUtsb0IsS0FKRDJVLEVBQU11VCxFQUFNM0osVUFDZDJKLEVBQVFsSyxFQUFNM2dCLEtBQUs2cUIsTUFBUXZSLEVBQU8sR0FBSXVSLElBRzVCQSxFQUNWeEUsRUFBTXdFLEVBQU1sb0IsR0FDTm1pQyxFQUFTbmlDLEtBQ0gwakIsR0FDVjBlLEdBQVE1bEIsRUFBS3hjLEVBQUswakIsR0FTdEIsSUFBSzFqQixLQUhBbWEsR0FBUUUsSUFBVzZOLEVBQU14akIsUUFBVXk5QixFQUFTejlCLE9BQy9DMDlCLEdBQVE1bEIsRUFBSyxRQUFTMEwsRUFBTXhqQixPQUVsQnk5QixFQUNOenRCLEVBQVF3VCxFQUFNbG9CLE1BQ1pzK0IsR0FBUXQrQixHQUNWd2MsRUFBSTZsQixrQkFBa0JoRSxHQUFTRSxHQUFhditCLElBQ2xDaytCLEdBQWlCbCtCLElBQzNCd2MsRUFBSXZMLGdCQUFnQmpSLEtBTTVCLFNBQVNvaUMsR0FBU3ZpQyxFQUFJRyxFQUFLMEUsR0FDckI3RSxFQUFHSyxRQUFRaUwsUUFBUSxNQUFRLEVBQzdCbTNCLEdBQVl6aUMsRUFBSUcsRUFBSzBFLEdBQ1owNUIsR0FBY3ArQixHQUduQncrQixHQUFpQjk1QixHQUNuQjdFLEVBQUdvUixnQkFBZ0JqUixJQUluQjBFLEVBQWdCLG9CQUFSMUUsR0FBNEMsVUFBZkgsRUFBR0ssUUFDcEMsT0FDQUYsRUFDSkgsRUFBR21RLGFBQWFoUSxFQUFLMEUsSUFFZHc1QixHQUFpQmwrQixHQUMxQkgsRUFBR21RLGFBQWFoUSxFQTl2Q1MsU0FBVUEsRUFBSzBFLEdBQzFDLE9BQU84NUIsR0FBaUI5NUIsSUFBb0IsVUFBVkEsRUFDOUIsUUFFUSxvQkFBUjFFLEdBQTZCbStCLEdBQTRCejVCLEdBQ3ZEQSxFQUNBLE9Bd3ZDaUI2OUIsQ0FBdUJ2aUMsRUFBSzBFLElBQ3hDNDVCLEdBQVF0K0IsR0FDYncrQixHQUFpQjk1QixHQUNuQjdFLEVBQUd3aUMsa0JBQWtCaEUsR0FBU0UsR0FBYXYrQixJQUUzQ0gsRUFBRzJpQyxlQUFlbkUsR0FBU3IrQixFQUFLMEUsR0FHbEM0OUIsR0FBWXppQyxFQUFJRyxFQUFLMEUsR0FJekIsU0FBUzQ5QixHQUFhemlDLEVBQUlHLEVBQUswRSxHQUM3QixHQUFJODVCLEdBQWlCOTVCLEdBQ25CN0UsRUFBR29SLGdCQUFnQmpSLE9BQ2QsQ0FLTCxHQUNFbWEsSUFBU0MsR0FDTSxhQUFmdmEsRUFBR0ssU0FDSyxnQkFBUkYsR0FBbUMsS0FBVjBFLElBQWlCN0UsRUFBRzRpQyxPQUM3QyxDQUNBLElBQUlDLEVBQVUsU0FBVXhuQyxHQUN0QkEsRUFBRXluQywyQkFDRjlpQyxFQUFHK2lDLG9CQUFvQixRQUFTRixJQUVsQzdpQyxFQUFHK2EsaUJBQWlCLFFBQVM4bkIsR0FFN0I3aUMsRUFBRzRpQyxRQUFTLEVBRWQ1aUMsRUFBR21RLGFBQWFoUSxFQUFLMEUsSUFJekIsSUFBSXdqQixHQUFRLENBQ1Z6VixPQUFRd3ZCLEdBQ1I1d0IsT0FBUTR3QixJQUtWLFNBQVNZLEdBQWFuVSxFQUFVMVEsR0FDOUIsSUFBSW5lLEVBQUttZSxFQUFNeEIsSUFDWG5mLEVBQU8yZ0IsRUFBTTNnQixLQUNieWxDLEVBQVVwVSxFQUFTcnhCLEtBQ3ZCLEtBQ0VxWCxFQUFRclgsRUFBS3FoQyxjQUNiaHFCLEVBQVFyWCxFQUFLKzFCLFNBQ1gxZSxFQUFRb3VCLElBQ05wdUIsRUFBUW91QixFQUFRcEUsY0FDaEJocUIsRUFBUW91QixFQUFRMVAsU0FMdEIsQ0FZQSxJQUFJMlAsRUF4eENOLFNBQTJCL2tCLEdBSXpCLElBSEEsSUFBSTNnQixFQUFPMmdCLEVBQU0zZ0IsS0FDYnFDLEVBQWFzZSxFQUNiZ2xCLEVBQVlobEIsRUFDVHJKLEVBQU1xdUIsRUFBVWhtQixxQkFDckJnbUIsRUFBWUEsRUFBVWhtQixrQkFBa0JtUyxTQUN2QjZULEVBQVUzbEMsT0FDekJBLEVBQU9vaEMsR0FBZXVFLEVBQVUzbEMsS0FBTUEsSUFHMUMsS0FBT3NYLEVBQU1qVixFQUFhQSxFQUFXdWQsU0FDL0J2ZCxHQUFjQSxFQUFXckMsT0FDM0JBLEVBQU9vaEMsR0FBZXBoQyxFQUFNcUMsRUFBV3JDLE9BRzNDLE9BYUFxaEMsRUFibUJyaEMsRUFBS3FoQyxZQWN4QnVFLEVBZHFDNWxDLEVBQUsrMUIsTUFnQnRDemUsRUFBTStwQixJQUFnQi9wQixFQUFNc3VCLEdBQ3ZCejJCLEdBQU9reUIsRUFBYUMsR0FBZXNFLElBR3JDLEdBUlQsSUFDRXZFLEVBQ0F1RSxFQTJ2Q1VDLENBQWlCbGxCLEdBR3ZCbWxCLEVBQWtCdGpDLEVBQUd1akMsbUJBQ3JCenVCLEVBQU13dUIsS0FDUkosRUFBTXYyQixHQUFPdTJCLEVBQUtwRSxHQUFld0UsS0FJL0JKLElBQVFsakMsRUFBR3dqQyxhQUNieGpDLEVBQUdtUSxhQUFhLFFBQVMreUIsR0FDekJsakMsRUFBR3dqQyxXQUFhTixJQUlwQixJQTRZSTFqQyxHQUFLcUwsR0FBSzQ0QixHQUFLQyxHQUFTQyxHQUFlQyxHQTVZdkNDLEdBQVEsQ0FDVmp4QixPQUFRb3dCLEdBQ1J4eEIsT0FBUXd4QixJQUtOYyxHQUFzQixnQkFFMUIsU0FBU0MsR0FBY0MsR0FDckIsSUFRSXJnQyxFQUFHc2dDLEVBQU03bEMsRUFBR3M0QixFQUFZd04sRUFSeEJDLEdBQVcsRUFDWEMsR0FBVyxFQUNYQyxHQUFtQixFQUNuQkMsR0FBVSxFQUNWQyxFQUFRLEVBQ1JDLEVBQVMsRUFDVEMsRUFBUSxFQUNSQyxFQUFrQixFQUd0QixJQUFLdG1DLEVBQUksRUFBR0EsRUFBSTRsQyxFQUFJMW5DLE9BQVE4QixJQUcxQixHQUZBNmxDLEVBQU90Z0MsRUFDUEEsRUFBSXFnQyxFQUFJMXFCLFdBQVdsYixHQUNmK2xDLEVBQ1EsS0FBTnhnQyxHQUF1QixLQUFUc2dDLElBQWlCRSxHQUFXLFFBQ3pDLEdBQUlDLEVBQ0MsS0FBTnpnQyxHQUF1QixLQUFUc2dDLElBQWlCRyxHQUFXLFFBQ3pDLEdBQUlDLEVBQ0MsS0FBTjFnQyxHQUF1QixLQUFUc2dDLElBQWlCSSxHQUFtQixRQUNqRCxHQUFJQyxFQUNDLEtBQU4zZ0MsR0FBdUIsS0FBVHNnQyxJQUFpQkssR0FBVSxRQUN4QyxHQUNDLE1BQU4zZ0MsR0FDMEIsTUFBMUJxZ0MsRUFBSTFxQixXQUFXbGIsRUFBSSxJQUNPLE1BQTFCNGxDLEVBQUkxcUIsV0FBV2xiLEVBQUksSUFDbEJtbUMsR0FBVUMsR0FBV0MsRUFTakIsQ0FDTCxPQUFROWdDLEdBQ04sS0FBSyxHQUFNeWdDLEdBQVcsRUFBTSxNQUM1QixLQUFLLEdBQU1ELEdBQVcsRUFBTSxNQUM1QixLQUFLLEdBQU1FLEdBQW1CLEVBQU0sTUFDcEMsS0FBSyxHQUFNSSxJQUFTLE1BQ3BCLEtBQUssR0FBTUEsSUFBUyxNQUNwQixLQUFLLEdBQU1ELElBQVUsTUFDckIsS0FBSyxHQUFNQSxJQUFVLE1BQ3JCLEtBQUssSUFBTUQsSUFBUyxNQUNwQixLQUFLLElBQU1BLElBRWIsR0FBVSxLQUFONWdDLEVBQVksQ0FJZCxJQUhBLElBQUk2d0IsRUFBSXAyQixFQUFJLEVBQ1JxVSxPQUFJLEVBRUQraEIsR0FBSyxHQUVBLE9BRFYvaEIsRUFBSXV4QixFQUFJNXRCLE9BQU9vZSxJQURGQSxLQUlWL2hCLEdBQU1xeEIsR0FBb0J6NEIsS0FBS29ILEtBQ2xDNnhCLEdBQVUsY0E1Qkt2NEIsSUFBZjJxQixHQUVGZ08sRUFBa0J0bUMsRUFBSSxFQUN0QnM0QixFQUFhc04sRUFBSTNtQyxNQUFNLEVBQUdlLEdBQUd1bUMsUUFFN0JDLElBbUNOLFNBQVNBLEtBQ05WLElBQVlBLEVBQVUsS0FBS3RrQyxLQUFLb2tDLEVBQUkzbUMsTUFBTXFuQyxFQUFpQnRtQyxHQUFHdW1DLFFBQy9ERCxFQUFrQnRtQyxFQUFJLEVBR3hCLFFBWG1CMk4sSUFBZjJxQixFQUNGQSxFQUFhc04sRUFBSTNtQyxNQUFNLEVBQUdlLEdBQUd1bUMsT0FDQSxJQUFwQkQsR0FDVEUsSUFRRVYsRUFDRixJQUFLOWxDLEVBQUksRUFBR0EsRUFBSThsQyxFQUFRNW5DLE9BQVE4QixJQUM5QnM0QixFQUFhbU8sR0FBV25PLEVBQVl3TixFQUFROWxDLElBSWhELE9BQU9zNEIsRUFHVCxTQUFTbU8sR0FBWWIsRUFBS3Z6QixHQUN4QixJQUFJclMsRUFBSXFTLEVBQU9uRixRQUFRLEtBQ3ZCLEdBQUlsTixFQUFJLEVBRU4sTUFBUSxPQUFVcVMsRUFBUyxNQUFTdXpCLEVBQU0sSUFFMUMsSUFBSTFwQyxFQUFPbVcsRUFBT3BULE1BQU0sRUFBR2UsR0FDdkJqQyxFQUFPc1UsRUFBT3BULE1BQU1lLEVBQUksR0FDNUIsTUFBUSxPQUFVOUQsRUFBTyxNQUFTMHBDLEdBQWdCLE1BQVQ3bkMsRUFBZSxJQUFNQSxFQUFPQSxHQVN6RSxTQUFTMm9DLEdBQVVDLEVBQUtDLEdBQ3RCemlDLFFBQVFFLE1BQU8sbUJBQXFCc2lDLEdBSXRDLFNBQVNFLEdBQ1ByNEIsRUFDQXpNLEdBRUEsT0FBT3lNLEVBQ0hBLEVBQVExTyxLQUFJLFNBQVVtVixHQUFLLE9BQU9BLEVBQUVsVCxNQUFTc1EsUUFBTyxTQUFVelYsR0FBSyxPQUFPQSxLQUMxRSxHQUdOLFNBQVNrcUMsR0FBU2xsQyxFQUFJMUYsRUFBTXVLLEVBQU9tZ0MsRUFBT0csSUFDdkNubEMsRUFBR3FoQixRQUFVcmhCLEVBQUdxaEIsTUFBUSxLQUFLemhCLEtBQUt3bEMsR0FBYSxDQUFFOXFDLEtBQU1BLEVBQU11SyxNQUFPQSxFQUFPc2dDLFFBQVNBLEdBQVdILElBQ2hHaGxDLEVBQUdxbEMsT0FBUSxFQUdiLFNBQVNDLEdBQVN0bEMsRUFBSTFGLEVBQU11SyxFQUFPbWdDLEVBQU9HLElBQzVCQSxFQUNQbmxDLEVBQUd1bEMsZUFBaUJ2bEMsRUFBR3VsQyxhQUFlLElBQ3RDdmxDLEVBQUdxb0IsUUFBVXJvQixFQUFHcW9CLE1BQVEsS0FDdkJ6b0IsS0FBS3dsQyxHQUFhLENBQUU5cUMsS0FBTUEsRUFBTXVLLE1BQU9BLEVBQU9zZ0MsUUFBU0EsR0FBV0gsSUFDeEVobEMsRUFBR3FsQyxPQUFRLEVBSWIsU0FBU0csR0FBWXhsQyxFQUFJMUYsRUFBTXVLLEVBQU9tZ0MsR0FDcENobEMsRUFBR3lsQyxTQUFTbnJDLEdBQVF1SyxFQUNwQjdFLEVBQUcwbEMsVUFBVTlsQyxLQUFLd2xDLEdBQWEsQ0FBRTlxQyxLQUFNQSxFQUFNdUssTUFBT0EsR0FBU21nQyxJQUcvRCxTQUFTVyxHQUNQM2xDLEVBQ0ExRixFQUNBNG5DLEVBQ0FyOUIsRUFDQTg4QixFQUNBaUUsRUFDQTVELEVBQ0FnRCxJQUVDaGxDLEVBQUcraEIsYUFBZS9oQixFQUFHK2hCLFdBQWEsS0FBS25pQixLQUFLd2xDLEdBQWEsQ0FDeEQ5cUMsS0FBTUEsRUFDTjRuQyxRQUFTQSxFQUNUcjlCLE1BQU9BLEVBQ1A4OEIsSUFBS0EsRUFDTGlFLGFBQWNBLEVBQ2Q1RCxVQUFXQSxHQUNWZ0QsSUFDSGhsQyxFQUFHcWxDLE9BQVEsRUFHYixTQUFTUSxHQUF1QnpaLEVBQVE5eEIsRUFBTTZxQyxHQUM1QyxPQUFPQSxFQUNGLE1BQVE3cUMsRUFBTyxLQUFROHhCLEVBQVMsS0FDakNBLEVBQVM5eEIsRUFHZixTQUFTd3JDLEdBQ1A5bEMsRUFDQTFGLEVBQ0F1SyxFQUNBbTlCLEVBQ0ErRCxFQUNBdmpDLEVBQ0F3aUMsRUFDQUcsR0FpREEsSUFBSWEsR0EvQ0poRSxFQUFZQSxHQUFhcnRCLEdBaUJYc3hCLE1BQ1JkLEVBQ0Y3cUMsRUFBTyxJQUFNQSxFQUFPLDhCQUFnQ0EsRUFBTyxJQUN6QyxVQUFUQSxJQUNUQSxFQUFPLHFCQUNBMG5DLEVBQVVpRSxPQUVWakUsRUFBVWtFLFNBQ2ZmLEVBQ0Y3cUMsRUFBTyxJQUFNQSxFQUFPLDBCQUE0QkEsRUFBTyxJQUNyQyxVQUFUQSxJQUNUQSxFQUFPLFlBS1AwbkMsRUFBVS9iLGlCQUNMK2IsRUFBVS9iLFFBQ2pCM3JCLEVBQU91ckMsR0FBc0IsSUFBS3ZyQyxFQUFNNnFDLElBRXRDbkQsRUFBVWpxQixjQUNMaXFCLEVBQVVqcUIsS0FDakJ6ZCxFQUFPdXJDLEdBQXNCLElBQUt2ckMsRUFBTTZxQyxJQUd0Q25ELEVBQVVqYyxpQkFDTGljLEVBQVVqYyxRQUNqQnpyQixFQUFPdXJDLEdBQXNCLElBQUt2ckMsRUFBTTZxQyxJQUl0Q25ELEVBQVVtRSxlQUNMbkUsRUFBVW1FLE9BQ2pCSCxFQUFTaG1DLEVBQUdvbUMsZUFBaUJwbUMsRUFBR29tQyxhQUFlLEtBRS9DSixFQUFTaG1DLEVBQUdnbUMsU0FBV2htQyxFQUFHZ21DLE9BQVMsSUFHckMsSUFBSUssRUFBYWpCLEdBQWEsQ0FBRXZnQyxNQUFPQSxFQUFNOC9CLE9BQVFRLFFBQVNBLEdBQVdILEdBQ3JFaEQsSUFBY3J0QixJQUNoQjB4QixFQUFXckUsVUFBWUEsR0FHekIsSUFBSXpOLEVBQVd5UixFQUFPMXJDLEdBRWxCRyxNQUFNQyxRQUFRNjVCLEdBQ2hCd1IsRUFBWXhSLEVBQVMySSxRQUFRbUosR0FBYzlSLEVBQVMzMEIsS0FBS3ltQyxHQUV6REwsRUFBTzFyQyxHQURFaTZCLEVBQ013UixFQUFZLENBQUNNLEVBQVk5UixHQUFZLENBQUNBLEVBQVU4UixHQUVoREEsRUFHakJybUMsRUFBR3FsQyxPQUFRLEVBWWIsU0FBU2lCLEdBQ1B0bUMsRUFDQTFGLEVBQ0Fpc0MsR0FFQSxJQUFJQyxFQUNGQyxHQUFpQnptQyxFQUFJLElBQU0xRixJQUMzQm1zQyxHQUFpQnptQyxFQUFJLFVBQVkxRixHQUNuQyxHQUFvQixNQUFoQmtzQyxFQUNGLE9BQU96QyxHQUFheUMsR0FDZixJQUFrQixJQUFkRCxFQUFxQixDQUM5QixJQUFJRyxFQUFjRCxHQUFpQnptQyxFQUFJMUYsR0FDdkMsR0FBbUIsTUFBZm9zQyxFQUNGLE9BQU9yb0MsS0FBS0MsVUFBVW9vQyxJQVM1QixTQUFTRCxHQUNQem1DLEVBQ0ExRixFQUNBcXNDLEdBRUEsSUFBSXo4QixFQUNKLEdBQWlDLE9BQTVCQSxFQUFNbEssRUFBR3lsQyxTQUFTbnJDLElBRXJCLElBREEsSUFBSWtTLEVBQU94TSxFQUFHMGxDLFVBQ0x0bkMsRUFBSSxFQUFHcVksRUFBSWpLLEVBQUtsUSxPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUN0QyxHQUFJb08sRUFBS3BPLEdBQUc5RCxPQUFTQSxFQUFNLENBQ3pCa1MsRUFBS2xGLE9BQU9sSixFQUFHLEdBQ2YsTUFPTixPQUhJdW9DLFVBQ0szbUMsRUFBR3lsQyxTQUFTbnJDLEdBRWQ0UCxFQUdULFNBQVMwOEIsR0FDUDVtQyxFQUNBMUYsR0FHQSxJQURBLElBQUlrUyxFQUFPeE0sRUFBRzBsQyxVQUNMdG5DLEVBQUksRUFBR3FZLEVBQUlqSyxFQUFLbFEsT0FBUThCLEVBQUlxWSxFQUFHclksSUFBSyxDQUMzQyxJQUFJZ0MsRUFBT29NLEVBQUtwTyxHQUNoQixHQUFJOUQsRUFBSytRLEtBQUtqTCxFQUFLOUYsTUFFakIsT0FEQWtTLEVBQUtsRixPQUFPbEosRUFBRyxHQUNSZ0MsR0FLYixTQUFTZ2xDLEdBQ1AzNEIsRUFDQXU0QixHQVVBLE9BUklBLElBQ2lCLE1BQWZBLEVBQU1wdUIsUUFDUm5LLEVBQUttSyxNQUFRb3VCLEVBQU1wdUIsT0FFSixNQUFib3VCLEVBQU02QixNQUNScDZCLEVBQUtvNkIsSUFBTTdCLEVBQU02QixNQUdkcDZCLEVBUVQsU0FBU3E2QixHQUNQOW1DLEVBQ0E2RSxFQUNBbTlCLEdBRUEsSUFBSWhHLEVBQU1nRyxHQUFhLEdBQ25CK0UsRUFBUy9LLEVBQUkrSyxPQUliQyxFQURzQixNQUZmaEwsRUFBSTJJLE9BS2JxQyxFQUNFLDhDQUlBRCxJQUNGQyxFQUFrQixNQUFRQSxFQUFrQixLQUU5QyxJQUFJQyxFQUFhQyxHQUFrQnJpQyxFQUFPbWlDLEdBRTFDaG5DLEVBQUdveUIsTUFBUSxDQUNUdnRCLE1BQVEsSUFBTUEsRUFBUSxJQUN0QjZ4QixXQUFZcjRCLEtBQUtDLFVBQVV1RyxHQUMzQmxHLFNBQVcsbUJBQTZDc29DLEVBQWEsS0FPekUsU0FBU0MsR0FDUHJpQyxFQUNBb2lDLEdBRUEsSUFBSS9wQyxFQTJCTixTQUFxQmdOLEdBTW5CLEdBSEFBLEVBQU1BLEVBQUl5NkIsT0FDVm5sQyxHQUFNMEssRUFBSTVOLE9BRU40TixFQUFJb0IsUUFBUSxLQUFPLEdBQUtwQixFQUFJaTlCLFlBQVksS0FBTzNuQyxHQUFNLEVBRXZELE9BREFra0MsR0FBVXg1QixFQUFJaTlCLFlBQVksT0FDWCxFQUNOLENBQ0xuRCxJQUFLOTVCLEVBQUk3TSxNQUFNLEVBQUdxbUMsSUFDbEJ2akMsSUFBSyxJQUFNK0osRUFBSTdNLE1BQU1xbUMsR0FBVSxHQUFLLEtBRy9CLENBQ0xNLElBQUs5NUIsRUFDTC9KLElBQUssTUFRWCxJQUhBMEssR0FBTVgsRUFDTnc1QixHQUFVQyxHQUFnQkMsR0FBbUIsR0FFckN3RCxNQUdGQyxHQUZKNUQsR0FBTXA1QixNQUdKaTlCLEdBQVk3RCxJQUNLLEtBQVJBLElBQ1Q4RCxHQUFhOUQsSUFJakIsTUFBTyxDQUNMTyxJQUFLOTVCLEVBQUk3TSxNQUFNLEVBQUdzbUMsSUFDbEJ4akMsSUFBSytKLEVBQUk3TSxNQUFNc21DLEdBQWdCLEVBQUdDLEtBL0QxQjRELENBQVczaUMsR0FDckIsT0FBZ0IsT0FBWjNILEVBQUlpRCxJQUNFMEUsRUFBUSxJQUFNb2lDLEVBRWQsUUFBVy9wQyxFQUFPLElBQUksS0FBUUEsRUFBTyxJQUFJLEtBQU8rcEMsRUFBYSxJQStEekUsU0FBUzU4QixLQUNQLE9BQU9RLEdBQUl5TyxhQUFhb3FCLElBRzFCLFNBQVMwRCxLQUNQLE9BQU8xRCxJQUFXbGtDLEdBR3BCLFNBQVM2bkMsR0FBZTVELEdBQ3RCLE9BQWUsS0FBUkEsR0FBd0IsS0FBUkEsRUFHekIsU0FBUzhELEdBQWM5RCxHQUNyQixJQUFJZ0UsRUFBWSxFQUVoQixJQURBOUQsR0FBZ0JELElBQ1IwRCxNQUVOLEdBQUlDLEdBREo1RCxFQUFNcDVCLE1BRUppOUIsR0FBWTdELFFBS2QsR0FGWSxLQUFSQSxHQUFnQmdFLElBQ1IsS0FBUmhFLEdBQWdCZ0UsSUFDRixJQUFkQSxFQUFpQixDQUNuQjdELEdBQW1CRixHQUNuQixPQUtOLFNBQVM0RCxHQUFhN0QsR0FFcEIsSUFEQSxJQUFJaUUsRUFBY2pFLEdBQ1YyRCxPQUNOM0QsRUFBTXA1QixRQUNNcTlCLEtBWWhCLElBZ01JQyxHQUVKLFNBQVNDLEdBQXFCbmpDLEVBQU95ZixFQUFTK0IsR0FDNUMsSUFBSThOLEVBQVU0VCxHQUNkLE9BQU8sU0FBUzNULElBQ2QsSUFBSTkyQixFQUFNZ25CLEVBQVFsbkIsTUFBTSxLQUFNWCxXQUNsQixPQUFSYSxHQUNGMnFDLEdBQVNwakMsRUFBT3V2QixFQUFhL04sRUFBUzhOLElBUTVDLElBQUkrVCxHQUFrQnhqQixNQUFzQjVKLElBQVE2aEIsT0FBTzdoQixHQUFLLEtBQU8sSUFFdkUsU0FBU3F0QixHQUNQenRDLEVBQ0E0cEIsRUFDQStCLEVBQ0FGLEdBUUEsR0FBSStoQixHQUFpQixDQUNuQixJQUFJRSxFQUFvQmxULEdBQ3BCcHRCLEVBQVd3YyxFQUNmQSxFQUFVeGMsRUFBU3VnQyxTQUFXLFNBQVU1c0MsR0FDdEMsR0FJRUEsRUFBRWtOLFNBQVdsTixFQUFFbU4sZUFFZm5OLEVBQUU0NUIsV0FBYStTLEdBSWYzc0MsRUFBRTQ1QixXQUFhLEdBSWY1NUIsRUFBRWtOLE9BQU8yL0IsZ0JBQWtCemlDLFNBRTNCLE9BQU9pQyxFQUFTMUssTUFBTTNDLEtBQU1nQyxZQUlsQ3NyQyxHQUFTNXNCLGlCQUNQemdCLEVBQ0E0cEIsRUFDQXJKLEdBQ0ksQ0FBRW9MLFFBQVNBLEVBQVNGLFFBQVNBLEdBQzdCRSxHQUlSLFNBQVM0aEIsR0FDUHZ0QyxFQUNBNHBCLEVBQ0ErQixFQUNBOE4sSUFFQ0EsR0FBVzRULElBQVU1RSxvQkFDcEJ6b0MsRUFDQTRwQixFQUFRK2pCLFVBQVkvakIsRUFDcEIrQixHQUlKLFNBQVNraUIsR0FBb0J0WixFQUFVMVEsR0FDckMsSUFBSXRKLEVBQVFnYSxFQUFTcnhCLEtBQUsrb0IsTUFBTzFSLEVBQVFzSixFQUFNM2dCLEtBQUsrb0IsSUFBcEQsQ0FHQSxJQUFJQSxFQUFLcEksRUFBTTNnQixLQUFLK29CLElBQU0sR0FDdEJDLEVBQVFxSSxFQUFTcnhCLEtBQUsrb0IsSUFBTSxHQUNoQ29oQixHQUFXeHBCLEVBQU14QixJQWxHbkIsU0FBMEI0SixHQUV4QixHQUFJelIsRUFBTXlSLEVBQWMsS0FBSSxDQUUxQixJQUFJOWhCLEVBQVE2VixFQUFPLFNBQVcsUUFDOUJpTSxFQUFHOWhCLEdBQVMsR0FBR2tJLE9BQU80WixFQUFjLElBQUdBLEVBQUc5aEIsSUFBVSxXQUM3QzhoQixFQUFjLElBS25CelIsRUFBTXlSLEVBQXVCLE9BQy9CQSxFQUFHNmhCLE9BQVMsR0FBR3o3QixPQUFPNFosRUFBdUIsSUFBR0EsRUFBRzZoQixRQUFVLFdBQ3REN2hCLEVBQXVCLEtBc0ZoQzhoQixDQUFnQjloQixHQUNoQkQsR0FBZ0JDLEVBQUlDLEVBQU91aEIsR0FBT0YsR0FBVUQsR0FBcUJ6cEIsRUFBTXZCLFNBQ3ZFK3FCLFFBQVc1N0IsR0FHYixJQU9JdThCLEdBUEF0QyxHQUFTLENBQ1hwekIsT0FBUXUxQixHQUNSMzJCLE9BQVEyMkIsSUFPVixTQUFTSSxHQUFnQjFaLEVBQVUxUSxHQUNqQyxJQUFJdEosRUFBUWdhLEVBQVNyeEIsS0FBS3N0QixZQUFhalcsRUFBUXNKLEVBQU0zZ0IsS0FBS3N0QixVQUExRCxDQUdBLElBQUkzcUIsRUFBSzBqQixFQUNMbEgsRUFBTXdCLEVBQU14QixJQUNaNnJCLEVBQVczWixFQUFTcnhCLEtBQUtzdEIsVUFBWSxHQUNyQ3pKLEVBQVFsRCxFQUFNM2dCLEtBQUtzdEIsVUFBWSxHQU1uQyxJQUFLM3FCLEtBSkQyVSxFQUFNdU0sRUFBTTNDLFVBQ2QyQyxFQUFRbEQsRUFBTTNnQixLQUFLc3RCLFNBQVdoVSxFQUFPLEdBQUl1SyxJQUcvQm1uQixFQUNKcm9DLEtBQU9raEIsSUFDWDFFLEVBQUl4YyxHQUFPLElBSWYsSUFBS0EsS0FBT2toQixFQUFPLENBS2pCLEdBSkF3QyxFQUFNeEMsRUFBTWxoQixHQUlBLGdCQUFSQSxHQUFpQyxjQUFSQSxFQUFxQixDQUVoRCxHQURJZ2UsRUFBTTVKLFdBQVk0SixFQUFNNUosU0FBU2pZLE9BQVMsR0FDMUN1bkIsSUFBUTJrQixFQUFTcm9DLEdBQVEsU0FHQyxJQUExQndjLEVBQUkzTCxXQUFXMVUsUUFDakJxZ0IsRUFBSTFMLFlBQVkwTCxFQUFJM0wsV0FBVyxJQUluQyxHQUFZLFVBQVI3USxHQUFtQyxhQUFoQndjLEVBQUl0YyxRQUF3QixDQUdqRHNjLEVBQUk4ckIsT0FBUzVrQixFQUViLElBQUk2a0IsRUFBUzd6QixFQUFRZ1AsR0FBTyxHQUFLemEsT0FBT3lhLEdBQ3BDOGtCLEdBQWtCaHNCLEVBQUsrckIsS0FDekIvckIsRUFBSTlYLE1BQVE2akMsUUFFVCxHQUFZLGNBQVJ2b0MsR0FBdUJtL0IsR0FBTTNpQixFQUFJdGMsVUFBWXdVLEVBQVE4SCxFQUFJaXNCLFdBQVksRUFFOUVOLEdBQWVBLElBQWdCN2lDLFNBQVN1SyxjQUFjLFFBQ3pDNDRCLFVBQVksUUFBVS9rQixFQUFNLFNBRXpDLElBREEsSUFBSXNiLEVBQU1tSixHQUFhajNCLFdBQ2hCc0wsRUFBSXRMLFlBQ1RzTCxFQUFJMUwsWUFBWTBMLEVBQUl0TCxZQUV0QixLQUFPOHRCLEVBQUk5dEIsWUFDVHNMLEVBQUl0TSxZQUFZOHVCLEVBQUk5dEIsaUJBRWpCLEdBS0x3UyxJQUFRMmtCLEVBQVNyb0MsR0FJakIsSUFDRXdjLEVBQUl4YyxHQUFPMGpCLEVBQ1gsTUFBT3hvQixPQVFmLFNBQVNzdEMsR0FBbUJoc0IsRUFBS2tzQixHQUMvQixPQUFTbHNCLEVBQUltc0IsWUFDSyxXQUFoQm5zQixFQUFJdGMsU0FNUixTQUErQnNjLEVBQUtrc0IsR0FHbEMsSUFBSUUsR0FBYSxFQUdqQixJQUFNQSxFQUFhdGpDLFNBQVN1akMsZ0JBQWtCcnNCLEVBQU8sTUFBT3RoQixJQUM1RCxPQUFPMHRDLEdBQWNwc0IsRUFBSTlYLFFBQVVna0MsRUFaakNJLENBQXFCdHNCLEVBQUtrc0IsSUFlOUIsU0FBK0Jsc0IsRUFBS3VELEdBQ2xDLElBQUlyYixFQUFROFgsRUFBSTlYLE1BQ1ptOUIsRUFBWXJsQixFQUFJdXNCLFlBQ3BCLEdBQUlwMEIsRUFBTWt0QixHQUFZLENBQ3BCLEdBQUlBLEVBQVUrRSxPQUNaLE9BQU92eEIsRUFBUzNRLEtBQVcyUSxFQUFTMEssR0FFdEMsR0FBSThoQixFQUFVMkMsS0FDWixPQUFPOS9CLEVBQU04L0IsU0FBV3prQixFQUFPeWtCLE9BR25DLE9BQU85L0IsSUFBVXFiLEVBekJmaXBCLENBQXFCeHNCLEVBQUtrc0IsSUE0QjlCLElBQUkvZCxHQUFXLENBQ2JsWSxPQUFRMjFCLEdBQ1IvMkIsT0FBUSsyQixJQUtOYSxHQUFpQnR6QixHQUFPLFNBQVVqRixHQUNwQyxJQUFJM1QsRUFBTSxHQUVObXNDLEVBQW9CLFFBT3hCLE9BTkF4NEIsRUFBUXRRLE1BRlksaUJBRVMvRSxTQUFRLFNBQVVpUixHQUM3QyxHQUFJQSxFQUFNLENBQ1IsSUFBSXFxQixFQUFNcnFCLEVBQUtsTSxNQUFNOG9DLEdBQ3JCdlMsRUFBSXg2QixPQUFTLElBQU1ZLEVBQUk0NUIsRUFBSSxHQUFHNk4sUUFBVTdOLEVBQUksR0FBRzZOLFlBRzVDem5DLEtBSVQsU0FBU29zQyxHQUFvQjlyQyxHQUMzQixJQUFJdVMsRUFBUXc1QixHQUFzQi9yQyxFQUFLdVMsT0FHdkMsT0FBT3ZTLEVBQUtnc0MsWUFDUjF5QixFQUFPdFosRUFBS2dzQyxZQUFhejVCLEdBQ3pCQSxFQUlOLFNBQVN3NUIsR0FBdUJFLEdBQzlCLE9BQUlodkMsTUFBTUMsUUFBUSt1QyxHQUNUeHlCLEVBQVN3eUIsR0FFVSxpQkFBakJBLEVBQ0ZMLEdBQWVLLEdBRWpCQSxFQXVDVCxJQXlCSUMsR0F6QkFDLEdBQVcsTUFDWEMsR0FBYyxpQkFDZEMsR0FBVSxTQUFVN3BDLEVBQUkxRixFQUFNNFAsR0FFaEMsR0FBSXkvQixHQUFTdCtCLEtBQUsvUSxHQUNoQjBGLEVBQUcrUCxNQUFNKzVCLFlBQVl4dkMsRUFBTTRQLFFBQ3RCLEdBQUkwL0IsR0FBWXYrQixLQUFLbkIsR0FDMUJsSyxFQUFHK1AsTUFBTSs1QixZQUFZeHpCLEVBQVVoYyxHQUFPNFAsRUFBSXhHLFFBQVFrbUMsR0FBYSxJQUFLLGlCQUMvRCxDQUNMLElBQUlHLEVBQWlCaGhDLEdBQVV6TyxHQUMvQixHQUFJRyxNQUFNQyxRQUFRd1AsR0FJaEIsSUFBSyxJQUFJOUwsRUFBSSxFQUFHb0IsRUFBTTBLLEVBQUk1TixPQUFROEIsRUFBSW9CLEVBQUtwQixJQUN6QzRCLEVBQUcrUCxNQUFNZzZCLEdBQWtCNy9CLEVBQUk5TCxRQUdqQzRCLEVBQUcrUCxNQUFNZzZCLEdBQWtCNy9CLElBSzdCOC9CLEdBQWMsQ0FBQyxTQUFVLE1BQU8sTUFHaENqaEMsR0FBWStNLEdBQU8sU0FBVXJCLEdBRy9CLEdBRkFpMUIsR0FBYUEsSUFBY2prQyxTQUFTdUssY0FBYyxPQUFPRCxNQUU1QyxZQURiMEUsRUFBT3dCLEVBQVN4QixLQUNVQSxLQUFRaTFCLEdBQ2hDLE9BQU9qMUIsRUFHVCxJQURBLElBQUl3MUIsRUFBVXgxQixFQUFLMkIsT0FBTyxHQUFHRixjQUFnQnpCLEVBQUtwWCxNQUFNLEdBQy9DZSxFQUFJLEVBQUdBLEVBQUk0ckMsR0FBWTF0QyxPQUFROEIsSUFBSyxDQUMzQyxJQUFJOUQsRUFBTzB2QyxHQUFZNXJDLEdBQUs2ckMsRUFDNUIsR0FBSTN2QyxLQUFRb3ZDLEdBQ1YsT0FBT3B2QyxNQUtiLFNBQVM0dkMsR0FBYXJiLEVBQVUxUSxHQUM5QixJQUFJM2dCLEVBQU8yZ0IsRUFBTTNnQixLQUNieWxDLEVBQVVwVSxFQUFTcnhCLEtBRXZCLEtBQUlxWCxFQUFRclgsRUFBS2dzQyxjQUFnQjMwQixFQUFRclgsRUFBS3VTLFFBQzVDOEUsRUFBUW91QixFQUFRdUcsY0FBZ0IzMEIsRUFBUW91QixFQUFRbHpCLFFBRGxELENBTUEsSUFBSThULEVBQUt2cEIsRUFDTDBGLEVBQUttZSxFQUFNeEIsSUFDWHd0QixFQUFpQmxILEVBQVF1RyxZQUN6QlksRUFBa0JuSCxFQUFRb0gsaUJBQW1CcEgsRUFBUWx6QixPQUFTLEdBRzlEdTZCLEVBQVdILEdBQWtCQyxFQUU3QnI2QixFQUFRdzVCLEdBQXNCcHJCLEVBQU0zZ0IsS0FBS3VTLFFBQVUsR0FLdkRvTyxFQUFNM2dCLEtBQUs2c0MsZ0JBQWtCdjFCLEVBQU0vRSxFQUFNMk8sUUFDckM1SCxFQUFPLEdBQUkvRyxHQUNYQSxFQUVKLElBQUl3NkIsRUFwR04sU0FBbUJwc0IsRUFBT3FzQixHQU10QixJQUxGLElBQ0lDLEVBREF2dEMsRUFBTSxHQUlKaW1DLEVBQVlobEIsRUFDVGdsQixFQUFVaG1CLG9CQUNmZ21CLEVBQVlBLEVBQVVobUIsa0JBQWtCbVMsU0FFekI2VCxFQUFVM2xDLE9BQ3RCaXRDLEVBQVluQixHQUFtQm5HLEVBQVUzbEMsUUFFMUNzWixFQUFPNVosRUFBS3V0QyxJQUtiQSxFQUFZbkIsR0FBbUJuckIsRUFBTTNnQixRQUN4Q3NaLEVBQU81WixFQUFLdXRDLEdBSWQsSUFEQSxJQUFJNXFDLEVBQWFzZSxFQUNUdGUsRUFBYUEsRUFBV3VkLFFBQzFCdmQsRUFBV3JDLE9BQVNpdEMsRUFBWW5CLEdBQW1CenBDLEVBQVdyQyxRQUNoRXNaLEVBQU81WixFQUFLdXRDLEdBR2hCLE9BQU92dEMsRUF5RVF3dEMsQ0FBU3ZzQixHQUV4QixJQUFLN2pCLEtBQVFnd0MsRUFDUHoxQixFQUFRMDFCLEVBQVNqd0MsS0FDbkJ1dkMsR0FBUTdwQyxFQUFJMUYsRUFBTSxJQUd0QixJQUFLQSxLQUFRaXdDLEdBQ1gxbUIsRUFBTTBtQixFQUFTandDLE1BQ0hnd0MsRUFBU2h3QyxJQUVuQnV2QyxHQUFRN3BDLEVBQUkxRixFQUFhLE1BQVB1cEIsRUFBYyxHQUFLQSxJQUszQyxJQUFJOVQsR0FBUSxDQUNWNkMsT0FBUXMzQixHQUNSMTRCLE9BQVEwNEIsSUFLTlMsR0FBZSxNQU1uQixTQUFTQyxHQUFVNXFDLEVBQUlrakMsR0FFckIsR0FBS0EsSUFBU0EsRUFBTUEsRUFBSXlCLFFBS3hCLEdBQUkza0MsRUFBRzZxQyxVQUNEM0gsRUFBSTUzQixRQUFRLE1BQVEsRUFDdEI0M0IsRUFBSTNpQyxNQUFNb3FDLElBQWNudkMsU0FBUSxTQUFVbUksR0FBSyxPQUFPM0QsRUFBRzZxQyxVQUFVMWpDLElBQUl4RCxNQUV2RTNELEVBQUc2cUMsVUFBVTFqQyxJQUFJKzdCLE9BRWQsQ0FDTCxJQUFJcmYsRUFBTSxLQUFPN2pCLEVBQUdTLGFBQWEsVUFBWSxJQUFNLElBQy9Db2pCLEVBQUl2WSxRQUFRLElBQU00M0IsRUFBTSxLQUFPLEdBQ2pDbGpDLEVBQUdtUSxhQUFhLFNBQVUwVCxFQUFNcWYsR0FBS3lCLFNBUzNDLFNBQVNtRyxHQUFhOXFDLEVBQUlrakMsR0FFeEIsR0FBS0EsSUFBU0EsRUFBTUEsRUFBSXlCLFFBS3hCLEdBQUkza0MsRUFBRzZxQyxVQUNEM0gsRUFBSTUzQixRQUFRLE1BQVEsRUFDdEI0M0IsRUFBSTNpQyxNQUFNb3FDLElBQWNudkMsU0FBUSxTQUFVbUksR0FBSyxPQUFPM0QsRUFBRzZxQyxVQUFVbDZCLE9BQU9oTixNQUUxRTNELEVBQUc2cUMsVUFBVWw2QixPQUFPdXlCLEdBRWpCbGpDLEVBQUc2cUMsVUFBVXZ1QyxRQUNoQjBELEVBQUdvUixnQkFBZ0IsYUFFaEIsQ0FHTCxJQUZBLElBQUl5UyxFQUFNLEtBQU83akIsRUFBR1MsYUFBYSxVQUFZLElBQU0sSUFDL0NzcUMsRUFBTSxJQUFNN0gsRUFBTSxJQUNmcmYsRUFBSXZZLFFBQVF5L0IsSUFBUSxHQUN6QmxuQixFQUFNQSxFQUFJbmdCLFFBQVFxbkMsRUFBSyxNQUV6QmxuQixFQUFNQSxFQUFJOGdCLFFBRVIza0MsRUFBR21RLGFBQWEsUUFBUzBULEdBRXpCN2pCLEVBQUdvUixnQkFBZ0IsVUFPekIsU0FBUzQ1QixHQUFtQmhwQixHQUMxQixHQUFLQSxFQUFMLENBSUEsR0FBc0IsaUJBQVhBLEVBQXFCLENBQzlCLElBQUk5a0IsRUFBTSxHQUtWLE9BSm1CLElBQWY4a0IsRUFBT3hTLEtBQ1RzSCxFQUFPNVosRUFBSyt0QyxHQUFrQmpwQixFQUFPMW5CLE1BQVEsTUFFL0N3YyxFQUFPNVosRUFBSzhrQixHQUNMOWtCLEVBQ0YsTUFBc0IsaUJBQVg4a0IsRUFDVGlwQixHQUFrQmpwQixRQURwQixHQUtULElBQUlpcEIsR0FBb0JuMUIsR0FBTyxTQUFVeGIsR0FDdkMsTUFBTyxDQUNMNHdDLFdBQWE1d0MsRUFBTyxTQUNwQjZ3QyxhQUFlN3dDLEVBQU8sWUFDdEI4d0MsaUJBQW1COXdDLEVBQU8sZ0JBQzFCK3dDLFdBQWEvd0MsRUFBTyxTQUNwQmd4QyxhQUFlaHhDLEVBQU8sWUFDdEJpeEMsaUJBQW1CanhDLEVBQU8sb0JBSTFCa3hDLEdBQWdCMXhCLElBQWNTLEVBQzlCa3hCLEdBQWEsYUFDYkMsR0FBWSxZQUdaQyxHQUFpQixhQUNqQkMsR0FBcUIsZ0JBQ3JCQyxHQUFnQixZQUNoQkMsR0FBb0IsZUFDcEJOLFVBRTZCei9CLElBQTNCaEosT0FBT2dwQyxzQkFDd0JoZ0MsSUFBakNoSixPQUFPaXBDLHdCQUVQTCxHQUFpQixtQkFDakJDLEdBQXFCLDRCQUVPNy9CLElBQTFCaEosT0FBT2twQyxxQkFDdUJsZ0MsSUFBaENoSixPQUFPbXBDLHVCQUVQTCxHQUFnQixrQkFDaEJDLEdBQW9CLHVCQUt4QixJQUFJSyxHQUFNcnlCLEVBQ04vVyxPQUFPcXBDLHNCQUNMcnBDLE9BQU9xcEMsc0JBQXNCdndDLEtBQUtrSCxRQUNsQzhoQixXQUN5QixTQUFVbGEsR0FBTSxPQUFPQSxLQUV0RCxTQUFTMGhDLEdBQVcxaEMsR0FDbEJ3aEMsSUFBSSxXQUNGQSxHQUFJeGhDLE1BSVIsU0FBUzJoQyxHQUFvQnRzQyxFQUFJa2pDLEdBQy9CLElBQUlxSixFQUFvQnZzQyxFQUFHdWpDLHFCQUF1QnZqQyxFQUFHdWpDLG1CQUFxQixJQUN0RWdKLEVBQWtCamhDLFFBQVE0M0IsR0FBTyxJQUNuQ3FKLEVBQWtCM3NDLEtBQUtzakMsR0FDdkIwSCxHQUFTNXFDLEVBQUlrakMsSUFJakIsU0FBU3NKLEdBQXVCeHNDLEVBQUlrakMsR0FDOUJsakMsRUFBR3VqQyxvQkFDTDV5QixFQUFPM1EsRUFBR3VqQyxtQkFBb0JMLEdBRWhDNEgsR0FBWTlxQyxFQUFJa2pDLEdBR2xCLFNBQVN1SixHQUNQenNDLEVBQ0Ewc0MsRUFDQXJuQixHQUVBLElBQUkyVyxFQUFNMlEsR0FBa0Izc0MsRUFBSTBzQyxHQUM1QjluQyxFQUFPbzNCLEVBQUlwM0IsS0FDWG90QixFQUFVZ0ssRUFBSWhLLFFBQ2Q0YSxFQUFZNVEsRUFBSTRRLFVBQ3BCLElBQUtob0MsRUFBUSxPQUFPeWdCLElBQ3BCLElBQUk1Z0IsRUFBUUcsSUFBUzZtQyxHQUFhRyxHQUFxQkUsR0FDbkRlLEVBQVEsRUFDUmhHLEVBQU0sV0FDUjdtQyxFQUFHK2lDLG9CQUFvQnQrQixFQUFPcW9DLEdBQzlCem5CLEtBRUV5bkIsRUFBUSxTQUFVenhDLEdBQ2hCQSxFQUFFa04sU0FBV3ZJLEtBQ1Q2c0MsR0FBU0QsR0FDYi9GLEtBSU5oaUIsWUFBVyxXQUNMZ29CLEVBQVFELEdBQ1YvRixNQUVEN1UsRUFBVSxHQUNiaHlCLEVBQUcrYSxpQkFBaUJ0VyxFQUFPcW9DLEdBRzdCLElBQUlDLEdBQWMseUJBRWxCLFNBQVNKLEdBQW1CM3NDLEVBQUkwc0MsR0FDOUIsSUFTSTluQyxFQVRBb29DLEVBQVNqcUMsT0FBT2txQyxpQkFBaUJqdEMsR0FFakNrdEMsR0FBb0JGLEVBQU9yQixHQUFpQixVQUFZLElBQUlwckMsTUFBTSxNQUNsRTRzQyxHQUF1QkgsRUFBT3JCLEdBQWlCLGFBQWUsSUFBSXByQyxNQUFNLE1BQ3hFNnNDLEVBQW9CQyxHQUFXSCxFQUFrQkMsR0FDakRHLEdBQW1CTixFQUFPbkIsR0FBZ0IsVUFBWSxJQUFJdHJDLE1BQU0sTUFDaEVndEMsR0FBc0JQLEVBQU9uQixHQUFnQixhQUFlLElBQUl0ckMsTUFBTSxNQUN0RWl0QyxFQUFtQkgsR0FBV0MsRUFBaUJDLEdBRy9DdmIsRUFBVSxFQUNWNGEsRUFBWSxFQThCaEIsT0E1QklGLElBQWlCakIsR0FDZjJCLEVBQW9CLElBQ3RCeG9DLEVBQU82bUMsR0FDUHpaLEVBQVVvYixFQUNWUixFQUFZTyxFQUFvQjd3QyxRQUV6Qm93QyxJQUFpQmhCLEdBQ3RCOEIsRUFBbUIsSUFDckI1b0MsRUFBTzhtQyxHQUNQMVosRUFBVXdiLEVBQ1ZaLEVBQVlXLEVBQW1CanhDLFFBU2pDc3dDLEdBTEFob0MsR0FEQW90QixFQUFVbnVCLEtBQUtpSCxJQUFJc2lDLEVBQW1CSSxJQUNyQixFQUNiSixFQUFvQkksRUFDbEIvQixHQUNBQyxHQUNGLE1BRUE5bUMsSUFBUzZtQyxHQUNQMEIsRUFBb0I3d0MsT0FDcEJpeEMsRUFBbUJqeEMsT0FDckIsRUFLQyxDQUNMc0ksS0FBTUEsRUFDTm90QixRQUFTQSxFQUNUNGEsVUFBV0EsRUFDWGEsYUFOQTdvQyxJQUFTNm1DLElBQ1RzQixHQUFZMWhDLEtBQUsyaEMsRUFBT3JCLEdBQWlCLGNBUzdDLFNBQVMwQixHQUFZSyxFQUFRQyxHQUUzQixLQUFPRCxFQUFPcHhDLE9BQVNxeEMsRUFBVXJ4QyxRQUMvQm94QyxFQUFTQSxFQUFPL2dDLE9BQU8rZ0MsR0FHekIsT0FBTzdwQyxLQUFLaUgsSUFBSTlOLE1BQU0sS0FBTTJ3QyxFQUFVenZDLEtBQUksU0FBVW1VLEVBQUdqVSxHQUNyRCxPQUFPd3ZDLEdBQUt2N0IsR0FBS3U3QixHQUFLRixFQUFPdHZDLFFBUWpDLFNBQVN3dkMsR0FBTTU2QixHQUNiLE9BQWtELElBQTNDdXBCLE9BQU92cEIsRUFBRTNWLE1BQU0sR0FBSSxHQUFHcUcsUUFBUSxJQUFLLE1BSzVDLFNBQVNtcUMsR0FBTzF2QixFQUFPMnZCLEdBQ3JCLElBQUk5dEMsRUFBS21lLEVBQU14QixJQUdYN0gsRUFBTTlVLEVBQUcrdEMsWUFDWC90QyxFQUFHK3RDLFNBQVNDLFdBQVksRUFDeEJodUMsRUFBRyt0QyxZQUdMLElBQUl2d0MsRUFBT3d0QyxHQUFrQjdzQixFQUFNM2dCLEtBQUt5d0MsWUFDeEMsSUFBSXA1QixFQUFRclgsS0FLUnNYLEVBQU05VSxFQUFHa3VDLFdBQTZCLElBQWhCbHVDLEVBQUdtdUMsU0FBN0IsQ0E0QkEsSUF4QkEsSUFBSTMrQixFQUFNaFMsRUFBS2dTLElBQ1g1SyxFQUFPcEgsRUFBS29ILEtBQ1pzbUMsRUFBYTF0QyxFQUFLMHRDLFdBQ2xCQyxFQUFlM3RDLEVBQUsydEMsYUFDcEJDLEVBQW1CNXRDLEVBQUs0dEMsaUJBQ3hCZ0QsRUFBYzV3QyxFQUFLNHdDLFlBQ25CQyxFQUFnQjd3QyxFQUFLNndDLGNBQ3JCQyxFQUFvQjl3QyxFQUFLOHdDLGtCQUN6QkMsRUFBYy93QyxFQUFLK3dDLFlBQ25CVixFQUFRcndDLEVBQUtxd0MsTUFDYlcsRUFBYWh4QyxFQUFLZ3hDLFdBQ2xCQyxFQUFpQmp4QyxFQUFLaXhDLGVBQ3RCQyxFQUFlbHhDLEVBQUtreEMsYUFDcEJDLEVBQVNueEMsRUFBS214QyxPQUNkQyxFQUFjcHhDLEVBQUtveEMsWUFDbkJDLEVBQWtCcnhDLEVBQUtxeEMsZ0JBQ3ZCQyxFQUFXdHhDLEVBQUtzeEMsU0FNaEJseUIsRUFBVStSLEdBQ1ZvZ0IsRUFBaUJwZ0IsR0FBZVUsT0FDN0IwZixHQUFrQkEsRUFBZTN4QixRQUN0Q1IsRUFBVW15QixFQUFlbnlCLFFBQ3pCbXlCLEVBQWlCQSxFQUFlM3hCLE9BR2xDLElBQUk0eEIsR0FBWXB5QixFQUFRb1QsYUFBZTdSLEVBQU1aLGFBRTdDLElBQUl5eEIsR0FBYUwsR0FBcUIsS0FBWEEsRUFBM0IsQ0FJQSxJQUFJTSxFQUFhRCxHQUFZWixFQUN6QkEsRUFDQWxELEVBQ0FnRSxFQUFjRixHQUFZVixFQUMxQkEsRUFDQWxELEVBQ0ErRCxFQUFVSCxHQUFZWCxFQUN0QkEsRUFDQWxELEVBRUFpRSxFQUFrQkosR0FDakJOLEdBQ0RILEVBQ0FjLEVBQVlMLEdBQ08sbUJBQVhMLEVBQXdCQSxFQUNoQ2QsRUFDQXlCLEVBQWlCTixHQUNoQkosR0FDREosRUFDQWUsRUFBcUJQLEdBQ3BCSCxHQUNESixFQUVBZSxFQUF3Qmg2QixFQUMxQlIsRUFBUzg1QixHQUNMQSxFQUFTakIsTUFDVGlCLEdBT0ZXLEdBQXFCLElBQVJqZ0MsSUFBa0IrSyxFQUMvQm0xQixFQUFtQkMsR0FBdUJOLEdBRTFDaHFCLEVBQUtybEIsRUFBR2t1QyxTQUFXbjJCLEdBQUssV0FDdEIwM0IsSUFDRmpELEdBQXNCeHNDLEVBQUltdkMsR0FDMUIzQyxHQUFzQnhzQyxFQUFJa3ZDLElBRXhCN3BCLEVBQUcyb0IsV0FDRHlCLEdBQ0ZqRCxHQUFzQnhzQyxFQUFJaXZDLEdBRTVCTSxHQUFzQkEsRUFBbUJ2dkMsSUFFekNzdkMsR0FBa0JBLEVBQWV0dkMsR0FFbkNBLEVBQUdrdUMsU0FBVyxRQUdYL3ZCLEVBQU0zZ0IsS0FBS295QyxNQUVkL29CLEdBQWUxSSxFQUFPLFVBQVUsV0FDOUIsSUFBSWYsRUFBU3BkLEVBQUdILFdBQ1pnd0MsRUFBY3p5QixHQUFVQSxFQUFPMHlCLFVBQVkxeUIsRUFBTzB5QixTQUFTM3hCLEVBQU1oZSxLQUNqRTB2QyxHQUNGQSxFQUFZbnpCLE1BQVF5QixFQUFNekIsS0FDMUJtekIsRUFBWWx6QixJQUFJb3hCLFVBRWhCOEIsRUFBWWx6QixJQUFJb3hCLFdBRWxCc0IsR0FBYUEsRUFBVXJ2QyxFQUFJcWxCLE1BSy9CK3BCLEdBQW1CQSxFQUFnQnB2QyxHQUMvQnl2QyxJQUNGbkQsR0FBbUJ0c0MsRUFBSWl2QyxHQUN2QjNDLEdBQW1CdHNDLEVBQUlrdkMsR0FDdkI3QyxJQUFVLFdBQ1JHLEdBQXNCeHNDLEVBQUlpdkMsR0FDckI1cEIsRUFBRzJvQixZQUNOMUIsR0FBbUJ0c0MsRUFBSW12QyxHQUNsQk8sSUFDQ0ssR0FBZ0JQLEdBQ2xCM3FCLFdBQVdRLEVBQUltcUIsR0FFZi9DLEdBQW1CenNDLEVBQUk0RSxFQUFNeWdCLFNBT25DbEgsRUFBTTNnQixLQUFLb3lDLE9BQ2I5QixHQUFpQkEsSUFDakJ1QixHQUFhQSxFQUFVcnZDLEVBQUlxbEIsSUFHeEJvcUIsR0FBZUMsR0FDbEJycUIsTUFJSixTQUFTMnFCLEdBQU83eEIsRUFBTzh4QixHQUNyQixJQUFJandDLEVBQUttZSxFQUFNeEIsSUFHWDdILEVBQU05VSxFQUFHa3VDLFlBQ1hsdUMsRUFBR2t1QyxTQUFTRixXQUFZLEVBQ3hCaHVDLEVBQUdrdUMsWUFHTCxJQUFJMXdDLEVBQU93dEMsR0FBa0I3c0IsRUFBTTNnQixLQUFLeXdDLFlBQ3hDLEdBQUlwNUIsRUFBUXJYLElBQXlCLElBQWhCd0MsRUFBR211QyxTQUN0QixPQUFPOEIsSUFJVCxJQUFJbjdCLEVBQU05VSxFQUFHK3RDLFVBQWIsQ0FJQSxJQUFJditCLEVBQU1oUyxFQUFLZ1MsSUFDWDVLLEVBQU9wSCxFQUFLb0gsS0FDWnltQyxFQUFhN3RDLEVBQUs2dEMsV0FDbEJDLEVBQWU5dEMsRUFBSzh0QyxhQUNwQkMsRUFBbUIvdEMsRUFBSyt0QyxpQkFDeEIyRSxFQUFjMXlDLEVBQUsweUMsWUFDbkJGLEVBQVF4eUMsRUFBS3d5QyxNQUNiRyxFQUFhM3lDLEVBQUsyeUMsV0FDbEJDLEVBQWlCNXlDLEVBQUs0eUMsZUFDdEJDLEVBQWE3eUMsRUFBSzZ5QyxXQUNsQnZCLEVBQVd0eEMsRUFBS3N4QyxTQUVoQlcsR0FBcUIsSUFBUmpnQyxJQUFrQitLLEVBQy9CbTFCLEVBQW1CQyxHQUF1QkssR0FFMUNNLEVBQXdCOTZCLEVBQzFCUixFQUFTODVCLEdBQ0xBLEVBQVNrQixNQUNUbEIsR0FPRnpwQixFQUFLcmxCLEVBQUcrdEMsU0FBV2gyQixHQUFLLFdBQ3RCL1gsRUFBR0gsWUFBY0csRUFBR0gsV0FBV2l3QyxXQUNqQzl2QyxFQUFHSCxXQUFXaXdDLFNBQVMzeEIsRUFBTWhlLEtBQU8sTUFFbENzdkMsSUFDRmpELEdBQXNCeHNDLEVBQUlzckMsR0FDMUJrQixHQUFzQnhzQyxFQUFJdXJDLElBRXhCbG1CLEVBQUcyb0IsV0FDRHlCLEdBQ0ZqRCxHQUFzQnhzQyxFQUFJcXJDLEdBRTVCK0UsR0FBa0JBLEVBQWVwd0MsS0FFakNpd0MsSUFDQUUsR0FBY0EsRUFBV253QyxJQUUzQkEsRUFBRyt0QyxTQUFXLFFBR1pzQyxFQUNGQSxFQUFXRSxHQUVYQSxJQUdGLFNBQVNBLElBRUhsckIsRUFBRzJvQixhQUlGN3ZCLEVBQU0zZ0IsS0FBS295QyxNQUFRNXZDLEVBQUdILGNBQ3hCRyxFQUFHSCxXQUFXaXdDLFdBQWE5dkMsRUFBR0gsV0FBV2l3QyxTQUFXLEtBQU0zeEIsRUFBUyxLQUFLQSxHQUUzRSt4QixHQUFlQSxFQUFZbHdDLEdBQ3ZCeXZDLElBQ0ZuRCxHQUFtQnRzQyxFQUFJcXJDLEdBQ3ZCaUIsR0FBbUJ0c0MsRUFBSXVyQyxHQUN2QmMsSUFBVSxXQUNSRyxHQUFzQnhzQyxFQUFJcXJDLEdBQ3JCaG1CLEVBQUcyb0IsWUFDTjFCLEdBQW1CdHNDLEVBQUlzckMsR0FDbEJvRSxJQUNDSyxHQUFnQk8sR0FDbEJ6ckIsV0FBV1EsRUFBSWlyQixHQUVmN0QsR0FBbUJ6c0MsRUFBSTRFLEVBQU15Z0IsU0FNdkMycUIsR0FBU0EsRUFBTWh3QyxFQUFJcWxCLEdBQ2RvcUIsR0FBZUMsR0FDbEJycUIsTUFzQk4sU0FBUzBxQixHQUFpQjdsQyxHQUN4QixNQUFzQixpQkFBUkEsSUFBcUJoRSxNQUFNZ0UsR0FTM0MsU0FBU3lsQyxHQUF3QmhsQyxHQUMvQixHQUFJa0ssRUFBUWxLLEdBQ1YsT0FBTyxFQUVULElBQUk2bEMsRUFBYTdsQyxFQUFHd2IsSUFDcEIsT0FBSXJSLEVBQU0wN0IsR0FFRGIsR0FDTGwxQyxNQUFNQyxRQUFRODFDLEdBQ1ZBLEVBQVcsR0FDWEEsSUFHRTdsQyxFQUFHK0wsU0FBVy9MLEVBQUdyTyxRQUFVLEVBSXZDLFNBQVNtMEMsR0FBUXoxQyxFQUFHbWpCLElBQ00sSUFBcEJBLEVBQU0zZ0IsS0FBS295QyxNQUNiL0IsR0FBTTF2QixHQUlWLElBNEJJdXlCLEdBOWlGSixTQUE4QkMsR0FDNUIsSUFBSXZ5QyxFQUFHbzJCLEVBQ0g0RyxFQUFNLEdBRU54dUIsRUFBVStqQyxFQUFRL2pDLFFBQ2xCNnlCLEVBQVVrUixFQUFRbFIsUUFFdEIsSUFBS3JoQyxFQUFJLEVBQUdBLEVBQUk0aUIsR0FBTTFrQixTQUFVOEIsRUFFOUIsSUFEQWc5QixFQUFJcGEsR0FBTTVpQixJQUFNLEdBQ1hvMkIsRUFBSSxFQUFHQSxFQUFJNW5CLEVBQVF0USxTQUFVazRCLEVBQzVCMWYsRUFBTWxJLEVBQVE0bkIsR0FBR3hULEdBQU01aUIsTUFDekJnOUIsRUFBSXBhLEdBQU01aUIsSUFBSXdCLEtBQUtnTixFQUFRNG5CLEdBQUd4VCxHQUFNNWlCLEtBbUIxQyxTQUFTd3lDLEVBQVk1d0MsR0FDbkIsSUFBSW9kLEVBQVNxaUIsRUFBUTUvQixXQUFXRyxHQUU1QjhVLEVBQU1zSSxJQUNScWlCLEVBQVF4dUIsWUFBWW1NLEVBQVFwZCxHQXNCaEMsU0FBUzZ3QyxFQUNQMXlCLEVBQ0EyeUIsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQTNoQyxHQVlBLEdBVkl1RixFQUFNcUosRUFBTXhCLE1BQVE3SCxFQUFNbzhCLEtBTTVCL3lCLEVBQVEreUIsRUFBVzNoQyxHQUFTMk8sR0FBV0MsSUFHekNBLEVBQU1aLGNBQWdCMHpCLEdBaUR4QixTQUEwQjl5QixFQUFPMnlCLEVBQW9CQyxFQUFXQyxHQUM5RCxJQUFJNXlDLEVBQUkrZixFQUFNM2dCLEtBQ2QsR0FBSXNYLEVBQU0xVyxHQUFJLENBQ1osSUFBSSt5QyxFQUFnQnI4QixFQUFNcUosRUFBTWhCLG9CQUFzQi9lLEVBQUVnd0IsVUFReEQsR0FQSXRaLEVBQU0xVyxFQUFJQSxFQUFFK2lCLE9BQVNyTSxFQUFNMVcsRUFBSUEsRUFBRTZ2QixPQUNuQzd2QixFQUFFK2YsR0FBTyxHQU1QckosRUFBTXFKLEVBQU1oQixtQkFNZCxPQUxBaTBCLEVBQWNqekIsRUFBTzJ5QixHQUNyQjFnQyxFQUFPMmdDLEVBQVc1eUIsRUFBTXhCLElBQUtxMEIsR0FDekJqOEIsRUFBT284QixJQTBCakIsU0FBOEJoekIsRUFBTzJ5QixFQUFvQkMsRUFBV0MsR0FPbEUsSUFOQSxJQUFJNXlDLEVBS0FpekMsRUFBWWx6QixFQUNUa3pCLEVBQVVsMEIsbUJBRWYsR0FBSXJJLEVBQU0xVyxHQURWaXpDLEVBQVlBLEVBQVVsMEIsa0JBQWtCbVMsUUFDaEI5eEIsT0FBU3NYLEVBQU0xVyxFQUFJQSxFQUFFNnZDLFlBQWEsQ0FDeEQsSUFBSzd2QyxFQUFJLEVBQUdBLEVBQUlnOUIsRUFBSWtXLFNBQVNoMUMsU0FBVThCLEVBQ3JDZzlCLEVBQUlrVyxTQUFTbHpDLEdBQUdvaUMsR0FBVzZRLEdBRTdCUCxFQUFtQmx4QyxLQUFLeXhDLEdBQ3hCLE1BS0pqaEMsRUFBTzJnQyxFQUFXNXlCLEVBQU14QixJQUFLcTBCLEdBNUN2Qk8sQ0FBb0JwekIsRUFBTzJ5QixFQUFvQkMsRUFBV0MsSUFFckQsR0FqRVB2Z0IsQ0FBZ0J0UyxFQUFPMnlCLEVBQW9CQyxFQUFXQyxHQUExRCxDQUlBLElBQUl4ekMsRUFBTzJnQixFQUFNM2dCLEtBQ2IrVyxFQUFXNEosRUFBTTVKLFNBQ2pCbUksRUFBTXlCLEVBQU16QixJQUNaNUgsRUFBTTRILElBZVJ5QixFQUFNeEIsSUFBTXdCLEVBQU1wQixHQUNkMGlCLEVBQVFFLGdCQUFnQnhoQixFQUFNcEIsR0FBSUwsR0FDbEMraUIsRUFBUXp2QixjQUFjME0sRUFBS3lCLEdBQy9CcXpCLEVBQVNyekIsR0FJUHN6QixFQUFldHpCLEVBQU81SixFQUFVdThCLEdBQzVCaDhCLEVBQU10WCxJQUNSazBDLEVBQWtCdnpCLEVBQU8yeUIsR0FFM0IxZ0MsRUFBTzJnQyxFQUFXNXlCLEVBQU14QixJQUFLcTBCLElBTXRCajhCLEVBQU9vSixFQUFNWCxZQUN0QlcsRUFBTXhCLElBQU04aUIsRUFBUUcsY0FBY3poQixFQUFNamYsTUFDeENrUixFQUFPMmdDLEVBQVc1eUIsRUFBTXhCLElBQUtxMEIsS0FFN0I3eUIsRUFBTXhCLElBQU04aUIsRUFBUTF1QixlQUFlb04sRUFBTWpmLE1BQ3pDa1IsRUFBTzJnQyxFQUFXNXlCLEVBQU14QixJQUFLcTBCLEtBMEJqQyxTQUFTSSxFQUFlanpCLEVBQU8yeUIsR0FDekJoOEIsRUFBTXFKLEVBQU0zZ0IsS0FBS20wQyxpQkFDbkJiLEVBQW1CbHhDLEtBQUs1QyxNQUFNOHpDLEVBQW9CM3lCLEVBQU0zZ0IsS0FBS20wQyxlQUM3RHh6QixFQUFNM2dCLEtBQUttMEMsY0FBZ0IsTUFFN0J4ekIsRUFBTXhCLElBQU13QixFQUFNaEIsa0JBQWtCcWUsSUFDaENvVyxFQUFZenpCLElBQ2R1ekIsRUFBa0J2ekIsRUFBTzJ5QixHQUN6QlUsRUFBU3J6QixLQUlUaWlCLEdBQVlqaUIsR0FFWjJ5QixFQUFtQmx4QyxLQUFLdWUsSUEwQjVCLFNBQVMvTixFQUFRZ04sRUFBUVQsRUFBS2sxQixHQUN4Qi84QixFQUFNc0ksS0FDSnRJLEVBQU0rOEIsR0FDSnBTLEVBQVE1L0IsV0FBV2d5QyxLQUFZejBCLEdBQ2pDcWlCLEVBQVF2dUIsYUFBYWtNLEVBQVFULEVBQUtrMUIsR0FHcENwUyxFQUFRcHZCLFlBQVkrTSxFQUFRVCxJQUtsQyxTQUFTODBCLEVBQWdCdHpCLEVBQU81SixFQUFVdThCLEdBQ3hDLEdBQUlyMkMsTUFBTUMsUUFBUTZaLEdBSWhCLElBQUssSUFBSW5XLEVBQUksRUFBR0EsRUFBSW1XLEVBQVNqWSxTQUFVOEIsRUFDckN5eUMsRUFBVXQ4QixFQUFTblcsR0FBSTB5QyxFQUFvQjN5QixFQUFNeEIsSUFBSyxNQUFNLEVBQU1wSSxFQUFVblcsUUFFckVnRCxFQUFZK2MsRUFBTWpmLE9BQzNCdWdDLEVBQVFwdkIsWUFBWThOLEVBQU14QixJQUFLOGlCLEVBQVExdUIsZUFBZTNILE9BQU8rVSxFQUFNamYsUUFJdkUsU0FBUzB5QyxFQUFhenpCLEdBQ3BCLEtBQU9BLEVBQU1oQixtQkFDWGdCLEVBQVFBLEVBQU1oQixrQkFBa0JtUyxPQUVsQyxPQUFPeGEsRUFBTXFKLEVBQU16QixLQUdyQixTQUFTZzFCLEVBQW1CdnpCLEVBQU8yeUIsR0FDakMsSUFBSyxJQUFJM1YsRUFBTSxFQUFHQSxFQUFNQyxFQUFJeG9CLE9BQU90VyxTQUFVNitCLEVBQzNDQyxFQUFJeG9CLE9BQU91b0IsR0FBS3FGLEdBQVdyaUIsR0FHekJySixFQURKMVcsRUFBSStmLEVBQU0zZ0IsS0FBSzJqQixRQUVUck0sRUFBTTFXLEVBQUV3VSxTQUFXeFUsRUFBRXdVLE9BQU80dEIsR0FBV3JpQixHQUN2Q3JKLEVBQU0xVyxFQUFFZ1MsU0FBVzBnQyxFQUFtQmx4QyxLQUFLdWUsSUFPbkQsU0FBU3F6QixFQUFVcnpCLEdBQ2pCLElBQUkvZixFQUNKLEdBQUkwVyxFQUFNMVcsRUFBSStmLEVBQU1qQixXQUNsQnVpQixFQUFRUyxjQUFjL2hCLEVBQU14QixJQUFLdmUsUUFHakMsSUFEQSxJQUFJMHpDLEVBQVczekIsRUFDUjJ6QixHQUNEaDlCLEVBQU0xVyxFQUFJMHpDLEVBQVNsMUIsVUFBWTlILEVBQU0xVyxFQUFJQSxFQUFFZ2xCLFNBQVN1SyxXQUN0RDhSLEVBQVFTLGNBQWMvaEIsRUFBTXhCLElBQUt2ZSxHQUVuQzB6QyxFQUFXQSxFQUFTMTBCLE9BSXBCdEksRUFBTTFXLEVBQUl1d0IsS0FDWnZ3QixJQUFNK2YsRUFBTXZCLFNBQ1p4ZSxJQUFNK2YsRUFBTW5CLFdBQ1psSSxFQUFNMVcsRUFBSUEsRUFBRWdsQixTQUFTdUssV0FFckI4UixFQUFRUyxjQUFjL2hCLEVBQU14QixJQUFLdmUsR0FJckMsU0FBUzJ6QyxFQUFXaEIsRUFBV0MsRUFBUXhlLEVBQVF3ZixFQUFValIsRUFBUStQLEdBQy9ELEtBQU9rQixHQUFZalIsSUFBVWlSLEVBQzNCbkIsRUFBVXJlLEVBQU93ZixHQUFXbEIsRUFBb0JDLEVBQVdDLEdBQVEsRUFBT3hlLEVBQVF3ZixHQUl0RixTQUFTQyxFQUFtQjl6QixHQUMxQixJQUFJL2YsRUFBR28yQixFQUNIaDNCLEVBQU8yZ0IsRUFBTTNnQixLQUNqQixHQUFJc1gsRUFBTXRYLEdBRVIsSUFESXNYLEVBQU0xVyxFQUFJWixFQUFLMmpCLE9BQVNyTSxFQUFNMVcsRUFBSUEsRUFBRWl5QixVQUFZanlCLEVBQUUrZixHQUNqRC9mLEVBQUksRUFBR0EsRUFBSWc5QixFQUFJL0ssUUFBUS96QixTQUFVOEIsRUFBS2c5QixFQUFJL0ssUUFBUWp5QixHQUFHK2YsR0FFNUQsR0FBSXJKLEVBQU0xVyxFQUFJK2YsRUFBTTVKLFVBQ2xCLElBQUtpZ0IsRUFBSSxFQUFHQSxFQUFJclcsRUFBTTVKLFNBQVNqWSxTQUFVazRCLEVBQ3ZDeWQsRUFBa0I5ekIsRUFBTTVKLFNBQVNpZ0IsSUFLdkMsU0FBUzBkLEVBQWMxZixFQUFRd2YsRUFBVWpSLEdBQ3ZDLEtBQU9pUixHQUFZalIsSUFBVWlSLEVBQVUsQ0FDckMsSUFBSUcsRUFBSzNmLEVBQU93ZixHQUNabDlCLEVBQU1xOUIsS0FDSnI5QixFQUFNcTlCLEVBQUd6MUIsTUFDWDAxQixFQUEwQkQsR0FDMUJGLEVBQWtCRSxJQUVsQnZCLEVBQVd1QixFQUFHeDFCLE9BTXRCLFNBQVN5MUIsRUFBMkJqMEIsRUFBTzh4QixHQUN6QyxHQUFJbjdCLEVBQU1tN0IsSUFBT243QixFQUFNcUosRUFBTTNnQixNQUFPLENBQ2xDLElBQUlZLEVBQ0FvdkIsRUFBWTROLEVBQUl6cUIsT0FBT3JVLE9BQVMsRUFhcEMsSUFaSXdZLEVBQU1tN0IsR0FHUkEsRUFBR3ppQixXQUFhQSxFQUdoQnlpQixFQXRSTixTQUFxQm9DLEVBQVU3a0IsR0FDN0IsU0FBUy9HLElBQ3VCLEtBQXhCQSxFQUFVK0csV0FDZG9qQixFQUFXeUIsR0FJZixPQURBNXJCLEVBQVUrRyxVQUFZQSxFQUNmL0csRUErUUU2ckIsQ0FBV24wQixFQUFNeEIsSUFBSzZRLEdBR3pCMVksRUFBTTFXLEVBQUkrZixFQUFNaEIsb0JBQXNCckksRUFBTTFXLEVBQUlBLEVBQUVreEIsU0FBV3hhLEVBQU0xVyxFQUFFWixPQUN2RTQwQyxFQUEwQmgwQyxFQUFHNnhDLEdBRTFCN3hDLEVBQUksRUFBR0EsRUFBSWc5QixFQUFJenFCLE9BQU9yVSxTQUFVOEIsRUFDbkNnOUIsRUFBSXpxQixPQUFPdlMsR0FBRytmLEVBQU84eEIsR0FFbkJuN0IsRUFBTTFXLEVBQUkrZixFQUFNM2dCLEtBQUsyakIsT0FBU3JNLEVBQU0xVyxFQUFJQSxFQUFFdVMsUUFDNUN2UyxFQUFFK2YsRUFBTzh4QixHQUVUQSxTQUdGVyxFQUFXenlCLEVBQU14QixLQThGckIsU0FBUzQxQixFQUFjdjBCLEVBQU13MEIsRUFBTzU3QixFQUFPaXdCLEdBQ3pDLElBQUssSUFBSXpvQyxFQUFJd1ksRUFBT3hZLEVBQUl5b0MsRUFBS3pvQyxJQUFLLENBQ2hDLElBQUl1RixFQUFJNnVDLEVBQU1wMEMsR0FDZCxHQUFJMFcsRUFBTW5SLElBQU04OEIsR0FBVXppQixFQUFNcmEsR0FBTSxPQUFPdkYsR0FJakQsU0FBU3EwQyxFQUNQNWpCLEVBQ0ExUSxFQUNBMnlCLEVBQ0FJLEVBQ0EzaEMsRUFDQW1qQyxHQUVBLEdBQUk3akIsSUFBYTFRLEVBQWpCLENBSUlySixFQUFNcUosRUFBTXhCLE1BQVE3SCxFQUFNbzhCLEtBRTVCL3lCLEVBQVEreUIsRUFBVzNoQyxHQUFTMk8sR0FBV0MsSUFHekMsSUFBSXhCLEVBQU13QixFQUFNeEIsSUFBTWtTLEVBQVNsUyxJQUUvQixHQUFJNUgsRUFBTzhaLEVBQVNqUixvQkFDZDlJLEVBQU1xSixFQUFNckIsYUFBYWdVLFVBQzNCNmhCLEVBQVE5akIsRUFBU2xTLElBQUt3QixFQUFPMnlCLEdBRTdCM3lCLEVBQU1QLG9CQUFxQixPQVMvQixHQUFJN0ksRUFBT29KLEVBQU1iLFdBQ2Z2SSxFQUFPOFosRUFBU3ZSLFdBQ2hCYSxFQUFNaGUsTUFBUTB1QixFQUFTMXVCLE1BQ3RCNFUsRUFBT29KLEVBQU1WLFdBQWExSSxFQUFPb0osRUFBTVQsU0FFeENTLEVBQU1oQixrQkFBb0IwUixFQUFTMVIsc0JBTHJDLENBU0EsSUFBSS9lLEVBQ0FaLEVBQU8yZ0IsRUFBTTNnQixLQUNic1gsRUFBTXRYLElBQVNzWCxFQUFNMVcsRUFBSVosRUFBSzJqQixPQUFTck0sRUFBTTFXLEVBQUlBLEVBQUVrd0IsV0FDckRsd0IsRUFBRXl3QixFQUFVMVEsR0FHZCxJQUFJcTBCLEVBQVEzakIsRUFBU3RhLFNBQ2pCNDlCLEVBQUtoMEIsRUFBTTVKLFNBQ2YsR0FBSU8sRUFBTXRYLElBQVNvMEMsRUFBWXp6QixHQUFRLENBQ3JDLElBQUsvZixFQUFJLEVBQUdBLEVBQUlnOUIsRUFBSTVwQixPQUFPbFYsU0FBVThCLEVBQUtnOUIsRUFBSTVwQixPQUFPcFQsR0FBR3l3QixFQUFVMVEsR0FDOURySixFQUFNMVcsRUFBSVosRUFBSzJqQixPQUFTck0sRUFBTTFXLEVBQUlBLEVBQUVvVCxTQUFXcFQsRUFBRXl3QixFQUFVMVEsR0FFN0R0SixFQUFRc0osRUFBTWpmLE1BQ1o0VixFQUFNMDlCLElBQVUxOUIsRUFBTXE5QixHQUNwQkssSUFBVUwsR0F4SnBCLFNBQXlCcEIsRUFBV3lCLEVBQU9JLEVBQU85QixFQUFvQjRCLEdBb0JwRSxJQW5CQSxJQVFJRyxFQUFhQyxFQUFVQyxFQVJ2QkMsRUFBYyxFQUNkQyxFQUFjLEVBQ2RDLEVBQVlWLEVBQU1sMkMsT0FBUyxFQUMzQjYyQyxFQUFnQlgsRUFBTSxHQUN0QlksRUFBY1osRUFBTVUsR0FDcEJHLEVBQVlULEVBQU10MkMsT0FBUyxFQUMzQmczQyxFQUFnQlYsRUFBTSxHQUN0QlcsRUFBY1gsRUFBTVMsR0FNcEJHLEdBQVdkLEVBTVJNLEdBQWVFLEdBQWFELEdBQWVJLEdBQzVDeCtCLEVBQVFzK0IsR0FDVkEsRUFBZ0JYLElBQVFRLEdBQ2ZuK0IsRUFBUXUrQixHQUNqQkEsRUFBY1osSUFBUVUsR0FDYnpTLEdBQVUwUyxFQUFlRyxJQUNsQ2IsRUFBV1UsRUFBZUcsRUFBZXhDLEVBQW9COEIsRUFBT0ssR0FDcEVFLEVBQWdCWCxJQUFRUSxHQUN4Qk0sRUFBZ0JWLElBQVFLLElBQ2Z4UyxHQUFVMlMsRUFBYUcsSUFDaENkLEVBQVdXLEVBQWFHLEVBQWF6QyxFQUFvQjhCLEVBQU9TLEdBQ2hFRCxFQUFjWixJQUFRVSxHQUN0QkssRUFBY1gsSUFBUVMsSUFDYjVTLEdBQVUwUyxFQUFlSSxJQUNsQ2QsRUFBV1UsRUFBZUksRUFBYXpDLEVBQW9COEIsRUFBT1MsR0FDbEVHLEdBQVcvVCxFQUFRdnVCLGFBQWE2L0IsRUFBV29DLEVBQWN4MkIsSUFBSzhpQixFQUFRTSxZQUFZcVQsRUFBWXoyQixNQUM5RncyQixFQUFnQlgsSUFBUVEsR0FDeEJPLEVBQWNYLElBQVFTLElBQ2I1UyxHQUFVMlMsRUFBYUUsSUFDaENiLEVBQVdXLEVBQWFFLEVBQWV4QyxFQUFvQjhCLEVBQU9LLEdBQ2xFTyxHQUFXL1QsRUFBUXZ1QixhQUFhNi9CLEVBQVdxQyxFQUFZejJCLElBQUt3MkIsRUFBY3gyQixLQUMxRXkyQixFQUFjWixJQUFRVSxHQUN0QkksRUFBZ0JWLElBQVFLLEtBRXBCcCtCLEVBQVFnK0IsS0FBZ0JBLEVBQWNoUyxHQUFrQjJSLEVBQU9RLEVBQWFFLElBSTVFcitCLEVBSEppK0IsRUFBV2grQixFQUFNdytCLEVBQWNuekMsS0FDM0IweUMsRUFBWVMsRUFBY256QyxLQUMxQm95QyxFQUFhZSxFQUFlZCxFQUFPUSxFQUFhRSxJQUVsRHJDLEVBQVV5QyxFQUFleEMsRUFBb0JDLEVBQVdvQyxFQUFjeDJCLEtBQUssRUFBT2kyQixFQUFPSyxHQUdyRnhTLEdBREpzUyxFQUFjUCxFQUFNTSxHQUNPUSxJQUN6QmIsRUFBV00sRUFBYU8sRUFBZXhDLEVBQW9COEIsRUFBT0ssR0FDbEVULEVBQU1NLFFBQVkvbUMsRUFDbEJ5bkMsR0FBVy9ULEVBQVF2dUIsYUFBYTYvQixFQUFXZ0MsRUFBWXAyQixJQUFLdzJCLEVBQWN4MkIsTUFHMUVrMEIsRUFBVXlDLEVBQWV4QyxFQUFvQkMsRUFBV29DLEVBQWN4MkIsS0FBSyxFQUFPaTJCLEVBQU9LLEdBRzdGSyxFQUFnQlYsSUFBUUssSUFHeEJELEVBQWNFLEVBRWhCbkIsRUFBVWhCLEVBRERsOEIsRUFBUSs5QixFQUFNUyxFQUFZLElBQU0sS0FBT1QsRUFBTVMsRUFBWSxHQUFHMTJCLElBQ3hDaTJCLEVBQU9LLEVBQWFJLEVBQVd2QyxHQUNuRG1DLEVBQWNJLEdBQ3ZCbkIsRUFBYU0sRUFBT1EsRUFBYUUsR0FvRlhPLENBQWU5MkIsRUFBSzYxQixFQUFPTCxFQUFJckIsRUFBb0I0QixHQUM5RDU5QixFQUFNcTlCLElBSVhyOUIsRUFBTStaLEVBQVMzdkIsT0FBU3VnQyxFQUFRTyxlQUFlcmpCLEVBQUssSUFDeERvMUIsRUFBVXAxQixFQUFLLEtBQU13MUIsRUFBSSxFQUFHQSxFQUFHNzFDLE9BQVMsRUFBR3cwQyxJQUNsQ2g4QixFQUFNMDlCLEdBQ2ZOLEVBQWFNLEVBQU8sRUFBR0EsRUFBTWwyQyxPQUFTLEdBQzdCd1ksRUFBTStaLEVBQVMzdkIsT0FDeEJ1Z0MsRUFBUU8sZUFBZXJqQixFQUFLLElBRXJCa1MsRUFBUzN2QixPQUFTaWYsRUFBTWpmLE1BQ2pDdWdDLEVBQVFPLGVBQWVyakIsRUFBS3dCLEVBQU1qZixNQUVoQzRWLEVBQU10WCxJQUNKc1gsRUFBTTFXLEVBQUlaLEVBQUsyakIsT0FBU3JNLEVBQU0xVyxFQUFJQSxFQUFFczFDLFlBQWN0MUMsRUFBRXl3QixFQUFVMVEsS0FJdEUsU0FBU3cxQixFQUFrQngxQixFQUFPd1csRUFBT2lmLEdBR3ZDLEdBQUk3K0IsRUFBTzYrQixJQUFZOStCLEVBQU1xSixFQUFNZixRQUNqQ2UsRUFBTWYsT0FBTzVmLEtBQUttMEMsY0FBZ0JoZCxPQUVsQyxJQUFLLElBQUl2MkIsRUFBSSxFQUFHQSxFQUFJdTJCLEVBQU1yNEIsU0FBVThCLEVBQ2xDdTJCLEVBQU12MkIsR0FBR1osS0FBSzJqQixLQUFLL1EsT0FBT3VrQixFQUFNdjJCLElBS3RDLElBS0l5MUMsRUFBbUJwK0IsRUFBUSwyQ0FHL0IsU0FBU2s5QixFQUFTaDJCLEVBQUt3QixFQUFPMnlCLEVBQW9CZ0QsR0FDaEQsSUFBSTExQyxFQUNBc2UsRUFBTXlCLEVBQU16QixJQUNabGYsRUFBTzJnQixFQUFNM2dCLEtBQ2IrVyxFQUFXNEosRUFBTTVKLFNBSXJCLEdBSEF1L0IsRUFBU0EsR0FBV3QyQyxHQUFRQSxFQUFLNjFCLElBQ2pDbFYsRUFBTXhCLElBQU1BLEVBRVI1SCxFQUFPb0osRUFBTVgsWUFBYzFJLEVBQU1xSixFQUFNckIsY0FFekMsT0FEQXFCLEVBQU1QLG9CQUFxQixHQUNwQixFQVFULEdBQUk5SSxFQUFNdFgsS0FDSnNYLEVBQU0xVyxFQUFJWixFQUFLMmpCLE9BQVNyTSxFQUFNMVcsRUFBSUEsRUFBRTZ2QixPQUFTN3ZCLEVBQUUrZixHQUFPLEdBQ3REckosRUFBTTFXLEVBQUkrZixFQUFNaEIsb0JBR2xCLE9BREFpMEIsRUFBY2p6QixFQUFPMnlCLElBQ2QsRUFHWCxHQUFJaDhCLEVBQU00SCxHQUFNLENBQ2QsR0FBSTVILEVBQU1QLEdBRVIsR0FBS29JLEVBQUlvM0IsZ0JBSVAsR0FBSWovQixFQUFNMVcsRUFBSVosSUFBU3NYLEVBQU0xVyxFQUFJQSxFQUFFMHNCLFdBQWFoVyxFQUFNMVcsRUFBSUEsRUFBRXdxQyxZQUMxRCxHQUFJeHFDLElBQU11ZSxFQUFJaXNCLFVBV1osT0FBTyxNQUVKLENBSUwsSUFGQSxJQUFJb0wsR0FBZ0IsRUFDaEI3USxFQUFZeG1CLEVBQUl0TCxXQUNYOHBCLEVBQU0sRUFBR0EsRUFBTTVtQixFQUFTalksT0FBUTYrQixJQUFPLENBQzlDLElBQUtnSSxJQUFjd1AsRUFBUXhQLEVBQVc1dUIsRUFBUzRtQixHQUFNMlYsRUFBb0JnRCxHQUFTLENBQ2hGRSxHQUFnQixFQUNoQixNQUVGN1EsRUFBWUEsRUFBVXBELFlBSXhCLElBQUtpVSxHQUFpQjdRLEVBVXBCLE9BQU8sT0F4Q1hzTyxFQUFldHpCLEVBQU81SixFQUFVdThCLEdBNkNwQyxHQUFJaDhCLEVBQU10WCxHQUFPLENBQ2YsSUFBSXkyQyxHQUFhLEVBQ2pCLElBQUssSUFBSTl6QyxLQUFPM0MsRUFDZCxJQUFLcTJDLEVBQWlCMXpDLEdBQU0sQ0FDMUI4ekMsR0FBYSxFQUNidkMsRUFBa0J2ekIsRUFBTzJ5QixHQUN6QixPQUdDbUQsR0FBY3oyQyxFQUFZLE9BRTdCZ29CLEdBQVNob0IsRUFBWSxhQUdoQm1mLEVBQUluZixPQUFTMmdCLEVBQU1qZixPQUM1QnlkLEVBQUluZixLQUFPMmdCLEVBQU1qZixNQUVuQixPQUFPLEVBY1QsT0FBTyxTQUFnQjJ2QixFQUFVMVEsRUFBTytQLEVBQVd3a0IsR0FDakQsSUFBSTc5QixFQUFRc0osR0FBWixDQUtBLElBN2xCb0J4QixFQTZsQmhCdTNCLEdBQWlCLEVBQ2pCcEQsRUFBcUIsR0FFekIsR0FBSWo4QixFQUFRZ2EsR0FFVnFsQixHQUFpQixFQUNqQnJELEVBQVUxeUIsRUFBTzJ5QixPQUNaLENBQ0wsSUFBSXFELEVBQWdCci9CLEVBQU0rWixFQUFTc2YsVUFDbkMsSUFBS2dHLEdBQWlCMVQsR0FBVTVSLEVBQVUxUSxHQUV4Q3MwQixFQUFXNWpCLEVBQVUxUSxFQUFPMnlCLEVBQW9CLEtBQU0sS0FBTTRCLE9BQ3ZELENBQ0wsR0FBSXlCLEVBQWUsQ0FRakIsR0FKMEIsSUFBdEJ0bEIsRUFBU3NmLFVBQWtCdGYsRUFBU3VsQixhQUFhbjhCLEtBQ25ENFcsRUFBU3pkLGdCQUFnQjZHLEdBQ3pCaVcsR0FBWSxHQUVWblosRUFBT21aLElBQ0x5a0IsRUFBUTlqQixFQUFVMVEsRUFBTzJ5QixHQUUzQixPQURBNkMsRUFBaUJ4MUIsRUFBTzJ5QixHQUFvQixHQUNyQ2ppQixFQXJuQkdsUyxFQWtvQlNrUyxFQUF2QkEsRUFqb0JDLElBQUlwUyxHQUFNZ2pCLEVBQVFwL0IsUUFBUXNjLEdBQUtyYyxjQUFlLEdBQUksUUFBSXlMLEVBQVc0USxHQXFvQnBFLElBQUkwM0IsRUFBU3hsQixFQUFTbFMsSUFDbEJvMEIsRUFBWXRSLEVBQVE1L0IsV0FBV3cwQyxHQWNuQyxHQVhBeEQsRUFDRTF5QixFQUNBMnlCLEVBSUF1RCxFQUFPdEcsU0FBVyxLQUFPZ0QsRUFDekJ0UixFQUFRTSxZQUFZc1UsSUFJbEJ2L0IsRUFBTXFKLEVBQU1mLFFBR2QsSUFGQSxJQUFJMDBCLEVBQVczekIsRUFBTWYsT0FDakJrM0IsRUFBWTFDLEVBQVl6ekIsR0FDckIyekIsR0FBVSxDQUNmLElBQUssSUFBSTF6QyxFQUFJLEVBQUdBLEVBQUlnOUIsRUFBSS9LLFFBQVEvekIsU0FBVThCLEVBQ3hDZzlCLEVBQUkvSyxRQUFRanlCLEdBQUcwekMsR0FHakIsR0FEQUEsRUFBU24xQixJQUFNd0IsRUFBTXhCLElBQ2pCMjNCLEVBQVcsQ0FDYixJQUFLLElBQUluWixFQUFNLEVBQUdBLEVBQU1DLEVBQUl4b0IsT0FBT3RXLFNBQVU2K0IsRUFDM0NDLEVBQUl4b0IsT0FBT3VvQixHQUFLcUYsR0FBV3NSLEdBSzdCLElBQUkxaEMsRUFBUzBoQyxFQUFTdDBDLEtBQUsyakIsS0FBSy9RLE9BQ2hDLEdBQUlBLEVBQU82VyxPQUVULElBQUssSUFBSXN0QixFQUFNLEVBQUdBLEVBQU1ua0MsRUFBTytWLElBQUk3cEIsT0FBUWk0QyxJQUN6Q25rQyxFQUFPK1YsSUFBSW91QixVQUlmblUsR0FBWTBSLEdBRWRBLEVBQVdBLEVBQVMxMEIsT0FLcEJ0SSxFQUFNaThCLEdBQ1JtQixFQUFhLENBQUNyakIsR0FBVyxFQUFHLEdBQ25CL1osRUFBTStaLEVBQVNuUyxNQUN4QnUxQixFQUFrQnBqQixJQU14QixPQURBOGtCLEVBQWlCeDFCLEVBQU8yeUIsRUFBb0JvRCxHQUNyQy8xQixFQUFNeEIsSUFuR1A3SCxFQUFNK1osSUFBYW9qQixFQUFrQnBqQixJQXE4RG5DMmxCLENBQW9CLENBQUUvVSxRQUFTQSxHQUFTN3lCLFFBZjlCLENBQ3BCeWIsR0FDQXdiLEdBQ0FtQyxHQUNBbGIsR0FDQS9hLEdBbEJlK0osRUFBWSxDQUMzQmxILE9BQVE2OUIsR0FDUmEsU0FBVWIsR0FDVjkvQixPQUFRLFNBQW9Cd04sRUFBTzh4QixJQUVULElBQXBCOXhCLEVBQU0zZ0IsS0FBS295QyxLQUNiSSxHQUFNN3hCLEVBQU84eEIsR0FFYkEsTUFHRixJQWUwQnRqQyxPQUFPdzFCLE1BVWpDNW5CLEdBRUY5VSxTQUFTc1YsaUJBQWlCLG1CQUFtQixXQUMzQyxJQUFJL2EsRUFBS3lGLFNBQVN1akMsY0FDZGhwQyxHQUFNQSxFQUFHeTBDLFFBQ1hDLEdBQVExMEMsRUFBSSxZQUtsQixJQUFJMjBDLEdBQVksQ0FDZG4yQixTQUFVLFNBQW1CeGUsRUFBSTQwQyxFQUFTejJCLEVBQU8wUSxHQUM3QixXQUFkMVEsRUFBTXpCLEtBRUptUyxFQUFTbFMsTUFBUWtTLEVBQVNsUyxJQUFJazRCLFVBQ2hDaHVCLEdBQWUxSSxFQUFPLGFBQWEsV0FDakN3MkIsR0FBVTlTLGlCQUFpQjdoQyxFQUFJNDBDLEVBQVN6MkIsTUFHMUMyMkIsR0FBWTkwQyxFQUFJNDBDLEVBQVN6MkIsRUFBTXZCLFNBRWpDNWMsRUFBRzYwQyxVQUFZLEdBQUczMkMsSUFBSW5CLEtBQUtpRCxFQUFHNUYsUUFBUzI2QyxNQUNoQixhQUFkNTJCLEVBQU16QixLQUFzQjhpQixHQUFnQngvQixFQUFHNEUsU0FDeEQ1RSxFQUFHa3BDLFlBQWMwTCxFQUFRNVMsVUFDcEI0UyxFQUFRNVMsVUFBVTdMLE9BQ3JCbjJCLEVBQUcrYSxpQkFBaUIsbUJBQW9CaTZCLElBQ3hDaDFDLEVBQUcrYSxpQkFBaUIsaUJBQWtCazZCLElBS3RDajFDLEVBQUcrYSxpQkFBaUIsU0FBVWs2QixJQUUxQjE2QixJQUNGdmEsRUFBR3kwQyxRQUFTLE1BTXBCNVMsaUJBQWtCLFNBQTJCN2hDLEVBQUk0MEMsRUFBU3oyQixHQUN4RCxHQUFrQixXQUFkQSxFQUFNekIsSUFBa0IsQ0FDMUJvNEIsR0FBWTkwQyxFQUFJNDBDLEVBQVN6MkIsRUFBTXZCLFNBSy9CLElBQUlzNEIsRUFBY2wxQyxFQUFHNjBDLFVBQ2pCTSxFQUFhbjFDLEVBQUc2MEMsVUFBWSxHQUFHMzJDLElBQUluQixLQUFLaUQsRUFBRzVGLFFBQVMyNkMsSUFDcERJLEVBQVdDLE1BQUssU0FBVTFuQyxFQUFHdFAsR0FBSyxPQUFRaVosRUFBVzNKLEVBQUd3bkMsRUFBWTkyQyxTQUd0RDRCLEVBQUcwL0IsU0FDZmtWLEVBQVEvdkMsTUFBTXV3QyxNQUFLLFNBQVUzeEMsR0FBSyxPQUFPNHhDLEdBQW9CNXhDLEVBQUcweEMsTUFDaEVQLEVBQVEvdkMsUUFBVSt2QyxFQUFRNWQsVUFBWXFlLEdBQW9CVCxFQUFRL3ZDLE1BQU9zd0MsS0FFM0VULEdBQVExMEMsRUFBSSxhQU90QixTQUFTODBDLEdBQWE5MEMsRUFBSTQwQyxFQUFTaDBCLEdBQ2pDMDBCLEdBQW9CdDFDLEVBQUk0MEMsSUFFcEJ0NkIsR0FBUUUsSUFDVnFLLFlBQVcsV0FDVHl3QixHQUFvQnQxQyxFQUFJNDBDLEtBQ3ZCLEdBSVAsU0FBU1UsR0FBcUJ0MUMsRUFBSTQwQyxFQUFTaDBCLEdBQ3pDLElBQUkvYixFQUFRK3ZDLEVBQVEvdkMsTUFDaEIwd0MsRUFBYXYxQyxFQUFHMC9CLFNBQ3BCLElBQUk2VixHQUFlOTZDLE1BQU1DLFFBQVFtSyxHQUFqQyxDQVNBLElBREEsSUFBSTJ3QyxFQUFVQyxFQUNMcjNDLEVBQUksRUFBR3FZLEVBQUl6VyxFQUFHNUYsUUFBUWtDLE9BQVE4QixFQUFJcVksRUFBR3JZLElBRTVDLEdBREFxM0MsRUFBU3oxQyxFQUFHNUYsUUFBUWdFLEdBQ2hCbTNDLEVBQ0ZDLEVBQVcxOUIsRUFBYWpULEVBQU9rd0MsR0FBU1UsS0FBWSxFQUNoREEsRUFBT0QsV0FBYUEsSUFDdEJDLEVBQU9ELFNBQVdBLFFBR3BCLEdBQUluK0IsRUFBVzA5QixHQUFTVSxHQUFTNXdDLEdBSS9CLFlBSEk3RSxFQUFHMDFDLGdCQUFrQnQzQyxJQUN2QjRCLEVBQUcwMUMsY0FBZ0J0M0MsSUFNdEJtM0MsSUFDSHYxQyxFQUFHMDFDLGVBQWlCLElBSXhCLFNBQVNMLEdBQXFCeHdDLEVBQU96SyxHQUNuQyxPQUFPQSxFQUFRc2QsT0FBTSxTQUFVaEssR0FBSyxPQUFRMkosRUFBVzNKLEVBQUc3SSxNQUc1RCxTQUFTa3dDLEdBQVVVLEdBQ2pCLE1BQU8sV0FBWUEsRUFDZkEsRUFBT2hOLE9BQ1BnTixFQUFPNXdDLE1BR2IsU0FBU213QyxHQUFvQjM1QyxHQUMzQkEsRUFBRWtOLE9BQU91Z0MsV0FBWSxFQUd2QixTQUFTbU0sR0FBa0I1NUMsR0FFcEJBLEVBQUVrTixPQUFPdWdDLFlBQ2R6dEMsRUFBRWtOLE9BQU91Z0MsV0FBWSxFQUNyQjRMLEdBQVFyNUMsRUFBRWtOLE9BQVEsVUFHcEIsU0FBU21zQyxHQUFTMTBDLEVBQUk0RSxHQUNwQixJQUFJdkosRUFBSW9LLFNBQVN1dkIsWUFBWSxjQUM3QjM1QixFQUFFczZDLFVBQVUvd0MsR0FBTSxHQUFNLEdBQ3hCNUUsRUFBRzQxQyxjQUFjdjZDLEdBTW5CLFNBQVN3NkMsR0FBWTEzQixHQUNuQixPQUFPQSxFQUFNaEIsbUJBQXVCZ0IsRUFBTTNnQixNQUFTMmdCLEVBQU0zZ0IsS0FBS3l3QyxXQUUxRDl2QixFQURBMDNCLEdBQVcxM0IsRUFBTWhCLGtCQUFrQm1TLFFBSXpDLElBdURJd21CLEdBQXFCLENBQ3ZCMWpCLE1BQU91aUIsR0FDUC9FLEtBekRTLENBQ1QvekMsS0FBTSxTQUFlbUUsRUFBSWc4QixFQUFLN2QsR0FDNUIsSUFBSXRaLEVBQVFtM0IsRUFBSW4zQixNQUdaa3hDLEdBREo1M0IsRUFBUTAzQixHQUFXMTNCLElBQ08zZ0IsTUFBUTJnQixFQUFNM2dCLEtBQUt5d0MsV0FDekMrSCxFQUFrQmgyQyxFQUFHaTJDLG1CQUNGLFNBQXJCajJDLEVBQUcrUCxNQUFNbW1DLFFBQXFCLEdBQUtsMkMsRUFBRytQLE1BQU1tbUMsUUFDMUNyeEMsR0FBU2t4QyxHQUNYNTNCLEVBQU0zZ0IsS0FBS295QyxNQUFPLEVBQ2xCL0IsR0FBTTF2QixHQUFPLFdBQ1huZSxFQUFHK1AsTUFBTW1tQyxRQUFVRixNQUdyQmgyQyxFQUFHK1AsTUFBTW1tQyxRQUFVcnhDLEVBQVFteEMsRUFBa0IsUUFJakR4a0MsT0FBUSxTQUFpQnhSLEVBQUlnOEIsRUFBSzdkLEdBQ2hDLElBQUl0WixFQUFRbTNCLEVBQUluM0IsT0FJWEEsSUFIVW0zQixFQUFJaEYsWUFJbkI3WSxFQUFRMDNCLEdBQVcxM0IsSUFDTzNnQixNQUFRMmdCLEVBQU0zZ0IsS0FBS3l3QyxZQUUzQzl2QixFQUFNM2dCLEtBQUtveUMsTUFBTyxFQUNkL3FDLEVBQ0ZncEMsR0FBTTF2QixHQUFPLFdBQ1huZSxFQUFHK1AsTUFBTW1tQyxRQUFVbDJDLEVBQUdpMkMsc0JBR3hCakcsR0FBTTd4QixHQUFPLFdBQ1huZSxFQUFHK1AsTUFBTW1tQyxRQUFVLFdBSXZCbDJDLEVBQUcrUCxNQUFNbW1DLFFBQVVyeEMsRUFBUTdFLEVBQUdpMkMsbUJBQXFCLFNBSXZERSxPQUFRLFNBQ05uMkMsRUFDQTQwQyxFQUNBejJCLEVBQ0EwUSxFQUNBdVMsR0FFS0EsSUFDSHBoQyxFQUFHK1AsTUFBTW1tQyxRQUFVbDJDLEVBQUdpMkMsdUJBWXhCRyxHQUFrQixDQUNwQjk3QyxLQUFNOE8sT0FDTnVsQyxPQUFRL3NDLFFBQ1I0TixJQUFLNU4sUUFDTHkwQyxLQUFNanRDLE9BQ054RSxLQUFNd0UsT0FDTjhoQyxXQUFZOWhDLE9BQ1ppaUMsV0FBWWppQyxPQUNaK2hDLGFBQWMvaEMsT0FDZGtpQyxhQUFjbGlDLE9BQ2RnaUMsaUJBQWtCaGlDLE9BQ2xCbWlDLGlCQUFrQm5pQyxPQUNsQmdsQyxZQUFhaGxDLE9BQ2JrbEMsa0JBQW1CbGxDLE9BQ25CaWxDLGNBQWVqbEMsT0FDZjBsQyxTQUFVLENBQUN2UyxPQUFRbnpCLE9BQVF4SSxTQUs3QixTQUFTMDFDLEdBQWNuNEIsR0FDckIsSUFBSW80QixFQUFjcDRCLEdBQVNBLEVBQU10QixpQkFDakMsT0FBSTA1QixHQUFlQSxFQUFZbDdCLEtBQUtqaEIsUUFBUXU0QixTQUNuQzJqQixHQUFhMWlCLEdBQXVCMmlCLEVBQVloaUMsV0FFaEQ0SixFQUlYLFNBQVNxNEIsR0FBdUI3aUIsR0FDOUIsSUFBSW4yQixFQUFPLEdBQ1BwRCxFQUFVdTVCLEVBQUt2USxTQUVuQixJQUFLLElBQUlqakIsS0FBTy9GLEVBQVEwb0IsVUFDdEJ0bEIsRUFBSzJDLEdBQU93ekIsRUFBS3h6QixHQUluQixJQUFJcXRCLEVBQVlwekIsRUFBUXcxQixpQkFDeEIsSUFBSyxJQUFJeE8sS0FBU29NLEVBQ2hCaHdCLEVBQUt5WSxFQUFTbUwsSUFBVW9NLEVBQVVwTSxHQUVwQyxPQUFPNWpCLEVBR1QsU0FBU2k1QyxHQUFhQyxFQUFHQyxHQUN2QixHQUFJLGlCQUFpQnRyQyxLQUFLc3JDLEVBQVNqNkIsS0FDakMsT0FBT2c2QixFQUFFLGFBQWMsQ0FDckJyMUIsTUFBT3MxQixFQUFTOTVCLGlCQUFpQmlHLFlBaUJ2QyxJQUFJOHpCLEdBQWdCLFNBQVVqekMsR0FBSyxPQUFPQSxFQUFFK1ksS0FBT2tCLEdBQW1CamEsSUFFbEVrekMsR0FBbUIsU0FBVXhrQyxHQUFLLE1BQWtCLFNBQVhBLEVBQUUvWCxNQUUzQ3c4QyxHQUFhLENBQ2Z4OEMsS0FBTSxhQUNOK21CLE1BQU8rMEIsR0FDUHpqQixVQUFVLEVBRVZwSixPQUFRLFNBQWlCbXRCLEdBQ3ZCLElBQUl2cEIsRUFBUzl5QixLQUVUa2EsRUFBV2xhLEtBQUt5dkIsT0FBTzNHLFFBQzNCLEdBQUs1TyxJQUtMQSxFQUFXQSxFQUFTOUQsT0FBT21tQyxLQUVidDZDLE9BQWQsQ0FhQSxJQUFJKzVDLEVBQU9oOEMsS0FBS2c4QyxLQVlaTSxFQUFXcGlDLEVBQVMsR0FJeEIsR0E3REosU0FBOEI0SixHQUM1QixLQUFRQSxFQUFRQSxFQUFNZixRQUNwQixHQUFJZSxFQUFNM2dCLEtBQUt5d0MsV0FDYixPQUFPLEVBMERMOEksQ0FBb0IxOEMsS0FBS2cxQixRQUMzQixPQUFPc25CLEVBS1QsSUFBSTc0QixFQUFRdzRCLEdBQWFLLEdBRXpCLElBQUs3NEIsRUFDSCxPQUFPNjRCLEVBR1QsR0FBSXQ4QyxLQUFLMjhDLFNBQ1AsT0FBT1AsR0FBWUMsRUFBR0MsR0FNeEIsSUFBSXA4QyxFQUFLLGdCQUFtQkYsS0FBUyxLQUFJLElBQ3pDeWpCLEVBQU0zZCxJQUFtQixNQUFiMmQsRUFBTTNkLElBQ2QyZCxFQUFNTixVQUNKampCLEVBQUssVUFDTEEsRUFBS3VqQixFQUFNcEIsSUFDYnRiLEVBQVkwYyxFQUFNM2QsS0FDbUIsSUFBbENpSixPQUFPMFUsRUFBTTNkLEtBQUttTCxRQUFRL1EsR0FBWXVqQixFQUFNM2QsSUFBTTVGLEVBQUt1akIsRUFBTTNkLElBQzlEMmQsRUFBTTNkLElBRVosSUFBSTNDLEdBQVFzZ0IsRUFBTXRnQixPQUFTc2dCLEVBQU10Z0IsS0FBTyxLQUFLeXdDLFdBQWF1SSxHQUFzQm44QyxNQUM1RTQ4QyxFQUFjNThDLEtBQUtpMUIsT0FDbkI0bkIsRUFBV1osR0FBYVcsR0FRNUIsR0FKSW41QixFQUFNdGdCLEtBQUt1a0IsWUFBY2pFLEVBQU10Z0IsS0FBS3VrQixXQUFXcXpCLEtBQUt5QixNQUN0RC80QixFQUFNdGdCLEtBQUtveUMsTUFBTyxHQUlsQnNILEdBQ0FBLEVBQVMxNUMsT0E3RmYsU0FBc0JzZ0IsRUFBT281QixHQUMzQixPQUFPQSxFQUFTLzJDLE1BQVEyZCxFQUFNM2QsS0FBTysyQyxFQUFTeDZCLE1BQVFvQixFQUFNcEIsSUE2RnZEeTZCLENBQVlyNUIsRUFBT281QixLQUNuQnQ1QixHQUFtQnM1QixNQUVsQkEsRUFBUy81QixvQkFBcUIrNUIsRUFBUy81QixrQkFBa0JtUyxPQUFPOVIsV0FDbEUsQ0FHQSxJQUFJeWxCLEVBQVVpVSxFQUFTMTVDLEtBQUt5d0MsV0FBYW4zQixFQUFPLEdBQUl0WixHQUVwRCxHQUFhLFdBQVQ2NEMsRUFPRixPQUxBaDhDLEtBQUsyOEMsVUFBVyxFQUNoQm53QixHQUFlb2MsRUFBUyxjQUFjLFdBQ3BDOVYsRUFBTzZwQixVQUFXLEVBQ2xCN3BCLEVBQU8yQyxrQkFFRjJtQixHQUFZQyxFQUFHQyxHQUNqQixHQUFhLFdBQVROLEVBQW1CLENBQzVCLEdBQUl6NEIsR0FBbUJFLEdBQ3JCLE9BQU9tNUIsRUFFVCxJQUFJRyxFQUNBN0csRUFBZSxXQUFjNkcsS0FDakN2d0IsR0FBZXJwQixFQUFNLGFBQWMreUMsR0FDbkMxcEIsR0FBZXJwQixFQUFNLGlCQUFrQit5QyxHQUN2QzFwQixHQUFlb2MsRUFBUyxjQUFjLFNBQVUrTSxHQUFTb0gsRUFBZXBILE1BSTVFLE9BQU8yRyxLQU1QdDFCLEdBQVF2SyxFQUFPLENBQ2pCNEYsSUFBS3RULE9BQ0xpdUMsVUFBV2p1QyxRQUNWZ3RDLElBd0lILFNBQVNrQixHQUFnQjN6QyxHQUVuQkEsRUFBRWdaLElBQUk0NkIsU0FDUjV6QyxFQUFFZ1osSUFBSTQ2QixVQUdKNXpDLEVBQUVnWixJQUFJdXhCLFVBQ1J2cUMsRUFBRWdaLElBQUl1eEIsV0FJVixTQUFTc0osR0FBZ0I3ekMsR0FDdkJBLEVBQUVuRyxLQUFLaTZDLE9BQVM5ekMsRUFBRWdaLElBQUkrNkIsd0JBR3hCLFNBQVNDLEdBQWtCaDBDLEdBQ3pCLElBQUlpMEMsRUFBU2owQyxFQUFFbkcsS0FBS3E2QyxJQUNoQkosRUFBUzl6QyxFQUFFbkcsS0FBS2k2QyxPQUNoQkssRUFBS0YsRUFBT0csS0FBT04sRUFBT00sS0FDMUJDLEVBQUtKLEVBQU9LLElBQU1SLEVBQU9RLElBQzdCLEdBQUlILEdBQU1FLEVBQUksQ0FDWnIwQyxFQUFFbkcsS0FBSzA2QyxPQUFRLEVBQ2YsSUFBSWxsQyxFQUFJclAsRUFBRWdaLElBQUk1TSxNQUNkaUQsRUFBRW1sQyxVQUFZbmxDLEVBQUVvbEMsZ0JBQWtCLGFBQWVOLEVBQUssTUFBUUUsRUFBSyxNQUNuRWhsQyxFQUFFcWxDLG1CQUFxQixhQTlKcEJoM0IsR0FBTWcxQixLQWtLYixJQUFJaUMsR0FBcUIsQ0FDdkJ4QixXQUFZQSxHQUNaeUIsZ0JBbEtvQixDQUNwQmwzQixNQUFPQSxHQUVQbTNCLFlBQWEsV0FDWCxJQUFJcnJCLEVBQVM5eUIsS0FFVG1YLEVBQVNuWCxLQUFLaWhDLFFBQ2xCamhDLEtBQUtpaEMsUUFBVSxTQUFVbmQsRUFBTytQLEdBQzlCLElBQUl3TixFQUF3QnpILEdBQWtCOUcsR0FFOUNBLEVBQU93TyxVQUNMeE8sRUFBT21DLE9BQ1BuQyxFQUFPc3JCLE1BQ1AsR0FDQSxHQUVGdHJCLEVBQU9tQyxPQUFTbkMsRUFBT3NyQixLQUN2Qi9jLElBQ0FscUIsRUFBT3pVLEtBQUtvd0IsRUFBUWhQLEVBQU8rUCxLQUkvQjNFLE9BQVEsU0FBaUJtdEIsR0FRdkIsSUFQQSxJQUFJaDZCLEVBQU1yaUIsS0FBS3FpQixLQUFPcmlCLEtBQUtnMUIsT0FBTzd4QixLQUFLa2YsS0FBTyxPQUMxQ3hlLEVBQU0wQyxPQUFPZ1MsT0FBTyxNQUNwQjhsQyxFQUFlcitDLEtBQUtxK0MsYUFBZXIrQyxLQUFLa2EsU0FDeENva0MsRUFBY3QrQyxLQUFLeXZCLE9BQU8zRyxTQUFXLEdBQ3JDNU8sRUFBV2xhLEtBQUtrYSxTQUFXLEdBQzNCcWtDLEVBQWlCcEMsR0FBc0JuOEMsTUFFbEMrRCxFQUFJLEVBQUdBLEVBQUl1NkMsRUFBWXI4QyxPQUFROEIsSUFBSyxDQUMzQyxJQUFJdUYsRUFBSWcxQyxFQUFZdjZDLEdBQ2hCdUYsRUFBRStZLEtBQ1MsTUFBVC9ZLEVBQUV4RCxLQUFvRCxJQUFyQ2lKLE9BQU96RixFQUFFeEQsS0FBS21MLFFBQVEsYUFDekNpSixFQUFTM1UsS0FBSytELEdBQ2R6RixFQUFJeUYsRUFBRXhELEtBQU93RCxHQUNYQSxFQUFFbkcsT0FBU21HLEVBQUVuRyxLQUFPLEtBQUt5d0MsV0FBYTJLLEdBUzlDLEdBQUlGLEVBQWMsQ0FHaEIsSUFGQSxJQUFJRCxFQUFPLEdBQ1BJLEVBQVUsR0FDTDFkLEVBQU0sRUFBR0EsRUFBTXVkLEVBQWFwOEMsT0FBUTYrQixJQUFPLENBQ2xELElBQUkyZCxFQUFNSixFQUFhdmQsR0FDdkIyZCxFQUFJdDdDLEtBQUt5d0MsV0FBYTJLLEVBQ3RCRSxFQUFJdDdDLEtBQUtxNkMsSUFBTWlCLEVBQUluOEIsSUFBSSs2Qix3QkFDbkJ4NUMsRUFBSTQ2QyxFQUFJMzRDLEtBQ1ZzNEMsRUFBSzc0QyxLQUFLazVDLEdBRVZELEVBQVFqNUMsS0FBS2s1QyxHQUdqQnorQyxLQUFLbytDLEtBQU8vQixFQUFFaDZCLEVBQUssS0FBTSs3QixHQUN6QnArQyxLQUFLdytDLFFBQVVBLEVBR2pCLE9BQU9uQyxFQUFFaDZCLEVBQUssS0FBTW5JLElBR3RCd2tDLFFBQVMsV0FDUCxJQUFJeGtDLEVBQVdsYSxLQUFLcStDLGFBQ2hCckIsRUFBWWg5QyxLQUFLZzlDLFlBQWVoOUMsS0FBS0MsTUFBUSxLQUFPLFFBQ25EaWEsRUFBU2pZLFFBQVdqQyxLQUFLMitDLFFBQVF6a0MsRUFBUyxHQUFHb0ksSUFBSzA2QixLQU12RDlpQyxFQUFTL1ksUUFBUTg3QyxJQUNqQi9pQyxFQUFTL1ksUUFBUWc4QyxJQUNqQmpqQyxFQUFTL1ksUUFBUW04QyxJQUtqQnQ5QyxLQUFLNCtDLFFBQVV4ekMsU0FBU3l6QyxLQUFLQyxhQUU3QjVrQyxFQUFTL1ksU0FBUSxTQUFVbUksR0FDekIsR0FBSUEsRUFBRW5HLEtBQUswNkMsTUFBTyxDQUNoQixJQUFJbDRDLEVBQUsyRCxFQUFFZ1osSUFDUDNKLEVBQUloVCxFQUFHK1AsTUFDWHU4QixHQUFtQnRzQyxFQUFJcTNDLEdBQ3ZCcmtDLEVBQUVtbEMsVUFBWW5sQyxFQUFFb2xDLGdCQUFrQnBsQyxFQUFFcWxDLG1CQUFxQixHQUN6RHI0QyxFQUFHK2EsaUJBQWlCNndCLEdBQW9CNXJDLEVBQUd1M0MsUUFBVSxTQUFTbHlCLEVBQUlocUIsR0FDNURBLEdBQUtBLEVBQUVrTixTQUFXdkksR0FHakIzRSxJQUFLLGFBQWFnUSxLQUFLaFEsRUFBRSs5QyxnQkFDNUJwNUMsRUFBRytpQyxvQkFBb0I2SSxHQUFvQnZtQixHQUMzQ3JsQixFQUFHdTNDLFFBQVUsS0FDYi9LLEdBQXNCeHNDLEVBQUlxM0MsWUFPcEMvMUIsUUFBUyxDQUNQMDNCLFFBQVMsU0FBa0JoNUMsRUFBSXEzQyxHQUU3QixJQUFLN0wsR0FDSCxPQUFPLEVBR1QsR0FBSW54QyxLQUFLZy9DLFNBQ1AsT0FBT2gvQyxLQUFLZy9DLFNBT2QsSUFBSXZyQixFQUFROXRCLEVBQUdzNUMsWUFDWHQ1QyxFQUFHdWpDLG9CQUNMdmpDLEVBQUd1akMsbUJBQW1CL25DLFNBQVEsU0FBVTBuQyxHQUFPNEgsR0FBWWhkLEVBQU9vVixNQUVwRTBILEdBQVM5YyxFQUFPdXBCLEdBQ2hCdnBCLEVBQU0vZCxNQUFNbW1DLFFBQVUsT0FDdEI3N0MsS0FBS21oQyxJQUFJbnJCLFlBQVl5ZCxHQUNyQixJQUFJbEssRUFBTytvQixHQUFrQjdlLEdBRTdCLE9BREF6ekIsS0FBS21oQyxJQUFJdnFCLFlBQVk2YyxHQUNienpCLEtBQUtnL0MsU0FBV3oxQixFQUFLNnBCLGlCQXlDbkMvVSxHQUFJejVCLE9BQU9nYSxZQUFjQSxHQUN6QnlmLEdBQUl6NUIsT0FBTzJaLGNBQWdCQSxHQUMzQjhmLEdBQUl6NUIsT0FBTzRaLGVBQWlCQSxHQUM1QjZmLEdBQUl6NUIsT0FBTzhaLGdCQUFrQkEsR0FDN0IyZixHQUFJejVCLE9BQU82WixpQkExMEdYLFNBQTJCNEQsR0FFekIsSUFBSzVDLEVBQ0gsT0FBTyxFQUVULEdBQUlsQixHQUFjOEQsR0FDaEIsT0FBTyxFQUlULEdBRkFBLEVBQU1BLEVBQUlwYyxjQUVzQixNQUE1QmkvQixHQUFvQjdpQixHQUN0QixPQUFPNmlCLEdBQW9CN2lCLEdBRTdCLElBQUkxYyxFQUFLeUYsU0FBU3VLLGNBQWMwTSxHQUNoQyxPQUFJQSxFQUFJcFIsUUFBUSxNQUFRLEVBRWRpMEIsR0FBb0I3aUIsR0FDMUIxYyxFQUFHNk4sY0FBZ0I5SyxPQUFPdzJDLG9CQUMxQnY1QyxFQUFHNk4sY0FBZ0I5SyxPQUFPeTJDLFlBR3BCamEsR0FBb0I3aUIsR0FBTyxxQkFBcUJyUixLQUFLckwsRUFBR2EsYUF3ekdwRWlXLEVBQU80aEIsR0FBSXQrQixRQUFRMm5CLFdBQVkrekIsSUFDL0JoL0IsRUFBTzRoQixHQUFJdCtCLFFBQVFxK0IsV0FBWTZmLElBRy9CNWYsR0FBSTU5QixVQUFVNmdDLFVBQVk3aEIsRUFBWTQyQixHQUFReDVCLEVBRzlDd2hCLEdBQUk1OUIsVUFBVTh6QixPQUFTLFNBQ3JCNXVCLEVBQ0FrdUIsR0FHQSxPQTc2SkYsU0FDRXROLEVBQ0E1Z0IsRUFDQWt1QixHQXlCQSxJQUFJdXJCLEVBMkNKLE9BbEVBNzRCLEVBQUc0YSxJQUFNeDdCLEVBQ0o0Z0IsRUFBR3dDLFNBQVNtRyxTQUNmM0ksRUFBR3dDLFNBQVNtRyxPQUFTeEwsSUFtQnZCa1MsR0FBU3JQLEVBQUksZUFzQlg2NEIsRUFBa0IsV0FDaEI3NEIsRUFBRzBhLFFBQVExYSxFQUFHbWIsVUFBVzdOLElBTzdCLElBQUkySCxHQUFRalYsRUFBSTY0QixFQUFpQnZpQyxFQUFNLENBQ3JDa2UsT0FBUSxXQUNGeFUsRUFBR29QLGFBQWVwUCxFQUFHdU4sY0FDdkI4QixHQUFTclAsRUFBSSxtQkFHaEIsR0FDSHNOLEdBQVksRUFJSyxNQUFidE4sRUFBR3lPLFNBQ0x6TyxFQUFHb1AsWUFBYSxFQUNoQkMsR0FBU3JQLEVBQUksWUFFUkEsRUFzMkpBODRCLENBQWVyL0MsS0FEdEIyRixFQUFLQSxHQUFNOFosRUFBWTVWLEdBQU1sRSxRQUFNK0wsRUFDSG1pQixJQUs5QnBVLEdBQ0YrSyxZQUFXLFdBQ0w1bEIsRUFBT3NaLFVBQ0xBLElBQ0ZBLEdBQVNvZCxLQUFLLE9BQVErQyxNQXNCekIsR0FLTCxJQXdJSWloQixHQXhJQUMsR0FBZSwyQkFDZkMsR0FBZ0IseUJBRWhCQyxHQUFhaGtDLEdBQU8sU0FBVWlrQyxHQUNoQyxJQUFJQyxFQUFPRCxFQUFXLEdBQUdyMkMsUUFBUW0yQyxHQUFlLFFBQzVDSSxFQUFRRixFQUFXLEdBQUdyMkMsUUFBUW0yQyxHQUFlLFFBQ2pELE9BQU8sSUFBSWpnQyxPQUFPb2dDLEVBQU8sZ0JBQWtCQyxFQUFPLFFBNkVoREMsR0FBVSxDQUNaQyxXQUFZLENBQUMsZUFDYkMsY0FyQ0YsU0FBd0JwNkMsRUFBSTVGLEdBQ2ZBLEVBQVFvSSxLQUFuQixJQUNJcThCLEVBQWM0SCxHQUFpQnptQyxFQUFJLFNBYW5DNitCLElBQ0Y3K0IsRUFBRzYrQixZQUFjeGdDLEtBQUtDLFVBQVV1Z0MsSUFFbEMsSUFBSXdiLEVBQWUvVCxHQUFldG1DLEVBQUksU0FBUyxHQUMzQ3E2QyxJQUNGcjZDLEVBQUdxNkMsYUFBZUEsSUFrQnBCQyxRQWRGLFNBQWtCdDZDLEdBQ2hCLElBQUl4QyxFQUFPLEdBT1gsT0FOSXdDLEVBQUc2K0IsY0FDTHJoQyxHQUFRLGVBQWtCd0MsRUFBYyxZQUFJLEtBRTFDQSxFQUFHcTZDLGVBQ0w3OEMsR0FBUSxTQUFZd0MsRUFBZSxhQUFJLEtBRWxDeEMsSUFnREwrOEMsR0FBVSxDQUNaSixXQUFZLENBQUMsZUFDYkMsY0F2Q0YsU0FBMEJwNkMsRUFBSTVGLEdBQ2pCQSxFQUFRb0ksS0FBbkIsSUFDSWduQyxFQUFjL0MsR0FBaUJ6bUMsRUFBSSxTQUNuQ3dwQyxJQWNGeHBDLEVBQUd3cEMsWUFBY25yQyxLQUFLQyxVQUFVOHFDLEdBQWVJLEtBR2pELElBQUlnUixFQUFlbFUsR0FBZXRtQyxFQUFJLFNBQVMsR0FDM0N3NkMsSUFDRng2QyxFQUFHdzZDLGFBQWVBLElBa0JwQkYsUUFkRixTQUFvQnQ2QyxHQUNsQixJQUFJeEMsRUFBTyxHQU9YLE9BTkl3QyxFQUFHd3BDLGNBQ0xoc0MsR0FBUSxlQUFrQndDLEVBQWMsWUFBSSxLQUUxQ0EsRUFBR3c2QyxlQUNMaDlDLEdBQVEsVUFBYXdDLEVBQWUsYUFBSSxNQUVuQ3hDLElBdUJMaTlDLEdBQWFobEMsRUFDZiw2RkFNRWlsQyxHQUFtQmpsQyxFQUNyQiwyREFLRWtsQyxHQUFtQmxsQyxFQUNyQixtU0FZRW1sQyxHQUFZLDRFQUNaQyxHQUFzQix3R0FDdEJDLEdBQVMsNkJBQWdDMWhDLEVBQW9CLE9BQUksS0FDakUyaEMsR0FBZSxPQUFTRCxHQUFTLFFBQVVBLEdBQVMsSUFDcERFLEdBQWUsSUFBSXBoQyxPQUFRLEtBQU9taEMsSUFDbENFLEdBQWdCLGFBQ2hCQyxHQUFTLElBQUl0aEMsT0FBUSxRQUFVbWhDLEdBQWUsVUFDOUNJLEdBQVUscUJBRVZDLEdBQVUsU0FDVkMsR0FBcUIsUUFHckJDLEdBQXFCN2xDLEVBQVEseUJBQXlCLEdBQ3REOGxDLEdBQVUsR0FFVkMsR0FBYyxDQUNoQixPQUFRLElBQ1IsT0FBUSxJQUNSLFNBQVUsSUFDVixRQUFTLElBQ1QsUUFBUyxLQUNULE9BQVEsS0FDUixRQUFTLEtBRVBDLEdBQWMsNEJBQ2RDLEdBQTBCLG1DQUcxQkMsR0FBcUJsbUMsRUFBUSxnQkFBZ0IsR0FDN0NtbUMsR0FBMkIsU0FBVWwvQixFQUFLbS9CLEdBQVEsT0FBT24vQixHQUFPaS9CLEdBQW1Cai9CLElBQW9CLE9BQVptL0IsRUFBSyxJQUVwRyxTQUFTQyxHQUFZajNDLEVBQU9rM0MsR0FDMUIsSUFBSUMsRUFBS0QsRUFBdUJMLEdBQTBCRCxHQUMxRCxPQUFPNTJDLEVBQU1uQixRQUFRczRDLEdBQUksU0FBVS8zQyxHQUFTLE9BQU91M0MsR0FBWXYzQyxNQW1RakUsSUF1QklnNEMsR0FDQWxDLEdBQ0FtQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQTlCQUMsR0FBTyxZQUNQQyxHQUFRLGVBQ1JDLEdBQWEscUNBQ2JDLEdBQWdCLGlDQUNoQkMsR0FBZ0IsV0FDaEJDLEdBQWUsV0FFZkMsR0FBUSxTQUNSQyxHQUFTLGtCQUNUQyxHQUFhLHdCQUViQyxHQUFTLGtCQUVUQyxHQUFjLFNBQ2RDLEdBQWlCLE9BSWpCQyxHQUFtQnRuQyxHQTFWYixTQUFpQitsQyxHQUd2QixPQUZBbEMsR0FBVUEsSUFBV2wwQyxTQUFTdUssY0FBYyxRQUNwQzQ0QixVQUFZaVQsRUFDYmxDLEdBQVExWixlQXlWZm9kLEdBQXNCLFVBYTFCLFNBQVNDLEdBQ1A1Z0MsRUFDQTJMLEVBQ0FqTCxHQUVBLE1BQU8sQ0FDTHhZLEtBQU0sRUFDTjhYLElBQUtBLEVBQ0xncEIsVUFBV3JkLEVBQ1hvZCxTQUFVOFgsR0FBYWwxQixHQUN2Qm0xQixZQUFhLEdBQ2JwZ0MsT0FBUUEsRUFDUjdJLFNBQVUsSUFxV2QsU0FBU2twQyxHQUNQQyxFQUNBdGpELEdBOFNGLElBQTRCNEYsR0F2UjVCLFNBQXFCQSxHQUNuQixJQUFJZ2tDLEVBQU1zQyxHQUFldG1DLEVBQUksT0FDekJna0MsSUFxQkZoa0MsRUFBR0csSUFBTTZqQyxHQTVDWDJaLENBQVdELEdBSVhBLEVBQVFyWSxPQUNMcVksRUFBUXY5QyxNQUNSdTlDLEVBQVFod0IsY0FDUmd3QixFQUFRaFksVUFBVXBwQyxPQXlDdkIsU0FBcUIwRCxHQUNuQixJQUFJZzhCLEVBQU1zSyxHQUFldG1DLEVBQUksT0FDekJnOEIsSUFDRmg4QixFQUFHZzhCLElBQU1BLEVBQ1RoOEIsRUFBR3VnQyxTQXNaUCxTQUFxQnZnQyxHQUVuQixJQURBLElBQUlvZCxFQUFTcGQsRUFDTm9kLEdBQVEsQ0FDYixRQUFtQnJSLElBQWZxUixFQUFPd2dDLElBQ1QsT0FBTyxFQUVUeGdDLEVBQVNBLEVBQU9BLE9BRWxCLE9BQU8sRUE5WlN5Z0MsQ0FBVzc5QyxJQTFDM0I4OUMsQ0FBV0osR0F1SmIsU0FBNkIxOUMsR0FDM0IsSUFBSSs5QyxFQUNXLGFBQVgvOUMsRUFBRzBjLEtBQ0xxaEMsRUFBWXRYLEdBQWlCem1DLEVBQUksU0FZakNBLEVBQUcrOUMsVUFBWUEsR0FBYXRYLEdBQWlCem1DLEVBQUksZ0JBQ3ZDKzlDLEVBQVl0WCxHQUFpQnptQyxFQUFJLGlCQVczQ0EsRUFBRys5QyxVQUFZQSxHQUlqQixJQUFJQyxFQUFhMVgsR0FBZXRtQyxFQUFJLFFBYWxDLEdBWkVnK0MsSUFDRmgrQyxFQUFHZytDLFdBQTRCLE9BQWZBLEVBQXNCLFlBQWNBLEVBQ3BEaCtDLEVBQUdpK0MscUJBQXVCaitDLEVBQUd5bEMsU0FBUyxXQUFZemxDLEVBQUd5bEMsU0FBUyxnQkFHL0MsYUFBWHpsQyxFQUFHMGMsS0FBdUIxYyxFQUFHKzlDLFdBQy9CelksR0FBUXRsQyxFQUFJLE9BQVFnK0MsRUExZ0cxQixTQUNFaCtDLEVBQ0ExRixHQUVBLE9BQU8wRixFQUFHdzlDLFlBQVksVUFDcEJ4OUMsRUFBR3c5QyxZQUFZLGdCQUNmeDlDLEVBQUd3OUMsWUFBZ0IsS0FvZ0dlVSxDQUFrQmwrQyxLQU1yQyxhQUFYQSxFQUFHMGMsSUFBb0IsQ0FFekIsSUFBSXloQyxFQUFjdlgsR0FBd0I1bUMsRUFBSWk5QyxJQUM5QyxHQUFJa0IsRUFBYSxDQWdCZixJQUFJbmlCLEVBQU1vaUIsR0FBWUQsR0FDbEI3akQsRUFBTzBoQyxFQUFJMWhDLEtBQ1g2cUMsRUFBVW5KLEVBQUltSixRQUNsQm5sQyxFQUFHZytDLFdBQWExakQsRUFDaEIwRixFQUFHaStDLGtCQUFvQjlZLEVBQ3ZCbmxDLEVBQUcrOUMsVUFBWUksRUFBWXQ1QyxPQUFTdzRDLFFBRWpDLENBRUwsSUFBSWdCLEVBQWdCelgsR0FBd0I1bUMsRUFBSWk5QyxJQUNoRCxHQUFJb0IsRUFBZSxDQXVCakIsSUFBSWoyQixFQUFRcG9CLEVBQUcwdEIsY0FBZ0IxdEIsRUFBRzB0QixZQUFjLElBQzVDNHdCLEVBQVFGLEdBQVlDLEdBQ3BCOTFCLEVBQVMrMUIsRUFBTWhrRCxLQUNmaWtELEVBQVlELEVBQU1uWixRQUNsQnFaLEVBQWdCcDJCLEVBQU1HLEdBQVUrMEIsR0FBaUIsV0FBWSxHQUFJdDlDLEdBQ3JFdytDLEVBQWNSLFdBQWF6MUIsRUFDM0JpMkIsRUFBY1Asa0JBQW9CTSxFQUNsQ0MsRUFBY2pxQyxTQUFXdlUsRUFBR3VVLFNBQVM5RCxRQUFPLFNBQVU5TSxHQUNwRCxJQUFLQSxFQUFFbzZDLFVBRUwsT0FEQXA2QyxFQUFFeVosT0FBU29oQyxHQUNKLEtBR1hBLEVBQWNULFVBQVlNLEVBQWN4NUMsT0FBU3c0QyxHQUVqRHI5QyxFQUFHdVUsU0FBVyxHQUVkdlUsRUFBR3FsQyxPQUFRLElBdlFqQm9aLENBQW1CZixHQWtTSixVQURXMTlDLEVBaFNSMDlDLEdBaVNYaGhDLE1BQ0wxYyxFQUFHMCtDLFNBQVdwWSxHQUFldG1DLEVBQUksU0FZckMsU0FBMkJBLEdBQ3pCLElBQUk0MEMsR0FDQ0EsRUFBVXRPLEdBQWV0bUMsRUFBSSxTQUNoQ0EsRUFBRzh4QixVQUFZOGlCLEdBRThCLE1BQTNDbk8sR0FBaUJ6bUMsRUFBSSxxQkFDdkJBLEVBQUd5dUIsZ0JBQWlCLEdBblR0Qmt3QixDQUFpQmpCLEdBQ2pCLElBQUssSUFBSXQvQyxFQUFJLEVBQUdBLEVBQUk4OUMsR0FBVzUvQyxPQUFROEIsSUFDckNzL0MsRUFBVXhCLEdBQVc5OUMsR0FBR3MvQyxFQUFTdGpELElBQVlzakQsRUFHL0MsT0FrVEYsU0FBdUIxOUMsR0FDckIsSUFDSTVCLEVBQUdxWSxFQUFHbmMsRUFBTTRuQyxFQUFTcjlCLEVBQU9tOUIsRUFBVzRjLEVBQVNDLEVBRGhEcnlDLEVBQU94TSxFQUFHMGxDLFVBRWQsSUFBS3RuQyxFQUFJLEVBQUdxWSxFQUFJakssRUFBS2xRLE9BQVE4QixFQUFJcVksRUFBR3JZLElBR2xDLEdBRkE5RCxFQUFPNG5DLEVBQVUxMUIsRUFBS3BPLEdBQUc5RCxLQUN6QnVLLEVBQVEySCxFQUFLcE8sR0FBR3lHLE1BQ1o0M0MsR0FBTXB4QyxLQUFLL1EsR0FTYixHQVBBMEYsRUFBRzgrQyxhQUFjLEdBRWpCOWMsRUFBWStjLEdBQWV6a0QsRUFBS29KLFFBQVErNEMsR0FBTyxRQUc3Q25pRCxFQUFPQSxFQUFLb0osUUFBUXM1QyxHQUFZLEtBRTlCRCxHQUFPMXhDLEtBQUsvUSxHQUNkQSxFQUFPQSxFQUFLb0osUUFBUXE1QyxHQUFRLElBQzVCbDRDLEVBQVFrL0IsR0FBYWwvQixJQUNyQmc2QyxFQUFZaEMsR0FBYXh4QyxLQUFLL1EsTUFFNUJBLEVBQU9BLEVBQUsrQyxNQUFNLEdBQUksSUFVcEIya0MsSUFDRUEsRUFBVXZ0QixPQUFTb3FDLEdBRVIsZUFEYnZrRCxFQUFPMmIsRUFBUzNiLE1BQ1lBLEVBQU8sYUFFakMwbkMsRUFBVWdkLFFBQVVILElBQ3RCdmtELEVBQU8yYixFQUFTM2IsSUFFZDBuQyxFQUFVNVEsT0FDWnd0QixFQUFVMVgsR0FBa0JyaUMsRUFBTyxVQUM5Qmc2QyxFQXVCSC9ZLEdBQ0U5bEMsRUFDQyxjQUFrQjFGLEVBQU8sSUFDMUJza0QsRUFDQSxNQUNBLEVBQ0EzQyxFQUNBenZDLEVBQUtwTyxJQUNMLElBOUJGMG5DLEdBQ0U5bEMsRUFDQyxVQUFhaVcsRUFBUzNiLEdBQ3ZCc2tELEVBQ0EsTUFDQSxFQUNBM0MsRUFDQXp2QyxFQUFLcE8sSUFFSGtZLEVBQVVoYyxLQUFVMmIsRUFBUzNiLElBQy9Cd3JDLEdBQ0U5bEMsRUFDQyxVQUFhc1csRUFBVWhjLEdBQ3hCc2tELEVBQ0EsTUFDQSxFQUNBM0MsRUFDQXp2QyxFQUFLcE8sT0FrQlY0akMsR0FBYUEsRUFBVXZ0QixPQUN6QnpVLEVBQUc4eEIsV0FBYXdxQixHQUFvQnQ4QyxFQUFHMGMsSUFBSzFjLEVBQUd5bEMsU0FBUzdnQyxLQUFNdEssR0FFL0Q0cUMsR0FBUWxsQyxFQUFJMUYsRUFBTXVLLEVBQU8ySCxFQUFLcE8sR0FBSXlnRCxHQUVsQ3ZaLEdBQVF0bEMsRUFBSTFGLEVBQU11SyxFQUFPMkgsRUFBS3BPLEdBQUl5Z0QsUUFFL0IsR0FBSXJDLEdBQUtueEMsS0FBSy9RLEdBQ25CQSxFQUFPQSxFQUFLb0osUUFBUTg0QyxHQUFNLEtBQzFCcUMsRUFBWWhDLEdBQWF4eEMsS0FBSy9RLE1BRTVCQSxFQUFPQSxFQUFLK0MsTUFBTSxHQUFJLElBRXhCeW9DLEdBQVc5bEMsRUFBSTFGLEVBQU11SyxFQUFPbTlCLEdBQVcsRUFBT2lhLEVBQVF6dkMsRUFBS3BPLEdBQUl5Z0QsT0FDMUQsQ0FHTCxJQUFJSSxHQUZKM2tELEVBQU9BLEVBQUtvSixRQUFRKzRDLEdBQU8sS0FFUHg0QyxNQUFNNjRDLElBQ3RCbmIsRUFBTXNkLEdBQVlBLEVBQVMsR0FDL0JKLEdBQVksRUFDUmxkLElBQ0ZybkMsRUFBT0EsRUFBSytDLE1BQU0sSUFBS3NrQyxFQUFJcmxDLE9BQVMsSUFDaEN1Z0QsR0FBYXh4QyxLQUFLczJCLEtBQ3BCQSxFQUFNQSxFQUFJdGtDLE1BQU0sR0FBSSxHQUNwQndoRCxHQUFZLElBR2hCbFosR0FBYTNsQyxFQUFJMUYsRUFBTTRuQyxFQUFTcjlCLEVBQU84OEIsRUFBS2tkLEVBQVc3YyxFQUFXeDFCLEVBQUtwTyxTQW1CekVrbkMsR0FBUXRsQyxFQUFJMUYsRUFBTStELEtBQUtDLFVBQVV1RyxHQUFRMkgsRUFBS3BPLEtBR3pDNEIsRUFBRzh4QixXQUNLLFVBQVR4M0IsR0FDQWdpRCxHQUFvQnQ4QyxFQUFHMGMsSUFBSzFjLEVBQUd5bEMsU0FBUzdnQyxLQUFNdEssSUFDaEQ0cUMsR0FBUWxsQyxFQUFJMUYsRUFBTSxPQUFRa1MsRUFBS3BPLElBbmJyQzhnRCxDQUFheEIsR0FDTkEsRUFzQ1QsU0FBU3lCLEdBQVluL0MsR0FDbkIsSUFBSWdrQyxFQUNKLEdBQUtBLEVBQU15QyxHQUFpQnptQyxFQUFJLFNBQVcsQ0FDekMsSUFBSTlDLEVBY1IsU0FBbUI4bUMsR0FDakIsSUFBSW9iLEVBQVVwYixFQUFJLy9CLE1BQU15NEMsSUFDeEIsR0FBSzBDLEVBQUwsQ0FDQSxJQUFJbGlELEVBQU0sR0FDVkEsRUFBSTBnRCxJQUFNd0IsRUFBUSxHQUFHemEsT0FDckIsSUFBSTBhLEVBQVFELEVBQVEsR0FBR3phLE9BQU9qaEMsUUFBUWs1QyxHQUFlLElBQ2pEMEMsRUFBZ0JELEVBQU1wN0MsTUFBTTA0QyxJQVVoQyxPQVRJMkMsR0FDRnBpRCxFQUFJbWlELE1BQVFBLEVBQU0zN0MsUUFBUWk1QyxHQUFlLElBQUloWSxPQUM3Q3puQyxFQUFJcWlELFVBQVlELEVBQWMsR0FBRzNhLE9BQzdCMmEsRUFBYyxLQUNoQnBpRCxFQUFJc2lELFVBQVlGLEVBQWMsR0FBRzNhLFNBR25Dem5DLEVBQUltaUQsTUFBUUEsRUFFUG5pRCxHQTlCS3VpRCxDQUFTemIsR0FDZjltQyxHQUNGNFosRUFBTzlXLEVBQUk5QyxJQW9GakIsU0FBU3dpRCxHQUFnQjEvQyxFQUFJMi9DLEdBQ3RCMy9DLEVBQUc0L0MsZUFDTjUvQyxFQUFHNC9DLGFBQWUsSUFFcEI1L0MsRUFBRzQvQyxhQUFhaGdELEtBQUsrL0MsR0FtSXZCLFNBQVN2QixHQUFheEosR0FDcEIsSUFBSXQ2QyxFQUFPczZDLEVBQVF0NkMsS0FBS29KLFFBQVF1NUMsR0FBUSxJQVd4QyxPQVZLM2lELEdBQ3FCLE1BQXBCczZDLEVBQVF0NkMsS0FBSyxLQUNmQSxFQUFPLFdBUUp1aUQsR0FBYXh4QyxLQUFLL1EsR0FFckIsQ0FBRUEsS0FBTUEsRUFBSytDLE1BQU0sR0FBSSxHQUFJOG5DLFNBQVMsR0FFcEMsQ0FBRTdxQyxLQUFPLElBQU9BLEVBQU8sSUFBTzZxQyxTQUFTLEdBNks3QyxTQUFTNFosR0FBZ0J6a0QsR0FDdkIsSUFBSTJKLEVBQVEzSixFQUFLMkosTUFBTSs0QyxJQUN2QixHQUFJLzRDLEVBQU8sQ0FDVCxJQUFJNFMsRUFBTSxHQUVWLE9BREE1UyxFQUFNekksU0FBUSxTQUFVNlgsR0FBS3dELEVBQUl4RCxFQUFFaFcsTUFBTSxLQUFNLEtBQ3hDd1osR0FJWCxTQUFTMG1DLEdBQWNsMUIsR0FFckIsSUFEQSxJQUFJbnFCLEVBQU0sR0FDREUsRUFBSSxFQUFHcVksRUFBSTRSLEVBQU0vckIsT0FBUThCLEVBQUlxWSxFQUFHclksSUFPdkNGLEVBQUltcUIsRUFBTWpxQixHQUFHOUQsTUFBUSt0QixFQUFNanFCLEdBQUd5RyxNQUVoQyxPQUFPM0csRUFrQlQsSUFBSTJoRCxHQUFVLGVBQ1ZDLEdBQWEsVUFnR2pCLFNBQVNDLEdBQWlCLy9DLEdBQ3hCLE9BQU9zOUMsR0FBaUJ0OUMsRUFBRzBjLElBQUsxYyxFQUFHMGxDLFVBQVVyb0MsUUFBUzJDLEVBQUdvZCxRQUczRCxJQWlESTRpQyxHQUNBQyxHQTltVW9CcnpDLEdBZ2tVcEJzekMsR0FBWSxDQUNkaEcsR0FDQUssR0FOWSxDQUNaNEYsaUJBbkVGLFNBQTJCbmdELEVBQUk1RixHQUM3QixHQUFlLFVBQVg0RixFQUFHMGMsSUFBaUIsQ0FDdEIsSUFLSTBqQyxFQUxBbGlELEVBQU04QixFQUFHeWxDLFNBQ2IsSUFBS3ZuQyxFQUFJLFdBQ1AsT0FXRixJQVBJQSxFQUFJLFVBQVlBLEVBQUksa0JBQ3RCa2lELEVBQWM5WixHQUFldG1DLEVBQUksU0FFOUI5QixFQUFJMEcsTUFBU3c3QyxJQUFlbGlELEVBQUksWUFDbkNraUQsRUFBYyxJQUFPbGlELEVBQUksVUFBYSxVQUdwQ2tpRCxFQUFhLENBQ2YsSUFBSUMsRUFBYzVaLEdBQWlCem1DLEVBQUksUUFBUSxHQUMzQ3NnRCxFQUFtQkQsRUFBZSxNQUFRQSxFQUFjLElBQU8sR0FDL0RFLEVBQWtELE1BQXhDOVosR0FBaUJ6bUMsRUFBSSxVQUFVLEdBQ3pDd2dELEVBQWtCL1osR0FBaUJ6bUMsRUFBSSxhQUFhLEdBRXBEeWdELEVBQVVWLEdBQWdCLy9DLEdBRTlCbS9DLEdBQVdzQixHQUNYamIsR0FBV2liLEVBQVMsT0FBUSxZQUM1QmhELEdBQWVnRCxFQUFTcm1ELEdBQ3hCcW1ELEVBQVFDLFdBQVksRUFDcEJELEVBQVFFLEdBQUssSUFBTVAsRUFBYyxpQkFBbUJFLEVBQ3BEWixHQUFlZSxFQUFTLENBQ3RCemMsSUFBS3ljLEVBQVFFLEdBQ2JDLE1BQU9ILElBR1QsSUFBSUksRUFBVWQsR0FBZ0IvL0MsR0FDOUJ5bUMsR0FBaUJvYSxFQUFTLFNBQVMsR0FDbkNyYixHQUFXcWIsRUFBUyxPQUFRLFNBQzVCcEQsR0FBZW9ELEVBQVN6bUQsR0FDeEJzbEQsR0FBZWUsRUFBUyxDQUN0QnpjLElBQUssSUFBTW9jLEVBQWMsY0FBZ0JFLEVBQ3pDTSxNQUFPQyxJQUdULElBQUlDLEVBQVVmLEdBQWdCLy9DLEdBZTlCLE9BZEF5bUMsR0FBaUJxYSxFQUFTLFNBQVMsR0FDbkN0YixHQUFXc2IsRUFBUyxRQUFTVixHQUM3QjNDLEdBQWVxRCxFQUFTMW1ELEdBQ3hCc2xELEdBQWVlLEVBQVMsQ0FDdEJ6YyxJQUFLcWMsRUFDTE8sTUFBT0UsSUFHTFAsRUFDRkUsRUFBUU0sTUFBTyxFQUNOUCxJQUNUQyxFQUFRTyxPQUFTUixHQUdaQyxPQTJDVFEsR0FBYyxDQUNoQkMsWUFBWSxFQUNadDBDLFFBQVNzekMsR0FDVG4rQixXQVhpQixDQUNqQnFRLE1BaHRHRixTQUNFcHlCLEVBQ0FraEMsRUFDQWlnQixHQUdBLElBQUl0OEMsRUFBUXE4QixFQUFJcjhCLE1BQ1ptOUIsRUFBWWQsRUFBSWMsVUFDaEJ0bEIsRUFBTTFjLEVBQUcwYyxJQUNUOVgsRUFBTzVFLEVBQUd5bEMsU0FBUzdnQyxLQWN2QixHQUFJNUUsRUFBRzh4QixVQUdMLE9BRkFnVixHQUFrQjltQyxFQUFJNkUsRUFBT205QixJQUV0QixFQUNGLEdBQVksV0FBUnRsQixHQXFFYixTQUNFMWMsRUFDQTZFLEVBQ0FtOUIsR0FFQSxJQU9Jb2YsRUFBTyw4S0FQRXBmLEdBQWFBLEVBQVUrRSxPQUlaLFVBQVksT0FHekIsTUFFWGpCLEdBQVc5bEMsRUFBSSxTQURmb2hELEVBQU9BLEVBQU8sSUFBT2xhLEdBQWtCcmlDLEVBRnRCLDZEQUdjLE1BQU0sR0FsRm5DdzhDLENBQVVyaEQsRUFBSTZFLEVBQU9tOUIsUUFDaEIsR0FBWSxVQUFSdGxCLEdBQTRCLGFBQVQ5WCxHQXdCaEMsU0FDRTVFLEVBQ0E2RSxFQUNBbTlCLEdBRUEsSUFBSStFLEVBQVMvRSxHQUFhQSxFQUFVK0UsT0FDaEN1YSxFQUFlaGIsR0FBZXRtQyxFQUFJLFVBQVksT0FDOUN1aEQsRUFBbUJqYixHQUFldG1DLEVBQUksZUFBaUIsT0FDdkR3aEQsRUFBb0JsYixHQUFldG1DLEVBQUksZ0JBQWtCLFFBQzdEa2xDLEdBQVFsbEMsRUFBSSxVQUNWLGlCQUFtQjZFLEVBQW5CLFFBQ1NBLEVBQVEsSUFBTXk4QyxFQUFlLFFBQ2YsU0FBckJDLEVBQ0ssS0FBTzE4QyxFQUFRLElBQ2YsT0FBU0EsRUFBUSxJQUFNMDhDLEVBQW1CLE1BR25EemIsR0FBVzlsQyxFQUFJLFNBQ2IsV0FBYTZFLEVBQWIseUNBRTJCMDhDLEVBQW1CLE1BQVFDLEVBRnRELHFDQUlnQnphLEVBQVMsTUFBUXVhLEVBQWUsSUFBTUEsR0FKdEQsNkNBTWlDcGEsR0FBa0JyaUMsRUFBTyxxQkFOMUQsbUJBT3NCcWlDLEdBQWtCcmlDLEVBQU8sNkNBUC9DLFdBUVlxaUMsR0FBa0JyaUMsRUFBTyxPQUFVLElBQy9DLE1BQU0sR0FsRE40OEMsQ0FBaUJ6aEQsRUFBSTZFLEVBQU9tOUIsUUFDdkIsR0FBWSxVQUFSdGxCLEdBQTRCLFVBQVQ5WCxHQXFEaEMsU0FDRTVFLEVBQ0E2RSxFQUNBbTlCLEdBRUEsSUFBSStFLEVBQVMvRSxHQUFhQSxFQUFVK0UsT0FDaEN1YSxFQUFlaGIsR0FBZXRtQyxFQUFJLFVBQVksT0FFbERrbEMsR0FBUWxsQyxFQUFJLFVBQVksTUFBUTZFLEVBQVEsS0FEeEN5OEMsRUFBZXZhLEVBQVUsTUFBUXVhLEVBQWUsSUFBT0EsR0FDTSxLQUM3RHhiLEdBQVc5bEMsRUFBSSxTQUFVa25DLEdBQWtCcmlDLEVBQU95OEMsR0FBZSxNQUFNLEdBN0RyRUksQ0FBYzFoRCxFQUFJNkUsRUFBT205QixRQUNwQixHQUFZLFVBQVJ0bEIsR0FBMkIsYUFBUkEsR0FnRmhDLFNBQ0UxYyxFQUNBNkUsRUFDQW05QixHQUVBLElBQUlwOUIsRUFBTzVFLEVBQUd5bEMsU0FBUzdnQyxLQWlCbkJvM0IsRUFBTWdHLEdBQWEsR0FDbkI3TCxFQUFPNkYsRUFBSTdGLEtBQ1g0USxFQUFTL0ssRUFBSStLLE9BQ2JwQyxFQUFPM0ksRUFBSTJJLEtBQ1hnZCxHQUF3QnhyQixHQUFpQixVQUFUdnhCLEVBQ2hDSCxFQUFRMHhCLEVBQ1IsU0FDUyxVQUFUdnhCLEVBakpZLE1BbUpWLFFBRUZvaUMsRUFBa0Isc0JBQ2xCckMsSUFDRnFDLEVBQWtCLDhCQUVoQkQsSUFDRkMsRUFBa0IsTUFBUUEsRUFBa0IsS0FHOUMsSUFBSW9hLEVBQU9sYSxHQUFrQnJpQyxFQUFPbWlDLEdBQ2hDMmEsSUFDRlAsRUFBTyxxQ0FBdUNBLEdBR2hEbGMsR0FBUWxsQyxFQUFJLFFBQVUsSUFBTTZFLEVBQVEsS0FDcENpaEMsR0FBVzlsQyxFQUFJeUUsRUFBTzI4QyxFQUFNLE1BQU0sSUFDOUJ6YyxHQUFRb0MsSUFDVmpCLEdBQVc5bEMsRUFBSSxPQUFRLGtCQWhJdkI0aEQsQ0FBZ0I1aEQsRUFBSTZFLEVBQU9tOUIsUUFDdEIsSUFBSy9pQyxFQUFPMlosY0FBYzhELEdBRy9CLE9BRkFvcUIsR0FBa0I5bUMsRUFBSTZFLEVBQU9tOUIsSUFFdEIsRUFZVCxPQUFPLEdBK3BHUDlpQyxLQWhCRixTQUFlYyxFQUFJa2hDLEdBQ2JBLEVBQUlyOEIsT0FDTnFnQyxHQUFRbGxDLEVBQUksY0FBZ0IsTUFBU2toQyxFQUFTLE1BQUksSUFBTUEsSUFlMUQyYSxLQVRGLFNBQWU3N0MsRUFBSWtoQyxHQUNiQSxFQUFJcjhCLE9BQ05xZ0MsR0FBUWxsQyxFQUFJLFlBQWMsTUFBU2toQyxFQUFTLE1BQUksSUFBTUEsS0FnQnhEMmdCLFNBOTNKYSxTQUFVbmxDLEdBQU8sTUFBZSxRQUFSQSxHQSszSnJDKzlCLFdBQVlBLEdBQ1p4aEMsWUFBYUEsR0FDYnloQyxpQkFBa0JBLEdBQ2xCOWhDLGNBQWVBLEdBQ2ZHLGdCQUFpQkEsR0FDakJvaEMsWUF4bVVzQnZ0QyxHQXdtVUlzekMsR0F2bVVuQnR6QyxHQUFRek8sUUFBTyxTQUFVaUgsRUFBTWlPLEdBQ3BDLE9BQU9qTyxFQUFLdUgsT0FBTzBHLEVBQUU4bUMsWUFBYyxNQUNsQyxJQUFJcDZDLEtBQUssT0E2bVVWK2hELEdBQXNCaHNDLEdBdUIxQixTQUEwQjFRLEdBQ3hCLE9BQU9xUSxFQUNMLGlGQUNDclEsRUFBTyxJQUFNQSxFQUFPLFFBYnpCLFNBQVMyOEMsR0FBVTd2QyxFQUFNOVgsR0FDbEI4WCxJQUNMOHRDLEdBQWM4QixHQUFvQjFuRCxFQUFRKy9DLFlBQWMsSUFDeEQ4RixHQUF3QjdsRCxFQUFRd2UsZUFBaUJ6QixFQUVqRDZxQyxHQUFhOXZDLEdBRWIrdkMsR0FBZ0IvdkMsR0FBTSxJQVV4QixTQUFTOHZDLEdBQWNoa0MsR0FFckIsR0FEQUEsRUFBS2trQyxPQTZEUCxTQUFtQmxrQyxHQUNqQixPQUFrQixJQUFkQSxFQUFLcFosT0FHUyxJQUFkb1osRUFBS3BaLFNBR0NvWixFQUFLcVYsTUFDWnJWLEVBQUs4Z0MsYUFDTDlnQyxFQUFLMmlDLElBQU8zaUMsRUFBSzQvQixLQUNqQmpvQyxFQUFhcUksRUFBS3RCLE9BQ25CdWpDLEdBQXNCamlDLEVBQUt0QixNQU0vQixTQUFxQ3NCLEdBQ25DLEtBQU9BLEVBQUtaLFFBQVEsQ0FFbEIsR0FBaUIsY0FEakJZLEVBQU9BLEVBQUtaLFFBQ0hWLElBQ1AsT0FBTyxFQUVULEdBQUlzQixFQUFLNC9CLElBQ1AsT0FBTyxFQUdYLE9BQU8sRUFmSnVFLENBQTJCbmtDLEtBQzVCcGQsT0FBT3dFLEtBQUs0WSxHQUFNdEcsTUFBTXNvQyxPQTFFWjFpQyxDQUFTVSxHQUNMLElBQWRBLEVBQUtwWixLQUFZLENBSW5CLElBQ0dxN0MsR0FBc0JqaUMsRUFBS3RCLE1BQ2YsU0FBYnNCLEVBQUt0QixLQUMrQixNQUFwQ3NCLEVBQUt5bkIsU0FBUyxtQkFFZCxPQUVGLElBQUssSUFBSXJuQyxFQUFJLEVBQUdxWSxFQUFJdUgsRUFBS3pKLFNBQVNqWSxPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUFLLENBQ3BELElBQUkwZixFQUFRRSxFQUFLekosU0FBU25XLEdBQzFCNGpELEdBQWFsa0MsR0FDUkEsRUFBTW9rQyxTQUNUbGtDLEVBQUtra0MsUUFBUyxHQUdsQixHQUFJbGtDLEVBQUs0aEMsYUFDUCxJQUFLLElBQUl6a0IsRUFBTSxFQUFHaW5CLEVBQU1wa0MsRUFBSzRoQyxhQUFhdGpELE9BQVE2K0IsRUFBTWluQixFQUFLam5CLElBQU8sQ0FDbEUsSUFBSXlsQixFQUFRNWlDLEVBQUs0aEMsYUFBYXprQixHQUFLeWxCLE1BQ25Db0IsR0FBYXBCLEdBQ1JBLEVBQU1zQixTQUNUbGtDLEVBQUtra0MsUUFBUyxLQU94QixTQUFTRCxHQUFpQmprQyxFQUFNbU4sR0FDOUIsR0FBa0IsSUFBZG5OLEVBQUtwWixLQUFZLENBT25CLElBTklvWixFQUFLa2tDLFFBQVVsa0MsRUFBS2pHLFFBQ3RCaUcsRUFBS3FrQyxZQUFjbDNCLEdBS2pCbk4sRUFBS2trQyxRQUFVbGtDLEVBQUt6SixTQUFTalksU0FDTixJQUF6QjBoQixFQUFLekosU0FBU2pZLFFBQ1ksSUFBMUIwaEIsRUFBS3pKLFNBQVMsR0FBRzNQLE1BR2pCLFlBREFvWixFQUFLc2tDLFlBQWEsR0FLcEIsR0FGRXRrQyxFQUFLc2tDLFlBQWEsRUFFaEJ0a0MsRUFBS3pKLFNBQ1AsSUFBSyxJQUFJblcsRUFBSSxFQUFHcVksRUFBSXVILEVBQUt6SixTQUFTalksT0FBUThCLEVBQUlxWSxFQUFHclksSUFDL0M2akQsR0FBZ0Jqa0MsRUFBS3pKLFNBQVNuVyxHQUFJK3NCLEtBQWFuTixFQUFLNC9CLEtBR3hELEdBQUk1L0IsRUFBSzRoQyxhQUNQLElBQUssSUFBSXprQixFQUFNLEVBQUdpbkIsRUFBTXBrQyxFQUFLNGhDLGFBQWF0akQsT0FBUTYrQixFQUFNaW5CLEVBQUtqbkIsSUFDM0Q4bUIsR0FBZ0Jqa0MsRUFBSzRoQyxhQUFhemtCLEdBQUt5bEIsTUFBT3oxQixJQXNDdEQsSUFBSW8zQixHQUFVLDBEQUNWQyxHQUFhLGdCQUNiQyxHQUFlLCtGQUdmOXBDLEdBQVcsQ0FDYitwQyxJQUFLLEdBQ0xDLElBQUssRUFDTDlVLE1BQU8sR0FDUCtVLE1BQU8sR0FDUEMsR0FBSSxHQUNKOUssS0FBTSxHQUNOOVIsTUFBTyxHQUNQNmMsS0FBTSxHQUNOLE9BQVUsQ0FBQyxFQUFHLEtBSVpDLEdBQVcsQ0FFYkwsSUFBSyxDQUFDLE1BQU8sVUFDYkMsSUFBSyxNQUNMOVUsTUFBTyxRQUVQK1UsTUFBTyxDQUFDLElBQUssWUFFYkMsR0FBSSxDQUFDLEtBQU0sV0FDWDlLLEtBQU0sQ0FBQyxPQUFRLGFBQ2Y5UixNQUFPLENBQUMsUUFBUyxjQUNqQjZjLEtBQU0sQ0FBQyxPQUFRLGFBRWYsT0FBVSxDQUFDLFlBQWEsU0FBVSxRQU1oQ0UsR0FBVyxTQUFVckQsR0FBYSxNQUFRLE1BQVFBLEVBQVksaUJBRTlEc0QsR0FBZSxDQUNqQkMsS0FBTSw0QkFDTkMsUUFBUywyQkFDVG5nRCxLQUFNZ2dELEdBQVMsMENBQ2ZJLEtBQU1KLEdBQVMsbUJBQ2ZuN0IsTUFBT203QixHQUFTLG9CQUNoQkssSUFBS0wsR0FBUyxrQkFDZE0sS0FBTU4sR0FBUyxtQkFDZmpMLEtBQU1pTCxHQUFTLDZDQUNmOWMsT0FBUThjLEdBQVMsNkNBQ2pCL2MsTUFBTytjLEdBQVMsOENBR2xCLFNBQVNPLEdBQ1B2ZCxFQUNBNXFCLEdBRUEsSUFBSW9vQyxFQUFTcG9DLEVBQVcsWUFBYyxNQUNsQ3FvQyxFQUFpQixHQUNqQkMsRUFBa0IsR0FDdEIsSUFBSyxJQUFJcHBELEtBQVEwckMsRUFBUSxDQUN2QixJQUFJMmQsRUFBY0MsR0FBVzVkLEVBQU8xckMsSUFDaEMwckMsRUFBTzFyQyxJQUFTMHJDLEVBQU8xckMsR0FBTTZxQyxRQUMvQnVlLEdBQW1CcHBELEVBQU8sSUFBTXFwRCxFQUFjLElBRTlDRixHQUFrQixJQUFPbnBELEVBQU8sS0FBUXFwRCxFQUFjLElBSTFELE9BREFGLEVBQWlCLElBQU9BLEVBQWVwbUQsTUFBTSxHQUFJLEdBQU0sSUFDbkRxbUQsRUFDS0YsRUFBUyxNQUFRQyxFQUFpQixLQUFRQyxFQUFnQnJtRCxNQUFNLEdBQUksR0FBTSxLQUUxRW1tRCxFQUFTQyxFQUlwQixTQUFTRyxHQUFZMS9CLEdBQ25CLElBQUtBLEVBQ0gsTUFBTyxlQUdULEdBQUl6cEIsTUFBTUMsUUFBUXdwQixHQUNoQixNQUFRLElBQU9BLEVBQVFobUIsS0FBSSxTQUFVZ21CLEdBQVcsT0FBTzAvQixHQUFXMS9CLE1BQWFua0IsS0FBSyxLQUFRLElBRzlGLElBQUk4akQsRUFBZXBCLEdBQWFwM0MsS0FBSzZZLEVBQVFyZixPQUN6Q2kvQyxFQUF1QnZCLEdBQVFsM0MsS0FBSzZZLEVBQVFyZixPQUM1Q2svQyxFQUF1QnRCLEdBQWFwM0MsS0FBSzZZLEVBQVFyZixNQUFNbkIsUUFBUTgrQyxHQUFZLEtBRS9FLEdBQUt0K0IsRUFBUThkLFVBS04sQ0FDTCxJQUFJb2YsRUFBTyxHQUNQNEMsRUFBa0IsR0FDbEI1K0MsRUFBTyxHQUNYLElBQUssSUFBSWpGLEtBQU8rakIsRUFBUThkLFVBQ3RCLEdBQUlpaEIsR0FBYTlpRCxHQUNmNmpELEdBQW1CZixHQUFhOWlELEdBRTVCd1ksR0FBU3hZLElBQ1hpRixFQUFLeEYsS0FBS08sUUFFUCxHQUFZLFVBQVJBLEVBQWlCLENBQzFCLElBQUk2aEMsRUFBYTlkLEVBQWlCLFVBQ2xDOC9CLEdBQW1CaEIsR0FDakIsQ0FBQyxPQUFRLFFBQVMsTUFBTyxRQUN0QnZ5QyxRQUFPLFNBQVV3ekMsR0FBZSxPQUFRamlCLEVBQVVpaUIsTUFDbEQvbEQsS0FBSSxTQUFVK2xELEdBQWUsTUFBUSxVQUFZQSxFQUFjLFNBQy9EbGtELEtBQUssWUFHVnFGLEVBQUt4RixLQUFLTyxHQWlCZCxPQWRJaUYsRUFBSzlJLFNBQ1A4a0QsR0FpQk4sU0FBdUJoOEMsR0FDckIsTUFJRSxtQ0FDQ0EsRUFBS2xILElBQUlnbUQsSUFBZW5rRCxLQUFLLE1BQVMsZ0JBdkI3Qm9rRCxDQUFhLytDLElBR25CNCtDLElBQ0Y1QyxHQUFRNEMsR0FTRixvQkFBc0I1QyxHQVBaeUMsRUFDYixVQUFhMy9CLEVBQWEsTUFBSSxXQUMvQjQvQixFQUNHLFdBQWM1L0IsRUFBYSxNQUFJLFlBQ2hDNi9CLEVBQ0csVUFBYTcvQixFQUFhLE1BQzNCQSxFQUFRcmYsT0FDbUMsSUF6Q25ELE9BQUlnL0MsR0FBZ0JDLEVBQ1g1L0IsRUFBUXJmLE1BRVQscUJBQXVCay9DLEVBQXdCLFVBQWE3L0IsRUFBYSxNQUFLQSxFQUFRcmYsT0FBUyxJQW9EM0csU0FBU3EvQyxHQUFlL2pELEdBQ3RCLElBQUlpa0QsRUFBU24rQyxTQUFTOUYsRUFBSyxJQUMzQixHQUFJaWtELEVBQ0YsTUFBUSxvQkFBc0JBLEVBRWhDLElBQUlDLEVBQVUxckMsR0FBU3hZLEdBQ25CbWtELEVBQVV2QixHQUFTNWlELEdBQ3ZCLE1BQ0UscUJBQ0M5QixLQUFLQyxVQUFVNkIsR0FBUSxJQUN2QjlCLEtBQUtDLFVBQVUrbEQsR0FGaEIsZUFJTWhtRCxLQUFLQyxVQUFVZ21ELEdBQ3JCLElBdUJKLElBQUlDLEdBQWlCLENBQ25CaCtCLEdBbEJGLFNBQWF2bUIsRUFBSWtoQyxHQUlmbGhDLEVBQUd3a0QsY0FBZ0IsU0FBVXBELEdBQVEsTUFBUSxNQUFRQSxFQUFPLElBQU9sZ0IsRUFBUyxNQUFJLE1BZWhGcmxDLEtBVkYsU0FBaUJtRSxFQUFJa2hDLEdBQ25CbGhDLEVBQUd5a0QsU0FBVyxTQUFVckQsR0FDdEIsTUFBUSxNQUFRQSxFQUFPLEtBQVFwaEQsRUFBTSxJQUFJLEtBQVFraEMsRUFBUyxNQUFJLEtBQU9BLEVBQUljLFdBQWFkLEVBQUljLFVBQVV2dEIsS0FBTyxPQUFTLFVBQVl5c0IsRUFBSWMsV0FBYWQsRUFBSWMsVUFBVTVRLEtBQU8sUUFBVSxJQUFNLE1BU3hMc3pCLE1BQU94dEMsR0FTTHl0QyxHQUFlLFNBQXVCdnFELEdBQ3hDQyxLQUFLRCxRQUFVQSxFQUNmQyxLQUFLbUksS0FBT3BJLEVBQVFvSSxNQUFRc2lDLEdBQzVCenFDLEtBQUs2aEQsV0FBYWpYLEdBQW9CN3FDLEVBQVF3UyxRQUFTLGlCQUN2RHZTLEtBQUt1cUQsV0FBYTNmLEdBQW9CN3FDLEVBQVF3UyxRQUFTLFdBQ3ZEdlMsS0FBSzBuQixXQUFhakwsRUFBT0EsRUFBTyxHQUFJeXRDLElBQWlCbnFELEVBQVEybkIsWUFDN0QsSUFBSW5KLEVBQWdCeGUsRUFBUXdlLGVBQWlCekIsRUFDN0M5YyxLQUFLd3FELGVBQWlCLFNBQVU3a0QsR0FBTSxRQUFTQSxFQUFHOHhCLFlBQWNsWixFQUFjNVksRUFBRzBjLE1BQ2pGcmlCLEtBQUt5cUQsT0FBUyxFQUNkenFELEtBQUtreEIsZ0JBQWtCLEdBQ3ZCbHhCLEtBQUtnNUIsS0FBTSxHQUtiLFNBQVMweEIsR0FDUEMsRUFDQTVxRCxHQUVBLElBQUk2cUQsRUFBUSxJQUFJTixHQUFhdnFELEdBRTdCLE1BQU8sQ0FDTG12QixPQUFTLHNCQUZBeTdCLEVBQU1FLEdBQVdGLEVBQUtDLEdBQVMsYUFFRCxJQUN2QzE1QixnQkFBaUIwNUIsRUFBTTE1QixpQkFJM0IsU0FBUzI1QixHQUFZbGxELEVBQUlpbEQsR0FLdkIsR0FKSWpsRCxFQUFHb2QsU0FDTHBkLEVBQUdxekIsSUFBTXJ6QixFQUFHcXpCLEtBQU9yekIsRUFBR29kLE9BQU9pVyxLQUczQnJ6QixFQUFHc2lELGFBQWV0aUQsRUFBR21sRCxnQkFDdkIsT0FBT0MsR0FBVXBsRCxFQUFJaWxELEdBQ2hCLEdBQUlqbEQsRUFBRytYLE9BQVMvWCxFQUFHcWxELGNBQ3hCLE9BQU9DLEdBQVF0bEQsRUFBSWlsRCxHQUNkLEdBQUlqbEQsRUFBRzQ5QyxNQUFRNTlDLEVBQUd1bEQsYUFDdkIsT0FBT0MsR0FBT3hsRCxFQUFJaWxELEdBQ2IsR0FBSWpsRCxFQUFHMmdELEtBQU8zZ0QsRUFBR3lsRCxZQUN0QixPQUFPQyxHQUFNMWxELEVBQUlpbEQsR0FDWixHQUFlLGFBQVhqbEQsRUFBRzBjLEtBQXVCMWMsRUFBR2crQyxZQUFlaUgsRUFBTTV4QixJQUV0RCxJQUFlLFNBQVhyekIsRUFBRzBjLElBQ1osT0F1YkosU0FBa0IxYyxFQUFJaWxELEdBQ3BCLElBQUl2RyxFQUFXMStDLEVBQUcwK0MsVUFBWSxZQUMxQm5xQyxFQUFXb3hDLEdBQVkzbEQsRUFBSWlsRCxHQUMzQi9uRCxFQUFNLE1BQVF3aEQsR0FBWW5xQyxFQUFZLElBQU1BLEVBQVksSUFDeEQ4VCxFQUFRcm9CLEVBQUdxb0IsT0FBU3JvQixFQUFHdWxDLGFBQ3ZCcWdCLElBQVU1bEQsRUFBR3FvQixPQUFTLElBQUkxYixPQUFPM00sRUFBR3VsQyxjQUFnQixJQUFJcm5DLEtBQUksU0FBVWtDLEdBQVEsTUFBTyxDQUVuRjlGLEtBQU0yYixFQUFTN1YsRUFBSzlGLE1BQ3BCdUssTUFBT3pFLEVBQUt5RSxNQUNac2dDLFFBQVMva0MsRUFBSytrQyxhQUVoQixLQUNBMGdCLEVBQVU3bEQsRUFBR3lsQyxTQUFTLFVBVTFCLE9BVEtwZCxJQUFTdzlCLEdBQWF0eEMsSUFDekJyWCxHQUFPLFNBRUxtckIsSUFDRm5yQixHQUFPLElBQU1tckIsR0FFWHc5QixJQUNGM29ELElBQVFtckIsRUFBUSxHQUFLLFNBQVcsSUFBTXc5QixHQUVqQzNvRCxFQUFNLElBN2NKNG9ELENBQVE5bEQsRUFBSWlsRCxHQUduQixJQUFJN0QsRUFDSixHQUFJcGhELEVBQUc4eEIsVUFDTHN2QixFQTRjTixTQUNFMkUsRUFDQS9sRCxFQUNBaWxELEdBRUEsSUFBSTF3QyxFQUFXdlUsRUFBR3l1QixlQUFpQixLQUFPazNCLEdBQVkzbEQsRUFBSWlsRCxHQUFPLEdBQ2pFLE1BQVEsTUFBUWMsRUFBZ0IsSUFBT0MsR0FBVWhtRCxFQUFJaWxELElBQVcxd0MsRUFBWSxJQUFNQSxFQUFZLElBQU0sSUFsZHpGMHhDLENBQWFqbUQsRUFBRzh4QixVQUFXOXhCLEVBQUlpbEQsT0FDakMsQ0FDTCxJQUFJem5ELElBQ0N3QyxFQUFHcWxDLE9BQVVybEMsRUFBR3F6QixLQUFPNHhCLEVBQU1KLGVBQWU3a0QsTUFDL0N4QyxFQUFPd29ELEdBQVVobUQsRUFBSWlsRCxJQUd2QixJQUFJMXdDLEVBQVd2VSxFQUFHeXVCLGVBQWlCLEtBQU9rM0IsR0FBWTNsRCxFQUFJaWxELEdBQU8sR0FDakU3RCxFQUFPLE9BQVVwaEQsRUFBTSxJQUFJLEtBQU94QyxFQUFRLElBQU1BLEVBQVEsS0FBTytXLEVBQVksSUFBTUEsRUFBWSxJQUFNLElBR3JHLElBQUssSUFBSW5XLEVBQUksRUFBR0EsRUFBSTZtRCxFQUFNL0ksV0FBVzUvQyxPQUFROEIsSUFDM0NnakQsRUFBTzZELEVBQU0vSSxXQUFXOTlDLEdBQUc0QixFQUFJb2hELEdBRWpDLE9BQU9BLEVBckJQLE9BQU91RSxHQUFZM2xELEVBQUlpbEQsSUFBVSxTQTBCckMsU0FBU0csR0FBV3BsRCxFQUFJaWxELEdBQ3RCamxELEVBQUdtbEQsaUJBQWtCLEVBSXJCLElBQUllLEVBQW1CakIsRUFBTTV4QixJQU03QixPQUxJcnpCLEVBQUdxekIsTUFDTDR4QixFQUFNNXhCLElBQU1yekIsRUFBR3F6QixLQUVqQjR4QixFQUFNMTVCLGdCQUFnQjNyQixLQUFNLHFCQUF3QnNsRCxHQUFXbGxELEVBQUlpbEQsR0FBVSxLQUM3RUEsRUFBTTV4QixJQUFNNnlCLEVBQ0osT0FBU2pCLEVBQU0xNUIsZ0JBQWdCanZCLE9BQVMsSUFBTTBELEVBQUdxaUQsWUFBYyxRQUFVLElBQU0sSUFJekYsU0FBU2lELEdBQVN0bEQsRUFBSWlsRCxHQUVwQixHQURBamxELEVBQUdxbEQsZUFBZ0IsRUFDZnJsRCxFQUFHMmdELEtBQU8zZ0QsRUFBR3lsRCxZQUNmLE9BQU9DLEdBQU0xbEQsRUFBSWlsRCxHQUNaLEdBQUlqbEQsRUFBR3FpRCxZQUFhLENBR3pCLElBRkEsSUFBSWxpRCxFQUFNLEdBQ05pZCxFQUFTcGQsRUFBR29kLE9BQ1RBLEdBQVEsQ0FDYixHQUFJQSxFQUFPd2dDLElBQUssQ0FDZHo5QyxFQUFNaWQsRUFBT2pkLElBQ2IsTUFFRmlkLEVBQVNBLEVBQU9BLE9BRWxCLE9BQUtqZCxFQU9HLE1BQVMra0QsR0FBV2xsRCxFQUFJaWxELEdBQVUsSUFBT0EsRUFBTUgsU0FBWSxJQUFNM2tELEVBQU0sSUFGdEUra0QsR0FBV2xsRCxFQUFJaWxELEdBSXhCLE9BQU9HLEdBQVVwbEQsRUFBSWlsRCxHQUl6QixTQUFTUyxHQUNQMWxELEVBQ0FpbEQsRUFDQWtCLEVBQ0FDLEdBR0EsT0FEQXBtRCxFQUFHeWxELGFBQWMsRUFDVlksR0FBZ0JybUQsRUFBRzQvQyxhQUFhdmlELFFBQVM0bkQsRUFBT2tCLEVBQVFDLEdBR2pFLFNBQVNDLEdBQ1BDLEVBQ0FyQixFQUNBa0IsRUFDQUMsR0FFQSxJQUFLRSxFQUFXaHFELE9BQ2QsT0FBTzhwRCxHQUFZLE9BR3JCLElBQUl6RyxFQUFZMkcsRUFBV3orQixRQUMzQixPQUFJODNCLEVBQVUzYixJQUNKLElBQU8yYixFQUFhLElBQUksS0FBUTRHLEVBQWM1RyxFQUFVaUIsT0FBVSxJQUFPeUYsR0FBZ0JDLEVBQVlyQixFQUFPa0IsRUFBUUMsR0FFcEgsR0FBTUcsRUFBYzVHLEVBQVVpQixPQUl4QyxTQUFTMkYsRUFBZXZtRCxHQUN0QixPQUFPbW1ELEVBQ0hBLEVBQU9ubUQsRUFBSWlsRCxHQUNYamxELEVBQUcrWCxLQUNEdXRDLEdBQVF0bEQsRUFBSWlsRCxHQUNaQyxHQUFXbGxELEVBQUlpbEQsSUFJekIsU0FBU08sR0FDUHhsRCxFQUNBaWxELEVBQ0FrQixFQUNBSyxHQUVBLElBQUl4aUIsRUFBTWhrQyxFQUFHNDlDLElBQ1R5QixFQUFRci9DLEVBQUdxL0MsTUFDWEUsRUFBWXYvQyxFQUFHdS9DLFVBQWEsSUFBT3YvQyxFQUFZLFVBQUssR0FDcER3L0MsRUFBWXgvQyxFQUFHdy9DLFVBQWEsSUFBT3gvQyxFQUFZLFVBQUssR0FrQnhELE9BREFBLEVBQUd1bEQsY0FBZSxHQUNWaUIsR0FBYSxNQUFRLEtBQU94aUIsRUFBN0IsY0FDU3FiLEVBQVFFLEVBQVlDLEVBRDdCLGFBRVcyRyxHQUFVakIsSUFBWWxsRCxFQUFJaWxELEdBQzFDLEtBR0osU0FBU2UsR0FBV2htRCxFQUFJaWxELEdBQ3RCLElBQUl6bkQsRUFBTyxJQUlQc2tCLEVBK0VOLFNBQXdCOWhCLEVBQUlpbEQsR0FDMUIsSUFBSW5qQyxFQUFPOWhCLEVBQUcraEIsV0FDZCxHQUFLRCxFQUFMLENBQ0EsSUFFSTFqQixFQUFHcVksRUFBR3lxQixFQUFLdWxCLEVBRlh2cEQsRUFBTSxlQUNOd3BELEdBQWEsRUFFakIsSUFBS3RvRCxFQUFJLEVBQUdxWSxFQUFJcUwsRUFBS3hsQixPQUFROEIsRUFBSXFZLEVBQUdyWSxJQUFLLENBQ3ZDOGlDLEVBQU1wZixFQUFLMWpCLEdBQ1hxb0QsR0FBYyxFQUNkLElBQUlFLEVBQU0xQixFQUFNbGpDLFdBQVdtZixFQUFJNW1DLE1BQzNCcXNELElBR0ZGLElBQWdCRSxFQUFJM21ELEVBQUlraEMsRUFBSytqQixFQUFNemlELE9BRWpDaWtELElBQ0ZDLEdBQWEsRUFDYnhwRCxHQUFPLFVBQWNna0MsRUFBUSxLQUFJLGNBQW1CQSxFQUFXLFFBQUksS0FBUUEsRUFBSXI4QixNQUFTLFdBQWNxOEIsRUFBUyxNQUFJLGdCQUFtQjdpQyxLQUFLQyxVQUFVNGlDLEVBQUlyOEIsT0FBVyxLQUFPcThCLEVBQUlTLElBQU8sU0FBV1QsRUFBSTBFLGFBQWUxRSxFQUFJUyxJQUFPLElBQVFULEVBQU8sSUFBSSxLQUFVLEtBQU9BLEVBQUljLFVBQWEsY0FBaUIzakMsS0FBS0MsVUFBVTRpQyxFQUFJYyxXQUFlLElBQU0sTUFHalYsT0FBSTBrQixFQUNLeHBELEVBQUlHLE1BQU0sR0FBSSxHQUFLLFNBRDVCLEdBbkdXdXBELENBQWM1bUQsRUFBSWlsRCxHQUN6Qm5qQyxJQUFRdGtCLEdBQVFza0IsRUFBTyxLQUd2QjloQixFQUFHRyxNQUNMM0MsR0FBUSxPQUFVd0MsRUFBTSxJQUFJLEtBRzFCQSxFQUFHZzhCLE1BQ0x4K0IsR0FBUSxPQUFVd0MsRUFBTSxJQUFJLEtBRTFCQSxFQUFHdWdDLFdBQ0wvaUMsR0FBUSxrQkFHTndDLEVBQUdxekIsTUFDTDcxQixHQUFRLGFBR053QyxFQUFHOHhCLFlBQ0x0MEIsR0FBUSxRQUFZd0MsRUFBTSxJQUFJLE1BR2hDLElBQUssSUFBSTVCLEVBQUksRUFBR0EsRUFBSTZtRCxFQUFNTCxXQUFXdG9ELE9BQVE4QixJQUMzQ1osR0FBUXluRCxFQUFNTCxXQUFXeG1ELEdBQUc0QixHQStCOUIsR0E1QklBLEVBQUdxb0IsUUFDTDdxQixHQUFRLFNBQVlvb0QsR0FBUzVsRCxFQUFHcW9CLE9BQVUsS0FHeENyb0IsRUFBR3FoQixRQUNMN2pCLEdBQVEsWUFBZW9vRCxHQUFTNWxELEVBQUdxaEIsT0FBVSxLQUczQ3JoQixFQUFHZ21DLFNBQ0x4b0MsR0FBUytsRCxHQUFZdmpELEVBQUdnbUMsUUFBUSxHQUFVLEtBRXhDaG1DLEVBQUdvbUMsZUFDTDVvQyxHQUFTK2xELEdBQVl2akQsRUFBR29tQyxjQUFjLEdBQVMsS0FJN0NwbUMsRUFBR2crQyxhQUFlaCtDLEVBQUcrOUMsWUFDdkJ2Z0QsR0FBUSxRQUFXd0MsRUFBYSxXQUFJLEtBR2xDQSxFQUFHMHRCLGNBQ0xsd0IsR0F3RUosU0FDRXdDLEVBQ0Fvb0IsRUFDQTY4QixHQU1BLElBQUk5MUIsRUFBbUJudkIsRUFBRzQ5QyxLQUFPaDlDLE9BQU93RSxLQUFLZ2pCLEdBQU9ndEIsTUFBSyxTQUFVajFDLEdBQ2pFLElBQUltb0IsRUFBT0YsRUFBTWpvQixHQUNqQixPQUNFbW9CLEVBQUsyMUIsbUJBQ0wzMUIsRUFBS3E0QixJQUNMcjRCLEVBQUtzMUIsS0FDTGlKLEdBQWtCditCLE1BUWxCdytCLElBQWE5bUQsRUFBRzJnRCxHQU9wQixJQUFLeHhCLEVBRUgsSUFEQSxJQUFJL1IsRUFBU3BkLEVBQUdvZCxPQUNUQSxHQUFRLENBQ2IsR0FDR0EsRUFBTzJnQyxXQUFhM2dDLEVBQU8yZ0MsWUFBY1YsSUFDMUNqZ0MsRUFBT3dnQyxJQUNQLENBQ0F6dUIsR0FBbUIsRUFDbkIsTUFFRS9SLEVBQU91akMsS0FDVG1HLEdBQVcsR0FFYjFwQyxFQUFTQSxFQUFPQSxPQUlwQixJQUFJMnBDLEVBQWlCbm1ELE9BQU93RSxLQUFLZ2pCLEdBQzlCbHFCLEtBQUksU0FBVWlDLEdBQU8sT0FBTzZtRCxHQUFjNStCLEVBQU1qb0IsR0FBTThrRCxNQUN0RGxsRCxLQUFLLEtBRVIsTUFBUSxtQkFBcUJnbkQsRUFBaUIsS0FBTzUzQixFQUFtQixhQUFlLE1BQVFBLEdBQW9CMjNCLEVBQVksZUFHakksU0FBY2o4QyxHQUdaLElBRkEsSUFBSXNjLEVBQU8sS0FDUC9vQixFQUFJeU0sRUFBSXZPLE9BQ044QixHQUNKK29CLEVBQWUsR0FBUEEsRUFBYXRjLEVBQUl5TyxhQUFhbGIsR0FFeEMsT0FBTytvQixJQUFTLEVBVGdJLENBQU00L0IsR0FBb0IsSUFBTSxJQTNIdEssQ0FBZ0IvbUQsRUFBSUEsRUFBRzB0QixZQUFhdTNCLEdBQVUsS0FHcERqbEQsRUFBR295QixRQUNMNTBCLEdBQVEsZ0JBQW1Cd0MsRUFBR295QixNQUFXLE1BQUksYUFBZ0JweUIsRUFBR295QixNQUFjLFNBQUksZUFBa0JweUIsRUFBR295QixNQUFnQixXQUFJLE1BR3pIcHlCLEVBQUd5dUIsZUFBZ0IsQ0FDckIsSUFBSUEsRUFnRFIsU0FBNEJ6dUIsRUFBSWlsRCxHQUM5QixJQUFJRCxFQUFNaGxELEVBQUd1VSxTQUFTLEdBU3RCLEdBQUl5d0MsR0FBb0IsSUFBYkEsRUFBSXBnRCxLQUFZLENBQ3pCLElBQUlxaUQsRUFBa0JsQyxHQUFTQyxFQUFLQyxFQUFNN3FELFNBQzFDLE1BQVEscUNBQXdDNnNELEVBQXNCLE9BQUksc0JBQXlCQSxFQUFnQjE3QixnQkFBZ0JydEIsS0FBSSxTQUFVa2pELEdBQVEsTUFBUSxjQUFnQkEsRUFBTyxPQUFTcmhELEtBQUssS0FBUSxNQTVEekxtbkQsQ0FBa0JsbkQsRUFBSWlsRCxHQUN2Q3gyQixJQUNGanhCLEdBQVFpeEIsRUFBaUIsS0FrQjdCLE9BZkFqeEIsRUFBT0EsRUFBS2tHLFFBQVEsS0FBTSxJQUFNLElBSTVCMUQsRUFBR3VsQyxlQUNML25DLEVBQU8sTUFBUUEsRUFBTyxLQUFTd0MsRUFBTSxJQUFJLEtBQVM0bEQsR0FBUzVsRCxFQUFHdWxDLGNBQWlCLEtBRzdFdmxDLEVBQUd5a0QsV0FDTGpuRCxFQUFPd0MsRUFBR3lrRCxTQUFTam5ELElBR2pCd0MsRUFBR3drRCxnQkFDTGhuRCxFQUFPd0MsRUFBR3drRCxjQUFjaG5ELElBRW5CQSxFQTJHVCxTQUFTcXBELEdBQW1CN21ELEdBQzFCLE9BQWdCLElBQVpBLEVBQUc0RSxPQUNVLFNBQVg1RSxFQUFHMGMsS0FHQTFjLEVBQUd1VSxTQUFTNmdDLEtBQUt5UixLQUs1QixTQUFTRyxHQUNQaG5ELEVBQ0FpbEQsR0FFQSxJQUFJa0MsRUFBaUJubkQsRUFBR3lsQyxTQUFTLGNBQ2pDLEdBQUl6bEMsRUFBRzJnRCxLQUFPM2dELEVBQUd5bEQsY0FBZ0IwQixFQUMvQixPQUFPekIsR0FBTTFsRCxFQUFJaWxELEVBQU8rQixHQUFlLFFBRXpDLEdBQUlobkQsRUFBRzQ5QyxNQUFRNTlDLEVBQUd1bEQsYUFDaEIsT0FBT0MsR0FBT3hsRCxFQUFJaWxELEVBQU8rQixJQUUzQixJQUFJakosRUFBWS85QyxFQUFHKzlDLFlBQWNWLEdBQzdCLEdBQ0FqMEMsT0FBT3BKLEVBQUcrOUMsV0FDVnB6QyxFQUFLLFlBQWNvekMsRUFBZCxhQUNpQixhQUFYLzlDLEVBQUcwYyxJQUNaMWMsRUFBRzJnRCxJQUFNd0csRUFDTixJQUFPbm5ELEVBQUssR0FBSSxNQUFRMmxELEdBQVkzbEQsRUFBSWlsRCxJQUFVLGFBQWUsYUFDbEVVLEdBQVkzbEQsRUFBSWlsRCxJQUFVLFlBQzVCQyxHQUFXbGxELEVBQUlpbEQsSUFBVSxJQUUzQm1DLEVBQWVySixFQUFZLEdBQUssY0FDcEMsTUFBUSxTQUFXLzlDLEVBQUdnK0MsWUFBYyxhQUFpQixPQUFTcnpDLEVBQUt5OEMsRUFBZSxJQUdwRixTQUFTekIsR0FDUDNsRCxFQUNBaWxELEVBQ0FvQyxFQUNBQyxFQUNBQyxHQUVBLElBQUloekMsRUFBV3ZVLEVBQUd1VSxTQUNsQixHQUFJQSxFQUFTalksT0FBUSxDQUNuQixJQUFJa3JELEVBQU9qekMsRUFBUyxHQUVwQixHQUF3QixJQUFwQkEsRUFBU2pZLFFBQ1hrckQsRUFBSzVKLEtBQ1EsYUFBYjRKLEVBQUs5cUMsS0FDUSxTQUFiOHFDLEVBQUs5cUMsSUFDTCxDQUNBLElBQUl3VyxFQUFvQm0wQixFQUNwQnBDLEVBQU1KLGVBQWUyQyxHQUFRLEtBQU8sS0FDcEMsR0FDSixNQUFRLElBQU9GLEdBQWlCcEMsSUFBWXNDLEVBQU12QyxHQUFVL3hCLEVBRTlELElBQUl1MEIsRUFBc0JKLEVBWTlCLFNBQ0U5eUMsRUFDQXN3QyxHQUdBLElBREEsSUFBSTNuRCxFQUFNLEVBQ0RrQixFQUFJLEVBQUdBLEVBQUltVyxFQUFTalksT0FBUThCLElBQUssQ0FDeEMsSUFBSTRCLEVBQUt1VSxFQUFTblcsR0FDbEIsR0FBZ0IsSUFBWjRCLEVBQUc0RSxLQUFQLENBR0EsR0FBSThpRCxHQUFtQjFuRCxJQUNsQkEsRUFBRzQvQyxjQUFnQjUvQyxFQUFHNC9DLGFBQWF4SyxNQUFLLFNBQVV6eEMsR0FBSyxPQUFPK2pELEdBQW1CL2pELEVBQUVpOUMsVUFBYSxDQUNuRzFqRCxFQUFNLEVBQ04sT0FFRTJuRCxFQUFlN2tELElBQ2RBLEVBQUc0L0MsY0FBZ0I1L0MsRUFBRzQvQyxhQUFheEssTUFBSyxTQUFVenhDLEdBQUssT0FBT2toRCxFQUFlbGhELEVBQUVpOUMsYUFDbEYxakQsRUFBTSxJQUdWLE9BQU9BLEVBL0JEeXFELENBQXFCcHpDLEVBQVUwd0MsRUFBTUosZ0JBQ3JDLEVBQ0E4QixFQUFNWSxHQUFjSyxHQUN4QixNQUFRLElBQU9yekMsRUFBU3JXLEtBQUksU0FBVXlGLEdBQUssT0FBT2dqRCxFQUFJaGpELEVBQUdzaEQsTUFBV2xsRCxLQUFLLEtBQVEsS0FBTzBuRCxFQUF1QixJQUFNQSxFQUF1QixLQStCaEosU0FBU0MsR0FBb0IxbkQsR0FDM0IsWUFBa0IrTCxJQUFYL0wsRUFBRzQ5QyxLQUFnQyxhQUFYNTlDLEVBQUcwYyxLQUFpQyxTQUFYMWMsRUFBRzBjLElBRzdELFNBQVNrckMsR0FBUzVwQyxFQUFNaW5DLEdBQ3RCLE9BQWtCLElBQWRqbkMsRUFBS3BaLEtBQ0FzZ0QsR0FBV2xuQyxFQUFNaW5DLEdBQ0QsSUFBZGpuQyxFQUFLcFosTUFBY29aLEVBQUtSLFVBYXJDLFNBQXFCNDlCLEdBQ25CLE1BQVEsTUFBUy84QyxLQUFLQyxVQUFVODhDLEVBQVFsOEMsTUFBUyxJQWJ4QzJvRCxDQUFXN3BDLEdBT1osT0FBdUIsS0FEZjllLEVBSkM4ZSxHQUtLcFosS0FDbEIxRixFQUFLdzNCLFdBQ0xveEIsR0FBeUJ6cEQsS0FBS0MsVUFBVVksRUFBS0EsUUFBVSxJQUg3RCxJQUFrQkEsRUE2Q2xCLFNBQVMwbUQsR0FBVXZrQyxHQUdqQixJQUZBLElBQUkwbUMsRUFBYyxHQUNkQyxFQUFlLEdBQ1Y1cEQsRUFBSSxFQUFHQSxFQUFJaWpCLEVBQU0va0IsT0FBUThCLElBQUssQ0FDckMsSUFBSXFXLEVBQU80TSxFQUFNampCLEdBQ2J5RyxFQUFRaWpELEdBQXlCcnpDLEVBQUs1UCxPQUN0QzRQLEVBQUswd0IsUUFDUDZpQixHQUFpQnZ6QyxFQUFTLEtBQUksSUFBTTVQLEVBQVEsSUFFNUNrakQsR0FBZSxJQUFRdHpDLEVBQVMsS0FBSSxLQUFRNVAsRUFBUSxJQUl4RCxPQURBa2pELEVBQWMsSUFBT0EsRUFBWTFxRCxNQUFNLEdBQUksR0FBTSxJQUM3QzJxRCxFQUNNLE1BQVFELEVBQWMsS0FBUUMsRUFBYTNxRCxNQUFNLEdBQUksR0FBTSxLQUU1RDBxRCxFQUtYLFNBQVNELEdBQTBCNW9ELEdBQ2pDLE9BQU9BLEVBQ0p3RSxRQUFRLFVBQVcsV0FDbkJBLFFBQVEsVUFBVyxXQTRMeEIsU0FBU3VrRCxHQUFnQjdHLEVBQU04RyxHQUM3QixJQUNFLE9BQU8sSUFBSTd6QyxTQUFTK3NDLEdBQ3BCLE1BQU85akQsR0FFUCxPQURBNHFELEVBQU90b0QsS0FBSyxDQUFFdEMsSUFBS0EsRUFBSzhqRCxLQUFNQSxJQUN2QmxxQyxHQUlYLFNBQVNpeEMsR0FBMkJDLEdBQ2xDLElBQUlyeUMsRUFBUW5WLE9BQU9nUyxPQUFPLE1BRTFCLE9BQU8sU0FDTHkxQyxFQUNBanVELEVBQ0F3bUIsSUFFQXhtQixFQUFVMGMsRUFBTyxHQUFJMWMsSUFDQ29JLFlBQ2ZwSSxFQUFRb0ksS0FxQmYsSUFBSXJDLEVBQU0vRixFQUFRMi9DLFdBQ2Qzd0MsT0FBT2hQLEVBQVEyL0MsWUFBY3NPLEVBQzdCQSxFQUNKLEdBQUl0eUMsRUFBTTVWLEdBQ1IsT0FBTzRWLEVBQU01VixHQUlmLElBQUltb0QsRUFBV0YsRUFBUUMsRUFBVWp1RCxHQStCN0I4QyxFQUFNLEdBQ05xckQsRUFBYyxHQXlCbEIsT0F4QkFyckQsRUFBSXFzQixPQUFTMCtCLEdBQWVLLEVBQVMvK0IsT0FBUWcvQixHQUM3Q3JyRCxFQUFJcXVCLGdCQUFrQis4QixFQUFTLzhCLGdCQUFnQnJ0QixLQUFJLFNBQVVrakQsR0FDM0QsT0FBTzZHLEdBQWU3RyxFQUFNbUgsTUFzQnRCeHlDLEVBQU01VixHQUFPakQsR0E1UkMsSUFBSTBjLE9BQU8sTUFBUSxpTUFJM0NyWixNQUFNLEtBQUtSLEtBQUssV0FBYSxPQUdSLElBQUk2WixPQUFPLE1BQVEscUJBRXhDclosTUFBTSxLQUFLUixLQUFLLHlCQUEyQixxQkFvVzdDLElBM0VnQ3lvRCxHQW9HNUJDLEdBUEFuSyxJQTdGNEJrSyxHQTJFVyxTQUN6Q0gsRUFDQWp1RCxHQUVBLElBQUk0cUQsRUF6c0VOLFNBQ0VxRCxFQUNBanVELEdBRUE2aEQsR0FBUzdoRCxFQUFRb0ksTUFBUXNpQyxHQUV6QnVYLEdBQW1CamlELEVBQVF5bkQsVUFBWTFxQyxFQUN2Q21sQyxHQUFzQmxpRCxFQUFRNmUsYUFBZTlCLEVBQzdDb2xDLEdBQTBCbmlELEVBQVEyZSxpQkFBbUI1QixFQUNqQy9jLEVBQVF3ZSxjQUc1QnNqQyxHQUFhalgsR0FBb0I3cUMsRUFBUXdTLFFBQVMsaUJBQ2xEdXZDLEdBQWdCbFgsR0FBb0I3cUMsRUFBUXdTLFFBQVMsb0JBQ3JEd3ZDLEdBQWlCblgsR0FBb0I3cUMsRUFBUXdTLFFBQVMscUJBRXREbXRDLEdBQWEzL0MsRUFBUTIvQyxXQUVyQixJQUdJN25DLEVBQ0F3MkMsRUFKQXRnRCxFQUFRLEdBQ1J1Z0QsR0FBb0QsSUFBL0J2dUQsRUFBUXV1RCxtQkFDN0JDLEVBQW1CeHVELEVBQVF5dUQsV0FHM0IvVSxHQUFTLEVBQ1RnVixHQUFRLEVBVVosU0FBU0MsRUFBY3JMLEdBeUJyQixHQXhCQXNMLEVBQXFCdEwsR0FDaEI1SixHQUFXNEosRUFBUWdELFlBQ3RCaEQsRUFBVUQsR0FBZUMsRUFBU3RqRCxJQUcvQmdPLEVBQU05TCxRQUFVb2hELElBQVl4ckMsR0FFM0JBLEVBQUt5dUMsS0FBT2pELEVBQVFzRCxRQUFVdEQsRUFBUXFELE9BSXhDckIsR0FBZXh0QyxFQUFNLENBQ25COHhCLElBQUswWixFQUFRc0QsT0FDYkosTUFBT2xELElBV1RnTCxJQUFrQmhMLEVBQVF1TCxVQUM1QixHQUFJdkwsRUFBUXNELFFBQVV0RCxFQUFRcUQsS0FxWk4vZ0QsRUFwWkYwOUMsR0FxWnRCelosRUFlTixTQUEwQjF2QixHQUV4QixJQURBLElBQUluVyxFQUFJbVcsRUFBU2pZLE9BQ1Y4QixLQUFLLENBQ1YsR0FBeUIsSUFBckJtVyxFQUFTblcsR0FBR3dHLEtBQ2QsT0FBTzJQLEVBQVNuVyxHQVNoQm1XLEVBQVNpSSxPQTVCRjBzQyxDQXJad0JSLEVBcVpEbjBDLFlBQ3RCMHZCLEVBQUswYyxJQUNmakIsR0FBZXpiLEVBQU0sQ0FDbkJELElBQUtoa0MsRUFBR2doRCxPQUNSSixNQUFPNWdELFFBeFpBLENBQ0wsR0FBSTA5QyxFQUFRSyxVQUFXLENBSXJCLElBQUl6akQsRUFBT29qRCxFQUFRTSxZQUFjLGFBQy9CMEssRUFBY2g3QixjQUFnQmc3QixFQUFjaDdCLFlBQWMsS0FBS3B6QixHQUFRb2pELEVBRTNFZ0wsRUFBY24wQyxTQUFTM1UsS0FBSzg5QyxHQUM1QkEsRUFBUXRnQyxPQUFTc3JDLEVBMFl6QixJQUE4QjFvRCxFQUN4QmlrQyxFQXJZRnlaLEVBQVFucEMsU0FBV21wQyxFQUFRbnBDLFNBQVM5RCxRQUFPLFNBQVU5TSxHQUFLLE9BQVEsRUFBSW82QyxhQUV0RWlMLEVBQXFCdEwsR0FHakJBLEVBQVFycUIsTUFDVnlnQixHQUFTLEdBRVB1SSxHQUFpQnFCLEVBQVFoaEMsT0FDM0Jvc0MsR0FBUSxHQUdWLElBQUssSUFBSTFxRCxFQUFJLEVBQUdBLEVBQUlnK0MsR0FBZTkvQyxPQUFROEIsSUFDekNnK0MsR0FBZWgrQyxHQUFHcy9DLEVBQVN0akQsR0FJL0IsU0FBUzR1RCxFQUFzQmhwRCxHQUU3QixJQUFLOG9ELEVBRUgsSUFEQSxJQUFJSyxHQUVEQSxFQUFXbnBELEVBQUd1VSxTQUFTdlUsRUFBR3VVLFNBQVNqWSxPQUFTLEtBQzNCLElBQWxCNnNELEVBQVN2a0QsTUFDUyxNQUFsQnVrRCxFQUFTanFELE1BRVRjLEVBQUd1VSxTQUFTaUksTUF5TmxCLE9BcG5CRixTQUFvQnEvQixFQUFNemhELEdBT3hCLElBTkEsSUFLSXd0QixFQUFNd2hDLEVBTE5oaEQsRUFBUSxHQUNSODRDLEVBQWE5bUQsRUFBUThtRCxXQUNyQm1JLEVBQWdCanZELEVBQVFxZ0QsWUFBY3RqQyxFQUN0Q215QyxFQUFzQmx2RCxFQUFRc2dELGtCQUFvQnZqQyxFQUNsRDVILEVBQVEsRUFFTHNzQyxHQUFNLENBR1gsR0FGQWowQixFQUFPaTBCLEVBRUZ1TixHQUFZOU4sR0FBbUI4TixHQWtGN0IsQ0FDTCxJQUFJRyxFQUFlLEVBQ2ZDLEVBQWFKLEVBQVE5b0QsY0FDckJtcEQsRUFBZWxPLEdBQVFpTyxLQUFnQmpPLEdBQVFpTyxHQUFjLElBQUk1dkMsT0FBTyxrQkFBb0I0dkMsRUFBYSxVQUFXLE1BQ3BIRSxFQUFTN04sRUFBS240QyxRQUFRK2xELEdBQWMsU0FBVTczQyxFQUFLMVMsRUFBTWc4QyxHQWEzRCxPQVpBcU8sRUFBZXJPLEVBQU81K0MsT0FDakJnL0MsR0FBbUJrTyxJQUE4QixhQUFmQSxJQUNyQ3RxRCxFQUFPQSxFQUNKd0UsUUFBUSxzQkFBdUIsTUFDL0JBLFFBQVEsNEJBQTZCLE9BRXRDazRDLEdBQXlCNE4sRUFBWXRxRCxLQUN2Q0EsRUFBT0EsRUFBSzdCLE1BQU0sSUFFaEJqRCxFQUFRdXZELE9BQ1Z2dkQsRUFBUXV2RCxNQUFNenFELEdBRVQsTUFFVHFRLEdBQVNzc0MsRUFBS3YvQyxPQUFTb3RELEVBQU9wdEQsT0FDOUJ1L0MsRUFBTzZOLEVBQ1BFLEVBQVlKLEVBQVlqNkMsRUFBUWc2QyxFQUFjaDZDLE9BdkdGLENBQzVDLElBQUlzNkMsRUFBVWhPLEVBQUt2d0MsUUFBUSxLQUMzQixHQUFnQixJQUFadStDLEVBQWUsQ0FFakIsR0FBSXpPLEdBQVEvdkMsS0FBS3d3QyxHQUFPLENBQ3RCLElBQUlpTyxFQUFhak8sRUFBS3Z3QyxRQUFRLFVBRTlCLEdBQUl3K0MsR0FBYyxFQUFHLENBQ2YxdkQsRUFBUTJ2RCxtQkFDVjN2RCxFQUFRZ2hELFFBQVFTLEVBQUttTyxVQUFVLEVBQUdGLEdBQWF2NkMsRUFBT0EsRUFBUXU2QyxFQUFhLEdBRTdFRyxFQUFRSCxFQUFhLEdBQ3JCLFVBS0osR0FBSXpPLEdBQW1CaHdDLEtBQUt3d0MsR0FBTyxDQUNqQyxJQUFJcU8sRUFBaUJyTyxFQUFLdndDLFFBQVEsTUFFbEMsR0FBSTQrQyxHQUFrQixFQUFHLENBQ3ZCRCxFQUFRQyxFQUFpQixHQUN6QixVQUtKLElBQUlDLEVBQWV0TyxFQUFLNTNDLE1BQU1rM0MsSUFDOUIsR0FBSWdQLEVBQWMsQ0FDaEJGLEVBQVFFLEVBQWEsR0FBRzd0RCxRQUN4QixTQUlGLElBQUk4dEQsRUFBY3ZPLEVBQUs1M0MsTUFBTWkzQyxJQUM3QixHQUFJa1AsRUFBYSxDQUNmLElBQUlDLEVBQVc5NkMsRUFDZjA2QyxFQUFRRyxFQUFZLEdBQUc5dEQsUUFDdkJzdEQsRUFBWVEsRUFBWSxHQUFJQyxFQUFVOTZDLEdBQ3RDLFNBSUYsSUFBSSs2QyxFQUFnQkMsSUFDcEIsR0FBSUQsRUFBZSxDQUNqQkUsRUFBZUYsR0FDWDFPLEdBQXlCME8sRUFBY2pxRCxRQUFTdzdDLElBQ2xEb08sRUFBUSxHQUVWLFVBSUosSUFBSS9xRCxPQUFPLEVBQVV1ckQsT0FBTyxFQUFVcGdELE9BQU8sRUFDN0MsR0FBSXcvQyxHQUFXLEVBQUcsQ0FFaEIsSUFEQVksRUFBTzVPLEVBQUt4K0MsTUFBTXdzRCxLQUVmM08sR0FBTzd2QyxLQUFLby9DLElBQ1p6UCxHQUFhM3ZDLEtBQUtvL0MsSUFDbEJyUCxHQUFRL3ZDLEtBQUtvL0MsSUFDYnBQLEdBQW1CaHdDLEtBQUtvL0MsS0FHekJwZ0QsRUFBT29nRCxFQUFLbi9DLFFBQVEsSUFBSyxJQUNkLElBQ1h1K0MsR0FBV3gvQyxFQUNYb2dELEVBQU81TyxFQUFLeCtDLE1BQU13c0QsR0FFcEIzcUQsRUFBTzI4QyxFQUFLbU8sVUFBVSxFQUFHSCxHQUd2QkEsRUFBVSxJQUNaM3FELEVBQU8yOEMsR0FHTDM4QyxHQUNGK3FELEVBQVEvcUQsRUFBSzVDLFFBR1hsQyxFQUFRdXZELE9BQVN6cUQsR0FDbkI5RSxFQUFRdXZELE1BQU16cUQsRUFBTXFRLEVBQVFyUSxFQUFLNUMsT0FBUWlULEdBMEI3QyxHQUFJc3NDLElBQVNqMEIsRUFBTSxDQUNqQnh0QixFQUFRdXZELE9BQVN2dkQsRUFBUXV2RCxNQUFNOU4sR0FJL0IsT0FPSixTQUFTb08sRUFBU3I4QyxHQUNoQjJCLEdBQVMzQixFQUNUaXVDLEVBQU9BLEVBQUttTyxVQUFVcDhDLEdBR3hCLFNBQVMyOEMsSUFDUCxJQUFJM3pDLEVBQVFpbEMsRUFBSzUzQyxNQUFNKzJDLElBQ3ZCLEdBQUlwa0MsRUFBTyxDQUNULElBTUlpd0IsRUFBS3ptQyxFQU5MNkQsRUFBUSxDQUNWNUQsUUFBU3VXLEVBQU0sR0FDZnlSLE1BQU8sR0FDUHpSLE1BQU9ySCxHQUlULElBRkEwNkMsRUFBUXJ6QyxFQUFNLEdBQUd0YSxVQUVSdXFDLEVBQU1nVixFQUFLNTNDLE1BQU1nM0MsT0FBb0I3NkMsRUFBT3k3QyxFQUFLNTNDLE1BQU00MkMsS0FBd0JnQixFQUFLNTNDLE1BQU0yMkMsTUFDakd4NkMsRUFBS3dXLE1BQVFySCxFQUNiMDZDLEVBQVE3cEQsRUFBSyxHQUFHOUQsUUFDaEI4RCxFQUFLeW1DLElBQU10M0IsRUFDWHRMLEVBQU1va0IsTUFBTXpvQixLQUFLUSxHQUVuQixHQUFJeW1DLEVBSUYsT0FIQTVpQyxFQUFNeW1ELFdBQWE3akIsRUFBSSxHQUN2Qm9qQixFQUFRcGpCLEVBQUksR0FBR3ZxQyxRQUNmMkgsRUFBTTRpQyxJQUFNdDNCLEVBQ0x0TCxHQUtiLFNBQVN1bUQsRUFBZ0J2bUQsR0FDdkIsSUFBSTVELEVBQVU0RCxFQUFNNUQsUUFDaEJxcUQsRUFBYXptRCxFQUFNeW1ELFdBRW5CeEosSUFDYyxNQUFaa0ksR0FBbUJ6TyxHQUFpQnQ2QyxJQUN0Q3VwRCxFQUFZUixHQUVWRSxFQUFvQmpwRCxJQUFZK29ELElBQVkvb0QsR0FDOUN1cEQsRUFBWXZwRCxJQVFoQixJQUpBLElBQUlzcUQsRUFBUXRCLEVBQWNocEQsTUFBY3FxRCxFQUVwQ2owQyxFQUFJeFMsRUFBTW9rQixNQUFNL3JCLE9BQ2hCK3JCLEVBQVEsSUFBSTV0QixNQUFNZ2MsR0FDYnJZLEVBQUksRUFBR0EsRUFBSXFZLEVBQUdyWSxJQUFLLENBQzFCLElBQUlqQyxFQUFPOEgsRUFBTW9rQixNQUFNanFCLEdBQ25CeUcsRUFBUTFJLEVBQUssSUFBTUEsRUFBSyxJQUFNQSxFQUFLLElBQU0sR0FDekM0L0MsRUFBbUMsTUFBWjE3QyxHQUErQixTQUFabEUsRUFBSyxHQUMvQy9CLEVBQVF3d0QsNEJBQ1J4d0QsRUFBUTJoRCxxQkFDWjF6QixFQUFNanFCLEdBQUssQ0FDVDlELEtBQU02QixFQUFLLEdBQ1gwSSxNQUFPaTNDLEdBQVdqM0MsRUFBT2szQyxJQVF4QjRPLElBQ0h2aUQsRUFBTXhJLEtBQUssQ0FBRThjLElBQUtyYyxFQUFTd3FELGNBQWV4cUQsRUFBUUMsY0FBZStuQixNQUFPQSxFQUFPelIsTUFBTzNTLEVBQU0yUyxNQUFPaXdCLElBQUs1aUMsRUFBTTRpQyxNQUM5R3VpQixFQUFVL29ELEdBR1JqRyxFQUFRd2MsT0FDVnhjLEVBQVF3YyxNQUFNdlcsRUFBU2dvQixFQUFPc2lDLEVBQU8xbUQsRUFBTTJTLE1BQU8zUyxFQUFNNGlDLEtBSTVELFNBQVMraUIsRUFBYXZwRCxFQUFTdVcsRUFBT2l3QixHQUNwQyxJQUFJZ1IsRUFBS2lULEVBS1QsR0FKYSxNQUFUbDBDLElBQWlCQSxFQUFRckgsR0FDbEIsTUFBUHMzQixJQUFlQSxFQUFNdDNCLEdBR3JCbFAsRUFFRixJQURBeXFELEVBQW9CenFELEVBQVFDLGNBQ3ZCdTNDLEVBQU16dkMsRUFBTTlMLE9BQVMsRUFBR3U3QyxHQUFPLEdBQzlCenZDLEVBQU15dkMsR0FBS2dULGdCQUFrQkMsRUFESWpULFVBT3ZDQSxFQUFNLEVBR1IsR0FBSUEsR0FBTyxFQUFHLENBRVosSUFBSyxJQUFJejVDLEVBQUlnSyxFQUFNOUwsT0FBUyxFQUFHOEIsR0FBS3k1QyxFQUFLejVDLElBVW5DaEUsRUFBUXlzQyxLQUNWenNDLEVBQVF5c0MsSUFBSXorQixFQUFNaEssR0FBR3NlLElBQUs5RixFQUFPaXdCLEdBS3JDeitCLEVBQU05TCxPQUFTdTdDLEVBQ2Z1UixFQUFVdlIsR0FBT3p2QyxFQUFNeXZDLEVBQU0sR0FBR243QixRQUNELE9BQXRCb3VDLEVBQ0wxd0QsRUFBUXdjLE9BQ1Z4YyxFQUFRd2MsTUFBTXZXLEVBQVMsSUFBSSxFQUFNdVcsRUFBT2l3QixHQUVYLE1BQXRCaWtCLElBQ0wxd0QsRUFBUXdjLE9BQ1Z4YyxFQUFRd2MsTUFBTXZXLEVBQVMsSUFBSSxFQUFPdVcsRUFBT2l3QixHQUV2Q3pzQyxFQUFReXNDLEtBQ1Z6c0MsRUFBUXlzQyxJQUFJeG1DLEVBQVN1VyxFQUFPaXdCLElBMUhsQytpQixJQW1UQW1CLENBQVUxQyxFQUFVLENBQ2xCN2xELEtBQU15NUMsR0FDTmlGLFdBQVk5bUQsRUFBUThtRCxXQUNwQnpHLFdBQVlyZ0QsRUFBUXFnRCxXQUNwQkMsaUJBQWtCdGdELEVBQVFzZ0QsaUJBQzFCcUIscUJBQXNCM2hELEVBQVEyaEQscUJBQzlCNk8sNEJBQTZCeHdELEVBQVF3d0QsNEJBQ3JDYixrQkFBbUIzdkQsRUFBUTR3RCxTQUMzQkMsa0JBQW1CN3dELEVBQVE2d0Qsa0JBQzNCcjBDLE1BQU8sU0FBZ0I4RixFQUFLMkwsRUFBT3NpQyxFQUFPTyxFQUFTcmtCLEdBR2pELElBQUk5cEIsRUFBTTJyQyxHQUFpQkEsRUFBYzNyQyxJQUFPdy9CLEdBQXdCNy9CLEdBSXBFcEMsR0FBZSxRQUFQeUMsSUFDVnNMLEVBbXRCUixTQUF3QkEsR0FFdEIsSUFEQSxJQUFJbnJCLEVBQU0sR0FDRGtCLEVBQUksRUFBR0EsRUFBSWlxQixFQUFNL3JCLE9BQVE4QixJQUFLLENBQ3JDLElBQUlnQyxFQUFPaW9CLEVBQU1qcUIsR0FDWnloRCxHQUFReDBDLEtBQUtqTCxFQUFLOUYsUUFDckI4RixFQUFLOUYsS0FBTzhGLEVBQUs5RixLQUFLb0osUUFBUW84QyxHQUFZLElBQzFDNWlELEVBQUkwQyxLQUFLUSxJQUdiLE9BQU9sRCxFQTV0Qk9pdUQsQ0FBYzlpQyxJQUd4QixJQWtzQm1Ccm9CLEVBbHNCZjA5QyxFQUFVSixHQUFpQjVnQyxFQUFLMkwsRUFBT3FnQyxHQUN2QzNyQyxJQUNGMmdDLEVBQVEzZ0MsR0FBS0EsR0Frc0JOLFdBRlUvYyxFQXRxQkEwOUMsR0F3cUJsQmhoQyxNQUNTLFdBQVgxYyxFQUFHMGMsS0FDRDFjLEVBQUd5bEMsU0FBUzdnQyxNQUNRLG9CQUFyQjVFLEVBQUd5bEMsU0FBUzdnQyxPQTNxQm9Cb1csT0FDOUIwaUMsRUFBUXVMLFdBQVksR0FVdEIsSUFBSyxJQUFJN3FELEVBQUksRUFBR0EsRUFBSSs5QyxHQUFjNy9DLE9BQVE4QixJQUN4Q3MvQyxFQUFVdkIsR0FBYy85QyxHQUFHcy9DLEVBQVN0akQsSUFBWXNqRCxFQUc3QzVKLElBdUlYLFNBQXFCOXpDLEdBQ2tCLE1BQWpDeW1DLEdBQWlCem1DLEVBQUksV0FDdkJBLEVBQUdxekIsS0FBTSxHQXhJTCszQixDQUFXMU4sR0FDUEEsRUFBUXJxQixNQUNWeWdCLEdBQVMsSUFHVHVJLEdBQWlCcUIsRUFBUWhoQyxPQUMzQm9zQyxHQUFRLEdBRU5oVixFQW9JVixTQUEwQjl6QyxHQUN4QixJQUFJd00sRUFBT3hNLEVBQUcwbEMsVUFDVmxtQyxFQUFNZ04sRUFBS2xRLE9BQ2YsR0FBSWtELEVBRUYsSUFEQSxJQUFJNm9CLEVBQVFyb0IsRUFBR3FvQixNQUFRLElBQUk1dEIsTUFBTStFLEdBQ3hCcEIsRUFBSSxFQUFHQSxFQUFJb0IsRUFBS3BCLElBQ3ZCaXFCLEVBQU1qcUIsR0FBSyxDQUNUOUQsS0FBTWtTLEVBQUtwTyxHQUFHOUQsS0FDZHVLLE1BQU94RyxLQUFLQyxVQUFVa08sRUFBS3BPLEdBQUd5RyxRQUVYLE1BQWpCMkgsRUFBS3BPLEdBQUd3WSxRQUNWeVIsRUFBTWpxQixHQUFHd1ksTUFBUXBLLEVBQUtwTyxHQUFHd1ksTUFDekJ5UixFQUFNanFCLEdBQUd5b0MsSUFBTXI2QixFQUFLcE8sR0FBR3lvQyxVQUdqQjdtQyxFQUFHcXpCLE1BRWJyekIsRUFBR3FsQyxPQUFRLEdBcEpQZ21CLENBQWdCM04sR0FDTkEsRUFBUWdELFlBRWxCdkIsR0FBV3pCLEdBcVBuQixTQUFvQjE5QyxHQUNsQixJQUFJZ2tDLEVBQU15QyxHQUFpQnptQyxFQUFJLFFBQy9CLEdBQUlna0MsRUFDRmhrQyxFQUFHMmdELEdBQUszYyxFQUNSMGIsR0FBZTEvQyxFQUFJLENBQ2pCZ2tDLElBQUtBLEVBQ0w0YyxNQUFPNWdELFFBRUosQ0FDaUMsTUFBbEN5bUMsR0FBaUJ6bUMsRUFBSSxZQUN2QkEsRUFBRytnRCxNQUFPLEdBRVosSUFBSUMsRUFBU3ZhLEdBQWlCem1DLEVBQUksYUFDOUJnaEQsSUFDRmhoRCxFQUFHZ2hELE9BQVNBLElBbFFWc0ssQ0FBVTVOLEdBZ1RsQixTQUFzQjE5QyxHQUVMLE1BRER5bUMsR0FBaUJ6bUMsRUFBSSxZQUVqQ0EsRUFBRytYLE1BQU8sR0FsVE53ekMsQ0FBWTdOLElBR1R4ckMsSUFDSEEsRUFBT3dyQyxHQU1KaU4sRUFJSDVCLEVBQWFyTCxJQUhiZ0wsRUFBZ0JoTCxFQUNoQnQxQyxFQUFNeEksS0FBSzg5QyxLQU1mN1csSUFBSyxTQUFjbnFCLEVBQUs5RixFQUFPNDBDLEdBQzdCLElBQUk5TixFQUFVdDFDLEVBQU1BLEVBQU05TCxPQUFTLEdBRW5DOEwsRUFBTTlMLFFBQVUsRUFDaEJvc0QsRUFBZ0J0Z0QsRUFBTUEsRUFBTTlMLE9BQVMsR0FJckN5c0QsRUFBYXJMLElBR2ZpTSxNQUFPLFNBQWdCenFELEVBQU0wWCxFQUFPaXdCLEdBQ2xDLEdBQUs2aEIsS0FrQkRwdUMsR0FDb0IsYUFBdEJvdUMsRUFBY2hzQyxLQUNkZ3NDLEVBQWNqakIsU0FBU2dSLGNBQWdCdjNDLEdBRnpDLENBTUEsSUE4a0JjYyxFQXhqQlI5QyxFQUNBNGdCLEVBdkJGdkosRUFBV20wQyxFQUFjbjBDLFVBRTNCclYsRUFERTRwRCxHQUFTNXBELEVBQUt5bEMsT0E4a0JKLFlBREEza0MsRUE1a0JLMG9ELEdBNmtCYmhzQyxLQUErQixVQUFYMWMsRUFBRzBjLElBN2tCT3hkLEVBQU9rK0MsR0FBaUJsK0MsR0FDaERxVixFQUFTalksT0FHVnNzRCxFQUNnQixhQUFyQkEsR0FHSzFMLEdBQVk3eEMsS0FBS25NLEdBQVEsR0FFekIsSUFHRnlwRCxFQUFxQixJQUFNLEdBVjNCLE1BYUZHLEdBQThCLGFBQXJCRixJQUVaMXBELEVBQU9BLEVBQUt3RSxRQUFReTVDLEdBQWdCLE9BSWpDckosR0FBbUIsTUFBVDUwQyxJQUFpQmhDLEVBcnhCeEMsU0FDRWdDLEVBQ0E2NkMsR0FFQSxJQUFJMFIsRUFBUTFSLEVBQWFELEdBQVdDLEdBQWNILEdBQ2xELEdBQUs2UixFQUFNcGdELEtBQUtuTSxHQUFoQixDQU9BLElBSkEsSUFHSStFLEVBQU9zTCxFQUFPbThDLEVBSGRDLEVBQVMsR0FDVEMsRUFBWSxHQUNaamtDLEVBQVk4akMsRUFBTTlqQyxVQUFZLEVBRTFCMWpCLEVBQVF3bkQsRUFBTUksS0FBSzNzRCxJQUFRLEVBQ2pDcVEsRUFBUXRMLEVBQU1zTCxPQUVGb1ksSUFDVmlrQyxFQUFVaHNELEtBQUs4ckQsRUFBYXhzRCxFQUFLN0IsTUFBTXNxQixFQUFXcFksSUFDbERvOEMsRUFBTy9yRCxLQUFLdkIsS0FBS0MsVUFBVW90RCxLQUc3QixJQUFJMW5CLEVBQU1ELEdBQWE5L0IsRUFBTSxHQUFHMGdDLFFBQ2hDZ25CLEVBQU8vckQsS0FBTSxNQUFRb2tDLEVBQU0sS0FDM0I0bkIsRUFBVWhzRCxLQUFLLENBQUUsV0FBWW9rQyxJQUM3QnJjLEVBQVlwWSxFQUFRdEwsRUFBTSxHQUFHM0gsT0FNL0IsT0FKSXFyQixFQUFZem9CLEVBQUs1QyxTQUNuQnN2RCxFQUFVaHNELEtBQUs4ckQsRUFBYXhzRCxFQUFLN0IsTUFBTXNxQixJQUN2Q2drQyxFQUFPL3JELEtBQUt2QixLQUFLQyxVQUFVb3RELEtBRXRCLENBQ0xoMUIsV0FBWWkxQixFQUFPNXJELEtBQUssS0FDeEI0ckQsT0FBUUMsSUFzdkJrQ0UsQ0FBVTVzRCxFQUFNNjZDLEtBQ3BEajhCLEVBQVEsQ0FDTmxaLEtBQU0sRUFDTjh4QixXQUFZeDVCLEVBQUl3NUIsV0FDaEJpMUIsT0FBUXp1RCxFQUFJeXVELE9BQ1p6c0QsS0FBTUEsR0FFVSxNQUFUQSxHQUFpQnFWLEVBQVNqWSxRQUFpRCxNQUF2Q2lZLEVBQVNBLEVBQVNqWSxPQUFTLEdBQUc0QyxPQUMzRTRlLEVBQVEsQ0FDTmxaLEtBQU0sRUFDTjFGLEtBQU1BLElBR040ZSxHQUtGdkosRUFBUzNVLEtBQUtrZSxNQUlwQnM5QixRQUFTLFNBQWtCbDhDLEVBQU0wWCxFQUFPaXdCLEdBR3RDLEdBQUk2aEIsRUFBZSxDQUNqQixJQUFJNXFDLEVBQVEsQ0FDVmxaLEtBQU0sRUFDTjFGLEtBQU1BLEVBQ05zZSxXQUFXLEdBTWJrckMsRUFBY24wQyxTQUFTM1UsS0FBS2tlLE9BSTNCNUwsRUF5NERHN0wsQ0FBTWdpRCxFQUFTMWpCLE9BQVF2cUMsSUFDUixJQUFyQkEsRUFBUTJuRCxVQUNWQSxHQUFTaUQsRUFBSzVxRCxHQUVoQixJQUFJZ25ELEVBQU8yRCxHQUFTQyxFQUFLNXFELEdBQ3pCLE1BQU8sQ0FDTDRxRCxJQUFLQSxFQUNMejdCLE9BQVE2M0IsRUFBSzczQixPQUNiZ0MsZ0JBQWlCNjFCLEVBQUs3MUIsa0JBdEZqQixTQUF5QjAxQixHQUM5QixTQUFTbUgsRUFDUEMsRUFDQWp1RCxHQUVBLElBQUkyeEQsRUFBZW5yRCxPQUFPZ1MsT0FBT3F1QyxHQUM3QmlILEVBQVMsR0FDVDhELEVBQU8sR0FNWCxHQUFJNXhELEVBK0JGLElBQUssSUFBSStGLEtBWkwvRixFQUFRd1MsVUFDVm0vQyxFQUFhbi9DLFNBQ1ZxMEMsRUFBWXIwQyxTQUFXLElBQUlELE9BQU92UyxFQUFRd1MsVUFHM0N4UyxFQUFRMm5CLGFBQ1ZncUMsRUFBYWhxQyxXQUFhakwsRUFDeEJsVyxPQUFPZ1MsT0FBT3F1QyxFQUFZbC9CLFlBQWMsTUFDeEMzbkIsRUFBUTJuQixhQUlJM25CLEVBQ0YsWUFBUitGLEdBQTZCLGVBQVJBLElBQ3ZCNHJELEVBQWE1ckQsR0FBTy9GLEVBQVErRixJQUtsQzRyRCxFQUFhdnBELEtBMUNGLFNBQVV1aUMsRUFBS0MsRUFBT2luQixJQUM5QkEsRUFBTUQsRUFBTzlELEdBQVF0b0QsS0FBS21sQyxJQTJDN0IsSUFBSXVqQixFQUFXRSxHQUFZSCxFQUFTMWpCLE9BQVFvbkIsR0FNNUMsT0FGQXpELEVBQVNKLE9BQVNBLEVBQ2xCSSxFQUFTMEQsS0FBT0EsRUFDVDFELEVBR1QsTUFBTyxDQUNMRixRQUFTQSxFQUNUOEQsbUJBQW9CL0QsR0FBMEJDLE1BNEJ6Qm5ILElBRXZCaUwsSUFEVTVOLEdBQU04SixRQUNLOUosR0FBTTROLG9CQU0vQixTQUFTQyxHQUFpQnhtRCxHQUd4QixPQUZBOGlELEdBQU1BLElBQU9oakQsU0FBU3VLLGNBQWMsUUFDaEM0NEIsVUFBWWpqQyxFQUFPLGlCQUFxQixnQkFDckM4aUQsR0FBSTdmLFVBQVV0OUIsUUFBUSxTQUFXLEVBSTFDLElBQUl5d0MsS0FBdUJqaUMsR0FBWXF5QyxJQUFnQixHQUVuRHZCLEtBQThCOXdDLEdBQVlxeUMsSUFBZ0IsR0FJMURDLEdBQWV0MkMsR0FBTyxTQUFVdmIsR0FDbEMsSUFBSXlGLEVBQUtrRSxHQUFNM0osR0FDZixPQUFPeUYsR0FBTUEsRUFBRzRvQyxhQUdkeWpCLEdBQVEzekIsR0FBSTU5QixVQUFVOHpCLE9BQzFCOEosR0FBSTU5QixVQUFVOHpCLE9BQVMsU0FDckI1dUIsRUFDQWt1QixHQUtBLElBSEFsdUIsRUFBS0EsR0FBTWtFLEdBQU1sRSxNQUdOeUYsU0FBU3l6QyxNQUFRbDVDLElBQU95RixTQUFTNm1ELGdCQUkxQyxPQUFPanlELEtBR1QsSUFBSUQsRUFBVUMsS0FBSytvQixTQUVuQixJQUFLaHBCLEVBQVFtdkIsT0FBUSxDQUNuQixJQUFJOCtCLEVBQVdqdUQsRUFBUWl1RCxTQUN2QixHQUFJQSxFQUNGLEdBQXdCLGlCQUFiQSxFQUNrQixNQUF2QkEsRUFBU2p5QyxPQUFPLEtBQ2xCaXlDLEVBQVcrRCxHQUFhL0QsUUFTckIsS0FBSUEsRUFBU2xhLFNBTWxCLE9BQU85ekMsS0FMUGd1RCxFQUFXQSxFQUFTemYsZUFPYjVvQyxJQUNUcW9ELEVBa0NOLFNBQXVCcm9ELEdBQ3JCLEdBQUlBLEVBQUd1c0QsVUFDTCxPQUFPdnNELEVBQUd1c0QsVUFFVixJQUFJQyxFQUFZL21ELFNBQVN1SyxjQUFjLE9BRXZDLE9BREF3OEMsRUFBVW44QyxZQUFZclEsRUFBR3M1QyxXQUFVLElBQzVCa1QsRUFBVTVqQixVQXhDSjZqQixDQUFhenNELElBRTFCLEdBQUlxb0QsRUFBVSxDQU1aLElBQUlyc0IsRUFBTWt3QixHQUFtQjdELEVBQVUsQ0FDckM0QyxtQkFBbUIsRUFDbkJsUCxxQkFBc0JBLEdBQ3RCNk8sNEJBQTZCQSxHQUM3QjdRLFdBQVkzL0MsRUFBUTIvQyxXQUNwQmlSLFNBQVU1d0QsRUFBUTR3RCxVQUNqQjN3RCxNQUNDa3ZCLEVBQVN5UyxFQUFJelMsT0FDYmdDLEVBQWtCeVEsRUFBSXpRLGdCQUMxQm54QixFQUFRbXZCLE9BQVNBLEVBQ2pCbnZCLEVBQVFteEIsZ0JBQWtCQSxHQVM5QixPQUFPOGdDLEdBQU10dkQsS0FBSzFDLEtBQU0yRixFQUFJa3VCLElBaUI5QndLLEdBQUkwdkIsUUFBVThELEdBRWQsWUN0dFhhUSxHQUFhLFVBQVcsQ0FDbkNuakMsT0FBT3ZaLEdBQ0VBLEVBQWMsS0FBTSxDQUN6QkEsRUFBYyxLQUFNLENBQ2xCQSxFQUFjLElBQUssQ0FBRXFZLE1BQU8sQ0FBRTFpQixLQUFNLGdCQUFtQixhQUV6RHFLLEVBQWMsS0FBTSxDQUNsQkEsRUFBYyxJQUFLLENBQUVxWSxNQUFPLENBQUUxaUIsS0FBTSxlQUFrQixlQUV4RHFLLEVBQWMsS0FBTSxDQUNsQkEsRUFBYyxJQUFLLENBQUVxWSxNQUFPLENBQUUxaUIsS0FBTSxxQkFBd0IsaUJDVnZEZ25ELEdBQWUsVUFBVyxDQUNyQ3RyQyxNQUFPLENBQUMsU0FDUixPQUFPclIsRyxNQUNMLE9BQU9BLEVBQWMsSUFBSyxDQUN4QnVqQixNQUFPLFFBQ1BsTCxNQUFPLENBQ0w5dEIsR0FBSSxjQUVOdXdCLFNBQVUsQ0FDUjhkLFVBQTRCLFFBQW5CLEVBQUV2dUMsS0FBS3V5RCxPQUFPbnFELGFBQUssUUFBSSxTQU0zQm9xRCxHQUFpQixVQUFXLENBQ3ZDeHJDLE1BQU8sQ0FBQyxXQUNSLE9BQU9yUixHQUNMLE9BQU9BLEVBQWMsSUFBSyxDQUN4QnVqQixNQUFPLFVBQ1BsTCxNQUFPLENBQ0w5dEIsR0FBSSxnQkFFTndWLE1BQU8sQ0FDTG1tQyxRQUFTNzdDLEtBQUt1eUQsT0FBTzE3QixRQUFVLEdBQUssUUFFdENwRyxTQUFVLENBQ1I4ZCxVQUFXLGtCQzNCTmtrQixHQUFVLFVBQVcsQ0FDaEN6ckMsTUFBTyxDQUFDLFdBQ1IsT0FBT3JSLEdBQ0wsT0FBT0EsRUFBYyxLQUFNLENBQ3pCQSxFQUFjLEtBQU0sQ0FDbEIsbUJBQ0FBLEVBQ0UsT0FDQSxDQUNFcVksTUFBTyxDQUNMOXRCLEdBQUksWUFHUkYsS0FBS3V5RCxPQUFPRyxRQUFRQyxnQkFHeEJoOUMsRUFBYyxLQUFNLENBQ2xCLGdCQUNBQSxFQUNFLE9BQ0EsQ0FDRXFZLE1BQU8sQ0FDTDl0QixHQUFJLFVBR1JGLEtBQUt1eUQsT0FBT0csUUFBUUUsY0FHeEJqOUMsRUFBYyxLQUFNLENBQ2xCLGdCQUNBQSxFQUNFLE9BQ0EsQ0FDRXFZLE1BQU8sQ0FDTDl0QixHQUFJLGNBR1JGLEtBQUt1eUQsT0FBT0csUUFBUUcsYUFHeEJsOUMsRUFBYyxLQUFNLENBQ2xCLG1CQUNBQSxFQUNFLE9BQ0EsQ0FDRXFZLE1BQU8sQ0FDTDl0QixHQUFJLGtCQUdSRixLQUFLdXlELE9BQU9HLFFBQVFJLHVCQ25EOUIsU0FBU3A2QyxHQUFFQSxHQUFHLElBQUksSUFBSW5GLEVBQUV2UixVQUFVQyxPQUFPc0gsRUFBRW5KLE1BQU1tVCxFQUFFLEVBQUVBLEVBQUUsRUFBRSxHQUFHdlMsRUFBRSxFQUFFQSxFQUFFdVMsRUFBRXZTLElBQUl1SSxFQUFFdkksRUFBRSxHQUFHZ0IsVUFBVWhCLEdBQWtKLE1BQU0wRixNQUFNLDhCQUE4QmdTLEdBQUduUCxFQUFFdEgsT0FBTyxJQUFJc0gsRUFBRTFGLEtBQUksU0FBVTZVLEdBQUcsTUFBTSxJQUFJQSxFQUFFLE9BQU9oVCxLQUFLLEtBQUssSUFBSSxvREFBb0QsU0FBUzZOLEdBQUVtRixHQUFHLFFBQVFBLEtBQUtBLEVBQUVxNkMsSUFBRyxTQUFTeHBELEdBQUVtUCxHQUFHLFFBQVFBLElBQUksU0FBU0EsR0FBRyxJQUFJQSxHQUFHLGlCQUFpQkEsRUFBRSxPQUFNLEVBQUcsSUFBSW5GLEVBQUVoTixPQUFPeXNELGVBQWV0NkMsR0FBRyxPQUFPbkYsR0FBR0EsSUFBSWhOLE9BQU85RixVQUFuRyxDQUE4R2lZLElBQUl0WSxNQUFNQyxRQUFRcVksTUFBTUEsRUFBRXU2QyxPQUFNdjZDLEVBQUVsRixZQUFZeS9DLEtBQUl0NkMsR0FBRUQsSUFBSXRQLEdBQUVzUCxJQUE4QyxTQUFTM1UsR0FBRTJVLEVBQUVuRixFQUFFaEssUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSThKLEdBQUVxRixJQUFJblAsRUFBRWhELE9BQU93RSxLQUFLbW9ELElBQUd4NkMsR0FBR3ZYLFNBQVEsU0FBVUgsR0FBR3VJLEdBQUcsaUJBQWlCdkksR0FBR3VTLEVBQUV2UyxFQUFFMFgsRUFBRTFYLEdBQUcwWCxNQUFNQSxFQUFFdlgsU0FBUSxTQUFVb0ksRUFBRXZJLEdBQUcsT0FBT3VTLEVBQUV2UyxFQUFFdUksRUFBRW1QLE1BQU0sU0FBU3JGLEdBQUVxRixHQUFHLElBQUluRixFQUFFbUYsRUFBRXE2QyxJQUFHLE9BQU94L0MsRUFBRUEsRUFBRXhQLEVBQUUsRUFBRXdQLEVBQUV4UCxFQUFFLEVBQUV3UCxFQUFFeFAsRUFBRTNELE1BQU1DLFFBQVFxWSxHQUFHLEVBQUVDLEdBQUVELEdBQUcsRUFBRXRQLEdBQUVzUCxHQUFHLEVBQUUsRUFBRSxTQUFTeTZDLEdBQUV6NkMsRUFBRW5GLEdBQUcsT0FBTyxJQUFJRixHQUFFcUYsR0FBR0EsRUFBRTdMLElBQUkwRyxHQUFHaE4sT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS2dXLEVBQUVuRixHQUFpRCxTQUFTNi9DLEdBQUUxNkMsRUFBRW5GLEVBQUVoSyxHQUFHLElBQUl2SSxFQUFFcVMsR0FBRXFGLEdBQUcsSUFBSTFYLEVBQUUwWCxFQUFFeUIsSUFBSTVHLEVBQUVoSyxHQUFHLElBQUl2SSxHQUFHMFgsRUFBRTFMLE9BQU91RyxHQUFHbUYsRUFBRTVMLElBQUl2RCxJQUFJbVAsRUFBRW5GLEdBQUdoSyxFQUFFLFNBQVNELEdBQUVvUCxFQUFFbkYsR0FBRyxPQUFPbUYsSUFBSW5GLEVBQUUsSUFBSW1GLEdBQUcsRUFBRUEsR0FBRyxFQUFFbkYsRUFBRW1GLEdBQUdBLEdBQUduRixHQUFHQSxFQUFFLFNBQVNvRixHQUFFRCxHQUFHLE9BQU8yNkMsSUFBRzM2QyxhQUFhNDZDLElBQUksU0FBU2xxRCxHQUFFc1AsR0FBRyxPQUFPNjZDLElBQUc3NkMsYUFBYTJJLElBQUksU0FBUyxHQUFFM0ksR0FBRyxPQUFPQSxFQUFFckYsR0FBR3FGLEVBQUVBLEVBQUUsU0FBUzBELEdBQUUxRCxHQUFHLEdBQUd0WSxNQUFNQyxRQUFRcVksR0FBRyxPQUFPdFksTUFBTUssVUFBVXVDLE1BQU1OLEtBQUtnVyxHQUFHLElBQUluRixFQUFFaWdELEdBQUc5NkMsVUFBVW5GLEVBQUV3L0MsSUFBRyxJQUFJLElBQUl4cEQsRUFBRTJwRCxHQUFFMy9DLEdBQUd2UyxFQUFFLEVBQUVBLEVBQUV1SSxFQUFFdEgsT0FBT2pCLElBQUksQ0FBQyxJQUFJK0MsRUFBRXdGLEVBQUV2SSxHQUFHcVMsRUFBRUUsRUFBRXhQLElBQUcsSUFBS3NQLEVBQUU4TCxXQUFXOUwsRUFBRThMLFVBQVMsRUFBRzlMLEVBQUUrTCxjQUFhLElBQUsvTCxFQUFFeUcsS0FBS3pHLEVBQUU4RyxPQUFPNUcsRUFBRXhQLEdBQUcsQ0FBQ3FiLGNBQWEsRUFBR0QsVUFBUyxFQUFHM1IsV0FBVzZGLEVBQUU3RixXQUFXaEQsTUFBTWtPLEVBQUUzVSxLQUFLLE9BQU93QyxPQUFPZ1MsT0FBT2hTLE9BQU95c0QsZUFBZXQ2QyxHQUFHbkYsR0FBRyxTQUFTeUUsR0FBRVUsRUFBRTFYLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUl5eUQsR0FBRS82QyxJQUFJbkYsR0FBRW1GLEtBQUtuUCxHQUFFbVAsS0FBTXJGLEdBQUVxRixHQUFHLElBQUlBLEVBQUV5QixJQUFJekIsRUFBRTVMLElBQUk0TCxFQUFFNEksTUFBTTVJLEVBQUUxTCxPQUFPcXZDLElBQUc5MUMsT0FBT2dVLE9BQU83QixHQUFHMVgsR0FBRytDLEdBQUUyVSxHQUFFLFNBQVVBLEVBQUVuRixHQUFHLE9BQU95RSxHQUFFekUsR0FBRSxNQUFNLElBQXBHbUYsRUFBMkcsU0FBUzJqQyxLQUFJM2pDLEdBQUUsR0FBRyxTQUFTKzZDLEdBQUUvNkMsR0FBRyxPQUFPLE1BQU1BLEdBQUcsaUJBQWlCQSxHQUFHblMsT0FBT2dsQixTQUFTN1MsR0FBRyxTQUFTVCxHQUFFMUUsR0FBRyxJQUFJaEssRUFBRW1xRCxHQUFHbmdELEdBQUcsT0FBT2hLLEdBQUdtUCxHQUFFLEdBQUduRixHQUFHaEssRUFBbUMsU0FBUzVJLEtBQUksT0FBbURnekQsR0FBRSxTQUFTeDVCLEdBQUV6aEIsRUFBRW5GLEdBQUdBLElBQUkwRSxHQUFFLFdBQVdTLEVBQUV5NkMsRUFBRSxHQUFHejZDLEVBQUVDLEVBQUUsR0FBR0QsRUFBRXRQLEVBQUVtSyxHQUFHLFNBQVM5SyxHQUFFaVEsR0FBR2s3QyxHQUFFbDdDLEdBQUdBLEVBQUVOLEVBQUVqWCxRQUFRMHlELElBQUduN0MsRUFBRU4sRUFBRSxLQUFLLFNBQVN3N0MsR0FBRWw3QyxHQUFHQSxJQUFJaTdDLEtBQUlBLEdBQUVqN0MsRUFBRTBELEdBQUcsU0FBUzAzQyxHQUFFcDdDLEdBQUcsT0FBT2k3QyxHQUFFLENBQUN2N0MsRUFBRSxHQUFHZ0UsRUFBRXUzQyxHQUFFdFgsRUFBRTNqQyxFQUFFTSxHQUFFLEVBQUdyWSxFQUFFLEdBQUcsU0FBU2t6RCxHQUFFbjdDLEdBQUcsSUFBSW5GLEVBQUVtRixFQUFFcTZDLElBQUcsSUFBSXgvQyxFQUFFeFAsR0FBRyxJQUFJd1AsRUFBRXhQLEVBQUV3UCxFQUFFNG1CLElBQUk1bUIsRUFBRTlLLEdBQUUsRUFBRyxTQUFTc3JELEdBQUV4Z0QsRUFBRXZTLEdBQUdBLEVBQUVMLEVBQUVLLEVBQUVvWCxFQUFFblcsT0FBTyxJQUFJOEIsRUFBRS9DLEVBQUVvWCxFQUFFLEdBQUcvRSxPQUFFLElBQVNFLEdBQUdBLElBQUl4UCxFQUFFLE9BQU8vQyxFQUFFcTdDLEVBQUV5WCxHQUFHNzdDLEdBQUUsT0FBTzQ3QyxFQUFFN3lELEVBQUV1UyxFQUFFRixHQUFHQSxHQUFHdFAsRUFBRWd2RCxJQUFHZ0IsSUFBSXRyRCxHQUFFekgsR0FBRzBYLEdBQUUsSUFBSW5QLEdBQUVnSyxLQUFLQSxFQUFFeWdELEdBQUVoekQsRUFBRXVTLEdBQUd2UyxFQUFFb2IsR0FBRzYzQyxHQUFFanpELEVBQUV1UyxJQUFJdlMsRUFBRW15RCxHQUFHbDdDLEdBQUUsV0FBVys3QyxFQUFFandELEVBQUVndkQsSUFBR3gvQyxFQUFFdlMsRUFBRW15RCxFQUFFbnlELEVBQUUyWCxJQUFJcEYsRUFBRXlnRCxHQUFFaHpELEVBQUUrQyxFQUFFLElBQUkwRSxHQUFFekgsR0FBR0EsRUFBRW15RCxHQUFHbnlELEVBQUVvSSxFQUFFcEksRUFBRW15RCxFQUFFbnlELEVBQUUyWCxHQUFHcEYsSUFBSTJnRCxHQUFFM2dELE9BQUUsRUFBTyxTQUFTeWdELEdBQUV0N0MsRUFBRW5GLEVBQUVoSyxHQUFHLEdBQUdrcUQsR0FBRWxnRCxHQUFHLE9BQU9BLEVBQUUsSUFBSXZTLEVBQUV1UyxFQUFFdy9DLElBQUcsSUFBSS94RCxFQUFFLE9BQU8rQyxHQUFFd1AsR0FBRSxTQUFVeFAsRUFBRXNQLEdBQUcsT0FBTzhnRCxHQUFFejdDLEVBQUUxWCxFQUFFdVMsRUFBRXhQLEVBQUVzUCxFQUFFOUosTUFBSyxHQUFJZ0ssRUFBRSxHQUFHdlMsRUFBRW16RCxJQUFJejdDLEVBQUUsT0FBT25GLEVBQUUsSUFBSXZTLEVBQUUreUQsRUFBRSxPQUFPRSxHQUFFdjdDLEVBQUUxWCxFQUFFMFgsR0FBRSxHQUFJMVgsRUFBRTBYLEVBQUUsSUFBSTFYLEVBQUVvekQsRUFBRSxDQUFDcHpELEVBQUVvekQsR0FBRSxFQUFHcHpELEVBQUVtekQsRUFBRXh6RCxJQUFJLElBQUkwUyxFQUFFLElBQUlyUyxFQUFFK0MsR0FBRyxJQUFJL0MsRUFBRStDLEVBQUUvQyxFQUFFcVMsRUFBRStJLEdBQUVwYixFQUFFcXpELEdBQUdyekQsRUFBRXFTLEVBQUV0UCxHQUFFLElBQUkvQyxFQUFFK0MsRUFBRSxJQUFJc2QsSUFBSWhPLEdBQUdBLEdBQUUsU0FBVUUsRUFBRXhQLEdBQUcsT0FBT293RCxHQUFFejdDLEVBQUUxWCxFQUFFcVMsRUFBRUUsRUFBRXhQLEVBQUV3RixNQUFNMHFELEdBQUV2N0MsRUFBRXJGLEdBQUUsR0FBSTlKLEdBQUdtUCxFQUFFeTZDLEdBQUdsN0MsR0FBRSxXQUFXcThDLEVBQUV0ekQsRUFBRXVJLEVBQUVtUCxFQUFFeTZDLEVBQUV6NkMsRUFBRUMsR0FBRyxPQUFPM1gsRUFBRXFTLEVBQUUsU0FBUzhnRCxHQUFFbnpELEVBQUUrQyxFQUFFc1AsRUFBRXNHLEVBQUVyUSxFQUFFcVAsR0FBRyxHQUFvRHBGLEdBQUVqSyxHQUFHLENBQUMsSUFBSUYsRUFBRTRxRCxHQUFFaHpELEVBQUVzSSxFQUFFcVAsR0FBRzVVLEdBQUcsSUFBSUEsRUFBRUEsSUFBSW92RCxHQUFFcHZELEVBQUV3d0QsRUFBRTU2QyxHQUFHaEIsRUFBRXJHLE9BQU9xSCxRQUFHLEdBQVEsR0FBR3k1QyxHQUFFLy9DLEVBQUVzRyxFQUFFdlEsSUFBSW1LLEdBQUVuSyxHQUFHLE9BQU9wSSxFQUFFZ1ksR0FBRSxFQUFHLEdBQUd6UCxHQUFFRCxLQUFLbXFELEdBQUVucUQsR0FBRyxDQUFDLElBQUl0SSxFQUFFcTdDLEVBQUVtWSxHQUFHeHpELEVBQUVMLEVBQUUsRUFBRSxPQUFPcXpELEdBQUVoekQsRUFBRXNJLEdBQUd2RixHQUFHQSxFQUFFb3dELEVBQUUvM0MsR0FBRzYzQyxHQUFFanpELEVBQUVzSSxJQUFJLFNBQVMycUQsR0FBRXY3QyxFQUFFbkYsRUFBRWhLLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJbVAsRUFBRTJqQyxFQUFFbVksR0FBRzk3QyxFQUFFTSxHQUFHaEIsR0FBRXpFLEVBQUVoSyxHQUFHLFNBQVNrckQsR0FBRS83QyxFQUFFbkYsR0FBRyxJQUFJaEssRUFBRW1QLEVBQUVxNkMsSUFBRyxPQUFPeHBELEVBQUUsR0FBRUEsR0FBR21QLEdBQUduRixHQUFHLFNBQVM2Z0QsR0FBRTE3QyxFQUFFbkYsR0FBRyxHQUFHQSxLQUFLbUYsRUFBRSxJQUFJLElBQUluUCxFQUFFaEQsT0FBT3lzRCxlQUFldDZDLEdBQUduUCxHQUFHLENBQUMsSUFBSXZJLEVBQUV1RixPQUFPa2YseUJBQXlCbGMsRUFBRWdLLEdBQUcsR0FBR3ZTLEVBQUUsT0FBT0EsRUFBRXVJLEVBQUVoRCxPQUFPeXNELGVBQWV6cEQsSUFBSSxTQUFTOHFELEdBQUUzN0MsR0FBR0EsRUFBRXE3QyxJQUFJcjdDLEVBQUVxN0MsR0FBRSxFQUFHcjdDLEVBQUUwRCxHQUFHaTRDLEdBQUUzN0MsRUFBRTBELElBQUksU0FBU3M0QyxHQUFFaDhDLEdBQUdBLEVBQUVyRixJQUFJcUYsRUFBRXJGLEVBQUUrSSxHQUFFMUQsRUFBRUEsSUFBSSxTQUFTNDdDLEdBQUU1N0MsRUFBRW5GLEVBQUVoSyxHQUFHLElBQUl2SSxFQUFFMlgsR0FBRXBGLEdBQUcwRSxHQUFFLFVBQVUwOEMsRUFBRXBoRCxFQUFFaEssR0FBR0gsR0FBRW1LLEdBQUcwRSxHQUFFLFVBQVUyOEMsRUFBRXJoRCxFQUFFaEssR0FBR21QLEVBQUVvN0MsRUFBRSxTQUFTcDdDLEVBQUVuRixHQUFHLElBQUloSyxFQUFFbkosTUFBTUMsUUFBUXFZLEdBQUcxWCxFQUFFLENBQUMrQyxFQUFFd0YsRUFBRSxFQUFFLEVBQUU0cUQsRUFBRTVnRCxFQUFFQSxFQUFFNGdELEVBQUV4ekQsS0FBSW96RCxHQUFFLEVBQUdLLEdBQUUsRUFBR0csRUFBRSxHQUFHbjRDLEVBQUU3SSxFQUFFbUYsRUFBSTI3QyxFQUFFLEtBQUtoaEQsRUFBRSxLQUFLOG1CLEVBQUUsS0FBSzA2QixHQUFFLEdBQUk5d0QsRUFBRS9DLEVBQUVxUyxFQUFFeWhELEdBQUd2ckQsSUFBSXhGLEVBQUUsQ0FBQy9DLEdBQUdxUyxFQUFFMGhELElBQUksSUFBSTVCLEVBQUU2QixNQUFNQyxVQUFVbHhELEVBQUVzUCxHQUFHc0csRUFBRXc1QyxFQUFFK0IsT0FBTzlCLEVBQUVELEVBQUVua0MsTUFBTSxPQUFPaHVCLEVBQUVxekQsRUFBRWpCLEVBQUVweUQsRUFBRW01QixFQUFFeGdCLEVBQUV5NUMsRUFBMU0sQ0FBNk03L0MsRUFBRWhLLEdBQUcwTyxHQUFFLE9BQU9rOUMsRUFBRTVoRCxFQUFFaEssR0FBRyxPQUFPQSxFQUFFQSxFQUFFNHFELEVBQUV4ekQsTUFBS3lYLEVBQUU3UyxLQUFLdkUsR0FBR0EsRUFBRSxTQUFTdXpELEdBQUV2ekQsR0FBRyxPQUFPdVMsR0FBRXZTLElBQUkwWCxHQUFFLEdBQUcxWCxHQUFHLFNBQVMwWCxFQUFFbkYsR0FBRyxJQUFJaEssR0FBRWdLLEdBQUcsT0FBT0EsRUFBRSxJQUFJdlMsRUFBRW15RCxFQUFFNS9DLEVBQUV3L0MsSUFBR3pwRCxFQUFFK0osR0FBRUUsR0FBRyxHQUFHNC9DLEVBQUUsQ0FBQyxJQUFJQSxFQUFFWSxJQUFJWixFQUFFcHZELEVBQUUsSUFBSWtVLEdBQUUsT0FBT205QyxFQUFFakMsSUFBSSxPQUFPQSxFQUFFejZDLEVBQUV5NkMsRUFBRWlCLEdBQUUsRUFBR3B6RCxFQUFFd3pELEdBQUVqaEQsRUFBRWpLLEdBQUc2cEQsRUFBRWlCLEdBQUUsT0FBUXB6RCxFQUFFd3pELEdBQUVqaEQsRUFBRWpLLEdBQUcsT0FBT3ZGLEdBQUUvQyxHQUFFLFNBQVV1UyxFQUFFaEssR0FBRzRwRCxHQUFoM0YsU0FBV3o2QyxFQUFFbkYsR0FBRyxPQUFPLElBQUlGLEdBQUVxRixHQUFHQSxFQUFFb0IsSUFBSXZHLEdBQUdtRixFQUFFbkYsR0FBdzBGb0csQ0FBRXc1QyxFQUFFejZDLEVBQUVuRixLQUFLaEssR0FBRzZwRCxHQUFFcHlELEVBQUV1UyxFQUFFbUYsRUFBRW5QLE9BQU8sSUFBSUQsRUFBRSxJQUFJK1gsSUFBSXJnQixHQUFHQSxFQUF0TixDQUF5TkEsR0FBRyxTQUFTd3pELEdBQUU5N0MsRUFBRW5GLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEVBQUUsT0FBTyxJQUFJKy9DLElBQUk1NkMsR0FBRyxLQUFLLEVBQUUsT0FBT3RZLE1BQU1xVCxLQUFLaUYsR0FBRyxPQUFPMEQsR0FBRTFELEdBQTAvTixJQUFJMjhDLEdBQUUxQixHQUFFMkIsR0FBRSxvQkFBb0J2aUQsUUFBUSxpQkFBaUJBLE9BQU8sS0FBS3NnRCxHQUFFLG9CQUFvQkMsSUFBSUMsR0FBRSxvQkFBb0JseUMsSUFBSWswQyxHQUFFLG9CQUFvQlAsWUFBTyxJQUFTQSxNQUFNQyxXQUFXLG9CQUFvQjl6QyxRQUFRK3lDLEdBQUVvQixHQUFFdmlELE9BQU93d0MsSUFBSSxtQkFBbUI4UixHQUFFLElBQUksa0JBQWlCLEVBQUdBLElBQUdwQyxHQUFFcUMsR0FBRXZpRCxPQUFPd3dDLElBQUksbUJBQW1CLHFCQUFxQndQLEdBQUV1QyxHQUFFdmlELE9BQU93d0MsSUFBSSxlQUFlLGlCQUF5MkQyUCxJQUF0MUQsb0JBQW9CbmdELFFBQVFBLE9BQU9DLFNBQXF6RCxvQkFBb0JtTyxTQUFTQSxRQUFRQyxRQUFRRCxRQUFRQyxhQUFRLElBQVM3YSxPQUFPc1Msc0JBQXNCLFNBQVNILEdBQUcsT0FBT25TLE9BQU9rZSxvQkFBb0IvTCxHQUFHcEcsT0FBTy9MLE9BQU9zUyxzQkFBc0JILEtBQUtuUyxPQUFPa2UscUJBQW9CK3VDLEdBQUdqdEQsT0FBT2l2RCwyQkFBMkIsU0FBUzk4QyxHQUFHLElBQUluRixFQUFFLEdBQUcsT0FBTzIvQyxHQUFFeDZDLEdBQUd2WCxTQUFRLFNBQVVvSSxHQUFHZ0ssRUFBRWhLLEdBQUdoRCxPQUFPa2YseUJBQXlCL00sRUFBRW5QLE1BQU1nSyxHQUFHbWdELEdBQUcsR0FBR29CLEdBQUcsQ0FBQ2g3QyxJQUFJLFNBQVNwQixFQUFFbkYsR0FBRyxHQUFHQSxJQUFJdy9DLEdBQUUsT0FBT3I2QyxFQUFFLElBQUkxWCxFQUFFLEdBQUUwWCxHQUFHLElBQUl5NkMsR0FBRW55RCxFQUFFdVMsR0FBRyxPQUFPLFNBQVNtRixFQUFFbkYsRUFBRWhLLEdBQUcsSUFBSXZJLEVBQUUrQyxFQUFFcXdELEdBQUU3Z0QsRUFBRWhLLEdBQUcsT0FBT3hGLEVBQUUsVUFBVUEsRUFBRUEsRUFBRXlHLE1BQU0sUUFBUXhKLEVBQUUrQyxFQUFFK1YsV0FBTSxJQUFTOVksT0FBRSxFQUFPQSxFQUFFMEIsS0FBS2dXLEVBQUUyN0MsUUFBRyxFQUE1RyxDQUFvSDM3QyxFQUFFMVgsRUFBRXVTLEdBQUcsSUFBSXhQLEVBQUUvQyxFQUFFdVMsR0FBRyxPQUFPbUYsRUFBRTA3QyxJQUFJN3FELEdBQUV4RixHQUFHQSxFQUFFQSxJQUFJMHdELEdBQUUvN0MsRUFBRUEsRUFBRW5GLElBQUltaEQsR0FBRWg4QyxHQUFHQSxFQUFFckYsRUFBRUUsR0FBRytnRCxHQUFFNTdDLEVBQUV5N0MsRUFBRTlYLEVBQUV0NEMsRUFBRTJVLElBQUkzVSxHQUFHOEksSUFBSSxTQUFTNkwsRUFBRW5GLEdBQUcsT0FBT0EsS0FBSyxHQUFFbUYsSUFBSTBJLFFBQVEsU0FBUzFJLEdBQUcsT0FBT3lJLFFBQVFDLFFBQVEsR0FBRTFJLEtBQUt5QixJQUFJLFNBQVN6QixFQUFFbkYsRUFBRWhLLEdBQUcsSUFBSXZJLEVBQUVvekQsR0FBRSxHQUFFMTdDLEdBQUduRixHQUFHLEdBQUcsTUFBTXZTLE9BQUUsRUFBT0EsRUFBRW1aLElBQUksT0FBT25aLEVBQUVtWixJQUFJelgsS0FBS2dXLEVBQUUyN0MsRUFBRTlxRCxJQUFHLEVBQUcsSUFBSW1QLEVBQUVxN0MsRUFBRSxDQUFDLElBQUlod0QsRUFBRTB3RCxHQUFFLEdBQUUvN0MsR0FBR25GLEdBQUdGLEVBQUUsTUFBTXRQLE9BQUUsRUFBT0EsRUFBRWd2RCxJQUFHLEdBQUcxL0MsR0FBR0EsRUFBRXFGLElBQUluUCxFQUFFLE9BQU9tUCxFQUFFckYsRUFBRUUsR0FBR2hLLEVBQUVtUCxFQUFFNjdDLEVBQUVoaEQsSUFBRyxHQUFHLEVBQUcsR0FBR2pLLEdBQUVDLEVBQUV4RixVQUFLLElBQVN3RixHQUFHNHBELEdBQUV6NkMsRUFBRUEsRUFBRW5GLElBQUksT0FBTSxFQUFHbWhELEdBQUVoOEMsR0FBRzI3QyxHQUFFMzdDLEdBQUcsT0FBT0EsRUFBRXJGLEVBQUVFLEdBQUdoSyxFQUFFbVAsRUFBRTY3QyxFQUFFaGhELElBQUcsR0FBRyxHQUFJa2lELGVBQWUsU0FBUy84QyxFQUFFbkYsR0FBRyxZQUFPLElBQVNraEQsR0FBRS83QyxFQUFFQSxFQUFFbkYsSUFBSUEsS0FBS21GLEVBQUVBLEdBQUdBLEVBQUU2N0MsRUFBRWhoRCxJQUFHLEVBQUdtaEQsR0FBRWg4QyxHQUFHMjdDLEdBQUUzN0MsV0FBV0EsRUFBRTY3QyxFQUFFaGhELEdBQUdtRixFQUFFckYsVUFBVXFGLEVBQUVyRixFQUFFRSxJQUFHLEdBQUlrUyx5QkFBeUIsU0FBUy9NLEVBQUVuRixHQUFHLElBQUloSyxFQUFFLEdBQUVtUCxHQUFHMVgsRUFBRW1nQixRQUFRc0UseUJBQXlCbGMsRUFBRWdLLEdBQUcsT0FBT3ZTLEVBQUUsQ0FBQ21lLFVBQVMsRUFBR0MsYUFBYSxJQUFJMUcsRUFBRTNVLEdBQUcsV0FBV3dQLEVBQUUvRixXQUFXeE0sRUFBRXdNLFdBQVdoRCxNQUFNakIsRUFBRWdLLElBQUl2UyxHQUFHNlksZUFBZSxXQUFXbkIsR0FBRSxLQUFLczZDLGVBQWUsU0FBU3Q2QyxHQUFHLE9BQU9uUyxPQUFPeXNELGVBQWV0NkMsRUFBRUEsSUFBSVIsZUFBZSxXQUFXUSxHQUFFLE1BQU1xOEMsR0FBRyxHQUFHaHhELEdBQUUrd0QsSUFBRyxTQUFVcDhDLEVBQUVuRixHQUFHd2hELEdBQUdyOEMsR0FBRyxXQUFXLE9BQU8xVyxVQUFVLEdBQUdBLFVBQVUsR0FBRyxHQUFHdVIsRUFBRTVRLE1BQU0zQyxLQUFLZ0MsZUFBZSt5RCxHQUFHVSxlQUFlLFNBQVNsaUQsRUFBRWhLLEdBQUcsT0FBcUV1ckQsR0FBR1csZUFBZS95RCxLQUFLMUMsS0FBS3VULEVBQUUsR0FBR2hLLElBQUl3ckQsR0FBRzU2QyxJQUFJLFNBQVM1RyxFQUFFaEssRUFBRXZJLEdBQUcsT0FBbUY4ekQsR0FBRzM2QyxJQUFJelgsS0FBSzFDLEtBQUt1VCxFQUFFLEdBQUdoSyxFQUFFdkksRUFBRXVTLEVBQUUsS0FBSyxJQUEyM0RtaUQsR0FBRyxJQUF2M0QsV0FBVyxTQUFTMTBELEVBQUUwWCxHQUFHMVksS0FBSzh6RCxFQUFFeUIsR0FBRXYxRCxLQUFLdzBELEdBQUUsRUFBRyxrQkFBa0IsTUFBTTk3QyxPQUFFLEVBQU9BLEVBQUVpOUMsYUFBYTMxRCxLQUFLNDFELGNBQWNsOUMsRUFBRWk5QyxZQUFZLGtCQUFrQixNQUFNajlDLE9BQUUsRUFBT0EsRUFBRW05QyxhQUFhNzFELEtBQUs4MUQsY0FBY3A5QyxFQUFFbTlDLFlBQVk3MUQsS0FBSysxRCxRQUFRLzFELEtBQUsrMUQsUUFBUXYwRCxLQUFLeEIsTUFBTUEsS0FBS2cyRCxtQkFBbUJoMkQsS0FBS2cyRCxtQkFBbUJ4MEQsS0FBS3hCLE1BQU0sSUFBSStELEVBQUUvQyxFQUFFUCxVQUFVLE9BQU9zRCxFQUFFZ3lELFFBQVEsU0FBU3hpRCxFQUFFdlMsRUFBRStDLEdBQUcsR0FBRyxtQkFBbUJ3UCxHQUFHLG1CQUFtQnZTLEVBQUUsQ0FBQyxJQUFJcVMsRUFBRXJTLEVBQUVBLEVBQUV1UyxFQUFFLElBQUk0L0MsRUFBRW56RCxLQUFLLE9BQU8sU0FBUzBZLEdBQUcsSUFBSW5GLEVBQUV2VCxVQUFLLElBQVMwWSxJQUFJQSxFQUFFckYsR0FBRyxJQUFJLElBQUk5SixFQUFFdkgsVUFBVUMsT0FBTzhCLEVBQUUzRCxNQUFNbUosRUFBRSxFQUFFQSxFQUFFLEVBQUUsR0FBR29RLEVBQUUsRUFBRUEsRUFBRXBRLEVBQUVvUSxJQUFJNVYsRUFBRTRWLEVBQUUsR0FBRzNYLFVBQVUyWCxHQUFHLE9BQU93NUMsRUFBRTRDLFFBQVFyOUMsR0FBRSxTQUFVQSxHQUFHLElBQUluUCxFQUFFLE9BQU9BLEVBQUV2SSxHQUFHMEIsS0FBS0MsTUFBTTRHLEVBQUUsQ0FBQ2dLLEVBQUVtRixHQUFHcEcsT0FBT3ZPLFFBQVEsSUFBSTRWLEVBQUUsR0FBRyxtQkFBbUIzWSxHQUFHMFgsR0FBRSxRQUFHLElBQVMzVSxHQUFHLG1CQUFtQkEsR0FBRzJVLEdBQUUsR0FBR25QLEdBQUVnSyxHQUFHLENBQUMsSUFBSTYvQyxFQUFFVSxHQUFFOXpELE1BQU1zSixFQUFFZ3JELEdBQUV0MEQsS0FBS3VULE9BQUUsR0FBUW9GLEdBQUUsRUFBRyxJQUFJZ0IsRUFBRTNZLEVBQUVzSSxHQUFHcVAsR0FBRSxFQUFHLFFBQVFBLEVBQUVsUSxHQUFFMnFELEdBQUdRLEdBQUVSLEdBQUcsTUFBTSxvQkFBb0I5b0MsU0FBUzNRLGFBQWEyUSxRQUFRM1EsRUFBRS9XLE1BQUssU0FBVThWLEdBQUcsT0FBT3loQixHQUFFaTVCLEVBQUVydkQsR0FBR2d3RCxHQUFFcjdDLEVBQUUwNkMsTUFBSyxTQUFVMTZDLEdBQUcsTUFBTWpRLEdBQUUycUQsR0FBRzE2QyxNQUFNeWhCLEdBQUVpNUIsRUFBRXJ2RCxHQUFHZ3dELEdBQUVwNkMsRUFBRXk1QyxJQUFJLElBQUk3L0MsR0FBRyxpQkFBaUJBLEVBQUUsQ0FBQyxJQUFJb0csRUFBRTNZLEVBQUV1UyxNQUFNMmdELEdBQUUsT0FBTyxZQUFPLElBQVN2NkMsSUFBSUEsRUFBRXBHLEdBQUd2VCxLQUFLdzBELEdBQUd4OEMsR0FBRTJCLEdBQUUsR0FBSUEsRUFBRWpCLEdBQUUsR0FBR25GLElBQUl4UCxFQUFFaXlELG1CQUFtQixTQUFTdDlDLEVBQUVuRixHQUFHLElBQUloSyxFQUFFdkksRUFBRStDLEVBQUUvRCxLQUFLLE1BQU0sbUJBQW1CMFksRUFBRSxTQUFTbkYsR0FBRyxJQUFJLElBQUloSyxFQUFFdkgsVUFBVUMsT0FBT2pCLEVBQUVaLE1BQU1tSixFQUFFLEVBQUVBLEVBQUUsRUFBRSxHQUFHOEosRUFBRSxFQUFFQSxFQUFFOUosRUFBRThKLElBQUlyUyxFQUFFcVMsRUFBRSxHQUFHclIsVUFBVXFSLEdBQUcsT0FBT3RQLEVBQUVpeUQsbUJBQW1CemlELEdBQUUsU0FBVUEsR0FBRyxPQUFPbUYsRUFBRS9WLFdBQU0sRUFBTyxDQUFDNFEsR0FBR2pCLE9BQU90UixRQUFRLENBQUNoQixLQUFLKzFELFFBQVFyOUMsRUFBRW5GLEdBQUUsU0FBVW1GLEVBQUVuRixHQUFHaEssRUFBRW1QLEVBQUUxWCxFQUFFdVMsS0FBS2hLLEVBQUV2SSxJQUFJK0MsRUFBRWt5RCxZQUFZLFNBQVNqMUQsR0FBR3VJLEdBQUV2SSxJQUFJMFgsR0FBRSxHQUFHbkYsR0FBRXZTLEtBQUtBLEVBQUV1ekQsR0FBRXZ6RCxJQUFJLElBQUkrQyxFQUFFK3ZELEdBQUU5ekQsTUFBTXFULEVBQUVpaEQsR0FBRXQwRCxLQUFLZ0IsT0FBRSxHQUFRLE9BQU9xUyxFQUFFMC9DLElBQUc4QixHQUFFLEVBQUdqQixHQUFFN3ZELEdBQUdzUCxHQUFHdFAsRUFBRW15RCxZQUFZLFNBQVMzaUQsRUFBRWhLLEdBQUcsSUFBaUZ4RixHQUEzRXdQLEdBQUdBLEVBQUV3L0MsS0FBMEVvQixFQUFFLE9BQU9oNkIsR0FBRXAyQixFQUFFd0YsR0FBR3dxRCxRQUFFLEVBQU9od0QsSUFBSUEsRUFBRSt4RCxjQUFjLFNBQVNwOUMsR0FBRzFZLEtBQUt3MEQsRUFBRTk3QyxHQUFHM1UsRUFBRTZ4RCxjQUFjLFNBQVNyaUQsR0FBR0EsSUFBSWdpRCxJQUFHNzhDLEdBQUUsSUFBSTFZLEtBQUs4ekQsRUFBRXZnRCxHQUFHeFAsRUFBRW95RCxhQUFhLFNBQVN6OUMsRUFBRW5QLEdBQUcsSUFBSXZJLEVBQUUsSUFBSUEsRUFBRXVJLEVBQUV0SCxPQUFPLEVBQUVqQixHQUFHLEVBQUVBLElBQUksQ0FBQyxJQUFJK0MsRUFBRXdGLEVBQUV2SSxHQUFHLEdBQUcsSUFBSStDLEVBQUVpRyxLQUFLL0gsUUFBUSxZQUFZOEIsRUFBRVAsR0FBRyxDQUFDa1YsRUFBRTNVLEVBQUV5RyxNQUFNLE9BQU8sSUFBSTZJLEVBQUU0RSxHQUFFLFdBQVdtK0MsRUFBRSxPQUFPN2lELEdBQUVtRixHQUFHckYsRUFBRXFGLEVBQUVuUCxHQUFHdkosS0FBSysxRCxRQUFRcjlDLEdBQUUsU0FBVUEsR0FBRyxPQUFPckYsRUFBRXFGLEVBQUVuUCxFQUFFdkcsTUFBTWhDLEVBQUUsUUFBUUEsRUFBLzJELElBQTgzRHExRCxHQUFHWCxHQUFHSyxRQUFXTCxHQUFHTSxtQkFBbUJ4MEQsS0FBS2swRCxJQUFPQSxHQUFHSSxjQUFjdDBELEtBQUtrMEQsSUFBT0EsR0FBR0UsY0FBY3AwRCxLQUFLazBELElBQU9BLEdBQUdTLGFBQWEzMEQsS0FBS2swRCxJQUFPQSxHQUFHTyxZQUFZejBELEtBQUtrMEQsSUFBT0EsR0FBR1EsWUFBWTEwRCxLQUFLazBELElBQUksWSxjQ1FsL2hCWSxHQUFlLFdBQ2pCLE9BQU85c0QsS0FBS0MsU0FBU2pELFNBQVMsSUFBSW1wRCxVQUFVLEdBQUd6cEQsTUFBTSxJQUFJUixLQUFLLE1BRzVENndELEdBQWMsQ0FDaEJDLEtBQU0sZUFBaUJGLEtBQ3ZCRyxRQUFTLGtCQUFvQkgsS0FDN0JJLHFCQUFzQixXQUNwQixNQUFPLCtCQUFpQ0osT0FRNUMsU0FBUyxHQUFjMXBELEdBQ3JCLEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUFjLE9BQU8sRUFHcEQsSUFGQSxJQUFJK3BELEVBQVEvcEQsRUFFNEIsT0FBakNyRyxPQUFPeXNELGVBQWUyRCxJQUMzQkEsRUFBUXB3RCxPQUFPeXNELGVBQWUyRCxHQUdoQyxPQUFPcHdELE9BQU95c0QsZUFBZXBtRCxLQUFTK3BELEVBNkJ4QyxTQUFTQyxHQUFZQyxFQUFTQyxFQUFnQkMsR0FDNUMsSUFBSUMsRUFFSixHQUE4QixtQkFBbkJGLEdBQXFELG1CQUFiQyxHQUErQyxtQkFBYkEsR0FBbUQsbUJBQWpCLzBELFVBQVUsR0FDL0gsTUFBTSxJQUFJMEUsTUFBTSx1SkFRbEIsR0FMOEIsbUJBQW5Cb3dELFFBQXFELElBQWJDLElBQ2pEQSxFQUFXRCxFQUNYQSxPQUFpQnBsRCxRQUdLLElBQWJxbEQsRUFBMEIsQ0FDbkMsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJcndELE1BQU0sMkNBR2xCLE9BQU9xd0QsRUFBU0gsR0FBVEcsQ0FBc0JGLEVBQVNDLEdBR3hDLEdBQXVCLG1CQUFaRCxFQUNULE1BQU0sSUFBSW53RCxNQUFNLDBDQUdsQixJQUFJdXdELEVBQWlCSixFQUNqQkssRUFBZUosRUFDZkssRUFBbUIsR0FDbkJDLEVBQWdCRCxFQUNoQkUsR0FBZ0IsRUFTcEIsU0FBU0MsSUFDSEYsSUFBa0JELElBQ3BCQyxFQUFnQkQsRUFBaUJuMEQsU0FVckMsU0FBU3UwRCxJQUNQLEdBQUlGLEVBQ0YsTUFBTSxJQUFJM3dELE1BQU0sd01BR2xCLE9BQU93d0QsRUEyQlQsU0FBU00sRUFBVUMsR0FDakIsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJL3dELE1BQU0sMkNBR2xCLEdBQUkyd0QsRUFDRixNQUFNLElBQUkzd0QsTUFBTSw2VEFHbEIsSUFBSWd4RCxHQUFlLEVBR25CLE9BRkFKLElBQ0FGLEVBQWM3eEQsS0FBS2t5RCxHQUNaLFdBQ0wsR0FBS0MsRUFBTCxDQUlBLEdBQUlMLEVBQ0YsTUFBTSxJQUFJM3dELE1BQU0sa0tBR2xCZ3hELEdBQWUsRUFDZkosSUFDQSxJQUFJcGlELEVBQVFraUQsRUFBY25tRCxRQUFRd21ELEdBQ2xDTCxFQUFjbnFELE9BQU9pSSxFQUFPLEdBQzVCaWlELEVBQW1CLE9BOEJ2QixTQUFTUSxFQUFTQyxHQUNoQixJQUFLLEdBQWNBLEdBQ2pCLE1BQU0sSUFBSWx4RCxNQUFNLDJFQUdsQixRQUEyQixJQUFoQmt4RCxFQUFPcnRELEtBQ2hCLE1BQU0sSUFBSTdELE1BQU0sc0ZBR2xCLEdBQUkyd0QsRUFDRixNQUFNLElBQUkzd0QsTUFBTSxzQ0FHbEIsSUFDRTJ3RCxHQUFnQixFQUNoQkgsRUFBZUQsRUFBZUMsRUFBY1UsR0FDNUMsUUFDQVAsR0FBZ0IsRUFLbEIsSUFGQSxJQUFJbGtDLEVBQVlna0MsRUFBbUJDLEVBRTFCcnpELEVBQUksRUFBR0EsRUFBSW92QixFQUFVbHhCLE9BQVE4QixLQUVwQzB6RCxFQURldGtDLEVBQVVwdkIsTUFJM0IsT0FBTzZ6RCxFQWNULFNBQVNDLEVBQWVDLEdBQ3RCLEdBQTJCLG1CQUFoQkEsRUFDVCxNQUFNLElBQUlweEQsTUFBTSw4Q0FHbEJ1d0QsRUFBaUJhLEVBS2pCSCxFQUFTLENBQ1BwdEQsS0FBTWdzRCxHQUFZRSxVQVd0QixTQUFTMytDLElBQ1AsSUFBSWlnRCxFQUVBQyxFQUFpQlIsRUFDckIsT0FBT08sRUFBTyxDQVNaUCxVQUFXLFNBQW1CNXNDLEdBQzVCLEdBQXdCLGlCQUFiQSxHQUFzQyxPQUFiQSxFQUNsQyxNQUFNLElBQUlqWCxVQUFVLDBDQUd0QixTQUFTc2tELElBQ0hydEMsRUFBUzVhLE1BQ1g0YSxFQUFTNWEsS0FBS3VuRCxLQU1sQixPQUZBVSxJQUVPLENBQ0xDLFlBRmdCRixFQUFlQyxPQUs3QixNQUFnQixXQUN0QixPQUFPajRELE1BQ04rM0QsRUFTTCxPQUhBSixFQUFTLENBQ1BwdEQsS0FBTWdzRCxHQUFZQyxRQUViUSxFQUFRLENBQ2JXLFNBQVVBLEVBQ1ZILFVBQVdBLEVBQ1hELFNBQVVBLEVBQ1ZNLGVBQWdCQSxJQUNULE1BQWdCLy9DLEVBQVlrL0MsRUEwQnZDLFNBQVNtQixHQUE4QnJ5RCxFQUFLOHhELEdBQzFDLElBQUlRLEVBQWFSLEdBQVVBLEVBQU9ydEQsS0FFbEMsTUFBTyxVQURpQjZ0RCxHQUFjLFdBQWNycEQsT0FBT3FwRCxHQUFjLEtBQVEsYUFDM0MsY0FBaUJ0eUQsRUFBaEQsaUxBNkxULFNBQVN1eUQsR0FBZ0J6ckQsRUFBSzlHLEVBQUswRSxHQVlqQyxPQVhJMUUsS0FBTzhHLEVBQ1RyRyxPQUFPc1QsZUFBZWpOLEVBQUs5RyxFQUFLLENBQzlCMEUsTUFBT0EsRUFDUGdELFlBQVksRUFDWjRSLGNBQWMsRUFDZEQsVUFBVSxJQUdadlMsRUFBSTlHLEdBQU8wRSxFQUdOb0MsRUFHVCxTQUFTd1UsR0FBUXpULEVBQVEycUQsR0FDdkIsSUFBSXZ0RCxFQUFPeEUsT0FBT3dFLEtBQUs0QyxHQVN2QixPQVBJcEgsT0FBT3NTLHVCQUNUOU4sRUFBS3hGLEtBQUs1QyxNQUFNb0ksRUFBTXhFLE9BQU9zUyxzQkFBc0JsTCxJQUdqRDJxRCxJQUFnQnZ0RCxFQUFPQSxFQUFLcUwsUUFBTyxTQUFVbWlELEdBQy9DLE9BQU9oeUQsT0FBT2tmLHlCQUF5QjlYLEVBQVE0cUQsR0FBSy9xRCxlQUUvQ3pDLEVBR1QsU0FBU3l0RCxHQUFldHFELEdBQ3RCLElBQUssSUFBSW5LLEVBQUksRUFBR0EsRUFBSS9CLFVBQVVDLE9BQVE4QixJQUFLLENBQ3pDLElBQUlvSixFQUF5QixNQUFoQm5MLFVBQVUrQixHQUFhL0IsVUFBVStCLEdBQUssR0FFL0NBLEVBQUksRUFDTnFkLEdBQVFqVSxHQUFRLEdBQU1oTSxTQUFRLFNBQVUyRSxHQUN0Q3V5RCxHQUFnQm5xRCxFQUFRcEksRUFBS3FILEVBQU9ySCxPQUU3QlMsT0FBT2l2RCwwQkFDaEJqdkQsT0FBT2dILGlCQUFpQlcsRUFBUTNILE9BQU9pdkQsMEJBQTBCcm9ELElBRWpFaVUsR0FBUWpVLEdBQVFoTSxTQUFRLFNBQVUyRSxHQUNoQ1MsT0FBT3NULGVBQWUzTCxFQUFRcEksRUFBS1MsT0FBT2tmLHlCQUF5QnRZLEVBQVFySCxPQUtqRixPQUFPb0ksRUFhVCxTQUFTdXFELEtBQ1AsSUFBSyxJQUFJQyxFQUFPMTJELFVBQVVDLE9BQVEwMkQsRUFBUSxJQUFJdjRELE1BQU1zNEQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNoRkQsRUFBTUMsR0FBUTUyRCxVQUFVNDJELEdBRzFCLE9BQXFCLElBQWpCRCxFQUFNMTJELE9BQ0QsU0FBVXFsQyxHQUNmLE9BQU9BLEdBSVUsSUFBakJxeEIsRUFBTTEyRCxPQUNEMDJELEVBQU0sR0FHUkEsRUFBTTcwRCxRQUFPLFNBQVU2VixFQUFHMUIsR0FDL0IsT0FBTyxXQUNMLE9BQU8wQixFQUFFMUIsRUFBRXRWLFdBQU0sRUFBUVgsZ0JBc0IvQixTQUFTNjJELEtBQ1AsSUFBSyxJQUFJSCxFQUFPMTJELFVBQVVDLE9BQVE2MkQsRUFBYyxJQUFJMTRELE1BQU1zNEQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUN0RkUsRUFBWUYsR0FBUTUyRCxVQUFVNDJELEdBR2hDLE9BQU8sU0FBVWhDLEdBQ2YsT0FBTyxXQUNMLElBQUltQyxFQUFRbkMsRUFBWWowRCxXQUFNLEVBQVFYLFdBRWxDZzNELEVBQVksV0FDZCxNQUFNLElBQUl0eUQsTUFBTSwySEFHZHV5RCxFQUFnQixDQUNsQjFCLFNBQVV3QixFQUFNeEIsU0FDaEJJLFNBQVUsV0FDUixPQUFPcUIsRUFBVXIyRCxXQUFNLEVBQVFYLGFBRy9CazNELEVBQVFKLEVBQVlqMUQsS0FBSSxTQUFVczFELEdBQ3BDLE9BQU9BLEVBQVdGLE1BR3BCLE9BQU9ULEdBQWUsR0FBSU8sRUFBTyxDQUMvQnBCLFNBRkZxQixFQUFZUCxHQUFROTFELFdBQU0sRUFBUXUyRCxFQUF0QlQsQ0FBNkJNLEVBQU1wQixjQ25vQnJELFNBQVN5QixHQUFxQnovQyxFQUFHMUIsR0FDL0IsT0FBTzBCLElBQU0xQixFQUdmLFNBQVNvaEQsR0FBMkJDLEVBQWUxdkIsRUFBTTU1QixHQUN2RCxHQUFhLE9BQVQ0NUIsR0FBMEIsT0FBVDU1QixHQUFpQjQ1QixFQUFLM25DLFNBQVcrTixFQUFLL04sT0FDekQsT0FBTyxFQUtULElBREEsSUFBSUEsRUFBUzJuQyxFQUFLM25DLE9BQ1Q4QixFQUFJLEVBQUdBLEVBQUk5QixFQUFROEIsSUFDMUIsSUFBS3UxRCxFQUFjMXZCLEVBQUs3bEMsR0FBSWlNLEVBQUtqTSxJQUMvQixPQUFPLEVBSVgsT0FBTyxFQ2pCVCxTQUFTdzFELEdBQXNCQyxHQUM3QixPQUFPLFNBQVV6QixHQUNmLElBQUlKLEVBQVdJLEVBQUtKLFNBQ2hCSixFQUFXUSxFQUFLUixTQUNwQixPQUFPLFNBQVV2bkQsR0FDZixPQUFPLFNBQVU0bkQsR0FDZixNQUFzQixtQkFBWEEsRUFDRkEsRUFBT0QsRUFBVUosRUFBVWlDLEdBRzdCeHBELEVBQUs0bkQsT0QwQ2IsU0FBK0JqckQsR0FDcEMsSUFBSyxJQUFJK3JELEVBQU8xMkQsVUFBVUMsT0FBUXczRCxFQUFpQnI1RCxNQUFNczRELEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlFLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDeEdhLEVBQWViLEVBQU8sR0FBSzUyRCxVQUFVNDJELEdBNENiYyxFQTlFckIsU0FBd0JDLEdBQzdCLElBQUlMLEVBQWdCdDNELFVBQVVDLE9BQVMsUUFBc0J5UCxJQUFqQjFQLFVBQVUsR0FBbUJBLFVBQVUsR0FBS28zRCxHQUVwRlEsRUFBVyxLQUNYQyxFQUFhLEtBRWpCLE9BQU8sV0FPTCxPQU5LUixHQUEyQkMsRUFBZU0sRUFBVTUzRCxhQUV2RDYzRCxFQUFhRixFQUFLaDNELE1BQU0sS0FBTVgsWUFHaEM0M0QsRUFBVzUzRCxVQUNKNjNELE1DakJYLElBQUlDLEdBQVFQLEtBQ1pPLEdBQU1DLGtCQUFvQlIsR0FFMUIsWUNXQSxTQUFTUyxLQWVQLE9BZEFBLEdBQVd6ekQsT0FBT2tTLFFBQVUsU0FBVXZLLEdBQ3BDLElBQUssSUFBSW5LLEVBQUksRUFBR0EsRUFBSS9CLFVBQVVDLE9BQVE4QixJQUFLLENBQ3pDLElBQUlvSixFQUFTbkwsVUFBVStCLEdBRXZCLElBQUssSUFBSStCLEtBQU9xSCxFQUNWNUcsT0FBTzlGLFVBQVV1TixlQUFldEwsS0FBS3lLLEVBQVFySCxLQUMvQ29JLEVBQU9wSSxHQUFPcUgsRUFBT3JILElBSzNCLE9BQU9vSSxJQUdPdkwsTUFBTTNDLEtBQU1nQyxXQVM5QixTQUFTaTRELEdBQWdCNW1ELEdBSXZCLE9BSEE0bUQsR0FBa0IxekQsT0FBTzJSLGVBQWlCM1IsT0FBT3lzRCxlQUFpQixTQUF5QjMvQyxHQUN6RixPQUFPQSxFQUFFOEUsV0FBYTVSLE9BQU95c0QsZUFBZTMvQyxLQUV2QkEsR0FHekIsU0FBUzZtRCxHQUFnQjdtRCxFQUFHK0UsR0FNMUIsT0FMQThoRCxHQUFrQjN6RCxPQUFPMlIsZ0JBQWtCLFNBQXlCN0UsRUFBRytFLEdBRXJFLE9BREEvRSxFQUFFOEUsVUFBWUMsRUFDUC9FLElBR2NBLEVBQUcrRSxHQUc1QixTQUFTK2hELEtBQ1AsR0FBdUIsb0JBQVpoNUMsVUFBNEJBLFFBQVFpNUMsVUFBVyxPQUFPLEVBQ2pFLEdBQUlqNUMsUUFBUWk1QyxVQUFVQyxLQUFNLE9BQU8sRUFDbkMsR0FBcUIsbUJBQVZyRixNQUFzQixPQUFPLEVBRXhDLElBRUUsT0FEQWpwRCxLQUFLdEwsVUFBVStGLFNBQVM5RCxLQUFLeWUsUUFBUWk1QyxVQUFVcnVELEtBQU0sSUFBSSxpQkFDbEQsRUFDUCxNQUFPL0ssR0FDUCxPQUFPLEdBSVgsU0FBU3M1RCxHQUFXQyxFQUFRejRELEVBQU0wNEQsR0FjaEMsT0FaRUYsR0FERUgsS0FDV2g1QyxRQUFRaTVDLFVBRVIsU0FBb0JHLEVBQVF6NEQsRUFBTTA0RCxHQUM3QyxJQUFJN2dELEVBQUksQ0FBQyxNQUNUQSxFQUFFcFUsS0FBSzVDLE1BQU1nWCxFQUFHN1gsR0FDaEIsSUFDSTI0RCxFQUFXLElBREd6Z0QsU0FBU3hZLEtBQUttQixNQUFNNDNELEVBQVE1Z0QsSUFHOUMsT0FESTZnRCxHQUFPTixHQUFnQk8sRUFBVUQsRUFBTS81RCxXQUNwQ2c2RCxJQUlPOTNELE1BQU0sS0FBTVgsV0FPaEMsU0FBUzA0RCxHQUFpQkYsR0FDeEIsSUFBSUcsRUFBd0IsbUJBQVJySCxJQUFxQixJQUFJQSxTQUFRNWhELEVBOEJyRCxPQTVCQWdwRCxHQUFtQixTQUEwQkYsR0FDM0MsR0FBYyxPQUFWQSxJQVJtQmxxRCxFQVFrQmtxRCxHQVBxQixJQUF6RHhnRCxTQUFTeFQsU0FBUzlELEtBQUs0TixHQUFJVyxRQUFRLGtCQU9TLE9BQU91cEQsRUFSNUQsSUFBMkJscUQsRUFVdkIsR0FBcUIsbUJBQVZrcUQsRUFDVCxNQUFNLElBQUk3bUQsVUFBVSxzREFHdEIsUUFBc0IsSUFBWGduRCxFQUF3QixDQUNqQyxHQUFJQSxFQUFPOXRELElBQUkydEQsR0FBUSxPQUFPRyxFQUFPN2dELElBQUkwZ0QsR0FFekNHLEVBQU94Z0QsSUFBSXFnRCxFQUFPSSxHQUdwQixTQUFTQSxJQUNQLE9BQU9OLEdBQVdFLEVBQU94NEQsVUFBV2k0RCxHQUFnQmo2RCxNQUFNd1QsYUFXNUQsT0FSQW9uRCxFQUFRbjZELFVBQVk4RixPQUFPZ1MsT0FBT2lpRCxFQUFNLzVELFVBQVcsQ0FDakQrUyxZQUFhLENBQ1hoSixNQUFPb3dELEVBQ1BwdEQsWUFBWSxFQUNaMlIsVUFBVSxFQUNWQyxjQUFjLEtBR1g4NkMsR0FBZ0JVLEVBQVNKLEtBR1ZBLEdBTzFCLElBQUlLLEdBQXdDLG9CQUFYbnlELFFBQTBCQSxPQUFPb3lELHFDQUF1Q3B5RCxPQUFPb3lELHFDQUF1QyxXQUNySixHQUF5QixJQUFyQjk0RCxVQUFVQyxPQUNkLE1BQTRCLGlCQUFqQkQsVUFBVSxHQUF3QnkyRCxHQUN0Q0EsR0FBUTkxRCxNQUFNLEtBQU1YLFlBZ0Q3QixJQ3pMSys0RCxHRHlMREMsR0FFSixTQUFVQyxHQW5KVixJQUF3QkMsRUFBVUMsRUFzSmhDLFNBQVNILElBQ1AsT0FBT0MsRUFBT3Q0RCxNQUFNM0MsS0FBTWdDLFlBQWNoQyxLQXZKVm03RCxFQW9KQUYsR0FwSlZDLEVBb0pQRixHQW5KTnY2RCxVQUFZOEYsT0FBT2dTLE9BQU80aUQsRUFBVzE2RCxXQUM5Q3k2RCxFQUFTejZELFVBQVUrUyxZQUFjMG5ELEVBQ2pDQSxFQUFTL2lELFVBQVlnakQsRUF1SnJCLElBQUlDLEVBQVNKLEVBQWdCdjZELFVBd0I3QixPQXRCQTI2RCxFQUFPOW9ELE9BQVMsV0FHZCxJQUZBLElBQUkrb0QsRUFFSzNDLEVBQU8xMkQsVUFBVUMsT0FBUStHLEVBQU0sSUFBSTVJLE1BQU1zNEQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUM5RTV2RCxFQUFJNHZELEdBQVE1MkQsVUFBVTQyRCxHQUd4QixPQUFPMEIsR0FBV1UsR0FBa0JLLEVBQXdCSixFQUFPeDZELFVBQVU2UixRQUFRNVAsS0FBS0MsTUFBTTA0RCxFQUF1QixDQUFDcjdELE1BQU1zUyxPQUFPdEosTUFHdklveUQsRUFBT0UsUUFBVSxXQUNmLElBQUssSUFBSUMsRUFBUXY1RCxVQUFVQyxPQUFRK0csRUFBTSxJQUFJNUksTUFBTW03RCxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ25GeHlELEVBQUl3eUQsR0FBU3g1RCxVQUFVdzVELEdBR3pCLE9BQW1CLElBQWZ4eUQsRUFBSS9HLFFBQWdCN0IsTUFBTUMsUUFBUTJJLEVBQUksSUFDakNzeEQsR0FBV1UsRUFBaUJoeUQsRUFBSSxHQUFHc0osT0FBT3RTLE9BRzVDczZELEdBQVdVLEVBQWlCaHlELEVBQUlzSixPQUFPdFMsUUFHekNnN0QsRUEvQlQsQ0FrQ0FOLEdBQWlCdDZELFFBb2ZqQixTQUFTcTdELEdBQWFseEQsRUFBTW14RCxHQUMxQixTQUFTQyxJQUNQLEdBQUlELEVBQWUsQ0FDakIsSUFBSUUsRUFBV0YsRUFBYy80RCxXQUFNLEVBQVFYLFdBRTNDLElBQUs0NUQsRUFDSCxNQUFNLElBQUlsMUQsTUFBTSwwQ0FHbEIsT0FBT3N6RCxHQUFTLENBQ2R6dkQsS0FBTUEsRUFDTnN4RCxRQUFTRCxFQUFTQyxTQUNqQixTQUFVRCxHQUFZLENBQ3ZCM1MsS0FBTTJTLEVBQVMzUyxNQUNkLEdBQUksVUFBVzJTLEdBQVksQ0FDNUJ4ekQsTUFBT3d6RCxFQUFTeHpELFFBSXBCLE1BQU8sQ0FDTG1DLEtBQU1BLEVBQ05zeEQsUUFBUzc1RCxVQUFVQyxRQUFVLE9BQUl5UCxFQUFZMVAsVUFBVSxJQWMzRCxPQVZBMjVELEVBQWNuMUQsU0FBVyxXQUN2QixNQUFPLEdBQUsrRCxHQUdkb3hELEVBQWNweEQsS0FBT0EsRUFFckJveEQsRUFBYy94RCxNQUFRLFNBQVVndUQsR0FDOUIsT0FBT0EsRUFBT3J0RCxPQUFTQSxHQUdsQm94RCxFQTRyQitDLG9CQUFYNW9ELFNBQTBCQSxPQUFPQyxXQUFhRCxPQUFPQyxTQUFXRCxPQUFPLHFCQUV2RCxvQkFBWEEsU0FBMEJBLE9BQU8rb0QsZ0JBQWtCL29ELE9BQU8rb0QsY0FBZ0Ivb0QsT0FBTywwQkoxN0M4MkgsV0FBYSxTQUFTeEosRUFBRW1QLEVBQUVuRixHQUFHLElBQUloSyxFQUFFb1AsRUFBRUQsR0FBRyxPQUFPblAsRUFBRUEsRUFBRWlFLFdBQVcrRixFQUFFb0YsRUFBRUQsR0FBR25QLEVBQUUsQ0FBQzZWLGNBQWEsRUFBRzVSLFdBQVcrRixFQUFFdUcsSUFBSSxXQUFXLElBQUl2RyxFQUFFdlQsS0FBSyt5RCxJQUFHLE9BQWdEK0IsR0FBR2g3QyxJQUFJdkcsRUFBRW1GLElBQUl5QixJQUFJLFNBQVM1RyxHQUFHLElBQUloSyxFQUFFdkosS0FBSyt5RCxJQUE2QytCLEdBQUczNkMsSUFBSTVRLEVBQUVtUCxFQUFFbkYsS0FBS2hLLEVBQUUsU0FBU3ZJLEVBQUUwWCxHQUFHLElBQUksSUFBSW5GLEVBQUVtRixFQUFFelcsT0FBTyxFQUFFc1IsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSWhLLEVBQUVtUCxFQUFFbkYsR0FBR3cvQyxJQUFHLElBQUl4cEQsRUFBRXdxRCxFQUFFLE9BQU94cUQsRUFBRXhGLEdBQUcsS0FBSyxFQUFFNFYsRUFBRXBRLElBQUk4cUQsR0FBRTlxRCxHQUFHLE1BQU0sS0FBSyxFQUFFOEosRUFBRTlKLElBQUk4cUQsR0FBRTlxRCxLQUFLLFNBQVM4SixFQUFFcUYsR0FBRyxJQUFJLElBQUluRixFQUFFbUYsRUFBRUEsRUFBRW5QLEVBQUVtUCxFQUFFMjdDLEVBQUVyekQsRUFBRWt5RCxHQUFFM3BELEdBQUd4RixFQUFFL0MsRUFBRWlCLE9BQU8sRUFBRThCLEdBQUcsRUFBRUEsSUFBSSxDQUFDLElBQUlzUCxFQUFFclMsRUFBRStDLEdBQUcsR0FBR3NQLElBQUkwL0MsR0FBRSxDQUFDLElBQUlwNUMsRUFBRXBHLEVBQUVGLEdBQUcsUUFBRyxJQUFTc0csSUFBSXc1QyxHQUFFNS9DLEVBQUVGLEdBQUcsT0FBTSxFQUFHLElBQUkrL0MsRUFBRTdwRCxFQUFFOEosR0FBR3NGLEVBQUV5NkMsR0FBR0EsRUFBRUwsSUFBRyxHQUFHcDZDLEVBQUVBLEVBQUVELElBQUlpQixHQUFHclEsR0FBRThwRCxFQUFFejVDLEdBQUcsT0FBTSxHQUFJLElBQUl2USxJQUFJbUssRUFBRXcvQyxJQUFHLE9BQU8veEQsRUFBRWlCLFNBQVNpeEQsR0FBRTMvQyxHQUFHdFIsUUFBUW1ILEVBQUUsRUFBRSxHQUFHLFNBQVN1USxFQUFFakIsR0FBRyxJQUFJbkYsRUFBRW1GLEVBQUUyN0MsRUFBRSxHQUFHOWdELEVBQUV0UixTQUFTeVcsRUFBRUEsRUFBRXpXLE9BQU8sT0FBTSxFQUFHLElBQUlzSCxFQUFFaEQsT0FBT2tmLHlCQUF5QmxTLEVBQUVBLEVBQUV0UixPQUFPLEdBQUcsU0FBU3NILEdBQUdBLEVBQUV1USxLQUFrRCxJQUFJbkIsRUFBRSxJQUE3NEYsU0FBV0QsRUFBRW5GLEdBQUdtZ0QsR0FBR2g3QyxLQUFLZzdDLEdBQUdoN0MsR0FBR25GLEdBQWszRnlGLENBQUUsTUFBTSxDQUFDbThDLEVBQUUsU0FBU3o4QyxFQUFFbkYsR0FBRyxJQUFJdlMsRUFBRVosTUFBTUMsUUFBUXFZLEdBQUczVSxFQUFFLFNBQVMyVSxFQUFFbkYsR0FBRyxHQUFHbUYsRUFBRSxDQUFDLElBQUksSUFBSTFYLEVBQUVaLE1BQU1tVCxFQUFFdFIsUUFBUThCLEVBQUUsRUFBRUEsRUFBRXdQLEVBQUV0UixPQUFPOEIsSUFBSXdDLE9BQU9zVCxlQUFlN1ksRUFBRSxHQUFHK0MsRUFBRXdGLEVBQUV4RixHQUFFLElBQUssT0FBTy9DLEVBQUUsSUFBSXFTLEVBQUVtZ0QsR0FBR2pnRCxVQUFVRixFQUFFMC9DLElBQUcsSUFBSSxJQUFJSSxFQUFFRCxHQUFFNy9DLEdBQUdzRyxFQUFFLEVBQUVBLEVBQUV3NUMsRUFBRWx4RCxPQUFPMFgsSUFBSSxDQUFDLElBQUl5NUMsRUFBRUQsRUFBRXg1QyxHQUFHdEcsRUFBRSsvQyxHQUFHN3BELEVBQUU2cEQsRUFBRTE2QyxLQUFLckYsRUFBRSsvQyxHQUFHNWxELFlBQVksT0FBT2pILE9BQU9nUyxPQUFPaFMsT0FBT3lzRCxlQUFlei9DLEdBQUdGLEdBQW5RLENBQXVRclMsRUFBRTBYLEdBQUdyRixFQUFFLENBQUN0UCxFQUFFL0MsRUFBRSxFQUFFLEVBQUVtekQsRUFBRTVnRCxFQUFFQSxFQUFFNGdELEVBQUV4ekQsS0FBSW96RCxHQUFFLEVBQUdLLEdBQUUsRUFBR0csRUFBRSxHQUFHbjRDLEVBQUU3SSxFQUFFbUYsRUFBRUEsRUFBRTI3QyxFQUFFdHdELEVBQUVzUCxFQUFFLEtBQUs1SyxHQUFFLEVBQUdvc0QsR0FBRSxHQUFJLE9BQU90dUQsT0FBT3NULGVBQWU5VixFQUFFZ3ZELEdBQUUsQ0FBQ3ZvRCxNQUFNNkksRUFBRThMLFVBQVMsSUFBS3BiLEdBQUc4dkQsRUFBRSxTQUFTbjdDLEVBQUVuUCxFQUFFOEosR0FBR0EsRUFBRUUsR0FBRWhLLElBQUlBLEVBQUV3cEQsSUFBR29CLElBQUl6N0MsR0FBRzFYLEVBQUUwWCxFQUFFTixJQUFJTSxFQUFFeTZDLEdBQUcsU0FBU3o2QyxFQUFFbkYsR0FBRyxHQUFHQSxHQUFHLGlCQUFpQkEsRUFBRSxDQUFDLElBQUloSyxFQUFFZ0ssRUFBRXcvQyxJQUFHLEdBQUd4cEQsRUFBRSxDQUFDLElBQUl2SSxFQUFFdUksRUFBRW1QLEVBQUVyRixFQUFFOUosRUFBRThxRCxFQUFFakIsRUFBRTdwRCxFQUFFZ3JELEVBQUVqckQsRUFBRUMsRUFBRXhGLEVBQUUsR0FBRyxJQUFJdUYsRUFBRXZGLEdBQUVzUCxHQUFFLFNBQVVFLEdBQUdBLElBQUl3L0MsVUFBSSxJQUFTL3hELEVBQUV1UyxJQUFJNC9DLEdBQUVueUQsRUFBRXVTLEdBQUc2L0MsRUFBRTcvQyxJQUFJbUYsRUFBRXJGLEVBQUVFLEtBQUs2L0MsRUFBRTcvQyxJQUFHLEVBQUc4Z0QsR0FBRTlxRCxRQUFReEYsR0FBRS9DLEdBQUUsU0FBVTBYLFFBQUcsSUFBU3JGLEVBQUVxRixJQUFJeTZDLEdBQUU5L0MsRUFBRXFGLEtBQUswNkMsRUFBRTE2QyxJQUFHLEVBQUcyN0MsR0FBRTlxRCxZQUFZLEdBQUcsSUFBSUQsRUFBRSxDQUFDLEdBQUdxUSxFQUFFcFEsS0FBSzhxRCxHQUFFOXFELEdBQUc2cEQsRUFBRW54RCxRQUFPLEdBQUlvUixFQUFFcFIsT0FBT2pCLEVBQUVpQixPQUFPLElBQUksSUFBSTBXLEVBQUV0RixFQUFFcFIsT0FBTzBXLEVBQUUzWCxFQUFFaUIsT0FBTzBXLElBQUl5NkMsRUFBRXo2QyxJQUFHLE9BQVEsSUFBSSxJQUFJdlAsRUFBRXBJLEVBQUVpQixPQUFPbUgsRUFBRWlLLEVBQUVwUixPQUFPbUgsSUFBSWdxRCxFQUFFaHFELElBQUcsRUFBRyxJQUFJLElBQUlnUCxFQUFFNU8sS0FBS3V5RCxJQUFJMW9ELEVBQUVwUixPQUFPakIsRUFBRWlCLFFBQVFtYSxFQUFFLEVBQUVBLEVBQUVoRSxFQUFFZ0UsU0FBSSxJQUFTZzNDLEVBQUVoM0MsSUFBSTFELEVBQUVyRixFQUFFK0ksT0FBbmMsQ0FBMmMxRCxFQUFFTixFQUFFLElBQUlwWCxFQUFFMFgsRUFBRU4sS0FBS2c5QyxFQUFFLFNBQVMxOEMsR0FBRyxPQUFPLElBQUlBLEVBQUUzVSxFQUFFc1AsRUFBRXFGLEdBQUdpQixFQUFFakIsTUkrNURueEwsR0N2NURBLFNBQUtxaUQsR0FDSCxnQkFDQSxvQkFDQSx5QkFIRixDQUFLQSxRQUFVLEtBTVIsTUFBTWlCLEdBQWNQLEdBQXFCVixHQUFXa0IsT0FDOUNDLEdBQWdCVCxHQUFtQlYsR0FBV29CLFNBQzlDQyxHQUFzQlgsR0FBaUNWLEdBQVdzQixRQVFsRUMsR0RrcEJiLFNBQXdCdjhELEdBQ3RCLElBY0l3OEQsRUFkQUMsRUExRUcsU0FBcUN6OEQsR0FDMUMsT0FhSixTQUE4QkEsUUFDWixJQUFaQSxJQUNGQSxFQUFVLElBR1osSUFBSTA4RCxFQUFXMThELEVBQ1gyOEQsRUFBaUJELEVBQVMzQyxNQUMxQkEsT0FBMkIsSUFBbkI0QyxHQUFtQ0EsRUFLM0NDLEdBSndCRixFQUFTRyxlQUVUSCxFQUFTSSxrQkFFZixJQUFJN0IsSUFrQzFCLE9BaENJbEIsSUFqQ04sU0FBbUI3RixHQUNqQixNQUFvQixrQkFBTkEsRUFpQ1IsQ0FBVTZGLEdBQ1o2QyxFQUFnQnAzRCxLQUFLLElBRXJCbzNELEVBQWdCcDNELEtBQUsscUJBQWtDdTBELEVBQU1OLGlCQTRCMURtRCxFQTNERUcsQ0FBcUIvOEQsSUEyRTFCZzRELEVBQU9oNEQsR0FBVyxHQUNsQmc5RCxFQUFlaEYsRUFBS2xCLFFBQ3BCQSxPQUEyQixJQUFqQmtHLE9BQTBCcnJELEVBQVlxckQsRUFDaERDLEVBQWtCakYsRUFBS29CLFdBQ3ZCQSxPQUFpQyxJQUFwQjZELEVBQTZCUixJQUFnQ1EsRUFDMUVDLEVBQWdCbEYsRUFBS21GLFNBQ3JCQSxPQUE2QixJQUFsQkQsR0FBa0NBLEVBQzdDRSxFQUFzQnBGLEVBQUtqQixlQUMzQkEsT0FBeUMsSUFBeEJxRyxPQUFpQ3pyRCxFQUFZeXJELEVBQzlEQyxFQUFpQnJGLEVBQUtzRixVQUN0QkEsT0FBK0IsSUFBbkJELE9BQTRCMXJELEVBQVkwckQsRUFJeEQsR0FBdUIsbUJBQVp2RyxFQUNUMEYsRUFBYzFGLE1BQ1QsS0EvaEJULFNBQXVCcnNELEdBQ3JCLEdBQXFCLGlCQUFWQSxHQUFnQyxPQUFWQSxFQUFnQixPQUFPLEVBR3hELElBRkEsSUFBSW1zRCxFQUFRbnNELEVBRTRCLE9BQWpDakUsT0FBT3lzRCxlQUFlMkQsSUFDM0JBLEVBQVFwd0QsT0FBT3lzRCxlQUFlMkQsR0FHaEMsT0FBT3B3RCxPQUFPeXNELGVBQWV4b0QsS0FBV21zRCxFQXVoQjdCLENBQWNFLEdBR3ZCLE1BQU0sSUFBSW53RCxNQUFNLDRIQUZoQjYxRCxFSC9TSixTQUF5QmUsR0FJdkIsSUFIQSxJQUFJQyxFQUFjaDNELE9BQU93RSxLQUFLdXlELEdBQzFCRSxFQUFnQixHQUVYejVELEVBQUksRUFBR0EsRUFBSXc1RCxFQUFZdDdELE9BQVE4QixJQUFLLENBQzNDLElBQUkrQixFQUFNeTNELEVBQVl4NUQsR0FRTyxtQkFBbEJ1NUQsRUFBU3gzRCxLQUNsQjAzRCxFQUFjMTNELEdBQU93M0QsRUFBU3gzRCxJQUlsQyxJQVNJMjNELEVBVEFDLEVBQW1CbjNELE9BQU93RSxLQUFLeXlELEdBV25DLEtBakVGLFNBQTRCRixHQUMxQi8yRCxPQUFPd0UsS0FBS3V5RCxHQUFVbjhELFNBQVEsU0FBVTJFLEdBQ3RDLElBQUkrd0QsRUFBVXlHLEVBQVN4M0QsR0FLdkIsUUFBNEIsSUFKVCt3RCxPQUFRbmxELEVBQVcsQ0FDcENuSCxLQUFNZ3NELEdBQVlDLE9BSWxCLE1BQU0sSUFBSTl2RCxNQUFNLFlBQWVaLEVBQWYsaVJBR2xCLFFBRU8sSUFGSSt3RCxPQUFRbmxELEVBQVcsQ0FDNUJuSCxLQUFNZ3NELEdBQVlHLHlCQUVsQixNQUFNLElBQUlod0QsTUFBTSxZQUFlWixFQUFmLDZFQUEwR3l3RCxHQUFZQyxLQUF0SCxrVEFvRGxCbUgsQ0FBbUJILEdBQ25CLE1BQU94OEQsR0FDUHk4RCxFQUFzQno4RCxFQUd4QixPQUFPLFNBQXFCNHBELEVBQU9nTixHQUtqQyxRQUpjLElBQVZoTixJQUNGQSxFQUFRLElBR042UyxFQUNGLE1BQU1BLEVBY1IsSUFYMkMsSUFRdkNHLEdBQWEsRUFDYkMsRUFBWSxHQUVQOTdELEVBQUssRUFBR0EsRUFBSzI3RCxFQUFpQno3RCxPQUFRRixJQUFNLENBQ25ELElBQUk2MkQsRUFBTzhFLEVBQWlCMzdELEdBQ3hCODBELEVBQVUyRyxFQUFjNUUsR0FDeEJrRixFQUFzQmxULEVBQU1nTyxHQUM1Qm1GLEVBQWtCbEgsRUFBUWlILEVBQXFCbEcsR0FFbkQsUUFBK0IsSUFBcEJtRyxFQUFpQyxDQUMxQyxJQUFJekwsRUFBZTZGLEdBQThCUyxFQUFNaEIsR0FDdkQsTUFBTSxJQUFJbHhELE1BQU00ckQsR0FHbEJ1TCxFQUFVakYsR0FBUW1GLEVBQ2xCSCxFQUFhQSxHQUFjRyxJQUFvQkQsRUFJakQsT0FEQUYsRUFBYUEsR0FBY0YsRUFBaUJ6N0QsU0FBV3NFLE9BQU93RSxLQUFLNi9DLEdBQU8zb0QsUUFDdEQ0N0QsRUFBWWpULEdHd09sQm9ULENBQWdCbkgsR0FLaEMsSUFBSW9ILEVBQXFCcEYsR0FBZ0JsMkQsV0FBTSxFQUE4QixtQkFBZncyRCxFQUE0QkEsRUFBV3FELEdBQStCckQsR0FDaEkrRSxFQUFlekYsR0FFZnlFLElBQ0ZnQixFQUFlckQsR0FBb0JiLEdBQVMsQ0FFMUNtRSxPQUFPLEdBQ2MsaUJBQWJqQixHQUF5QkEsS0FHckMsSUFBSWtCLEVBQWlCLENBQUNILEdBU3RCLE9BUEk3OUQsTUFBTUMsUUFBUWc5RCxHQUNoQmUsRUFBaUIsQ0FBQ0gsR0FBb0IzckQsT0FBTytxRCxHQUNmLG1CQUFkQSxJQUNoQmUsRUFBaUJmLEVBQVVlLElBSXRCeEgsR0FBWTJGLEVBQWF6RixFQURUb0gsRUFBYXY3RCxXQUFNLEVBQVF5N0QsSUM3ckI5QkMsQ0FBZSxDQUNuQ3hILFFEc3pCRixTQUF1QnlILEVBQWNDLEVBQXNCQyxFQUFnQkMsUUFDbEQsSUFBbkJELElBQ0ZBLEVBQWlCLElBR25CLElBQUl6RyxFQUF1QyxtQkFBekJ3RyxFQS9EcEIsU0FBdUNHLEdBQ3JDLElBRUlELEVBRkFFLEVBQWEsR0FDYkgsRUFBaUIsR0FFakJJLEVBQVUsQ0FDWkMsUUFBUyxTQUFpQkMsRUFBcUJqSSxHQWdCN0MsSUFBSXRzRCxFQUFzQyxpQkFBeEJ1MEQsRUFBbUNBLEVBQXNCQSxFQUFvQnYwRCxLQUUvRixHQUFJQSxLQUFRbzBELEVBQ1YsTUFBTSxJQUFJajRELE1BQU0sdUVBSWxCLE9BREFpNEQsRUFBV3AwRCxHQUFRc3NELEVBQ1orSCxHQUVURyxXQUFZLFNBQW9CQyxFQUFTbkksR0FXdkMsT0FKQTJILEVBQWVqNUQsS0FBSyxDQUNsQnk1RCxRQUFTQSxFQUNUbkksUUFBU0EsSUFFSitILEdBRVRLLGVBQWdCLFNBQXdCcEksR0FRdEMsT0FEQTRILEVBQXFCNUgsRUFDZCtILElBSVgsT0FEQUYsRUFBZ0JFLEdBQ1QsQ0FBQ0QsRUFBWUgsRUFBZ0JDLEdBUW9CUyxDQUE4QlgsR0FBd0IsQ0FBQ0EsRUFBc0JDLEVBQWdCQyxHQUNqSkUsRUFBYTVHLEVBQUssR0FDbEJvSCxFQUFzQnBILEVBQUssR0FDM0JxSCxFQUEwQnJILEVBQUssR0FFbkMsT0FBTyxTQUFVbk4sRUFBT2dOLFFBQ1IsSUFBVmhOLElBQ0ZBLEVBQVEwVCxHQUdWLElBQUllLEVBQWUsQ0FBQ1YsRUFBVy9HLEVBQU9ydEQsT0FBTytILE9BQU82c0QsRUFBb0Ivb0QsUUFBTyxTQUFVNGdELEdBRXZGLE9BQU9nSSxFQURPaEksRUFBTWdJLFNBQ0xwSCxNQUNkL3pELEtBQUksU0FBVXk3RCxHQUVmLE9BRGNBLEVBQU16SSxZQVV0QixPQUpjLElBRlZ3SSxFQUFhanBELFFBQU8sU0FBVW1wRCxHQUNoQyxRQUFTQSxLQUNSdDlELFNBQ0RvOUQsRUFBZSxDQUFDRCxJQUdYQyxFQUFhdjdELFFBQU8sU0FBVTA3RCxFQUFlQyxHQUNsRCxHQUFJQSxFQUFhLENBQ2YsR0FBSSxHQUFRRCxHQUFnQixDQUkxQixJQUVJdDhELEVBQVN1OEQsRUFGREQsRUFFb0I1SCxHQUVoQyxZQUFzQixJQUFYMTBELEVBQ0ZzOEQsRUFHRnQ4RCxFQUNGLEdBQUssR0FBWXM4RCxHQWtCdEIsT0FBTyxHQUFnQkEsR0FBZSxTQUFVRSxHQUM5QyxPQUFPRCxFQUFZQyxFQUFPOUgsTUFoQjVCLElBQUkrSCxFQUFVRixFQUFZRCxFQUFlNUgsR0FFekMsUUFBdUIsSUFBWitILEVBQXlCLENBQ2xDLEdBQXNCLE9BQWxCSCxFQUNGLE9BQU9BLEVBR1QsTUFBTTk0RCxNQUFNLHFFQUdkLE9BQU9pNUQsRUFXWCxPQUFPSCxJQUNONVUsSUNsNEJTZ1YsQ0NTbUIsQ0FDakMvb0MsU0FBUyxFQUNUenVCLE1BQU8sS0FDUHFxRCxRQUFTLENBQ1BHLFdBQVksRUFDWkMsVUFBVyxFQUNYQyxlQUFnQixFQUNoQkgsYUFBYyxJRGhCMEIsQ0FDMUMsQ0FBQ29JLEdBQVdrQixPQ3dCUCxTQUFlclIsRUFBY2dOLEdBQ2xDaE4sRUFBTS96QixTQUFVLEVBQ2hCK3pCLEVBQU14aUQsTUFBUXd2RCxFQUFPaUUsU0R6QnJCLENBQUNkLEdBQVdvQixTQ2tCUCxTQUFpQnZSLEdBQ3RCQSxFQUFNL3pCLFNBQVUsRUFDaEIrekIsRUFBTXhpRCxNQUFRLE1EbkJkLENBQUMyeUQsR0FBV3NCLFFDMkJQLFNBQXVCelIsRUFBY2dOLEdBSTFDLE9BSEFoTixFQUFNNkgsUUFBVW1GLEVBQU9pRSxRQUN2QmpSLEVBQU0vekIsU0FBVSxFQUNoQit6QixFQUFNeGlELE1BQVEsS0FDUHdpRCxLRDFCUHVPLFdBQVksQ0FBQyxNRXBCZixTQUFlejBELEdBQU9tN0QsRUFBa0I5L0QsRUFBd0IrL0QsRyxtVkFDOUQsSUFBSUMsRUFDQUQsSUFDRkMsRUFBVSxDQUFFLGVBQWdCLHFCQUc5QixNQUFNbjdELEVBQVMsT0FBSCxzQkFDVnNmLE9BQXVCLFFBQWpCLEVBQUVua0IsYUFBTyxFQUFQQSxFQUFTbWtCLGNBQU0sUUFBSSxPQUN4Qm5rQixhQUFPLEVBQVBBLEVBQVNpZ0UsWUFBVSxDQUN0QkQsUUFBUyxPQUFGLHdCQUNGQSxHQUNtQixRQURaLEVBQ1BoZ0UsYUFBTyxFQUFQQSxFQUFTaWdFLGtCQUFVLGVBQUVELFdBSTVCLEdBQUloZ0UsYUFBTyxFQUFQQSxFQUFTOCtDLEtBQ1gsR0FBSWloQixFQUNGbDdELEVBQU9pNkMsS0FBTzc2QyxLQUFLQyxVQUFVbEUsYUFBTyxFQUFQQSxFQUFTOCtDLFVBQ2pDLENBQ0wsTUFBTW9oQixFQUFXLElBQUlDLFNBQ3JCLElBQUssTUFBTWpnRSxLQUFRRixhQUFPLEVBQVBBLEVBQVM4K0MsS0FDMUJvaEIsRUFBU0UsT0FBT2xnRSxFQUFNRixhQUFPLEVBQVBBLEVBQVM4K0MsS0FBSzUrQyxJQUV0QzJFLEVBQU9pNkMsS0FBT29oQixFQUlsQixJQUFJOThELEVBQ0osSUFDRSxNQUFNaTlELFFBQWlCMTNELE9BQU8yM0QsTUFBTVIsRUFBVWo3RCxHQUU5QyxHQURBekIsUUFBYWk5RCxFQUFTTixRQUNqQk0sRUFBU0UsR0FDWixNQUFNLElBQUk1NUQsTUFBTXZELEVBQUtvOUQsWUFHdkIsT0FBT3A5RCxFQUNQLE1BQU9GLEdBQ1AsT0FBT3FuQixRQUFRaU4sT0FBT3QwQixFQUFJb0gsU0FBV2xILE9BSXpDdUIsR0FBT29WLElBQU0sQ0FBQytsRCxFQUFrQkcsRUFBa0IsS0FDekN0N0QsR0FBT203RCxFQUFRLGVBQUczN0MsT0FBUSxPQUFVODdDLElBRzdDdDdELEdBQU84N0QsS0FBTyxDQUNaWCxFQUNBaGhCLEVBQ0FtaEIsRUFBa0IsS0FFWHQ3RCxHQUFPbTdELEVBQVUsT0FBRixRQUFJMzdDLE9BQVEsT0FBUTI2QixRQUFTbWhCLElBR3JEdDdELEdBQU8rN0QsSUFBTSxDQUNYWixFQUNBaGhCLEVBQ0FtaEIsRUFBa0IsS0FFWHQ3RCxHQUFPbTdELEVBQVUsT0FBRixRQUFJMzdDLE9BQVEsTUFBTzI2QixRQUFTbWhCLElBR3BEdDdELEdBQU9vaEIsSUFBTSxDQUNYKzVDLEVBQ0FoaEIsRUFDQW1oQixFQUFrQixLQUVYdDdELEdBQU9tN0QsRUFBVSxPQUFGLFFBQUkzN0MsT0FBUSxTQUFVMjZCLFFBQVNtaEIsSSxJQ3JFNUNVLEcsV0FDWCxTQUFXQSxHQUVQQSxFQUFrQixHQUFJLEtBRXRCQSxFQUFzQixPQUFJLFNBRTFCQSxFQUF1QixRQUFJLFVBRTNCQSxFQUF3QixTQUFJLFdBUmhDLENBU0dBLEtBQWtCQSxHQUFnQixLLElDUGpDQyxHLG1EQUNKLFNBQVdBLEdBRVBBLEVBQWdCLFFBQUksVUFFcEJBLEVBQWlCLFNBQUksV0FFckJBLEVBQWlCLFNBQUksV0FOekIsQ0FPR0EsS0FBV0EsR0FBUyxLQUt2QixJQUFJLEdBQTZCLFdBQzdCLFNBQVNDLEVBQVlDLEdBQ2pCLElBQUkzL0QsRUFBUWxCLEtBQ1pBLEtBQUs4Z0UsT0FBU0gsR0FBT0ksUUFDckIvZ0UsS0FBS2doRSxVQUFZLEdBRWpCaGhFLEtBQUtpckIsU0FBVyxTQUFVemdCLEdBQ3RCdEosRUFBTSsvRCxXQUFXTixHQUFPTyxTQUFVMTJELElBR3RDeEssS0FBS21oRSxRQUFVLFNBQVUzcEMsR0FDckJ0MkIsRUFBTSsvRCxXQUFXTixHQUFPUyxTQUFVNXBDLElBR3RDeDNCLEtBQUtpaEUsV0FBYSxTQUFVclcsRUFBT3BnRCxHQUMzQnRKLEVBQU00L0QsU0FBV0gsR0FBT0ksV0FHeEIsRUFBQWp6RCxHQUFBLElBQVd0RCxHQUNYQSxFQUFNNUgsS0FBSzFCLEVBQU0rcEIsU0FBVS9wQixFQUFNaWdFLFVBR3JDamdFLEVBQU00L0QsT0FBU2xXLEVBQ2YxcEQsRUFBTWt0QyxPQUFTNWpDLEVBQ2Z0SixFQUFNbWdFLHNCQUlWcmhFLEtBQUtzaEUsZUFBaUIsU0FBVXozQyxHQUM1QjNvQixFQUFNOC9ELFVBQVk5L0QsRUFBTTgvRCxVQUFVMXVELE9BQU91WCxHQUN6QzNvQixFQUFNbWdFLG9CQUdWcmhFLEtBQUtxaEUsaUJBQW1CLFdBQ3BCLEdBQUluZ0UsRUFBTTQvRCxTQUFXSCxHQUFPSSxRQUE1QixDQUdBLElBQUlRLEVBQWlCcmdFLEVBQU04L0QsVUFBVWgrRCxRQUNyQzlCLEVBQU04L0QsVUFBWSxHQUNsQk8sRUFBZXBnRSxTQUFRLFNBQVUwb0IsR0FDekJBLEVBQVE1WixPQUdSL08sRUFBTTQvRCxTQUFXSCxHQUFPTyxVQUNwQnIzQyxFQUFRMjNDLGFBRVIzM0MsRUFBUTIzQyxZQUFZdGdFLEVBQU1rdEMsUUFHOUJsdEMsRUFBTTQvRCxTQUFXSCxHQUFPUyxVQUNwQnYzQyxFQUFRNDNDLFlBQ1I1M0MsRUFBUTQzQyxXQUFXdmdFLEVBQU1rdEMsUUFHakN2a0IsRUFBUTVaLE1BQU8sUUFHdkIsSUFDSTR3RCxFQUFTN2dFLEtBQUtpckIsU0FBVWpyQixLQUFLbWhFLFNBRWpDLE1BQU9uZ0UsR0FDSGhCLEtBQUttaEUsUUFBUW5nRSxJQW9IckIsT0FoSEE0L0QsRUFBWXIyQyxRQUFVLFNBQVUvZixHQUM1QixPQUFPLElBQUlvMkQsR0FBWSxTQUFVcjJDLEdBQzdCQSxFQUFRL2YsT0FJaEJvMkQsRUFBWXJwQyxPQUFTLFNBQVVDLEdBQzNCLE9BQU8sSUFBSW9wQyxHQUFZLFNBQVVqZ0UsRUFBRzQyQixHQUNoQ0EsRUFBT0MsT0FJZm9wQyxFQUFZcnBELElBQU0sU0FBVTFXLEdBQ3hCLE9BQU8sSUFBSSsvRCxHQUFZLFNBQVVyMkMsRUFBU2dOLEdBQ3RDLEdBQUtuM0IsTUFBTUMsUUFBUVEsR0FJbkIsR0FBMEIsSUFBdEJBLEVBQVdvQixPQUFmLENBSUEsSUFBSTBvQixFQUFVOXBCLEVBQVdvQixPQUNyQnkvRCxFQUFxQixHQUN6QjdnRSxFQUFXTSxTQUFRLFNBQVVpUixFQUFNOEMsR0FDL0IwckQsRUFBWXIyQyxRQUFRblksR0FDZnhQLE1BQUssU0FBVTRILEdBQ2hCazNELEVBQW1CeHNELEdBQVMxSyxFQUVaLElBRGhCbWdCLEdBQVcsSUFJWEosRUFBUW0zQyxNQUVQOStELEtBQUssS0FBTTIwQixXQWZoQmhOLEVBQVEsU0FKUmdOLEVBQU8sSUFBSTVqQixVQUFVLGdEQXdCakNpdEQsRUFBWW5nRSxVQUFVbUMsS0FBTyxTQUFVNCtELEVBQWFDLEdBQ2hELElBQUl2Z0UsRUFBUWxCLEtBQ1osT0FBTyxJQUFJNGdFLEdBQVksU0FBVXIyQyxFQUFTZ04sR0FDdENyMkIsRUFBTW9nRSxlQUFlLENBQ2pCcnhELE1BQU0sRUFDTnV4RCxZQUFhLFNBQVV0K0QsR0FDbkIsR0FBS3MrRCxFQU1MLElBRUksWUFEQWozQyxFQUFRaTNDLEVBQVl0K0QsSUFHeEIsTUFBT2xDLEdBRUgsWUFEQXUyQixFQUFPdjJCLFFBUlB1cEIsRUFBUXJuQixJQVloQnUrRCxXQUFZLFNBQVVqcUMsR0FDbEIsR0FBS2lxQyxFQUlMLElBRUksWUFEQWwzQyxFQUFRazNDLEVBQVdqcUMsSUFHdkIsTUFBT3gyQixHQUVILFlBREF1MkIsRUFBT3YyQixRQVJQdTJCLEVBQU9DLFVBZ0IzQm9wQyxFQUFZbmdFLFVBQVV5YSxNQUFRLFNBQVV1bUQsR0FDcEMsT0FBT3poRSxLQUFLNEMsTUFBSyxTQUFVaU4sR0FBTyxPQUFPQSxJQUFRNHhELElBR3JEYixFQUFZbmdFLFVBQVVraEUsUUFBVSxTQUFVQyxHQUN0QyxJQUFJMWdFLEVBQVFsQixLQUNaLE9BQU8sSUFBSTRnRSxHQUFZLFNBQVVyMkMsRUFBU2dOLEdBQ3RDLElBQUkxbkIsRUFDQWd5RCxFQUNKLE9BQU8zZ0UsRUFBTTBCLE1BQUssU0FBVTRILEdBQ3hCcTNELEdBQWEsRUFDYmh5RCxFQUFNckYsRUFDRm8zRCxHQUNBQSxPQUVMLFNBQVVwcUMsR0FDVHFxQyxHQUFhLEVBQ2JoeUQsRUFBTTJuQixFQUNGb3FDLEdBQ0FBLE9BRUxoL0QsTUFBSyxXQUNBaS9ELEVBQ0F0cUMsRUFBTzFuQixHQUdYMGEsRUFBUTFhLFVBS3BCK3dELEVBQVluZ0UsVUFBVStGLFNBQVcsV0FDN0IsTUFBTyx3QkFFSm82RCxFQWpMcUIsR0NiNUJrQixHQUF1QixXQUN2QixTQUFTQSxJQUVMOWhFLEtBQUsraEUscUJBQXNCLEVBRTNCL2hFLEtBQUtnaUUsZ0JBQWtCLEdBRXZCaGlFLEtBQUtpaUUsaUJBQW1CLEdBRXhCamlFLEtBQUtraUUsYUFBZSxHQUVwQmxpRSxLQUFLbWlFLE1BQVEsR0FFYm5pRSxLQUFLb2lFLE1BQVEsR0FFYnBpRSxLQUFLcWlFLE9BQVMsR0FFZHJpRSxLQUFLc2lFLFVBQVksR0FrWHJCLE9BNVdBUixFQUFNcnVDLE1BQVEsU0FBVXR4QixHQUNwQixJQUFJb2dFLEVBQVcsSUFBSVQsRUFjbkIsT0FiSTMvRCxJQUNBb2dFLEVBQVNMLGNBQWUsU0FBUy8vRCxFQUFNKy9ELGNBQ3ZDSyxFQUFTSCxPQUFRLFNBQVMsR0FBSWpnRSxFQUFNaWdFLE9BQ3BDRyxFQUFTRixRQUFTLFNBQVMsR0FBSWxnRSxFQUFNa2dFLFFBQ3JDRSxFQUFTRCxXQUFZLFNBQVMsR0FBSW5nRSxFQUFNbWdFLFdBQ3hDQyxFQUFTSixNQUFRaGdFLEVBQU1nZ0UsTUFDdkJJLEVBQVNDLE9BQVNyZ0UsRUFBTXFnRSxPQUN4QkQsRUFBU0UsTUFBUXRnRSxFQUFNc2dFLE1BQ3ZCRixFQUFTRyxTQUFXdmdFLEVBQU11Z0UsU0FDMUJILEVBQVNJLGlCQUFtQnhnRSxFQUFNd2dFLGlCQUNsQ0osRUFBU0ssYUFBZXpnRSxFQUFNeWdFLGFBQzlCTCxFQUFTTixrQkFBbUIsU0FBUzkvRCxFQUFNOC9ELG1CQUV4Q00sR0FNWFQsRUFBTXJoRSxVQUFVb2lFLGlCQUFtQixTQUFVditELEdBQ3pDdEUsS0FBS2dpRSxnQkFBZ0J6OEQsS0FBS2pCLElBSzlCdzlELEVBQU1yaEUsVUFBVXFpRSxrQkFBb0IsU0FBVXgrRCxHQUUxQyxPQURBdEUsS0FBS2lpRSxpQkFBaUIxOEQsS0FBS2pCLEdBQ3BCdEUsTUFLWDhoRSxFQUFNcmhFLFVBQVVzaUUsUUFBVSxTQUFVbG5DLEdBTWhDLE9BTEE3N0IsS0FBS21pRSxNQUFRdG1DLEdBQVEsR0FDakI3N0IsS0FBSzBpRSxVQUNMMWlFLEtBQUswaUUsU0FBU3ZyRCxPQUFPLENBQUUwa0IsS0FBTUEsSUFFakM3N0IsS0FBS2dqRSx3QkFDRWhqRSxNQUtYOGhFLEVBQU1yaEUsVUFBVXdpRSxRQUFVLFdBQ3RCLE9BQU9qakUsS0FBS21pRSxPQUtoQkwsRUFBTXJoRSxVQUFVeWlFLFFBQVUsU0FBVUMsR0FHaEMsT0FGQW5qRSxLQUFLb2lFLE9BQVEsVUFBUyxTQUFTLEdBQUlwaUUsS0FBS29pRSxPQUFRZSxHQUNoRG5qRSxLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVMmlFLE9BQVMsU0FBVXQ5RCxFQUFLMEUsR0FDcEMsSUFBSTlJLEVBR0osT0FGQTFCLEtBQUtvaUUsT0FBUSxVQUFTLFNBQVMsR0FBSXBpRSxLQUFLb2lFLFNBQVMxZ0UsRUFBSyxJQUFPb0UsR0FBTzBFLEVBQU85SSxJQUMzRTFCLEtBQUtnakUsd0JBQ0VoakUsTUFLWDhoRSxFQUFNcmhFLFVBQVU0aUUsVUFBWSxTQUFVQyxHQUdsQyxPQUZBdGpFLEtBQUtxaUUsUUFBUyxVQUFTLFNBQVMsR0FBSXJpRSxLQUFLcWlFLFFBQVNpQixHQUNsRHRqRSxLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVOGlFLFNBQVcsU0FBVXo5RCxFQUFLMDlELEdBQ3RDLElBQUk5aEUsRUFHSixPQUZBMUIsS0FBS3FpRSxRQUFTLFVBQVMsU0FBUyxHQUFJcmlFLEtBQUtxaUUsVUFBVTNnRSxFQUFLLElBQU9vRSxHQUFPMDlELEVBQU85aEUsSUFDN0UxQixLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVZ2pFLGVBQWlCLFNBQVVDLEdBR3ZDLE9BRkExakUsS0FBSzRpRSxhQUFlYyxFQUNwQjFqRSxLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVa2pFLFNBQVcsU0FBVTk0RCxHQUdqQyxPQUZBN0ssS0FBS3dpRSxPQUFTMzNELEVBQ2Q3SyxLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVbWpFLG1CQUFxQixTQUFVM2pFLEdBRzNDLE9BRkFELEtBQUsyaUUsaUJBQW1CMWlFLEVBQ3hCRCxLQUFLZ2pFLHdCQUNFaGpFLE1BTVg4aEUsRUFBTXJoRSxVQUFVb2pFLGVBQWlCLFNBQVU1akUsR0FDdkMsT0FBT0QsS0FBSzRqRSxtQkFBbUIzakUsSUFLbkM2aEUsRUFBTXJoRSxVQUFVcWpFLFdBQWEsU0FBVWgrRCxFQUFLeWMsR0FDeEMsSUFBSTdnQixFQVNKLE9BUmdCLE9BQVo2Z0IsU0FFT3ZpQixLQUFLc2lFLFVBQVV4OEQsR0FHdEI5RixLQUFLc2lFLFdBQVksVUFBUyxTQUFTLEdBQUl0aUUsS0FBS3NpRSxhQUFhNWdFLEVBQUssSUFBT29FLEdBQU95YyxFQUFTN2dCLElBRXpGMUIsS0FBS2dqRSx3QkFDRWhqRSxNQUtYOGhFLEVBQU1yaEUsVUFBVXNqRSxRQUFVLFNBQVVoaEUsR0FHaEMsT0FGQS9DLEtBQUt5aUUsTUFBUTEvRCxFQUNiL0MsS0FBS2dqRSx3QkFDRWhqRSxNQUtYOGhFLEVBQU1yaEUsVUFBVTZCLFFBQVUsV0FDdEIsT0FBT3RDLEtBQUt5aUUsT0FLaEJYLEVBQU1yaEUsVUFBVXVqRSxlQUFpQixXQUM3QixJQUFJdGlFLEVBQUlDLEVBQUlDLEVBQUlDLEVBRVprQixFQUFPL0MsS0FBS3NDLFVBRWhCLE9BQW9CLFFBQWZaLEVBQUtxQixTQUF5QixJQUFQckIsT0FBZ0IsRUFBU0EsRUFBR3VpRSxhQUM3QixRQUFmdGlFLEVBQUtvQixTQUF5QixJQUFQcEIsT0FBZ0IsRUFBU0EsRUFBR3NpRSxhQUdpQixRQUEzRXBpRSxFQUFxQixRQUFmRCxFQUFLbUIsU0FBeUIsSUFBUG5CLE9BQWdCLEVBQVNBLEVBQUdzaUUsb0JBQWlDLElBQVByaUUsT0FBZ0IsRUFBU0EsRUFBR3NpRSxNQUFNLElBQy9HcGhFLEVBQUttaEUsYUFBYUMsTUFBTSxRQURuQyxHQVNKckMsRUFBTXJoRSxVQUFVMmpFLFdBQWEsU0FBVUMsR0FRbkMsT0FQS0EsRUFJRHJrRSxLQUFLMGlFLFNBQVcyQixTQUhUcmtFLEtBQUswaUUsU0FLaEIxaUUsS0FBS2dqRSx3QkFDRWhqRSxNQUtYOGhFLEVBQU1yaEUsVUFBVTZqRSxXQUFhLFdBQ3pCLE9BQU90a0UsS0FBSzBpRSxVQUtoQlosRUFBTXJoRSxVQUFVMFcsT0FBUyxTQUFVb3RELEdBQy9CLElBQUtBLEVBQ0QsT0FBT3ZrRSxLQUVYLEdBQThCLG1CQUFuQnVrRSxFQUErQixDQUN0QyxJQUFJQyxFQUFlRCxFQUFldmtFLE1BQ2xDLE9BQU93a0UsYUFBd0IxQyxFQUFRMEMsRUFBZXhrRSxLQWdDMUQsT0E5Qkl1a0UsYUFBMEJ6QyxHQUMxQjloRSxLQUFLb2lFLE9BQVEsVUFBUyxTQUFTLEdBQUlwaUUsS0FBS29pRSxPQUFRbUMsRUFBZW5DLE9BQy9EcGlFLEtBQUtxaUUsUUFBUyxVQUFTLFNBQVMsR0FBSXJpRSxLQUFLcWlFLFFBQVNrQyxFQUFlbEMsUUFDakVyaUUsS0FBS3NpRSxXQUFZLFVBQVMsU0FBUyxHQUFJdGlFLEtBQUtzaUUsV0FBWWlDLEVBQWVqQyxXQUNuRWlDLEVBQWVwQyxPQUFTNTdELE9BQU93RSxLQUFLdzVELEVBQWVwQyxPQUFPbGdFLFNBQzFEakMsS0FBS21pRSxNQUFRb0MsRUFBZXBDLE9BRTVCb0MsRUFBZS9CLFNBQ2Z4aUUsS0FBS3dpRSxPQUFTK0IsRUFBZS9CLFFBRTdCK0IsRUFBZTNCLGVBQ2Y1aUUsS0FBSzRpRSxhQUFlMkIsRUFBZTNCLGdCQUdsQyxFQUFBOTBELEdBQUEsSUFBY3kyRCxLQUVuQkEsRUFBaUJBLEVBQ2pCdmtFLEtBQUtvaUUsT0FBUSxVQUFTLFNBQVMsR0FBSXBpRSxLQUFLb2lFLE9BQVFtQyxFQUFlcEIsTUFDL0RuakUsS0FBS3FpRSxRQUFTLFVBQVMsU0FBUyxHQUFJcmlFLEtBQUtxaUUsUUFBU2tDLEVBQWVmLE9BQ2pFeGpFLEtBQUtzaUUsV0FBWSxVQUFTLFNBQVMsR0FBSXRpRSxLQUFLc2lFLFdBQVlpQyxFQUFlRSxVQUNuRUYsRUFBZTFvQyxPQUNmNzdCLEtBQUttaUUsTUFBUW9DLEVBQWUxb0MsTUFFNUIwb0MsRUFBZTE1RCxRQUNmN0ssS0FBS3dpRSxPQUFTK0IsRUFBZTE1RCxPQUU3QjA1RCxFQUFlYixjQUNmMWpFLEtBQUs0aUUsYUFBZTJCLEVBQWViLGNBR3BDMWpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVNmdCLE1BQVEsV0FZcEIsT0FYQXRoQixLQUFLa2lFLGFBQWUsR0FDcEJsaUUsS0FBS29pRSxNQUFRLEdBQ2JwaUUsS0FBS3FpRSxPQUFTLEdBQ2RyaUUsS0FBS21pRSxNQUFRLEdBQ2JuaUUsS0FBS3NpRSxVQUFZLEdBQ2pCdGlFLEtBQUt3aUUsWUFBUzl3RCxFQUNkMVIsS0FBSzJpRSxzQkFBbUJqeEQsRUFDeEIxUixLQUFLNGlFLGtCQUFlbHhELEVBQ3BCMVIsS0FBS3lpRSxXQUFRL3dELEVBQ2IxUixLQUFLMGlFLGNBQVdoeEQsRUFDaEIxUixLQUFLZ2pFLHdCQUNFaGpFLE1BS1g4aEUsRUFBTXJoRSxVQUFVaWtFLGNBQWdCLFNBQVVDLEVBQVlDLEdBQ2xELElBQUlDLEdBQW1CLFNBQVMsQ0FBRUMsV0FBVyxZQUE0QkgsR0FNekUsT0FMQTNrRSxLQUFLa2lFLGtCQUNrQnh3RCxJQUFuQmt6RCxHQUFnQ0EsR0FBa0IsR0FDNUMsU0FBUzVrRSxLQUFLa2lFLGFBQWMsQ0FBQzJDLElBQW1CN2hFLE9BQU80aEUsSUFDdkQsU0FBUzVrRSxLQUFLa2lFLGFBQWMsQ0FBQzJDLElBQ3ZDN2tFLEtBQUtnakUsd0JBQ0VoakUsTUFLWDhoRSxFQUFNcmhFLFVBQVVza0UsaUJBQW1CLFdBRy9CLE9BRkEva0UsS0FBS2tpRSxhQUFlLEdBQ3BCbGlFLEtBQUtnakUsd0JBQ0VoakUsTUFVWDhoRSxFQUFNcmhFLFVBQVV1a0UsYUFBZSxTQUFVNTZELEVBQU82NkQsR0FDNUMsSUFBSXZqRSxFQXNCSixHQXJCSTFCLEtBQUtxaUUsUUFBVTk3RCxPQUFPd0UsS0FBSy9LLEtBQUtxaUUsUUFBUXBnRSxTQUN4Q21JLEVBQU1vNUQsT0FBUSxVQUFTLFNBQVMsR0FBSXhqRSxLQUFLcWlFLFFBQVNqNEQsRUFBTW81RCxRQUV4RHhqRSxLQUFLb2lFLE9BQVM3N0QsT0FBT3dFLEtBQUsvSyxLQUFLb2lFLE9BQU9uZ0UsU0FDdENtSSxFQUFNKzRELE1BQU8sVUFBUyxTQUFTLEdBQUluakUsS0FBS29pRSxPQUFRaDRELEVBQU0rNEQsT0FFdERuakUsS0FBS21pRSxPQUFTNTdELE9BQU93RSxLQUFLL0ssS0FBS21pRSxPQUFPbGdFLFNBQ3RDbUksRUFBTXl4QixNQUFPLFVBQVMsU0FBUyxHQUFJNzdCLEtBQUttaUUsT0FBUS8zRCxFQUFNeXhCLE9BRXRENzdCLEtBQUtzaUUsV0FBYS83RCxPQUFPd0UsS0FBSy9LLEtBQUtzaUUsV0FBV3JnRSxTQUM5Q21JLEVBQU1xNkQsVUFBVyxVQUFTLFNBQVMsR0FBSXprRSxLQUFLc2lFLFdBQVlsNEQsRUFBTXE2RCxXQUU5RHprRSxLQUFLd2lFLFNBQ0xwNEQsRUFBTVMsTUFBUTdLLEtBQUt3aUUsUUFFbkJ4aUUsS0FBSzJpRSxtQkFDTHY0RCxFQUFNNjVELFlBQWNqa0UsS0FBSzJpRSxrQkFLekIzaUUsS0FBS3lpRSxNQUFPLENBQ1pyNEQsRUFBTXE2RCxVQUFXLFNBQVMsQ0FBRXRHLE1BQU9uK0QsS0FBS3lpRSxNQUFNeUMsbUJBQXFCOTZELEVBQU1xNkQsVUFDekUsSUFBSVUsRUFBb0QsUUFBakN6akUsRUFBSzFCLEtBQUt5aUUsTUFBTXdCLG1CQUFnQyxJQUFQdmlFLE9BQWdCLEVBQVNBLEVBQUd6QixLQUN4RmtsRSxJQUNBLzZELEVBQU0rNEQsTUFBTyxTQUFTLENBQUVjLFlBQWFrQixHQUFtQi82RCxFQUFNKzRELE9BTXRFLE9BSEFuakUsS0FBS29sRSxrQkFBa0JoN0QsR0FDdkJBLEVBQU1pN0QsYUFBYyxTQUFVajdELEVBQU1pN0QsYUFBZSxHQUFLcmxFLEtBQUtraUUsY0FDN0Q5M0QsRUFBTWk3RCxZQUFjajdELEVBQU1pN0QsWUFBWXBqRSxPQUFTLEVBQUltSSxFQUFNaTdELGlCQUFjM3pELEVBQ2hFMVIsS0FBS3NsRSx3QkFBdUIsU0FBU0MsS0FBNEJ2bEUsS0FBS2lpRSxrQkFBbUI3M0QsRUFBTzY2RCxJQUszR25ELEVBQU1yaEUsVUFBVTZrRSx1QkFBeUIsU0FBVUUsRUFBWXA3RCxFQUFPNjZELEVBQU0vdkQsR0FDeEUsSUFBSWhVLEVBQVFsQixLQUVaLFlBRGMsSUFBVmtWLElBQW9CQSxFQUFRLEdBQ3pCLElBQUksSUFBWSxTQUFVcVYsRUFBU2dOLEdBQ3RDLElBQUlrdUMsRUFBWUQsRUFBV3R3RCxHQUMzQixHQUFjLE9BQVY5SyxHQUF1QyxtQkFBZHE3RCxFQUN6Qmw3QyxFQUFRbmdCLE9BRVAsQ0FDRCxJQUFJbEgsRUFBU3VpRSxHQUFVLFNBQVMsR0FBSXI3RCxHQUFRNjZELElBQ3hDLEVBQUFuM0QsR0FBQSxJQUFXNUssR0FDWEEsRUFDS04sTUFBSyxTQUFVOGlFLEdBQVMsT0FBT3hrRSxFQUFNb2tFLHVCQUF1QkUsRUFBWUUsRUFBT1QsRUFBTS92RCxFQUFRLEdBQUd0UyxLQUFLMm5CLE1BQ3JHM25CLEtBQUssS0FBTTIwQixHQUdoQnIyQixFQUFNb2tFLHVCQUF1QkUsRUFBWXRpRSxFQUFRK2hFLEVBQU0vdkQsRUFBUSxHQUMxRHRTLEtBQUsybkIsR0FDTDNuQixLQUFLLEtBQU0yMEIsUUFRaEN1cUMsRUFBTXJoRSxVQUFVdWlFLHNCQUF3QixXQUNwQyxJQUFJOWhFLEVBQVFsQixLQUlQQSxLQUFLK2hFLHNCQUNOL2hFLEtBQUsraEUscUJBQXNCLEVBQzNCL2hFLEtBQUtnaUUsZ0JBQWdCN2dFLFNBQVEsU0FBVW1ELEdBQ25DQSxFQUFTcEQsTUFFYmxCLEtBQUsraEUscUJBQXNCLElBT25DRCxFQUFNcmhFLFVBQVUya0Usa0JBQW9CLFNBQVVoN0QsR0FFMUNBLEVBQU1zNUQsWUFBY3Q1RCxFQUFNczVELFlBQ3BCdGpFLE1BQU1DLFFBQVErSixFQUFNczVELGFBQ2hCdDVELEVBQU1zNUQsWUFDTixDQUFDdDVELEVBQU1zNUQsYUFDWCxHQUVGMWpFLEtBQUs0aUUsZUFDTHg0RCxFQUFNczVELFlBQWN0NUQsRUFBTXM1RCxZQUFZcHhELE9BQU90UyxLQUFLNGlFLGVBR2xEeDRELEVBQU1zNUQsY0FBZ0J0NUQsRUFBTXM1RCxZQUFZemhFLGVBQ2pDbUksRUFBTXM1RCxhQUdkNUIsRUFuWWUsR0F5WTFCLFNBQVN5RCxLQUVMLElBQUk1OUQsR0FBUyxXQUdiLE9BRkFBLEVBQU9VLFdBQWFWLEVBQU9VLFlBQWMsR0FDekNWLEVBQU9VLFdBQVdzOUQsc0JBQXdCaCtELEVBQU9VLFdBQVdzOUQsdUJBQXlCLEdBQzlFaCtELEVBQU9VLFdBQVdzOUQsc0JBT3RCLFNBQVNDLEdBQXdCdGhFLEdBQ3BDaWhFLEtBQTJCaGdFLEtBQUtqQixHLGNDdlpoQ3VoRSxHQUF5QixXQUN6QixTQUFTQSxFQUFRdGpELEdBQ2J2aUIsS0FBSzZ0RCxPQUFTLEVBQ2Q3dEQsS0FBSzhsRSxLQUFNLFdBQ1g5bEUsS0FBSzhrRSxVQUFZLzRELEtBQUtOLE1BQ3RCekwsS0FBSytsRSxRQUFVaDZELEtBQUtOLE1BQ3BCekwsS0FBS3kwQyxTQUFXLEVBQ2hCejBDLEtBQUtnbUUsT0FBU3RGLEdBQWN1RixHQUM1QmptRSxLQUFLNHpCLE1BQU8sRUFDUnJSLEdBQ0F2aUIsS0FBS21YLE9BQU9vTCxHQXFGcEIsT0FoRkFzakQsRUFBUXBsRSxVQUFVMFcsT0FBUyxTQUFVb0wsUUFDakIsSUFBWkEsSUFBc0JBLEVBQVUsSUFDaENBLEVBQVFzWixPQUNKdFosRUFBUXNaLEtBQUtxcUMsYUFDYmxtRSxLQUFLbW1FLFVBQVk1akQsRUFBUXNaLEtBQUtxcUMsWUFFN0IzakQsRUFBUTZqRCxNQUNUcG1FLEtBQUtvbUUsSUFBTTdqRCxFQUFRc1osS0FBSzM3QixJQUFNcWlCLEVBQVFzWixLQUFLd3FDLE9BQVM5akQsRUFBUXNaLEtBQUt5cUMsV0FHekV0bUUsS0FBSzhrRSxVQUFZdmlELEVBQVF1aUQsV0FBYS80RCxLQUFLTixNQUN2QzhXLEVBQVF1akQsTUFFUjlsRSxLQUFLOGxFLElBQTZCLEtBQXZCdmpELEVBQVF1akQsSUFBSTdqRSxPQUFnQnNnQixFQUFRdWpELEtBQU0saUJBRXBDcDBELElBQWpCNlEsRUFBUXFSLE9BQ1I1ekIsS0FBSzR6QixLQUFPclIsRUFBUXFSLE1BRXBCclIsRUFBUTZqRCxNQUNScG1FLEtBQUtvbUUsSUFBTSxHQUFLN2pELEVBQVE2akQsS0FFRyxpQkFBcEI3akQsRUFBUXdqRCxVQUNmL2xFLEtBQUsrbEUsUUFBVXhqRCxFQUFRd2pELFNBRUssaUJBQXJCeGpELEVBQVFreUIsU0FDZnowQyxLQUFLeTBDLFNBQVdseUIsRUFBUWt5QixTQUd4QnowQyxLQUFLeTBDLFNBQVd6MEMsS0FBSzhrRSxVQUFZOWtFLEtBQUsrbEUsUUFFdEN4akQsRUFBUWdrRCxVQUNSdm1FLEtBQUt1bUUsUUFBVWhrRCxFQUFRZ2tELFNBRXZCaGtELEVBQVFpa0QsY0FDUnhtRSxLQUFLd21FLFlBQWNqa0QsRUFBUWlrRCxhQUUzQmprRCxFQUFRNGpELFlBQ1JubUUsS0FBS21tRSxVQUFZNWpELEVBQVE0akQsV0FFekI1akQsRUFBUXZDLFlBQ1JoZ0IsS0FBS2dnQixVQUFZdUMsRUFBUXZDLFdBRUMsaUJBQW5CdUMsRUFBUXNyQyxTQUNmN3RELEtBQUs2dEQsT0FBU3RyQyxFQUFRc3JDLFFBRXRCdHJDLEVBQVF5akQsU0FDUmhtRSxLQUFLZ21FLE9BQVN6akQsRUFBUXlqRCxTQUk5QkgsRUFBUXBsRSxVQUFVbS9DLE1BQVEsU0FBVW9tQixHQUM1QkEsRUFDQWhtRSxLQUFLbVgsT0FBTyxDQUFFNnVELE9BQVFBLElBRWpCaG1FLEtBQUtnbUUsU0FBV3RGLEdBQWN1RixHQUNuQ2ptRSxLQUFLbVgsT0FBTyxDQUFFNnVELE9BQVF0RixHQUFjK0YsU0FHcEN6bUUsS0FBS21YLFVBSWIwdUQsRUFBUXBsRSxVQUFVMk8sT0FBUyxXQUN2QixPQUFPLFNBQWtCLENBQ3JCMDJELElBQUssR0FBSzlsRSxLQUFLOGxFLElBQ2ZseUMsS0FBTTV6QixLQUFLNHpCLEtBQ1hteUMsUUFBUyxJQUFJaDZELEtBQUsvTCxLQUFLK2xFLFNBQVNXLGNBQ2hDNUIsVUFBVyxJQUFJLzRELEtBQUsvTCxLQUFLOGtFLFdBQVc0QixjQUNwQ1YsT0FBUWhtRSxLQUFLZ21FLE9BQ2JuWSxPQUFRN3RELEtBQUs2dEQsT0FDYnVZLElBQXlCLGlCQUFicG1FLEtBQUtvbUUsS0FBd0MsaUJBQWJwbUUsS0FBS29tRSxJQUFtQixHQUFLcG1FLEtBQUtvbUUsU0FBTTEwRCxFQUNwRitpQyxTQUFVejBDLEtBQUt5MEMsU0FDZnptQixPQUFPLFNBQWtCLENBQ3JCdTRDLFFBQVN2bUUsS0FBS3VtRSxRQUNkQyxZQUFheG1FLEtBQUt3bUUsWUFDbEJOLFdBQVlsbUUsS0FBS21tRSxVQUNqQlEsV0FBWTNtRSxLQUFLZ2dCLGVBSXRCNmxELEVBL0ZpQixHQ3VCeEJlLEdBQXFCLFdBU3JCLFNBQVNBLEVBQUlsaUUsRUFBUXZDLEVBQU8wa0UsUUFDVixJQUFWMWtFLElBQW9CQSxFQUFRLElBQUkyL0QsU0FDbkIsSUFBYitFLElBQXVCQSxFQXpCVixHQTBCakI3bUUsS0FBSzZtRSxTQUFXQSxFQUVoQjdtRSxLQUFLOG1FLE9BQVMsQ0FBQyxJQUNmOW1FLEtBQUsrbUUsY0FBYzVrRSxNQUFRQSxFQUMzQm5DLEtBQUtnbkUsV0FBV3RpRSxHQThWcEIsT0F6VkFraUUsRUFBSW5tRSxVQUFVd21FLFlBQWMsU0FBVW5qQyxHQUNsQyxPQUFPOWpDLEtBQUs2bUUsU0FBVy9pQyxHQUszQjhpQyxFQUFJbm1FLFVBQVV1bUUsV0FBYSxTQUFVdGlFLEdBQ3ZCMUUsS0FBSyttRSxjQUNYcmlFLE9BQVNBLEVBQ1RBLEdBQVVBLEVBQU93aUUsbUJBQ2pCeGlFLEVBQU93aUUscUJBTWZOLEVBQUlubUUsVUFBVTBtRSxVQUFZLFdBRXRCLElBQUlobEUsRUFBUTIvRCxHQUFNcnVDLE1BQU16ekIsS0FBS29DLFlBSzdCLE9BSkFwQyxLQUFLb25FLFdBQVc3aEUsS0FBSyxDQUNqQmIsT0FBUTFFLEtBQUtxbkUsWUFDYmxsRSxNQUFPQSxJQUVKQSxHQUtYeWtFLEVBQUlubUUsVUFBVTZtRSxTQUFXLFdBQ3JCLFFBQUl0bkUsS0FBS29uRSxXQUFXbmxFLFFBQVUsSUFFckJqQyxLQUFLb25FLFdBQVdqbEQsUUFLN0J5a0QsRUFBSW5tRSxVQUFVOG1FLFVBQVksU0FBVWpqRSxHQUNoQyxJQUFJbkMsRUFBUW5DLEtBQUttbkUsWUFDakIsSUFDSTdpRSxFQUFTbkMsR0FFYixRQUNJbkMsS0FBS3NuRSxhQU1iVixFQUFJbm1FLFVBQVU0bUUsVUFBWSxXQUN0QixPQUFPcm5FLEtBQUsrbUUsY0FBY3JpRSxRQUc5QmtpRSxFQUFJbm1FLFVBQVUyQixTQUFXLFdBQ3JCLE9BQU9wQyxLQUFLK21FLGNBQWM1a0UsT0FHOUJ5a0UsRUFBSW5tRSxVQUFVMm1FLFNBQVcsV0FDckIsT0FBT3BuRSxLQUFLOG1FLFFBR2hCRixFQUFJbm1FLFVBQVVzbUUsWUFBYyxXQUN4QixPQUFPL21FLEtBQUs4bUUsT0FBTzltRSxLQUFLOG1FLE9BQU83a0UsT0FBUyxJQU01QzJrRSxFQUFJbm1FLFVBQVUrbUUsaUJBQW1CLFNBQVVsOUQsRUFBVzI2RCxHQUNsRCxJQUFJd0MsRUFBV3puRSxLQUFLMG5FLGNBQWUsV0FDL0JDLEVBQVkxQyxFQUtoQixJQUFLQSxFQUFNLENBQ1AsSUFBSTJDLE9BQXFCLEVBQ3pCLElBQ0ksTUFBTSxJQUFJbGhFLE1BQU0sNkJBRXBCLE1BQU80RCxHQUNIczlELEVBQXFCdDlELEVBRXpCcTlELEVBQVksQ0FDUkUsa0JBQW1CdjlELEVBQ25CczlELG1CQUFvQkEsR0FJNUIsT0FEQTVuRSxLQUFLOG5FLGNBQWMsbUJBQW9CeDlELEdBQVcsVUFBUyxTQUFTLEdBQUlxOUQsR0FBWSxDQUFFbDlELFNBQVVnOUQsS0FDekZBLEdBS1hiLEVBQUlubUUsVUFBVXNuRSxlQUFpQixTQUFVMTlELEVBQVNRLEVBQU9vNkQsR0FDckQsSUFBSXdDLEVBQVd6bkUsS0FBSzBuRSxjQUFlLFdBQy9CQyxFQUFZMUMsRUFLaEIsSUFBS0EsRUFBTSxDQUNQLElBQUkyQyxPQUFxQixFQUN6QixJQUNJLE1BQU0sSUFBSWxoRSxNQUFNMkQsR0FFcEIsTUFBT0MsR0FDSHM5RCxFQUFxQnQ5RCxFQUV6QnE5RCxFQUFZLENBQ1JFLGtCQUFtQng5RCxFQUNuQnU5RCxtQkFBb0JBLEdBSTVCLE9BREE1bkUsS0FBSzhuRSxjQUFjLGlCQUFrQno5RCxFQUFTUSxHQUFPLFVBQVMsU0FBUyxHQUFJODhELEdBQVksQ0FBRWw5RCxTQUFVZzlELEtBQzVGQSxHQUtYYixFQUFJbm1FLFVBQVV1bkUsYUFBZSxTQUFVNTlELEVBQU82NkQsR0FDMUMsSUFBSXdDLEVBQVd6bkUsS0FBSzBuRSxjQUFlLFdBRW5DLE9BREExbkUsS0FBSzhuRSxjQUFjLGVBQWdCMTlELEdBQU8sVUFBUyxTQUFTLEdBQUk2NkQsR0FBTyxDQUFFeDZELFNBQVVnOUQsS0FDNUVBLEdBS1hiLEVBQUlubUUsVUFBVXduRSxZQUFjLFdBQ3hCLE9BQU9qb0UsS0FBSzBuRSxjQUtoQmQsRUFBSW5tRSxVQUFVaWtFLGNBQWdCLFNBQVVDLEVBQVlNLEdBQ2hELElBQUl2akUsRUFBSzFCLEtBQUsrbUUsY0FBZTVrRSxFQUFRVCxFQUFHUyxNQUFPdUMsRUFBU2hELEVBQUdnRCxPQUMzRCxHQUFLdkMsR0FBVXVDLEVBQWYsQ0FHQSxJQUFJL0MsRUFBTStDLEVBQU93akUsWUFBY3hqRSxFQUFPd2pFLGNBQWlCLEdBQUl0bUUsRUFBS0QsRUFBR3dtRSxpQkFBa0JBLE9BQTBCLElBQVB2bUUsRUFBZ0IsS0FBT0EsRUFBSUMsRUFBS0YsRUFBR2lqRSxlQUFnQkEsT0FBd0IsSUFBUC9pRSxFQXhLMUosSUF3S2dNQSxFQUNsTixLQUFJK2lFLEdBQWtCLEdBQXRCLENBRUEsSUFBSUUsR0FBWSxXQUNaRCxHQUFtQixTQUFTLENBQUVDLFVBQVdBLEdBQWFILEdBQ3REeUQsRUFBa0JELEdBQ2hCLFVBQWUsV0FBYyxPQUFPQSxFQUFpQnRELEVBQWtCSSxNQUN2RUosRUFDa0IsT0FBcEJ1RCxHQUVKam1FLEVBQU11aUUsY0FBYzBELEVBQWlCNStELEtBQUt1eUQsSUFBSTZJLEVBN0toQyxTQWtMbEJnQyxFQUFJbm1FLFVBQVVzaUUsUUFBVSxTQUFVbG5DLEdBQzlCLElBQUkxNUIsRUFBUW5DLEtBQUtvQyxXQUNiRCxHQUNBQSxFQUFNNGdFLFFBQVFsbkMsSUFLdEIrcUMsRUFBSW5tRSxVQUFVeWlFLFFBQVUsU0FBVUMsR0FDOUIsSUFBSWhoRSxFQUFRbkMsS0FBS29DLFdBQ2JELEdBQ0FBLEVBQU0rZ0UsUUFBUUMsSUFLdEJ5RCxFQUFJbm1FLFVBQVU0aUUsVUFBWSxTQUFVQyxHQUNoQyxJQUFJbmhFLEVBQVFuQyxLQUFLb0MsV0FDYkQsR0FDQUEsRUFBTWtoRSxVQUFVQyxJQUt4QnNELEVBQUlubUUsVUFBVTJpRSxPQUFTLFNBQVV0OUQsRUFBSzBFLEdBQ2xDLElBQUlySSxFQUFRbkMsS0FBS29DLFdBQ2JELEdBQ0FBLEVBQU1paEUsT0FBT3Q5RCxFQUFLMEUsSUFLMUJvOEQsRUFBSW5tRSxVQUFVOGlFLFNBQVcsU0FBVXo5RCxFQUFLMDlELEdBQ3BDLElBQUlyaEUsRUFBUW5DLEtBQUtvQyxXQUNiRCxHQUNBQSxFQUFNb2hFLFNBQVN6OUQsRUFBSzA5RCxJQU01Qm9ELEVBQUlubUUsVUFBVXFqRSxXQUFhLFNBQVU3akUsRUFBTXNpQixHQUN2QyxJQUFJcGdCLEVBQVFuQyxLQUFLb0MsV0FDYkQsR0FDQUEsRUFBTTJoRSxXQUFXN2pFLEVBQU1zaUIsSUFLL0Jxa0QsRUFBSW5tRSxVQUFVNG5FLGVBQWlCLFNBQVUvakUsR0FDckMsSUFBSTVDLEVBQUsxQixLQUFLK21FLGNBQWU1a0UsRUFBUVQsRUFBR1MsTUFBT3VDLEVBQVNoRCxFQUFHZ0QsT0FDdkR2QyxHQUFTdUMsR0FDVEosRUFBU25DLElBTWpCeWtFLEVBQUlubUUsVUFBVXU2QixJQUFNLFNBQVUxMkIsR0FDMUIsSUFBSWdrRSxFQUFTQyxHQUFTdm9FLE1BQ3RCLElBQ0lzRSxFQUFTdEUsTUFFYixRQUNJdW9FLEdBQVNELEtBTWpCMUIsRUFBSW5tRSxVQUFVK25FLGVBQWlCLFNBQVVDLEdBQ3JDLElBQUkvakUsRUFBUzFFLEtBQUtxbkUsWUFDbEIsSUFBSzNpRSxFQUNELE9BQU8sS0FDWCxJQUNJLE9BQU9BLEVBQU84akUsZUFBZUMsR0FFakMsTUFBT3ZrRSxHQUVILE9BREEsVUFBWSwrQkFBaUN1a0UsRUFBWXZvRSxHQUFLLHlCQUN2RCxPQU1mMG1FLEVBQUlubUUsVUFBVWlvRSxVQUFZLFNBQVVubUQsR0FDaEMsT0FBT3ZpQixLQUFLMm9FLHFCQUFxQixZQUFhcG1ELElBS2xEcWtELEVBQUlubUUsVUFBVW1vRSxpQkFBbUIsU0FBVXJtRCxFQUFTc21ELEdBQ2hELE9BQU83b0UsS0FBSzJvRSxxQkFBcUIsbUJBQW9CcG1ELEVBQVNzbUQsSUFLbEVqQyxFQUFJbm1FLFVBQVVxb0UsYUFBZSxXQUN6QixPQUFPOW9FLEtBQUsyb0UscUJBQXFCLGlCQUtyQy9CLEVBQUlubUUsVUFBVXNvRSxlQUFpQixTQUFVQyxHQUdyQyxRQUZtQixJQUFmQSxJQUF5QkEsR0FBYSxHQUV0Q0EsRUFDQSxPQUFPaHBFLEtBQUtncEUsYUFHaEJocEUsS0FBS2lwRSxzQkFLVHJDLEVBQUlubUUsVUFBVXVvRSxXQUFhLFdBQ3ZCLElBQUl0bkUsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSTZGLEVBQzJILFFBQTlJOUYsRUFBd0YsUUFBbEZELEVBQW1DLFFBQTdCRCxFQUFLMUIsS0FBSyttRSxxQkFBa0MsSUFBUHJsRSxPQUFnQixFQUFTQSxFQUFHUyxhQUEwQixJQUFQUixPQUFnQixFQUFTQSxFQUFHMmlFLG9CQUFpQyxJQUFQMWlFLEdBQXlCQSxFQUFHZytDLFFBQ25MNS9DLEtBQUtpcEUscUJBRThFLFFBQWxGdmhFLEVBQW1DLFFBQTdCN0YsRUFBSzdCLEtBQUsrbUUscUJBQWtDLElBQVBsbEUsT0FBZ0IsRUFBU0EsRUFBR00sYUFBMEIsSUFBUHVGLEdBQXlCQSxFQUFHMDhELGNBSzNId0MsRUFBSW5tRSxVQUFVeW9FLGFBQWUsU0FBVTNtRCxHQUNuQyxJQUFJN2dCLEVBQUsxQixLQUFLK21FLGNBQWU1a0UsRUFBUVQsRUFBR1MsTUFBT3VDLEVBQVNoRCxFQUFHZ0QsT0FDdkQvQyxFQUFNK0MsR0FBVUEsRUFBT3dqRSxjQUFpQixHQUFJM0IsRUFBVTVrRSxFQUFHNGtFLFFBQVNDLEVBQWM3a0UsRUFBRzZrRSxZQUNuRm5DLEVBQVUsSUFBSXdCLElBQVEsVUFBUyxTQUFTLENBQUVVLFFBQVNBLEVBQ25EQyxZQUFhQSxHQUFnQnJrRSxHQUFTLENBQUUwNUIsS0FBTTE1QixFQUFNOGdFLFlBQWUxZ0QsSUFDdkUsR0FBSXBnQixFQUFPLENBRVAsSUFBSWduRSxFQUFpQmhuRSxFQUFNbWlFLFlBQWNuaUUsRUFBTW1pRSxhQUMzQzZFLEdBQWtCQSxFQUFlbkQsU0FBV3RGLEdBQWN1RixJQUMxRGtELEVBQWVoeUQsT0FBTyxDQUFFNnVELE9BQVF0RixHQUFjK0YsU0FFbER6bUUsS0FBS2dwRSxhQUVMN21FLEVBQU1paUUsV0FBV0MsR0FFckIsT0FBT0EsR0FLWHVDLEVBQUlubUUsVUFBVXdvRSxtQkFBcUIsV0FDL0IsSUFBSXZuRSxFQUFLMUIsS0FBSyttRSxjQUFlNWtFLEVBQVFULEVBQUdTLE1BQU91QyxFQUFTaEQsRUFBR2dELE9BQzNELEdBQUt2QyxFQUFMLENBRUEsSUFBSWtpRSxFQUFVbGlFLEVBQU1taUUsWUFBY25pRSxFQUFNbWlFLGFBQ3BDRCxHQUNJMy9ELEdBQVVBLEVBQU9xa0UsZ0JBQ2pCcmtFLEVBQU9xa0UsZUFBZTFFLEtBV2xDdUMsRUFBSW5tRSxVQUFVcW5FLGNBQWdCLFNBQVU1akQsR0FHcEMsSUFGQSxJQUFJeGlCLEVBQ0FJLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsRUFBSyxHQUFLQyxVQUFVRCxHQUU3QixJQUFJSixFQUFLM0IsS0FBSyttRSxjQUFlNWtFLEVBQVFSLEVBQUdRLE1BQU91QyxFQUFTL0MsRUFBRytDLE9BQ3ZEQSxHQUFVQSxFQUFPd2YsS0FFaEJ4aUIsRUFBS2dELEdBQVF3ZixHQUFRdmhCLE1BQU1qQixHQUFJLFNBQVNJLEVBQU0sQ0FBQ0ssTUFReER5a0UsRUFBSW5tRSxVQUFVa29FLHFCQUF1QixTQUFVemtELEdBRTNDLElBREEsSUFBSXBpQixFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEVBQUssR0FBS0MsVUFBVUQsR0FFN0IsSUFBSXFuRSxFQUFVQyxLQUNWQyxFQUFTRixFQUFRL2dFLFdBQ3JCLEdBQUlpaEUsR0FBVUEsRUFBT0MsWUFBbUQsbUJBQTlCRCxFQUFPQyxXQUFXcmxELEdBQ3hELE9BQU9vbEQsRUFBT0MsV0FBV3JsRCxHQUFRdmhCLE1BQU0zQyxLQUFNOEIsR0FFakQsVUFBWSxvQkFBc0JvaUIsRUFBUyx1Q0FFeEMwaUQsRUE5V2EsR0FrWGpCLFNBQVN5QyxLQUNaLElBQUlELEdBQVUsV0FLZCxPQUpBQSxFQUFRL2dFLFdBQWErZ0UsRUFBUS9nRSxZQUFjLENBQ3ZDa2hFLFdBQVksR0FDWkMsU0FBSzkzRCxHQUVGMDNELEVBT0osU0FBU2IsR0FBU2lCLEdBQ3JCLElBQUlDLEVBQVdKLEtBQ1hmLEVBQVNvQixHQUFrQkQsR0FFL0IsT0FEQUUsR0FBZ0JGLEVBQVVELEdBQ25CbEIsRUFTSixTQUFTLEtBRVosSUFBSW1CLEVBQVdKLEtBTWYsT0FKS08sR0FBZ0JILEtBQWFDLEdBQWtCRCxHQUFVeEMsWUE5WnpDLElBK1pqQjBDLEdBQWdCRixFQUFVLElBQUk3QyxLQUc5QixVQXFCUixTQUFnQzZDLEdBQzVCLElBQUkvbkUsRUFBSUMsRUFBSUMsRUFDWixJQUNJLElBQUlpb0UsRUFBc0ssUUFBdEpqb0UsRUFBc0csUUFBaEdELEVBQTRDLFFBQXRDRCxFQUFLMm5FLEtBQWlCaGhFLGtCQUErQixJQUFQM0csT0FBZ0IsRUFBU0EsRUFBRzZuRSxrQkFBK0IsSUFBUDVuRSxPQUFnQixFQUFTQSxFQUFHbW9FLGNBQTJCLElBQVBsb0UsT0FBZ0IsRUFBU0EsRUFBR202QixPQUU5TSxJQUFLOHRDLEVBQ0QsT0FBT0gsR0FBa0JELEdBRzdCLElBQUtHLEdBQWdCQyxJQUFpQkgsR0FBa0JHLEdBQWM1QyxZQWhjckQsR0FnYytFLENBQzVGLElBQUk4QyxFQUFzQkwsR0FBa0JELEdBQVUxQyxjQUN0RDRDLEdBQWdCRSxFQUFjLElBQUlqRCxHQUFJbUQsRUFBb0JybEUsT0FBUW85RCxHQUFNcnVDLE1BQU1zMkMsRUFBb0I1bkUsU0FHdEcsT0FBT3VuRSxHQUFrQkcsR0FFN0IsTUFBT3A4RCxHQUVILE9BQU9pOEQsR0FBa0JELElBdENsQk8sQ0FBdUJQLEdBRzNCQyxHQUFrQkQsR0EwQzdCLFNBQVNHLEdBQWdCUixHQUNyQixTQUFVQSxHQUFXQSxFQUFRL2dFLFlBQWMrZ0UsRUFBUS9nRSxXQUFXbWhFLEtBUTNELFNBQVNFLEdBQWtCTixHQUM5QixPQUFJQSxHQUFXQSxFQUFRL2dFLFlBQWMrZ0UsRUFBUS9nRSxXQUFXbWhFLE1BRXhESixFQUFRL2dFLFdBQWErZ0UsRUFBUS9nRSxZQUFjLEdBQzNDK2dFLEVBQVEvZ0UsV0FBV21oRSxJQUFNLElBQUk1QyxJQUZsQndDLEVBQVEvZ0UsV0FBV21oRSxJQVczQixTQUFTRyxHQUFnQlAsRUFBU0ksR0FDckMsUUFBS0osSUFFTEEsRUFBUS9nRSxXQUFhK2dFLEVBQVEvZ0UsWUFBYyxHQUMzQytnRSxFQUFRL2dFLFdBQVdtaEUsSUFBTUEsR0FDbEIsR0NqZlgsU0FBU1MsR0FBVS9sRCxHQUVmLElBREEsSUFBSXBpQixFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEVBQUssR0FBS0MsVUFBVUQsR0FFN0IsSUFBSXluRSxFQUFNLEtBQ1YsR0FBSUEsR0FBT0EsRUFBSXRsRCxHQUVYLE9BQU9zbEQsRUFBSXRsRCxHQUFRdmhCLE1BQU02bUUsR0FBSyxTQUFTMW5FLElBRTNDLE1BQU0sSUFBSTRFLE1BQU0scUJBQXVCd2QsRUFBUyx3REFTN0MsU0FBU3NqRCxHQUFpQmw5RCxFQUFXaTZELEdBQ3hDLElBQUlxRCxFQUNKLElBQ0ksTUFBTSxJQUFJbGhFLE1BQU0sNkJBRXBCLE1BQU80RCxHQUNIczlELEVBQXFCdDlELEVBRXpCLE9BQU8yL0QsR0FBVSxtQkFBb0IzL0QsRUFBVyxDQUM1Q2k2RCxlQUFnQkEsRUFDaEJzRCxrQkFBbUJ2OUQsRUFDbkJzOUQsbUJBQW9CQSxJQWtIckIsU0FBU0wsR0FBVWpqRSxHQUN0QjJsRSxHQUFVLFlBQWEzbEUsR0NySnBCLE1BQU0sR0FBaUJxekQsRyxtU0FBYSxtQ0FDekNBLEVBQVN1RSxNQUNULElBQ0UsTUFBTXpKLFFDRkQvdEQsR0FBT29WLElBQUksaUNER2hCNjlDLEVBQVN5RSxHQUFvQjNKLElBQzdCLE1BQU94dkQsSUR1Q0osU0FBd0JvSCxFQUFTazZELEdBQ3BDLElBQUlxRCxFQUNKLElBQ0ksTUFBTSxJQUFJbGhFLE1BQU0yRCxHQUVwQixNQUFPQyxHQUNIczlELEVBQXFCdDlELEVBSXpCLElBQ0lpWSxFQUErQyxDQUFFZ2lELGVBQWdCQSxHQUM5RDBGLEdBQVUsaUJBQWtCNS9ELE9BRitCcUgsR0FFZixTQUFTLENBQUVtMkQsa0JBQW1CeDlELEVBQVN1OUQsbUJBQW9CQSxHQUFzQnJsRCxJQ2xEcEl3bEQsQ0FBZTlrRSxHQUNmMDBELEVBQVNxRSxHQUFZLHVDLGlDRUhaLEtBQUksS0FMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTUwsWUNaUixJQ0FIa08sR0RBT0MsR0FBYyxRLFVFS3JCQyxHQUF3QixDQUFDLG9CQUFxQixpREFFOUNDLEdBQWdDLFdBQ2hDLFNBQVNBLEVBQWU1TixRQUNILElBQWJBLElBQXVCQSxFQUFXLElBQ3RDejhELEtBQUt5OEQsU0FBV0EsRUFJaEJ6OEQsS0FBS0MsS0FBT29xRSxFQUFlbnFFLEdBeUkvQixPQXBJQW1xRSxFQUFlNXBFLFVBQVVDLFVBQVksV0FDakNrbEUsSUFBd0IsU0FBVXg3RCxHQUM5QixJQUFJby9ELEVBQU0sS0FDVixJQUFLQSxFQUNELE9BQU9wL0QsRUFFWCxJQUFJekIsRUFBTzZnRSxFQUFJaEIsZUFBZTZCLEdBQzlCLEdBQUkxaEUsRUFBTSxDQUNOLElBQUlqRSxFQUFTOGtFLEVBQUluQyxZQUNiaUQsRUFBZ0I1bEUsRUFBU0EsRUFBT3dqRSxhQUFlLEdBQy9Dbm9FLEVBQVU0SSxFQUFLNGhFLGNBQWNELEdBQ2pDLEdBQUkzaEUsRUFBSzZoRSxpQkFBaUJwZ0UsRUFBT3JLLEdBQzdCLE9BQU8sS0FHZixPQUFPcUssTUFJZmlnRSxFQUFlNXBFLFVBQVUrcEUsaUJBQW1CLFNBQVVwZ0UsRUFBT3JLLEdBQ3pELE9BQUlDLEtBQUt5cUUsZUFBZXJnRSxFQUFPckssSUFDM0IsVUFBWSw4REFBK0QsU0FBb0JxSyxLQUN4RixHQUVQcEssS0FBSzBxRSxnQkFBZ0J0Z0UsRUFBT3JLLElBQzVCLFVBQVkseUVBQTBFLFNBQW9CcUssS0FDbkcsR0FFUHBLLEtBQUsycUUsYUFBYXZnRSxFQUFPckssSUFDekIsVUFBWSxxRUFBc0UsU0FBb0JxSyxHQUFTLFdBQWFwSyxLQUFLNHFFLG1CQUFtQnhnRSxLQUM3SSxJQUVOcEssS0FBSzZxRSxjQUFjemdFLEVBQU9ySyxLQUMzQixVQUFZLDBFQUEyRSxTQUFvQnFLLEdBQVMsV0FBYXBLLEtBQUs0cUUsbUJBQW1CeGdFLEtBQ2xKLElBS2ZpZ0UsRUFBZTVwRSxVQUFVZ3FFLGVBQWlCLFNBQVVyZ0UsRUFBT3JLLEdBQ3ZELElBQUtBLEVBQVErcUUsZUFDVCxPQUFPLEVBRVgsSUFDSSxPQUFTMWdFLEdBQ0xBLEVBQU1FLFdBQ05GLEVBQU1FLFVBQVVqRyxRQUNoQitGLEVBQU1FLFVBQVVqRyxPQUFPLElBQ1ksZ0JBQW5DK0YsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2tHLE9BQzFCLEVBRVIsTUFBT3JHLEdBQ0gsT0FBTyxJQUlmbW1FLEVBQWU1cEUsVUFBVWlxRSxnQkFBa0IsU0FBVXRnRSxFQUFPckssR0FDeEQsU0FBS0EsRUFBUWdyRSxlQUFpQmhyRSxFQUFRZ3JFLGFBQWE5b0UsU0FHNUNqQyxLQUFLZ3JFLDBCQUEwQjVnRSxHQUFPMndDLE1BQUssU0FBVTF3QyxHQUV4RCxPQUFPdEssRUFBUWdyRSxhQUFhaHdCLE1BQUssU0FBVWhxQyxHQUFXLE9BQU8sU0FBa0IxRyxFQUFTMEcsVUFJaEdzNUQsRUFBZTVwRSxVQUFVa3FFLGFBQWUsU0FBVXZnRSxFQUFPckssR0FFckQsSUFBS0EsRUFBUWtyRSxXQUFhbHJFLEVBQVFrckUsU0FBU2hwRSxPQUN2QyxPQUFPLEVBRVgsSUFBSTBILEVBQU0zSixLQUFLNHFFLG1CQUFtQnhnRSxHQUNsQyxRQUFRVCxHQUFjNUosRUFBUWtyRSxTQUFTbHdCLE1BQUssU0FBVWhxQyxHQUFXLE9BQU8sU0FBa0JwSCxFQUFLb0gsT0FHbkdzNUQsRUFBZTVwRSxVQUFVb3FFLGNBQWdCLFNBQVV6Z0UsRUFBT3JLLEdBRXRELElBQUtBLEVBQVFtckUsWUFBY25yRSxFQUFRbXJFLFVBQVVqcEUsT0FDekMsT0FBTyxFQUVYLElBQUkwSCxFQUFNM0osS0FBSzRxRSxtQkFBbUJ4Z0UsR0FDbEMsT0FBUVQsR0FBYTVKLEVBQVFtckUsVUFBVW53QixNQUFLLFNBQVVocUMsR0FBVyxPQUFPLFNBQWtCcEgsRUFBS29ILE9BR25HczVELEVBQWU1cEUsVUFBVThwRSxjQUFnQixTQUFVRCxHQUUvQyxZQURzQixJQUFsQkEsSUFBNEJBLEVBQWdCLElBQ3pDLENBQ0hZLFdBQVcsU0FBVWxyRSxLQUFLeThELFNBQVMwTyxlQUFpQixHQUFNbnJFLEtBQUt5OEQsU0FBU3lPLFdBQWEsR0FBTVosRUFBY2EsZUFBaUIsR0FBTWIsRUFBY1ksV0FBYSxJQUMzSkQsVUFBVSxTQUFVanJFLEtBQUt5OEQsU0FBUzJPLGVBQWlCLEdBQU1wckUsS0FBS3k4RCxTQUFTd08sVUFBWSxHQUFNWCxFQUFjYyxlQUFpQixHQUFNZCxFQUFjVyxVQUFZLElBQ3hKRixjQUFjLFNBQVUvcUUsS0FBS3k4RCxTQUFTc08sY0FBZ0IsR0FBTVQsRUFBY1MsY0FBZ0IsR0FBS1gsSUFDL0ZVLG9CQUF3RCxJQUFqQzlxRSxLQUFLeThELFNBQVNxTyxnQkFBaUM5cUUsS0FBS3k4RCxTQUFTcU8saUJBSTVGVCxFQUFlNXBFLFVBQVV1cUUsMEJBQTRCLFNBQVU1Z0UsR0FDM0QsR0FBSUEsRUFBTUMsUUFDTixNQUFPLENBQUNELEVBQU1DLFNBRWxCLEdBQUlELEVBQU1FLFVBQ04sSUFDSSxJQUFJNUksRUFBTTBJLEVBQU1FLFVBQVVqRyxRQUFVK0YsRUFBTUUsVUFBVWpHLE9BQU8sSUFBTyxHQUFJMUMsRUFBS0QsRUFBRzZJLEtBQU1BLE9BQWMsSUFBUDVJLEVBQWdCLEdBQUtBLEVBQUlDLEVBQUtGLEVBQUc4SSxNQUFPQSxPQUFlLElBQVA1SSxFQUFnQixHQUFLQSxFQUNoSyxNQUFPLENBQUMsR0FBSzRJLEVBQU9ELEVBQU8sS0FBT0MsR0FFdEMsTUFBT2UsR0FFSCxPQURBLFdBQWEscUNBQXNDLFNBQW9CbkIsSUFDaEUsR0FHZixNQUFPLElBR1hpZ0UsRUFBZTVwRSxVQUFVbXFFLG1CQUFxQixTQUFVeGdFLEdBQ3BELElBQ0ksR0FBSUEsRUFBTWloRSxXQUFZLENBQ2xCLElBQUlDLEVBQVdsaEUsRUFBTWloRSxXQUFXRSxPQUNoQyxPQUFRRCxHQUFZQSxFQUFTQSxFQUFTcnBFLE9BQVMsR0FBR3VwRSxVQUFhLEtBRW5FLEdBQUlwaEUsRUFBTUUsVUFBVyxDQUNqQixJQUFJbWhFLEVBQVdyaEUsRUFBTUUsVUFBVWpHLFFBQVUrRixFQUFNRSxVQUFVakcsT0FBTyxHQUFHZ25FLFlBQWNqaEUsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2duRSxXQUFXRSxPQUN0SCxPQUFRRSxHQUFZQSxFQUFTQSxFQUFTeHBFLE9BQVMsR0FBR3VwRSxVQUFhLEtBRW5FLE9BQU8sS0FFWCxNQUFPamdFLEdBRUgsT0FEQSxXQUFhLGlDQUFrQyxTQUFvQm5CLElBQzVELE9BTWZpZ0UsRUFBZW5xRSxHQUFLLGlCQUNibXFFLEVBaEp3QixHREwvQnFCLEdBQWtDLFdBQ2xDLFNBQVNBLElBSUwxckUsS0FBS0MsS0FBT3lyRSxFQUFpQnhyRSxHQXNCakMsT0FqQkF3ckUsRUFBaUJqckUsVUFBVUMsVUFBWSxXQUVuQ3dwRSxHQUEyQmx3RCxTQUFTdlosVUFBVStGLFNBRTlDd1QsU0FBU3ZaLFVBQVUrRixTQUFXLFdBRTFCLElBREEsSUFBSTFFLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FFekIsSUFBSXdnQixFQUFVdmlCLEtBQUs4SyxxQkFBdUI5SyxLQUMxQyxPQUFPa3FFLEdBQXlCdm5FLE1BQU00ZixFQUFTemdCLEtBTXZENHBFLEVBQWlCeHJFLEdBQUssbUJBQ2Z3ckUsRUEzQjBCLEcsVUVzRDlCLFNBQVNDLEtBQ1osS0FBTSxVQUFXLFlBQ2IsT0FBTyxFQUVYLElBSUksT0FIQSxJQUFJQyxRQUNKLElBQUlDLFFBQVEsSUFDWixJQUFJQyxVQUNHLEVBRVgsTUFBTzlxRSxHQUNILE9BQU8sR0FPZixTQUFTK3FFLEdBQWNwUyxHQUNuQixPQUFPQSxHQUFRLG1EQUFtRDNvRCxLQUFLMm9ELEVBQUtuekQsWUF1RHpFLFNBQVN3bEUsS0FLWixJQUFLTCxLQUNELE9BQU8sRUFFWCxJQUlJLE9BSEEsSUFBSUUsUUFBUSxJQUFLLENBQ2JJLGVBQWdCLFlBRWIsRUFFWCxNQUFPanJFLEdBQ0gsT0FBTyxHQzFJZixJQXNRSWtyRSxHQWtEQUMsR0FDQUMsR0F6VEF6a0UsSUFBUyxXQVdUdXlCLEdBQVcsR0FDWG15QyxHQUFlLEdBc0NaLFNBQVNDLEdBQTBCemlELEdBQ2pDQSxHQUFtQyxpQkFBakJBLEVBQVF0ZixNQUFpRCxtQkFBckJzZixFQUFRdmxCLFdBR25FNDFCLEdBQVNyUSxFQUFRdGYsTUFBUTJ2QixHQUFTclEsRUFBUXRmLE9BQVMsR0FDbkQydkIsR0FBU3JRLEVBQVF0ZixNQUFNaEYsS0FBS3NrQixFQUFRdmxCLFVBekN4QyxTQUFvQmlHLEdBQ2hCLElBQUk4aEUsR0FBYTloRSxHQUlqQixPQURBOGhFLEdBQWE5aEUsSUFBUSxFQUNiQSxHQUNKLElBQUssVUFpRUgsWUFBYTVDLElBR25CLENBQUMsUUFBUyxPQUFRLE9BQVEsUUFBUyxNQUFPLFVBQVV4RyxTQUFRLFNBQVUwSixHQUM1REEsS0FBU2xELEdBQU9PLFVBR3RCLFNBQUtQLEdBQU9PLFFBQVMyQyxHQUFPLFNBQVUwaEUsR0FDbEMsT0FBTyxXQUVILElBREEsSUFBSXpxRSxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCeXFFLEdBQWdCLFVBQVcsQ0FBRTFxRSxLQUFNQSxFQUFNK0ksTUFBT0EsSUFFNUMwaEUsR0FDQXZ5RCxTQUFTdlosVUFBVWtDLE1BQU1ELEtBQUs2cEUsRUFBc0I1a0UsR0FBT08sUUFBU3BHLFVBL0U1RSxNQUNKLElBQUssT0EyWWIsV0FDSSxHQUFNLGFBQWM2RixHQUFwQixDQU1BLElBQUk4a0UsRUFBb0JELEdBQWdCaHJFLEtBQUssS0FBTSxPQUMvQ2tyRSxFQUF3QkMsR0FBb0JGLEdBQW1CLEdBQ25FOWtFLEdBQU95RCxTQUFTc1YsaUJBQWlCLFFBQVNnc0QsR0FBdUIsR0FDakUva0UsR0FBT3lELFNBQVNzVixpQkFBaUIsV0FBWWdzRCxHQUF1QixHQU1wRSxDQUFDLGNBQWUsUUFBUXZyRSxTQUFRLFNBQVUrTSxHQUV0QyxJQUFJeW9ELEVBQVFodkQsR0FBT3VHLElBQVd2RyxHQUFPdUcsR0FBUXpOLFVBRXhDazJELEdBQVVBLEVBQU0zb0QsZ0JBQW1CMm9ELEVBQU0zb0QsZUFBZSx1QkFHN0QsU0FBSzJvRCxFQUFPLG9CQUFvQixTQUFVaVcsR0FDdEMsT0FBTyxTQUFVcmlFLEVBQU1rdEQsRUFBVTEzRCxHQUM3QixHQUFhLFVBQVR3SyxHQUE0QixZQUFSQSxFQUNwQixJQUNJLElBQ0lzaUUsRUFESzdzRSxLQUNZOHNFLG9DQURaOXNFLEtBQ3FEOHNFLHFDQUF1QyxHQUNqR0MsRUFBa0JGLEVBQVd0aUUsR0FBUXNpRSxFQUFXdGlFLElBQVMsQ0FBRXlpRSxTQUFVLEdBQ3pFLElBQUtELEVBQWVsakQsUUFBUyxDQUN6QixJQUFJQSxFQUFVOGlELEdBQW9CRixHQUNsQ00sRUFBZWxqRCxRQUFVQSxFQUN6QitpRCxFQUF5QmxxRSxLQUFLMUMsS0FBTXVLLEVBQU1zZixFQUFTOXBCLEdBRXZEZ3RFLEVBQWVDLFVBQVksRUFFL0IsTUFBT2hzRSxJQUtYLE9BQU80ckUsRUFBeUJscUUsS0FBSzFDLEtBQU11SyxFQUFNa3RELEVBQVUxM0QsUUFHbkUsU0FBSzQyRCxFQUFPLHVCQUF1QixTQUFVc1csR0FDekMsT0FBTyxTQUFVMWlFLEVBQU1rdEQsRUFBVTEzRCxHQUM3QixHQUFhLFVBQVR3SyxHQUE0QixZQUFSQSxFQUNwQixJQUNJLElBQ0kyaUUsRUFES2x0RSxLQUNXOHNFLHFDQUF1QyxHQUN2REMsRUFBaUJHLEVBQVczaUUsR0FDNUJ3aUUsSUFDQUEsRUFBZUMsVUFBWSxFQUV2QkQsRUFBZUMsVUFBWSxJQUMzQkMsRUFBNEJ2cUUsS0FBSzFDLEtBQU11SyxFQUFNd2lFLEVBQWVsakQsUUFBUzlwQixHQUNyRWd0RSxFQUFlbGpELGFBQVVuWSxTQUNsQnc3RCxFQUFXM2lFLElBR2lCLElBQW5DaEUsT0FBT3dFLEtBQUttaUUsR0FBWWpyRSxlQVp2QmpDLEtBYVM4c0UscUNBSXRCLE1BQU85ckUsSUFLWCxPQUFPaXNFLEVBQTRCdnFFLEtBQUsxQyxLQUFNdUssRUFBTWt0RCxFQUFVMTNELFlBamRsRW90RSxHQUNBLE1BQ0osSUFBSyxPQTRJYixXQUNJLEdBQU0sbUJBQW9CeGxFLEdBQTFCLENBSUEsSUFBSXlsRSxFQUFjLEdBQ2RDLEVBQWdCLEdBQ2hCQyxFQUFXQyxlQUFlOXNFLFdBQzlCLFNBQUs2c0UsRUFBVSxRQUFRLFNBQVVFLEdBQzdCLE9BQU8sV0FFSCxJQURBLElBQUkxckUsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQUd6QixJQUFJMHJFLEVBQU16dEUsS0FDTjJKLEVBQU03SCxFQUFLLEdBQ2YyckUsRUFBSUMsZUFBaUIsQ0FFakJ4cEQsUUFBUSxFQUFBcFcsR0FBQSxJQUFTaE0sRUFBSyxJQUFNQSxFQUFLLEdBQUcrWixjQUFnQi9aLEVBQUssR0FDekQ2SCxJQUFLN0gsRUFBSyxLQUlWLEVBQUFnTSxHQUFBLElBQVNuRSxJQUFzQyxTQUE5QjhqRSxFQUFJQyxlQUFleHBELFFBQXFCdmEsRUFBSUMsTUFBTSxnQkFDbkU2akUsRUFBSUUsd0JBQXlCLEdBRWpDLElBQUlDLEVBQTRCLFdBQzVCLEdBQXVCLElBQW5CSCxFQUFJSSxXQUFrQixDQUN0QixJQUdRSixFQUFJQyxpQkFDSkQsRUFBSUMsZUFBZUksWUFBY0wsRUFBSXpILFFBRzdDLE1BQU9obEUsSUFHUCxJQUNJLElBQUkrc0UsRUFBYVgsRUFBWW44RCxRQUFRdzhELEdBQ3JDLElBQW9CLElBQWhCTSxFQUFtQixDQUVuQlgsRUFBWW5nRSxPQUFPOGdFLEdBQ25CLElBQUlDLEVBQVNYLEVBQWNwZ0UsT0FBTzhnRSxHQUFZLEdBQzFDTixFQUFJQyxxQkFBZ0NoOEQsSUFBZHM4RCxFQUFPLEtBQzdCUCxFQUFJQyxlQUFlN3VCLEtBQU9tdkIsRUFBTyxLQUk3QyxNQUFPaHRFLElBR1B3ckUsR0FBZ0IsTUFBTyxDQUNuQjFxRSxLQUFNQSxFQUNObXNFLGFBQWNsaUUsS0FBS04sTUFDbkJ5aUUsZUFBZ0JuaUUsS0FBS04sTUFDckJnaUUsSUFBS0EsTUFtQmpCLE1BZkksdUJBQXdCQSxHQUF5QyxtQkFBM0JBLEVBQUlVLG9CQUMxQyxTQUFLVixFQUFLLHNCQUFzQixTQUFVcGdFLEdBQ3RDLE9BQU8sV0FFSCxJQURBLElBQUkrZ0UsRUFBaUIsR0FDWnJzRSxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDcXNFLEVBQWVyc0UsR0FBTUMsVUFBVUQsR0FHbkMsT0FEQTZyRSxJQUNPdmdFLEVBQVMxSyxNQUFNOHFFLEVBQUtXLE9BS25DWCxFQUFJL3NELGlCQUFpQixtQkFBb0JrdEQsR0FFdENKLEVBQWE3cUUsTUFBTThxRSxFQUFLM3JFLFFBR3ZDLFNBQUt3ckUsRUFBVSxRQUFRLFNBQVVlLEdBQzdCLE9BQU8sV0FFSCxJQURBLElBQUl2c0UsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQVN6QixPQVBBcXJFLEVBQVk3bkUsS0FBS3ZGLE1BQ2pCcXRFLEVBQWM5bkUsS0FBS3pELEdBQ25CMHFFLEdBQWdCLE1BQU8sQ0FDbkIxcUUsS0FBTUEsRUFDTm9zRSxlQUFnQm5pRSxLQUFLTixNQUNyQmdpRSxJQUFLenRFLE9BRUZxdUUsRUFBYTFyRSxNQUFNM0MsS0FBTThCLFFBdk9oQ3dzRSxHQUNBLE1BQ0osSUFBSyxTRCtDTixXQUNILElBQUszQyxLQUNELE9BQU8sRUFFWCxJQUFJaGtFLEdBQVMsV0FHYixHQUFJb2tFLEdBQWNwa0UsRUFBTzA0RCxPQUNyQixPQUFPLEVBSVgsSUFBSW45RCxHQUFTLEVBQ1RxckUsRUFBTTVtRSxFQUFPeUQsU0FFakIsR0FBSW1qRSxHQUFvQyxtQkFBdEJBLEVBQUk1NEQsY0FDbEIsSUFDSSxJQUFJNjRELEVBQVVELEVBQUk1NEQsY0FBYyxVQUNoQzY0RCxFQUFRQyxRQUFTLEVBQ2pCRixFQUFJNzVELEtBQUtzQixZQUFZdzRELEdBQ2pCQSxFQUFRRSxlQUFpQkYsRUFBUUUsY0FBY3JPLFFBRS9DbjlELEVBQVM2b0UsR0FBY3lDLEVBQVFFLGNBQWNyTyxRQUVqRGtPLEVBQUk3NUQsS0FBS2tDLFlBQVk0M0QsR0FFekIsTUFBT3ZyRSxHQUNILFVBQVksa0ZBQW1GQSxHQUd2RyxPQUFPQyxHQ0dGeXJFLEtBR0wsU0FBS2huRSxHQUFRLFNBQVMsU0FBVWluRSxHQUM1QixPQUFPLFdBRUgsSUFEQSxJQUFJOXNFLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FFekIsSUFBSThzRSxFQUFjLENBQ2Qvc0UsS0FBTUEsRUFDTmd0RSxVQUFXLENBQ1A1cUQsT0FBUTZxRCxHQUFlanRFLEdBQ3ZCNkgsSUFBS3FsRSxHQUFZbHRFLElBRXJCb3NFLGVBQWdCbmlFLEtBQUtOLE9BSXpCLE9BRkErZ0UsR0FBZ0IsU0FBUyxTQUFTLEdBQUlxQyxJQUUvQkQsRUFBY2pzRSxNQUFNZ0YsR0FBUTdGLEdBQU1jLE1BQUssU0FBVXc5RCxHQUVwRCxPQURBb00sR0FBZ0IsU0FBUyxVQUFTLFNBQVMsR0FBSXFDLEdBQWMsQ0FBRVosYUFBY2xpRSxLQUFLTixNQUFPMjBELFNBQVVBLEtBQzVGQSxLQUNSLFNBQVVoNEQsR0FLVCxNQUpBb2tFLEdBQWdCLFNBQVMsVUFBUyxTQUFTLEdBQUlxQyxHQUFjLENBQUVaLGFBQWNsaUUsS0FBS04sTUFBT3JELE1BQU9BLEtBSTFGQSxTQXpHVixNQUNKLElBQUssV0F3T2IsV0FDSSxHRHRIRyxXQUlILElBQUlULEdBQVMsV0FHVHNuRSxFQUFTdG5FLEVBQU9zbkUsT0FDaEJDLEVBQXNCRCxHQUFVQSxFQUFPRSxLQUFPRixFQUFPRSxJQUFJQyxRQUV6REMsRUFBZ0IsWUFBYTFuRSxLQUFZQSxFQUFPMm5FLFFBQVFDLGFBQWU1bkUsRUFBTzJuRSxRQUFRRSxhQUMxRixPQUFRTixHQUF1QkcsRUMyRzFCSSxHQUFMLENBR0EsSUFBSUMsRUFBZ0IvbkUsR0FBT2dvRSxXQUMzQmhvRSxHQUFPZ29FLFdBQWEsV0FFaEIsSUFEQSxJQUFJN3RFLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FFekIsSUFBSTJhLEVBQUsvVSxHQUFPMEQsU0FBU0MsS0FFckJtSSxFQUFPeTRELEdBTVgsR0FMQUEsR0FBV3h2RCxFQUNYOHZELEdBQWdCLFVBQVcsQ0FDdkIvNEQsS0FBTUEsRUFDTmlKLEdBQUlBLElBRUpnekQsRUFDQSxPQUFPQSxFQUFjL3NFLE1BQU0zQyxLQUFNOEIsS0F5QnpDLFNBQUs2RixHQUFPMm5FLFFBQVMsWUFBYU0sSUFDbEMsU0FBS2pvRSxHQUFPMm5FLFFBQVMsZUFBZ0JNLEdBdEJyQyxTQUFTQSxFQUEyQkMsR0FDaEMsT0FBTyxXQUVILElBREEsSUFBSS90RSxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCLElBQUk0SCxFQUFNN0gsRUFBS0csT0FBUyxFQUFJSCxFQUFLLFFBQUs0UCxFQUN0QyxHQUFJL0gsRUFBSyxDQUVMLElBQUk4SixFQUFPeTRELEdBQ1B4dkQsRUFBSzNOLE9BQU9wRixHQUVoQnVpRSxHQUFXeHZELEVBQ1g4dkQsR0FBZ0IsVUFBVyxDQUN2Qi80RCxLQUFNQSxFQUNOaUosR0FBSUEsSUFHWixPQUFPbXpELEVBQXdCbHRFLE1BQU0zQyxLQUFNOEIsS0FoUjNDZ3VFLEdBQ0EsTUFDSixJQUFLLFFBOGNUQyxHQUFxQnBvRSxHQUFPcW9FLFFBQzVCcm9FLEdBQU9xb0UsUUFBVSxTQUFVdGxDLEVBQUsvZ0MsRUFBS3NtRSxFQUFNQyxFQUFROW5FLEdBUS9DLE9BUEFva0UsR0FBZ0IsUUFBUyxDQUNyQjBELE9BQVFBLEVBQ1I5bkUsTUFBT0EsRUFDUDZuRSxLQUFNQSxFQUNOdmxDLElBQUtBLEVBQ0wvZ0MsSUFBS0EsTUFFTG9tRSxJQUVPQSxHQUFtQnB0RSxNQUFNM0MsS0FBTWdDLFlBdmR0QyxNQUNKLElBQUsscUJBOGRUbXVFLEdBQWtDeG9FLEdBQU95b0UscUJBQ3pDem9FLEdBQU95b0UscUJBQXVCLFNBQVVwdkUsR0FFcEMsT0FEQXdyRSxHQUFnQixxQkFBc0J4ckUsSUFDbENtdkUsSUFFT0EsR0FBZ0N4dEUsTUFBTTNDLEtBQU1nQyxZQWplbkQsTUFDSixRQUNJLFVBQVksZ0NBQWlDdUksSUFjckQ4bEUsQ0FBV3htRCxFQUFRdGYsT0FHdkIsU0FBU2lpRSxHQUFnQmppRSxFQUFNcEgsR0FDM0IsSUFBSTJNLEVBQUtwTyxFQUNULEdBQUs2SSxHQUFTMnZCLEdBQVMzdkIsR0FHdkIsSUFDSSxJQUFLLElBQUk1SSxHQUFLLFNBQVN1NEIsR0FBUzN2QixJQUFTLElBQUszSSxFQUFLRCxFQUFHcU8sUUFBU3BPLEVBQUdxTyxLQUFNck8sRUFBS0QsRUFBR3FPLE9BQVEsQ0FDcEYsSUFBSTZaLEVBQVVqb0IsRUFBRzRJLE1BQ2pCLElBQ0lxZixFQUFRMW1CLEdBRVosTUFBT25DLEdBQ0gsV0FBYSwwREFBNER1SixFQUFPLFlBQWEsUUFBZ0JzZixHQUFXLFlBQWM3b0IsS0FJbEosTUFBT2tQLEdBQVNKLEVBQU0sQ0FBRTFILE1BQU84SCxHQUMvQixRQUNJLElBQ1F0TyxJQUFPQSxFQUFHcU8sT0FBU3ZPLEVBQUtDLEVBQUd3TyxTQUFTek8sRUFBR2dCLEtBQUtmLEdBRXBELFFBQVUsR0FBSW1PLEVBQUssTUFBTUEsRUFBSTFILFFBK0RyQyxTQUFTMm1FLEdBQWV1QixHQUVwQixZQURrQixJQUFkQSxJQUF3QkEsRUFBWSxJQUNwQyxZQUFhM29FLEtBQVUsRUFBQW1HLEdBQUEsSUFBYXdpRSxFQUFVLEdBQUl6RSxVQUFZeUUsRUFBVSxHQUFHcHNELE9BQ3BFblYsT0FBT3VoRSxFQUFVLEdBQUdwc0QsUUFBUXJJLGNBRW5DeTBELEVBQVUsSUFBTUEsRUFBVSxHQUFHcHNELE9BQ3RCblYsT0FBT3VoRSxFQUFVLEdBQUdwc0QsUUFBUXJJLGNBRWhDLE1BR1gsU0FBU216RCxHQUFZc0IsR0FFakIsWUFEa0IsSUFBZEEsSUFBd0JBLEVBQVksSUFDWixpQkFBakJBLEVBQVUsR0FDVkEsRUFBVSxHQUVqQixZQUFhM29FLEtBQVUsRUFBQW1HLEdBQUEsSUFBYXdpRSxFQUFVLEdBQUl6RSxTQUMzQ3lFLEVBQVUsR0FBRzNtRSxJQUVqQm9GLE9BQU91aEUsRUFBVSxJQXVONUIsU0FBUzNELEdBQW9COWlELEVBQVMwbUQsR0FFbEMsWUFEdUIsSUFBbkJBLElBQTZCQSxHQUFpQixHQUMzQyxTQUFVbm1FLEdBSWIsR0FBS0EsR0FBU2dpRSxLQUFzQmhpRSxJQW5DNUMsU0FBNEJBLEdBRXhCLEdBQW1CLGFBQWZBLEVBQU1HLEtBQ04sT0FBTyxFQUVYLElBQ0ksSUFBSTJELEVBQVM5RCxFQUFNOEQsT0FDbkIsSUFBS0EsSUFBV0EsRUFBT2xJLFFBQ25CLE9BQU8sRUFJWCxHQUF1QixVQUFuQmtJLEVBQU9sSSxTQUEwQyxhQUFuQmtJLEVBQU9sSSxTQUEwQmtJLEVBQU9zaUUsa0JBQ3RFLE9BQU8sRUFHZixNQUFPeHZFLElBSVAsT0FBTyxFQW1CQ3l2RSxDQUFtQnJtRSxHQUF2QixDQUdBLElBQUluSyxFQUFzQixhQUFmbUssRUFBTUcsS0FBc0IsUUFBVUgsRUFBTUcsV0FFL0JtSCxJQUFwQnk2RCxJQXpFWixTQUE0Q3VFLEVBQVU3eEMsR0FFbEQsSUFBSzZ4QyxFQUNELE9BQU8sRUFHWCxHQUFJQSxFQUFTbm1FLE9BQVNzMEIsRUFBUXQwQixLQUMxQixPQUFPLEVBRVgsSUFHSSxHQUFJbW1FLEVBQVN4aUUsU0FBVzJ3QixFQUFRM3dCLE9BQzVCLE9BQU8sRUFHZixNQUFPbE4sSUFPUCxPQUFPLEVBNERNMnZFLENBQW1DdkUsR0FBbUJoaUUsTUFUM0R5ZixFQUFRLENBQ0p6ZixNQUFPQSxFQUNQbkssS0FBTUEsRUFDTjBILE9BQVE0b0UsSUFFWm5FLEdBQW9CaGlFLEdBYXhCaXRCLGFBQWE4MEMsSUFDYkEsR0FBa0J4a0UsR0FBTzZpQixZQUFXLFdBQ2hDMmhELFFBQWtCejZELElBdEdQLE9BdUx2QixJQUFJcStELEdBQXFCLEtBbUJyQkksR0FBa0MsS0N4Z0IzQmo0RCxHQUFpQjNSLE9BQU8yUixpQkFBbUIsQ0FBRUMsVUFBVyxjQUFnQi9YLE1BS25GLFNBQW9Cd00sRUFBSytwRCxHQUdyQixPQURBL3BELEVBQUl1TCxVQUFZdytDLEVBQ1QvcEQsR0FNWCxTQUF5QkEsRUFBSytwRCxHQUMxQixJQUFLLElBQUl2OEMsS0FBUXU4QyxFQUVSL3BELEVBQUlvQixlQUFlb00sS0FFcEJ4TixFQUFJd04sR0FBUXU4QyxFQUFNdjhDLElBRzFCLE9BQU94TixJQ25CUGdrRSxHQUE2QixTQUFVQyxHQUV2QyxTQUFTRCxFQUFZdm1FLEdBQ2pCLElBQUl5bUUsRUFBYTl3RSxLQUFLd1QsWUFDbEJ0UyxFQUFRMnZFLEVBQU9udUUsS0FBSzFDLEtBQU1xSyxJQUFZckssS0FJMUMsT0FIQWtCLEVBQU1tSixRQUFVQSxFQUNoQm5KLEVBQU1qQixLQUFPNndFLEVBQVdyd0UsVUFBVStTLFlBQVl2VCxLQUM5Q2lZLEdBQWVoWCxFQUFPNHZFLEVBQVdyd0UsV0FDMUJTLEVBRVgsT0FUQSxTQUFVMHZFLEVBQWFDLEdBU2hCRCxFQVZxQixDQVc5QmxxRSxPQ1hFcXFFLEdBQVksaUVBSVpDLEdBQXFCLFdBRXJCLFNBQVNBLEVBQUl2OUQsR0FDVyxpQkFBVEEsRUFDUHpULEtBQUtpeEUsWUFBWXg5RCxHQUdqQnpULEtBQUtreEUsZ0JBQWdCejlELEdBRXpCelQsS0FBS214RSxZQXdFVCxPQTdEQUgsRUFBSXZ3RSxVQUFVK0YsU0FBVyxTQUFVNHFFLFFBQ1YsSUFBakJBLElBQTJCQSxHQUFlLEdBQzlDLElBQUkxdkUsRUFBSzFCLEtBQU0rSixFQUFPckksRUFBR3FJLEtBQU1DLEVBQU90SSxFQUFHc0ksS0FBTXFuRSxFQUFPM3ZFLEVBQUcydkUsS0FBTUMsRUFBTzV2RSxFQUFHNHZFLEtBQU1DLEVBQVk3dkUsRUFBRzZ2RSxVQUM5RixPQURvSDd2RSxFQUFHdUksU0FDcEcsTUFEMEh2SSxFQUFHOHZFLFdBQ3hHSixHQUFnQkMsRUFBTyxJQUFNQSxFQUFPLElBQ3ZFLElBQU10bkUsR0FBUXVuRSxFQUFPLElBQU1BLEVBQU8sSUFBTSxLQUFPdG5FLEVBQU9BLEVBQU8sSUFBTUEsR0FBUXVuRSxHQUdwRlAsRUFBSXZ3RSxVQUFVd3dFLFlBQWMsU0FBVXpnRSxHQUNsQyxJQUFJNUcsRUFBUW1uRSxHQUFVdmYsS0FBS2hoRCxHQUMzQixJQUFLNUcsRUFDRCxNQUFNLElBQUlnbkUsR0FoQ0YsZUFrQ1osSUFBSWx2RSxHQUFLLFNBQU9rSSxFQUFNNUcsTUFBTSxHQUFJLEdBQUlpSCxFQUFXdkksRUFBRyxHQUFJOHZFLEVBQVk5dkUsRUFBRyxHQUFJQyxFQUFLRCxFQUFHLEdBQUkydkUsT0FBYyxJQUFQMXZFLEVBQWdCLEdBQUtBLEVBQUlvSSxFQUFPckksRUFBRyxHQUFJRSxFQUFLRixFQUFHLEdBQUk0dkUsT0FBYyxJQUFQMXZFLEVBQWdCLEdBQUtBLEVBQ3ZLb0ksRUFBTyxHQUNQdW5FLEVBRnNMN3ZFLEVBQUcsR0FHekx3RSxFQUFRcXJFLEVBQVVyckUsTUFBTSxLQUs1QixHQUpJQSxFQUFNakUsT0FBUyxJQUNmK0gsRUFBTzlELEVBQU1sRCxNQUFNLEdBQUksR0FBRzBDLEtBQUssS0FDL0I2ckUsRUFBWXJyRSxFQUFNaWMsT0FFbEJvdkQsRUFBVyxDQUNYLElBQUlFLEVBQWVGLEVBQVUzbkUsTUFBTSxRQUMvQjZuRSxJQUNBRixFQUFZRSxFQUFhLElBR2pDenhFLEtBQUtreEUsZ0JBQWdCLENBQUVubkUsS0FBTUEsRUFBTXNuRSxLQUFNQSxFQUFNcm5FLEtBQU1BLEVBQU11bkUsVUFBV0EsRUFBV0QsS0FBTUEsRUFBTXJuRSxTQUFVQSxFQUFVdW5FLFVBQVdBLEtBR2hJUixFQUFJdndFLFVBQVV5d0UsZ0JBQWtCLFNBQVU5eUMsR0FFbEMsU0FBVUEsS0FBZ0IsY0FBZUEsS0FDekNBLEVBQVdvekMsVUFBWXB6QyxFQUFXdkMsTUFFdEM3N0IsS0FBSzY3QixLQUFPdUMsRUFBV296QyxXQUFhLEdBQ3BDeHhFLEtBQUtpSyxTQUFXbTBCLEVBQVduMEIsU0FDM0JqSyxLQUFLd3hFLFVBQVlwekMsRUFBV296QyxXQUFhLEdBQ3pDeHhFLEtBQUtxeEUsS0FBT2p6QyxFQUFXaXpDLE1BQVEsR0FDL0JyeEUsS0FBSytKLEtBQU9xMEIsRUFBV3IwQixLQUN2Qi9KLEtBQUtzeEUsS0FBT2x6QyxFQUFXa3pDLE1BQVEsR0FDL0J0eEUsS0FBS2dLLEtBQU9vMEIsRUFBV3AwQixNQUFRLEdBQy9CaEssS0FBS3V4RSxVQUFZbnpDLEVBQVdtekMsV0FHaENQLEVBQUl2d0UsVUFBVTB3RSxVQUFZLFdBQ3RCLElBQUlqd0UsRUFBUWxCLEtBTVosR0FMQSxDQUFDLFdBQVksWUFBYSxPQUFRLGFBQWFtQixTQUFRLFNBQVVzMkIsR0FDN0QsSUFBS3YyQixFQUFNdTJCLEdBQ1AsTUFBTSxJQUFJbTVDLEdBQVljLGdCQUF1Qmo2QyxFQUFZLGdCQUc1RHozQixLQUFLdXhFLFVBQVUzbkUsTUFBTSxTQUN0QixNQUFNLElBQUlnbkUsR0FBWWMsa0NBQXlDMXhFLEtBQUt1eEUsV0FFeEUsR0FBc0IsU0FBbEJ2eEUsS0FBS2lLLFVBQXlDLFVBQWxCakssS0FBS2lLLFNBQ2pDLE1BQU0sSUFBSTJtRSxHQUFZYyxpQ0FBd0MxeEUsS0FBS2lLLFVBRXZFLEdBQUlqSyxLQUFLc3hFLE1BQVF6bEUsTUFBTUQsU0FBUzVMLEtBQUtzeEUsS0FBTSxLQUN2QyxNQUFNLElBQUlWLEdBQVljLDZCQUFvQzF4RSxLQUFLc3hFLE9BR2hFTixFQWpGYSxHQ0piVyxHQUF3QixHQ21DbkMsSUNwQ1dDLEdEb0NQQyxHQUE0QixXQU81QixTQUFTQSxFQUFXQyxFQUFjL3hFLEdBRTlCQyxLQUFLK3hFLGNBQWdCLEdBRXJCL3hFLEtBQUtneUUsWUFBYyxFQUNuQmh5RSxLQUFLaXlFLFNBQVcsSUFBSUgsRUFBYS94RSxHQUNqQ0MsS0FBS3k4RCxTQUFXMThELEVBQ1pBLEVBQVFteUUsTUFDUmx5RSxLQUFLbXlFLEtBQU8sSUFBSW5CLEdBQUlqeEUsRUFBUW15RSxNQTJacEMsT0FwWkFMLEVBQVdweEUsVUFBVSttRSxpQkFBbUIsU0FBVWw5RCxFQUFXMjZELEVBQU05aUUsR0FDL0QsSUFBSWpCLEVBQVFsQixLQUNSeW5FLEVBQVV4QyxHQUFRQSxFQUFLeDZELFNBTzNCLE9BTkF6SyxLQUFLb3lFLFNBQVNweUUsS0FBS3F5RSxjQUNkQyxtQkFBbUJob0UsRUFBVzI2RCxHQUM5QnJpRSxNQUFLLFNBQVV3SCxHQUFTLE9BQU9sSixFQUFNcXhFLGNBQWNub0UsRUFBTzY2RCxFQUFNOWlFLE1BQ2hFUyxNQUFLLFNBQVVNLEdBQ2hCdWtFLEVBQVV2a0UsTUFFUHVrRSxHQUtYb0ssRUFBV3B4RSxVQUFVc25FLGVBQWlCLFNBQVUxOUQsRUFBU1EsRUFBT282RCxFQUFNOWlFLEdBQ2xFLElBQUlqQixFQUFRbEIsS0FDUnluRSxFQUFVeEMsR0FBUUEsRUFBS3g2RCxTQUN2QituRSxHQUFnQixFQUFBMWtFLEdBQUEsSUFBWXpELEdBQzFCckssS0FBS3F5RSxjQUFjSSxpQkFBaUIxakUsT0FBTzFFLEdBQVVRLEVBQU9vNkQsR0FDNURqbEUsS0FBS3F5RSxjQUFjQyxtQkFBbUJqb0UsRUFBUzQ2RCxHQU1yRCxPQUxBamxFLEtBQUtveUUsU0FBU0ksRUFDVDV2RSxNQUFLLFNBQVV3SCxHQUFTLE9BQU9sSixFQUFNcXhFLGNBQWNub0UsRUFBTzY2RCxFQUFNOWlFLE1BQ2hFUyxNQUFLLFNBQVVNLEdBQ2hCdWtFLEVBQVV2a0UsTUFFUHVrRSxHQUtYb0ssRUFBV3B4RSxVQUFVdW5FLGFBQWUsU0FBVTU5RCxFQUFPNjZELEVBQU05aUUsR0FDdkQsSUFBSXNsRSxFQUFVeEMsR0FBUUEsRUFBS3g2RCxTQUkzQixPQUhBekssS0FBS295RSxTQUFTcHlFLEtBQUt1eUUsY0FBY25vRSxFQUFPNjZELEVBQU05aUUsR0FBT1MsTUFBSyxTQUFVTSxHQUNoRXVrRSxFQUFVdmtFLE1BRVB1a0UsR0FLWG9LLEVBQVdweEUsVUFBVXNvRSxlQUFpQixTQUFVMUUsR0FDdkNBLEVBQVFrQyxTQUlUdm1FLEtBQUsweUUsYUFBYXJPLEdBRWxCQSxFQUFRbHRELE9BQU8sQ0FBRXljLE1BQU0sS0FMdkIsVUFBWSxpREFXcEJpK0MsRUFBV3B4RSxVQUFVa3lFLE9BQVMsV0FDMUIsT0FBTzN5RSxLQUFLbXlFLE1BS2hCTixFQUFXcHhFLFVBQVV5bkUsV0FBYSxXQUM5QixPQUFPbG9FLEtBQUt5OEQsVUFLaEJvVixFQUFXcHhFLFVBQVVteUUsTUFBUSxTQUFVajdDLEdBQ25DLElBQUl6MkIsRUFBUWxCLEtBQ1osT0FBT0EsS0FBSzZ5RSxvQkFBb0JsN0MsR0FBUy8wQixNQUFLLFNBQVVrd0UsR0FDcEQsT0FBTzV4RSxFQUFNbXhFLGNBQ1JVLGVBQ0FuekIsTUFBTWpvQixHQUNOLzBCLE1BQUssU0FBVW93RSxHQUFvQixPQUFPRixHQUFTRSxTQU1oRW5CLEVBQVdweEUsVUFBVW0vQyxNQUFRLFNBQVVqb0IsR0FDbkMsSUFBSXoyQixFQUFRbEIsS0FDWixPQUFPQSxLQUFLNHlFLE1BQU1qN0MsR0FBUy8wQixNQUFLLFNBQVVNLEdBRXRDLE9BREFoQyxFQUFNZ25FLGFBQWErSyxTQUFVLEVBQ3RCL3ZFLE1BTWYydUUsRUFBV3B4RSxVQUFVeW1FLGtCQUFvQixXQUNqQ2xuRSxLQUFLa3pFLGVBQ0xsekUsS0FBSyt4RSxjRDNGVixTQUEyQmh5RSxHQUM5QixJQUFJb3pFLEVBQWUsR0FLbkIsT0EzREcsU0FBZ0NwekUsR0FDbkMsSUFBSXF6RSxFQUF1QnJ6RSxFQUFRcXpFLHNCQUF1QixTQUFTcnpFLEVBQVFxekUsc0JBQXlCLEdBQ2hHQyxFQUFtQnR6RSxFQUFRb3pFLGFBQzNCQSxFQUFlLEdBQ25CLEdBQUkveUUsTUFBTUMsUUFBUWd6RSxHQUFtQixDQUNqQyxJQUFJQyxFQUEwQkQsRUFBaUJ4dkUsS0FBSSxTQUFVRSxHQUFLLE9BQU9BLEVBQUU5RCxRQUN2RXN6RSxFQUE0QixHQUVoQ0gsRUFBb0JqeUUsU0FBUSxTQUFVcXlFLElBQ2dDLElBQTlERixFQUF3QnJpRSxRQUFRdWlFLEVBQW1CdnpFLFFBQ2EsSUFBaEVzekUsRUFBMEJ0aUUsUUFBUXVpRSxFQUFtQnZ6RSxRQUNyRGt6RSxFQUFhNXRFLEtBQUtpdUUsR0FDbEJELEVBQTBCaHVFLEtBQUtpdUUsRUFBbUJ2ekUsVUFJMURvekUsRUFBaUJseUUsU0FBUSxTQUFVc3lFLElBQ2tDLElBQTdERixFQUEwQnRpRSxRQUFRd2lFLEVBQWdCeHpFLFFBQ2xEa3pFLEVBQWE1dEUsS0FBS2t1RSxHQUNsQkYsRUFBMEJodUUsS0FBS2t1RSxFQUFnQnh6RSxjQUl0QixtQkFBckJvekUsR0FDWkYsRUFBZUUsRUFBaUJELEdBQ2hDRCxFQUFlL3lFLE1BQU1DLFFBQVE4eUUsR0FBZ0JBLEVBQWUsQ0FBQ0EsSUFHN0RBLEdBQWUsU0FBU0MsR0FHNUIsSUFBSU0sRUFBb0JQLEVBQWF0dkUsS0FBSSxTQUFVRSxHQUFLLE9BQU9BLEVBQUU5RCxRQUM3RDB6RSxFQUFrQixRQUl0QixPQUhvRCxJQUFoREQsRUFBa0J6aUUsUUFBUTBpRSxJQUMxQlIsRUFBYTV0RSxLQUFLNUMsTUFBTXd3RSxHQUFjLFNBQVNBLEVBQWFsbUUsT0FBT3ltRSxFQUFrQnppRSxRQUFRMGlFLEdBQWtCLEtBRTVHUixFQW1CUFMsQ0FBdUI3ekUsR0FBU29CLFNBQVEsU0FBVXNuRSxHQUM5QzBLLEVBQWExSyxFQUFZeG9FLE1BQVF3b0UsRUFqQmxDLFNBQTBCQSxJQUM0QixJQUFyRGtKLEdBQXNCMWdFLFFBQVF3M0QsRUFBWXhvRSxRQUc5Q3dvRSxFQUFZL25FLFVBQVVrbEUsR0FBeUIsSUFDL0MrTCxHQUFzQnBzRSxLQUFLa2pFLEVBQVl4b0UsTUFDdkMsS0FBQWdJLElBQVcsMEJBQTRCd2dFLEVBQVl4b0UsT0FZL0M0ekUsQ0FBaUJwTCxNQUVkMEssRUNxRnNCak0sQ0FBa0JsbkUsS0FBS3k4RCxZQU1wRG9WLEVBQVdweEUsVUFBVStuRSxlQUFpQixTQUFVQyxHQUM1QyxJQUNJLE9BQU96b0UsS0FBSyt4RSxjQUFjdEosRUFBWXZvRSxLQUFPLEtBRWpELE1BQU9nRSxHQUVILE9BREEsVUFBWSwrQkFBaUN1a0UsRUFBWXZvRSxHQUFLLDRCQUN2RCxPQUlmMnhFLEVBQVdweEUsVUFBVXF6RSx3QkFBMEIsU0FBVXpQLEVBQVNqNkQsR0FDOUQsSUFBSTBGLEVBQUtwTyxFQUdMc2UsRUFGQSt6RCxHQUFVLEVBQ1ZDLEdBQVUsRUFFVkMsRUFBYTdwRSxFQUFNRSxXQUFhRixFQUFNRSxVQUFVakcsT0FDcEQsR0FBSTR2RSxFQUFZLENBQ1pELEdBQVUsRUFDVixJQUNJLElBQUssSUFBSUUsR0FBZSxTQUFTRCxHQUFhRSxFQUFpQkQsRUFBYWxrRSxRQUFTbWtFLEVBQWVsa0UsS0FBTWtrRSxFQUFpQkQsRUFBYWxrRSxPQUFRLENBQzVJLElBQ0k5RSxFQURLaXBFLEVBQWUzcEUsTUFDTFUsVUFDbkIsR0FBSUEsSUFBbUMsSUFBdEJBLEVBQVVrcEUsUUFBbUIsQ0FDMUNMLEdBQVUsRUFDVixRQUlaLE1BQU83akUsR0FBU0osRUFBTSxDQUFFMUgsTUFBTzhILEdBQy9CLFFBQ0ksSUFDUWlrRSxJQUFtQkEsRUFBZWxrRSxPQUFTdk8sRUFBS3d5RSxFQUFhL2pFLFNBQVN6TyxFQUFHZ0IsS0FBS3d4RSxHQUV0RixRQUFVLEdBQUlwa0UsRUFBSyxNQUFNQSxFQUFJMUgsUUFHckMsSUFBSXl6QixFQUFPenhCLEVBQU15eEIsS0FDakIsSUFBS3dvQyxFQUFRcmtELFVBQVcsQ0FDcEIsSUFBSSsvQyxFQUFVMzFELEVBQU1pQyxRQUFVakMsRUFBTWlDLFFBQVEwekQsUUFBVSxHQUN0RCxJQUFLLElBQUlqNkQsS0FBT2k2RCxFQUNaLEdBQTBCLGVBQXRCajZELEVBQUlHLGNBQWdDLENBQ3BDK1osRUFBWSsvQyxFQUFRajZELEdBQ3BCLE9BSVp1K0QsRUFBUWx0RCxRQUFPLFVBQVMsU0FBUyxHQUFLNDhELEdBQVcsQ0FBRS9OLE9BQVF0RixHQUFjMlQsVUFBYSxDQUFFeDRDLEtBQU1BLEVBQzFGN2IsVUFBV0EsRUFBVzZ0QyxPQUFRd1csRUFBUXhXLE9BQVMzckIsT0FBTzh4QyxHQUFXRCxNQUNyRS96RSxLQUFLK29FLGVBQWUxRSxJQUd4QndOLEVBQVdweEUsVUFBVWl5RSxhQUFlLFNBQVVyTyxHQUMxQ3JrRSxLQUFLcXlFLGNBQWNpQyxZQUFZalEsSUFHbkN3TixFQUFXcHhFLFVBQVVveUUsb0JBQXNCLFNBQVVsN0MsR0FDakQsSUFBSXoyQixFQUFRbEIsS0FDWixPQUFPLElBQUksSUFBWSxTQUFVdXFCLEdBQzdCLElBQUlncUQsRUFBUyxFQUVUQyxFQUFXQyxhQUFZLFdBQ0UsR0FBckJ2ekUsRUFBTTh3RSxhQUNOMEMsY0FBY0YsR0FDZGpxRCxHQUFRLEtBR1JncUQsR0FQRyxFQVFDNThDLEdBQVc0OEMsR0FBVTU4QyxJQUNyQis4QyxjQUFjRixHQUNkanFELEdBQVEsT0FWVCxPQWlCbkJzbkQsRUFBV3B4RSxVQUFVNHhFLFlBQWMsV0FDL0IsT0FBT3J5RSxLQUFLaXlFLFVBR2hCSixFQUFXcHhFLFVBQVV5eUUsV0FBYSxXQUM5QixPQUFxQyxJQUE5Qmx6RSxLQUFLa29FLGFBQWErSyxjQUFtQ3ZoRSxJQUFkMVIsS0FBS215RSxNQWdCdkROLEVBQVdweEUsVUFBVWswRSxjQUFnQixTQUFVdnFFLEVBQU9qSSxFQUFPOGlFLEdBQ3pELElBQUkvakUsRUFBUWxCLEtBQ1IwQixFQUFLMUIsS0FBS2tvRSxhQUFhME0sZUFBZ0JBLE9BQXdCLElBQVBsekUsRUFBZ0IsRUFBSUEsRUFDNUVrNkQsR0FBVyxVQUFTLFNBQVMsR0FBSXh4RCxHQUFRLENBQUVLLFNBQVVMLEVBQU1LLFdBQWF3NkQsR0FBUUEsRUFBS3g2RCxTQUFXdzZELEVBQUt4NkQsVUFBVyxZQUFVcTZELFVBQVcxNkQsRUFBTTA2RCxZQUFhLGFBQzVKOWtFLEtBQUs2MEUsb0JBQW9CalosR0FDekI1N0QsS0FBSzgwRSwyQkFBMkJsWixHQUdoQyxJQUFJbVosRUFBYTV5RSxFQUNiOGlFLEdBQVFBLEVBQUtWLGlCQUNid1EsRUFBYWpULEdBQU1ydUMsTUFBTXNoRCxHQUFZNTlELE9BQU84dEQsRUFBS1YsaUJBR3JELElBQUlyaEUsRUFBUyxXQUFvQjA0RCxHQU9qQyxPQUpJbVosSUFFQTd4RSxFQUFTNnhFLEVBQVcvUCxhQUFhcEosRUFBVXFKLElBRXhDL2hFLEVBQU9OLE1BQUssU0FBVW95RSxHQUN6QixNQUE4QixpQkFBbkJKLEdBQStCQSxFQUFpQixFQUNoRDF6RSxFQUFNK3pFLGdCQUFnQkQsRUFBS0osR0FFL0JJLE1BYWZuRCxFQUFXcHhFLFVBQVV3MEUsZ0JBQWtCLFNBQVU3cUUsRUFBT21FLEdBQ3BELElBQUtuRSxFQUNELE9BQU8sS0FFWCxJQUFJOEUsR0FBYSxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVMsR0FBSTlFLEdBQVNBLEVBQU1pN0QsYUFBZSxDQUM1RkEsWUFBYWo3RCxFQUFNaTdELFlBQVl4aEUsS0FBSSxTQUFVb1UsR0FBSyxPQUFRLFVBQVMsU0FBUyxHQUFJQSxHQUFLQSxFQUFFOVUsTUFBUSxDQUMzRkEsTUFBTSxTQUFVOFUsRUFBRTlVLEtBQU1vTCxVQUUxQm5FLEVBQU15eEIsTUFBUSxDQUNoQkEsTUFBTSxTQUFVenhCLEVBQU15eEIsS0FBTXR0QixLQUMxQm5FLEVBQU1xNkQsVUFBWSxDQUNwQkEsVUFBVSxTQUFVcjZELEVBQU1xNkQsU0FBVWwyRCxLQUNsQ25FLEVBQU1vNUQsT0FBUyxDQUNqQkEsT0FBTyxTQUFVcDVELEVBQU1vNUQsTUFBT2oxRCxLQWFsQyxPQUpJbkUsRUFBTXE2RCxVQUFZcjZELEVBQU1xNkQsU0FBU3RHLFFBRWpDanZELEVBQVd1MUQsU0FBU3RHLE1BQVEvekQsRUFBTXE2RCxTQUFTdEcsT0FFeENqdkQsR0FRWDJpRSxFQUFXcHhFLFVBQVVvMEUsb0JBQXNCLFNBQVV6cUUsR0FDakQsSUFBSXJLLEVBQVVDLEtBQUtrb0UsYUFDZjFCLEVBQWN6bUUsRUFBUXltRSxZQUFhRCxFQUFVeG1FLEVBQVF3bUUsUUFBUzJPLEVBQU9uMUUsRUFBUW0xRSxLQUFNeHpFLEVBQUszQixFQUFRbzFFLGVBQWdCQSxPQUF3QixJQUFQenpFLEVBQWdCLElBQU1BLEVBQ3JKLGdCQUFpQjBJLElBQ25CQSxFQUFNbzhELFlBQWMsZ0JBQWlCem1FLEVBQVV5bUUsRUFBYyxtQkFFM0M5MEQsSUFBbEJ0SCxFQUFNbThELGNBQXFDNzBELElBQVo2MEQsSUFDL0JuOEQsRUFBTW04RCxRQUFVQSxRQUVENzBELElBQWZ0SCxFQUFNOHFFLFdBQStCeGpFLElBQVR3akUsSUFDNUI5cUUsRUFBTThxRSxLQUFPQSxHQUViOXFFLEVBQU1DLFVBQ05ELEVBQU1DLFNBQVUsU0FBU0QsRUFBTUMsUUFBUzhxRSxJQUU1QyxJQUFJN3FFLEVBQVlGLEVBQU1FLFdBQWFGLEVBQU1FLFVBQVVqRyxRQUFVK0YsRUFBTUUsVUFBVWpHLE9BQU8sR0FDaEZpRyxHQUFhQSxFQUFVRSxRQUN2QkYsRUFBVUUsT0FBUSxTQUFTRixFQUFVRSxNQUFPMnFFLElBRWhELElBQUk5b0UsRUFBVWpDLEVBQU1pQyxRQUNoQkEsR0FBV0EsRUFBUTFDLE1BQ25CMEMsRUFBUTFDLEtBQU0sU0FBUzBDLEVBQVExQyxJQUFLd3JFLEtBTzVDdEQsRUFBV3B4RSxVQUFVcTBFLDJCQUE2QixTQUFVMXFFLEdBQ3hELElBQUlnckUsRUFBVWhyRSxFQUFNaXJFLElBQ2hCQyxFQUFvQi91RSxPQUFPd0UsS0FBSy9LLEtBQUsreEUsZUFDckNxRCxHQUFXRSxFQUFrQnJ6RSxPQUFTLElBQ3RDbXpFLEVBQVFqQyxhQUFlbUMsSUFPL0J6RCxFQUFXcHhFLFVBQVU4MEUsV0FBYSxTQUFVbnJFLEdBQ3hDcEssS0FBS3F5RSxjQUFjbUQsVUFBVXByRSxJQVFqQ3luRSxFQUFXcHhFLFVBQVU4eEUsY0FBZ0IsU0FBVW5vRSxFQUFPNjZELEVBQU05aUUsR0FDeEQsT0FBT25DLEtBQUt5MUUsY0FBY3JyRSxFQUFPNjZELEVBQU05aUUsR0FBT1MsTUFBSyxTQUFVOHlFLEdBQ3pELE9BQU9BLEVBQVdqckUsWUFDbkIsU0FBVStzQixHQUNULFdBQWFBLE9BaUJyQnE2QyxFQUFXcHhFLFVBQVVnMUUsY0FBZ0IsU0FBVXJyRSxFQUFPNjZELEVBQU05aUUsR0FDeEQsSUFBSWpCLEVBQVFsQixLQUVSMEIsRUFBSzFCLEtBQUtrb0UsYUFBY3lOLEVBQWFqMEUsRUFBR2kwRSxXQUFZQyxFQUFhbDBFLEVBQUdrMEUsV0FDeEUsSUFBSzUxRSxLQUFLa3pFLGFBQ04sT0FBTyxVQUFtQixJQUFJdEMsR0FBWSwwQ0FFOUMsSUFBSWlGLEVBQStCLGdCQUFmenJFLEVBQU1HLEtBSTFCLE9BQUtzckUsR0FBdUMsaUJBQWZELEdBQTJCcHNFLEtBQUtDLFNBQVdtc0UsRUFDN0QsVUFBbUIsSUFBSWhGLEdBQVksb0ZBQXNGZ0YsRUFBYSxNQUUxSTUxRSxLQUFLMjBFLGNBQWN2cUUsRUFBT2pJLEVBQU84aUUsR0FDbkNyaUUsTUFBSyxTQUFVZzVELEdBQ2hCLEdBQWlCLE9BQWJBLEVBQ0EsTUFBTSxJQUFJZ1YsR0FBWSwwREFHMUIsR0FEMEIzTCxHQUFRQSxFQUFLOWhFLE9BQWlDLElBQXpCOGhFLEVBQUs5aEUsS0FBSzJ5RSxZQUM5QkQsSUFBa0JGLEVBQ3pDLE9BQU8vWixFQUVYLElBQUltYSxFQUFtQkosRUFBVy9aLEVBQVVxSixHQUM1QyxRQUFnQyxJQUFyQjhRLEVBQ1AsTUFBTSxJQUFJbkYsR0FBWSw4REFFckIsT0FBSSxFQUFBOWlFLEdBQUEsSUFBV2lvRSxHQUNUQSxFQUFpQm56RSxNQUFLLFNBQVV3SCxHQUFTLE9BQU9BLEtBQVUsU0FBVXBKLEdBQ3ZFLE1BQU0sSUFBSTR2RSxHQUFZLDRCQUE4QjV2RSxNQUdyRCswRSxLQUVObnpFLE1BQUssU0FBVW96RSxHQUNoQixHQUF1QixPQUFuQkEsRUFDQSxNQUFNLElBQUlwRixHQUFZLHNEQUUxQixJQUFJdk0sRUFBVWxpRSxHQUFTQSxFQUFNbWlFLFlBQWNuaUUsRUFBTW1pRSxhQUtqRCxPQUpLdVIsR0FBaUJ4UixHQUNsQm5qRSxFQUFNNHlFLHdCQUF3QnpQLEVBQVMyUixHQUUzQzkwRSxFQUFNcTBFLFdBQVdTLEdBQ1ZBLEtBRU5wekUsS0FBSyxNQUFNLFNBQVU0MEIsR0FDdEIsR0FBSUEsYUFBa0JvNUMsR0FDbEIsTUFBTXA1QyxFQVFWLE1BTkF0MkIsRUFBTXNtRSxpQkFBaUJod0MsRUFBUSxDQUMzQnIwQixLQUFNLENBQ0YyeUUsWUFBWSxHQUVoQmpPLGtCQUFtQnJ3QyxJQUVqQixJQUFJbzVDLEdBQVksOEhBQWdJcDVDLE9BTTlKcTZDLEVBQVdweEUsVUFBVTJ4RSxTQUFXLFNBQVU2RCxHQUN0QyxJQUFJLzBFLEVBQVFsQixLQUNaQSxLQUFLZ3lFLGFBQWUsRUFDcEJpRSxFQUFRcnpFLE1BQUssU0FBVTRILEdBRW5CLE9BREF0SixFQUFNOHdFLGFBQWUsRUFDZHhuRSxLQUNSLFNBQVVndEIsR0FFVCxPQURBdDJCLEVBQU04d0UsYUFBZSxFQUNkeDZDLE1BR1JxNkMsRUExYW9CLElDbkMvQixTQUFXRCxHQUVQQSxFQUFnQixRQUFJLFVBRXBCQSxFQUFnQixRQUFJLFVBRXBCQSxFQUFnQixRQUFJLFVBRXBCQSxFQUFrQixVQUFJLGFBRXRCQSxFQUFnQixRQUFJLFVBRXBCQSxFQUFlLE9BQUksU0FadkIsQ0FhR0EsS0FBV0EsR0FBUyxLQUV2QixTQUFXQSxHQXNCUEEsRUFBT3NFLGFBZlAsU0FBc0JudkIsR0FDbEIsT0FBSUEsR0FBUSxLQUFPQSxFQUFPLElBQ2Y2cUIsRUFBT3VFLFFBRUwsTUFBVHB2QixFQUNPNnFCLEVBQU93RSxVQUVkcnZCLEdBQVEsS0FBT0EsRUFBTyxJQUNmNnFCLEVBQU95RSxRQUVkdHZCLEdBQVEsSUFDRDZxQixFQUFPMEUsT0FFWDFFLEVBQU8yRSxTQXBCdEIsQ0F1QkczRSxLQUFXQSxHQUFTLEtDdEN2QixJQ0RXNEUsR0RDUEMsR0FBK0IsV0FDL0IsU0FBU0EsS0FpQlQsT0FaQUEsRUFBY2gyRSxVQUFVKzBFLFVBQVksU0FBVTcwRSxHQUMxQyxPQUFPLFdBQW9CLENBQ3ZCNjJCLE9BQVEsc0VBQ1J3dUMsT0FBUTRMLEdBQU84RSxXQU12QkQsRUFBY2gyRSxVQUFVbS9DLE1BQVEsU0FBVWovQyxHQUN0QyxPQUFPLFlBQW9CLElBRXhCODFFLEVBbEJ1QixHRUc5QkUsR0FBNkIsV0FFN0IsU0FBU0EsRUFBWTUyRSxHQUNqQkMsS0FBS3k4RCxTQUFXMThELEVBQ1hDLEtBQUt5OEQsU0FBU3lWLEtBQ2YsVUFBWSxrREFFaEJseUUsS0FBSzQyRSxXQUFhNTJFLEtBQUs2MkUsa0JBK0MzQixPQXpDQUYsRUFBWWwyRSxVQUFVNnhFLG1CQUFxQixTQUFVd0UsRUFBWUMsR0FDN0QsTUFBTSxJQUFJbkcsR0FBWSx5REFLMUIrRixFQUFZbDJFLFVBQVVneUUsaUJBQW1CLFNBQVV1RSxFQUFVeFUsRUFBUXVVLEdBQ2pFLE1BQU0sSUFBSW5HLEdBQVksdURBSzFCK0YsRUFBWWwyRSxVQUFVKzBFLFVBQVksU0FBVXByRSxHQUN4Q3BLLEtBQUs0MkUsV0FBV3BCLFVBQVVwckUsR0FBT3hILEtBQUssTUFBTSxTQUFVNDBCLEdBQ2xELFdBQWEsOEJBQWdDQSxPQU1yRG0vQyxFQUFZbDJFLFVBQVU2ekUsWUFBYyxTQUFValEsR0FDckNya0UsS0FBSzQyRSxXQUFXdEMsWUFJckJ0MEUsS0FBSzQyRSxXQUFXdEMsWUFBWWpRLEdBQVN6aEUsS0FBSyxNQUFNLFNBQVU0MEIsR0FDdEQsV0FBYSxnQ0FBa0NBLE1BSi9DLFVBQVksNEVBVXBCbS9DLEVBQVlsMkUsVUFBVXN5RSxhQUFlLFdBQ2pDLE9BQU8veUUsS0FBSzQyRSxZQUtoQkQsRUFBWWwyRSxVQUFVbzJFLGdCQUFrQixXQUNwQyxPQUFPLElBQUlKLElBRVJFLEVBdERxQixJREhoQyxTQUFXSCxHQUVQQSxFQUFnQixNQUFJLFFBRXBCQSxFQUFnQixNQUFJLFFBRXBCQSxFQUFrQixRQUFJLFVBRXRCQSxFQUFjLElBQUksTUFFbEJBLEVBQWUsS0FBSSxPQUVuQkEsRUFBZ0IsTUFBSSxRQUVwQkEsRUFBbUIsU0FBSSxXQWQzQixDQWVHQSxLQUFhQSxHQUFXLEtBRTNCLFNBQVdBLEdBMkJQQSxFQUFTUyxXQXBCVCxTQUFvQnBzRSxHQUNoQixPQUFRQSxHQUNKLElBQUssUUFDRCxPQUFPMnJFLEVBQVNVLE1BQ3BCLElBQUssT0FDRCxPQUFPVixFQUFTVyxLQUNwQixJQUFLLE9BQ0wsSUFBSyxVQUNELE9BQU9YLEVBQVNZLFFBQ3BCLElBQUssUUFDRCxPQUFPWixFQUFTOXZFLE1BQ3BCLElBQUssUUFDRCxPQUFPOHZFLEVBQVNhLE1BQ3BCLElBQUssV0FDRCxPQUFPYixFQUFTYyxTQUNwQixJQUFLLE1BQ0wsUUFDSSxPQUFPZCxFQUFTZSxNQXhCaEMsQ0E0QkdmLEtBQWFBLEdBQVcsS0UxQzNCLElBQUlnQixHQUFtQixJQUVuQnZJLEdBQVMsNkpBSVR3SSxHQUFRLGtNQUNSQyxHQUFRLGdIQUNSQyxHQUFZLGdEQUNaQyxHQUFhLGdDQUViQyxHQUFzQiw4QkFHbkIsU0FBU0MsR0FBa0JDLEdBQzlCLElBQUlocUUsRUFBUSxLQUNSaXFFLEVBQVUsRUFDVkQsSUFDOEIsaUJBQW5CQSxFQUFHRSxZQUNWRCxFQUFVRCxFQUFHRSxZQUVSSixHQUFvQjdtRSxLQUFLK21FLEVBQUcxdEUsV0FDakMydEUsRUFBVSxJQUdsQixJQUtJLEdBREFqcUUsRUE0R1IsU0FBNkNncUUsR0FDekMsSUFBS0EsSUFBT0EsRUFBRzFNLFdBQ1gsT0FBTyxLQVdYLElBTkEsSUFLSTZNLEVBSkFDLEVBQWUsOERBQ2ZDLEVBQWUsc0dBQ2ZDLEVBSGFOLEVBQUcxTSxXQUdHbmxFLE1BQU0sTUFDekI2SCxFQUFRLEdBRUhraUUsRUFBTyxFQUFHQSxFQUFPb0ksRUFBTXAyRSxPQUFRZ3VFLEdBQVEsRUFBRyxDQUMvQyxJQUFJNXNCLEVBQVUsTUFDVDYwQixFQUFRQyxFQUFhM21CLEtBQUs2bUIsRUFBTXBJLEtBQ2pDNXNCLEVBQVUsQ0FDTjE1QyxJQUFLdXVFLEVBQU0sR0FDWHZlLEtBQU11ZSxFQUFNLEdBQ1pwMkUsS0FBTSxHQUNObXVFLE1BQU9pSSxFQUFNLEdBQ2JoSSxPQUFRLE9BR05nSSxFQUFRRSxFQUFhNW1CLEtBQUs2bUIsRUFBTXBJLE9BQ3RDNXNCLEVBQVUsQ0FDTjE1QyxJQUFLdXVFLEVBQU0sR0FDWHZlLEtBQU11ZSxFQUFNLElBQU1BLEVBQU0sR0FDeEJwMkUsS0FBTW8yRSxFQUFNLEdBQUtBLEVBQU0sR0FBR2h5RSxNQUFNLEtBQU8sR0FDdkMrcEUsTUFBT2lJLEVBQU0sR0FDYmhJLFFBQVNnSSxFQUFNLEtBR25CNzBCLEtBQ0tBLEVBQVFzVyxNQUFRdFcsRUFBUTRzQixPQUN6QjVzQixFQUFRc1csS0FBTzZkLElBRW5CenBFLEVBQU14SSxLQUFLODlDLElBR25CLE9BQUt0MUMsRUFBTTlMLE9BR0osQ0FDSG9JLFFBQVNpdUUsR0FBZVAsR0FDeEI5M0UsS0FBTTgzRSxFQUFHOTNFLEtBQ1Q4TixNQUFPQSxHQUxBLEtBckpDd3FFLENBQW9DUixHQUV4QyxPQUFPUyxHQUFVenFFLEVBQU9pcUUsR0FHaEMsTUFBT2gzRSxJQUdQLElBRUksR0FEQStNLEVBaUJSLFNBQXdDZ3FFLEdBQ3BDLElBQUtBLElBQU9BLEVBQUdocUUsTUFDWCxPQUFPLEtBUVgsSUFOQSxJQUdJMHFFLEVBQ0FQLEVBQ0E3MEIsRUFMQXQxQyxFQUFRLEdBQ1JzcUUsRUFBUU4sRUFBR2hxRSxNQUFNN0gsTUFBTSxNQUtsQm5DLEVBQUksRUFBR0EsRUFBSXMwRSxFQUFNcDJFLFNBQVU4QixFQUFHLENBQ25DLEdBQUttMEUsRUFBUWpKLEdBQU96ZCxLQUFLNm1CLEVBQU10MEUsSUFBTSxDQUNqQyxJQUFJZ2QsRUFBV20zRCxFQUFNLElBQXFDLElBQS9CQSxFQUFNLEdBQUdqbkUsUUFBUSxVQUNuQ2luRSxFQUFNLElBQW1DLElBQTdCQSxFQUFNLEdBQUdqbkUsUUFBUSxVQUN2QnduRSxFQUFXYixHQUFXcG1CLEtBQUswbUIsRUFBTSxPQUU1Q0EsRUFBTSxHQUFLTyxFQUFTLEdBQ3BCUCxFQUFNLEdBQUtPLEVBQVMsR0FDcEJQLEVBQU0sR0FBS08sRUFBUyxJQUV4QnAxQixFQUFVLENBR04xNUMsSUFBS3V1RSxFQUFNLElBQTBDLElBQXBDQSxFQUFNLEdBQUdqbkUsUUFBUSxlQUF1QmluRSxFQUFNLEdBQUd4bkUsT0FBTyxjQUFjek8sUUFBVWkyRSxFQUFNLEdBQ3ZHdmUsS0FBTXVlLEVBQU0sSUFBTVYsR0FDbEIxMUUsS0FBTWlmLEVBQVcsQ0FBQ20zRCxFQUFNLElBQU0sR0FDOUJqSSxLQUFNaUksRUFBTSxJQUFNQSxFQUFNLEdBQUssS0FDN0JoSSxPQUFRZ0ksRUFBTSxJQUFNQSxFQUFNLEdBQUssV0FHbEMsR0FBS0EsRUFBUVIsR0FBTWxtQixLQUFLNm1CLEVBQU10MEUsSUFDL0JzL0MsRUFBVSxDQUNOMTVDLElBQUt1dUUsRUFBTSxHQUNYdmUsS0FBTXVlLEVBQU0sSUFBTVYsR0FDbEIxMUUsS0FBTSxHQUNObXVFLE1BQU9pSSxFQUFNLEdBQ2JoSSxPQUFRZ0ksRUFBTSxJQUFNQSxFQUFNLEdBQUssVUFHbEMsTUFBS0EsRUFBUVQsR0FBTWptQixLQUFLNm1CLEVBQU10MEUsS0F5Qi9CLFNBeEJTbTBFLEVBQU0sSUFBTUEsRUFBTSxHQUFHam5FLFFBQVEsWUFBYyxJQUNyQ3duRSxFQUFXZCxHQUFVbm1CLEtBQUswbUIsRUFBTSxNQUUzQ0EsRUFBTSxHQUFLQSxFQUFNLElBQU0sT0FDdkJBLEVBQU0sR0FBS08sRUFBUyxHQUNwQlAsRUFBTSxHQUFLTyxFQUFTLEdBQ3BCUCxFQUFNLEdBQUssSUFFQSxJQUFObjBFLEdBQVltMEUsRUFBTSxTQUEwQixJQUFwQkgsRUFBR1csZUFLaEMzcUUsRUFBTSxHQUFHbWlFLE9BQVM2SCxFQUFHVyxhQUFlLEdBRXhDcjFCLEVBQVUsQ0FDTjE1QyxJQUFLdXVFLEVBQU0sR0FDWHZlLEtBQU11ZSxFQUFNLElBQU1WLEdBQ2xCMTFFLEtBQU1vMkUsRUFBTSxHQUFLQSxFQUFNLEdBQUdoeUUsTUFBTSxLQUFPLEdBQ3ZDK3BFLEtBQU1pSSxFQUFNLElBQU1BLEVBQU0sR0FBSyxLQUM3QmhJLE9BQVFnSSxFQUFNLElBQU1BLEVBQU0sR0FBSyxPQU1sQzcwQixFQUFRc1csTUFBUXRXLEVBQVE0c0IsT0FDekI1c0IsRUFBUXNXLEtBQU82ZCxJQUVuQnpwRSxFQUFNeEksS0FBSzg5QyxHQUVmLE9BQUt0MUMsRUFBTTlMLE9BR0osQ0FDSG9JLFFBQVNpdUUsR0FBZVAsR0FDeEI5M0UsS0FBTTgzRSxFQUFHOTNFLEtBQ1Q4TixNQUFPQSxHQUxBLEtBekZDNHFFLENBQStCWixHQUVuQyxPQUFPUyxHQUFVenFFLEVBQU9pcUUsR0FHaEMsTUFBT2gzRSxJQUdQLE1BQU8sQ0FDSHFKLFFBQVNpdUUsR0FBZVAsR0FDeEI5M0UsS0FBTTgzRSxHQUFNQSxFQUFHOTNFLEtBQ2Y4TixNQUFPLEdBQ1A2cUUsUUFBUSxHQXlJaEIsU0FBU0osR0FBVW5OLEVBQVkyTSxHQUMzQixJQUNJLE9BQU8sVUFBUyxTQUFTLEdBQUkzTSxHQUFhLENBQUV0OUQsTUFBT3M5RCxFQUFXdDlELE1BQU0vSyxNQUFNZzFFLEtBRTlFLE1BQU9oM0UsR0FDSCxPQUFPcXFFLEdBU2YsU0FBU2lOLEdBQWVQLEdBQ3BCLElBQUkxdEUsRUFBVTB0RSxHQUFNQSxFQUFHMXRFLFFBQ3ZCLE9BQUtBLEVBR0RBLEVBQVFqQyxPQUEwQyxpQkFBMUJpQyxFQUFRakMsTUFBTWlDLFFBQy9CQSxFQUFRakMsTUFBTWlDLFFBRWxCQSxFQUxJLG1CQzFNUixTQUFTd3VFLEdBQXdCeE4sR0FDcEMsSUFBSUUsRUFBU3VOLEdBQXNCek4sRUFBV3Q5RCxPQUMxQ3pELEVBQVksQ0FDWkMsS0FBTThnRSxFQUFXcHJFLEtBQ2pCdUssTUFBTzZnRSxFQUFXaGhFLFNBUXRCLE9BTklraEUsR0FBVUEsRUFBT3RwRSxTQUNqQnFJLEVBQVUrZ0UsV0FBYSxDQUFFRSxPQUFRQSxTQUVkNzVELElBQW5CcEgsRUFBVUMsTUFBMEMsS0FBcEJELEVBQVVFLFFBQzFDRixFQUFVRSxNQUFRLDhCQUVmRixFQStCSixTQUFTeXVFLEdBQW9CMU4sR0FFaEMsTUFBTyxDQUNIL2dFLFVBQVcsQ0FDUGpHLE9BQVEsQ0FIQXcwRSxHQUF3QnhOLE1BVXJDLFNBQVN5TixHQUFzQi9xRSxHQUNsQyxJQUFLQSxJQUFVQSxFQUFNOUwsT0FDakIsTUFBTyxHQUVYLElBQUkrMkUsRUFBYWpyRSxFQUNia3JFLEVBQXFCRCxFQUFXLEdBQUdyZixNQUFRLEdBQzNDdWYsRUFBb0JGLEVBQVdBLEVBQVcvMkUsT0FBUyxHQUFHMDNELE1BQVEsR0FVbEUsT0FSc0QsSUFBbERzZixFQUFtQmhvRSxRQUFRLG9CQUFnRixJQUFwRGdvRSxFQUFtQmhvRSxRQUFRLHNCQUNsRituRSxFQUFhQSxFQUFXaDJFLE1BQU0sS0FHa0IsSUFBaERrMkUsRUFBa0Jqb0UsUUFBUSxtQkFDMUIrbkUsRUFBYUEsRUFBV2gyRSxNQUFNLEdBQUksSUFHL0JnMkUsRUFDRmgyRSxNQUFNLEVBN0VRLElBOEVkYSxLQUFJLFNBQVVzMUUsR0FBUyxNQUFPLENBQy9CQyxNQUF3QixPQUFqQkQsRUFBTWpKLFlBQWtCeCtELEVBQVl5bkUsRUFBTWpKLE9BQ2pEMUUsU0FBVTJOLEVBQU14dkUsS0FBT3F2RSxFQUFXLEdBQUdydkUsSUFDckMwdkUsU0FBVUYsRUFBTXhmLE1BQVEsSUFDeEIyZixRQUFRLEVBQ1JDLE9BQXVCLE9BQWZKLEVBQU1sSixVQUFnQnYrRCxFQUFZeW5FLEVBQU1sSixTQUUvQ3hxRSxVQzVDRixTQUFTK3pFLEdBQXNCbHZFLEVBQVdzOUQsRUFBb0I3bkUsR0FFakUsSUFBSXFLLEVBQ0osUUFGZ0IsSUFBWnJLLElBQXNCQSxFQUFVLEtBRWhDLEVBQUErTixHQUFBLElBQWF4RCxJQUFjQSxFQUFVbEMsTUFNckMsT0FEUTJ3RSxHQUFvQmpCLEdBRDVCeHRFLEVBRmlCQSxFQUVNbEMsUUFJM0IsSUFBSSxFQUFBMEYsR0FBQSxJQUFXeEQsS0FBYyxFQUFBd0QsR0FBQSxJQUFleEQsR0FBWSxDQUtwRCxJQUFJbXZFLEVBQWVudkUsRUFDZm92RSxFQUFTRCxFQUFheDVFLFFBQVMsRUFBQTZOLEdBQUEsSUFBVzJyRSxHQUFnQixXQUFhLGdCQUN2RXB2RSxFQUFVb3ZFLEVBQWFwdkUsUUFBVXF2RSxFQUFTLEtBQU9ELEVBQWFwdkUsUUFBVXF2RSxFQU01RSxPQUxBdHZFLEVBQVF1dkUsR0FBZ0J0dkUsRUFBU3U5RCxFQUFvQjduRSxJQUNyRCxTQUFzQnFLLEVBQU9DLEdBQ3pCLFNBQVVvdkUsSUFDVnJ2RSxFQUFNKzRELE1BQU8sVUFBUyxTQUFTLEdBQUkvNEQsRUFBTSs0RCxNQUFPLENBQUUsb0JBQXFCLEdBQUtzVyxFQUFhMXlCLFFBRXRGMzhDLEVBRVgsT0FBSSxFQUFBMEQsR0FBQSxJQUFReEQsR0FFUkYsRUFBUTJ1RSxHQUFvQmpCLEdBQWtCeHRFLEtBRzlDLEVBQUF3RCxHQUFBLElBQWN4RCxLQUFjLEVBQUF3RCxHQUFBLElBQVF4RCxJQUtwQ0YsRUR0REQsU0FBOEJFLEVBQVdzOUQsRUFBb0JnUyxHQUNoRSxJQUFJeHZFLEVBQVEsQ0FDUkUsVUFBVyxDQUNQakcsT0FBUSxDQUNKLENBQ0lrRyxNQUFNLEVBQUF1RCxHQUFBLElBQVF4RCxHQUFhQSxFQUFVa0osWUFBWXZULEtBQU8yNUUsRUFBWSxxQkFBdUIsUUFDM0ZwdkUsTUFBTyxjQUFnQm92RSxFQUFZLG9CQUFzQixhQUFlLHlCQUEwQixTQUErQnR2RSxNQUk3SWs1RCxNQUFPLENBQ0hxVyxnQkFBZ0IsU0FBZ0J2dkUsS0FHeEMsR0FBSXM5RCxFQUFvQixDQUNwQixJQUNJMEQsRUFBV3dOLEdBREVoQixHQUFrQmxRLEdBQ2E3NUQsT0FDaEQzRCxFQUFNaWhFLFdBQWEsQ0FDZkUsT0FBUUQsR0FHaEIsT0FBT2xoRSxFQ2lDSzB2RSxDQURjeHZFLEVBQ3dCczlELEVBQW9CN25FLEVBQVE2NUUsWUFDMUUsU0FBc0J4dkUsRUFBTyxDQUN6QjJ2RSxXQUFXLElBRVIzdkUsSUFXWEEsRUFBUXV2RSxHQUFnQnJ2RSxFQUFXczlELEVBQW9CN25FLElBQ3ZELFNBQXNCcUssRUFBTyxHQUFLRSxPQUFXb0gsSUFDN0MsU0FBc0J0SCxFQUFPLENBQ3pCMnZFLFdBQVcsSUFFUjN2RSxHQUtKLFNBQVN1dkUsR0FBZ0JwcUUsRUFBT3E0RCxFQUFvQjduRSxRQUN2QyxJQUFaQSxJQUFzQkEsRUFBVSxJQUNwQyxJQUFJcUssRUFBUSxDQUNSQyxRQUFTa0YsR0FFYixHQUFJeFAsRUFBUWk2RSxrQkFBb0JwUyxFQUFvQixDQUNoRCxJQUNJMEQsRUFBV3dOLEdBREVoQixHQUFrQmxRLEdBQ2E3NUQsT0FDaEQzRCxFQUFNaWhFLFdBQWEsQ0FDZkUsT0FBUUQsR0FHaEIsT0FBT2xoRSxFQ2xIWCxTQUFTNnZFLEdBQWdDQyxHQUNyQyxHQUFLQSxFQUFJQyxVQUFhRCxFQUFJQyxTQUFTOUUsSUFBbkMsQ0FHQSxJQUFJM3pFLEVBQUt3NEUsRUFBSUMsU0FBUzlFLElBQ3RCLE1BQU8sQ0FBRXAxRSxLQUR5QnlCLEVBQUd6QixLQUNoQjZqQyxRQURnQ3BpQyxFQUFHb2lDLFVBTzVELFNBQVNzMkMsR0FBd0Jod0UsRUFBT2dyRSxHQUNwQyxPQUFLQSxHQUdMaHJFLEVBQU1pckUsSUFBTWpyRSxFQUFNaXJFLEtBQU8sQ0FDckJwMUUsS0FBTW0xRSxFQUFRbjFFLEtBQ2Q2akMsUUFBU3N4QyxFQUFRdHhDLFNBRXJCMTVCLEVBQU1pckUsSUFBSXAxRSxLQUFPbUssRUFBTWlyRSxJQUFJcDFFLE1BQVFtMUUsRUFBUW4xRSxLQUMzQ21LLEVBQU1pckUsSUFBSXZ4QyxRQUFVMTVCLEVBQU1pckUsSUFBSXZ4QyxTQUFXc3hDLEVBQVF0eEMsUUFDakQxNUIsRUFBTWlyRSxJQUFJbEMsY0FBZSxTQUFVL29FLEVBQU1pckUsSUFBSWxDLGNBQWdCLEdBQU1pQyxFQUFRakMsY0FBZ0IsSUFDM0Yvb0UsRUFBTWlyRSxJQUFJZ0YsVUFBVyxTQUFVandFLEVBQU1pckUsSUFBSWdGLFVBQVksR0FBTWpGLEVBQVFpRixVQUFZLElBQ3hFandFLEdBVklBLEVBYVIsU0FBU2t3RSxHQUF1QmpXLEVBQVM2VixHQUM1QyxJQUFJOUUsRUFBVTZFLEdBQWdDQyxHQUs5QyxNQUFPLENBQ0hyN0IsS0FMa0I3NkMsS0FBS0MsV0FBVSxTQUFTLENBQUVzMkUsU0FBUyxJQUFJeHVFLE1BQU8yNkQsZUFBa0IwTyxHQUFXLENBQUVDLElBQUtELEtBSzVFLEtBSlZweEUsS0FBS0MsVUFBVSxDQUM3QnNHLEtBQU0sWUFHdUMsS0FBT3ZHLEtBQUtDLFVBQVVvZ0UsR0FDbkU5NUQsS0FBTSxVQUNOWixJQUFLdXdFLEVBQUlNLHlDQUlWLFNBQVNDLEdBQXFCcndFLEVBQU84dkUsR0FDeEMsSUFBSTlFLEVBQVU2RSxHQUFnQ0MsR0FDMUNRLEVBQVl0d0UsRUFBTUcsTUFBUSxRQUMxQm93RSxFQUE0QixnQkFBZEQsRUFDZGg1RSxFQUFLMEksRUFBTXd3RSxZQUFjLEdBQUlDLEVBQXNCbjVFLEVBQUdtNUUsb0JBQXFCVixHQUFXLFNBQU96NEUsRUFBSSxDQUFDLHdCQUNsR0MsRUFBS2s1RSxHQUF1QixHQUFJQyxFQUFpQm41RSxFQUFHdWlCLE9BQVEweEQsRUFBYWowRSxFQUFHbzVFLEtBQzNDLElBQWpDeDBFLE9BQU93RSxLQUFLb3ZFLEdBQVVsNEUsY0FDZm1JLEVBQU13d0UsV0FHYnh3RSxFQUFNd3dFLFdBQWFULEVBRXZCLElBQUlhLEVBQU0sQ0FDTm44QixLQUFNNzZDLEtBQUtDLFVBQVVteEUsRUFBVWdGLEdBQXdCaHdFLEVBQU84dkUsRUFBSUMsU0FBUzlFLEtBQU9qckUsR0FDbEZHLEtBQU1td0UsRUFDTi93RSxJQUFLZ3hFLEVBQWNULEVBQUlNLHdDQUEwQ04sRUFBSWUsc0NBT3pFLEdBQUlOLEVBQWEsQ0FDYixJQVdJTyxFQVhrQmwzRSxLQUFLQyxXQUFVLFNBQVMsQ0FBRXdHLFNBQVVMLEVBQU1LLFNBQVU4dkUsU0FBUyxJQUFJeHVFLE1BQU8yNkQsZUFBa0IwTyxHQUFXLENBQUVDLElBQUtELEtBV2pHLEtBVmZweEUsS0FBS0MsVUFBVSxDQUM3QnNHLEtBQU1ILEVBQU1HLEtBR1o0d0UsYUFBYyxDQUFDLENBQUVqN0UsR0FBSTQ2RSxFQUFnQkMsS0FBTW5GLE1BTU8sS0FBT29GLEVBQUluOEIsS0FDakVtOEIsRUFBSW44QixLQUFPcThCLEVBRWYsT0FBT0YsRUM3RVgsSUFNSUksR0FBcUIsV0FFckIsU0FBU0EsRUFBSWxKLEVBQUtpSSxRQUNHLElBQWJBLElBQXVCQSxFQUFXLElBQ3RDbjZFLEtBQUtreUUsSUFBTUEsRUFDWGx5RSxLQUFLcTdFLFdBQWEsSUFBSXJLLEdBQUlrQixHQUMxQmx5RSxLQUFLbTZFLFNBQVdBLEVBNEdwQixPQXpHQWlCLEVBQUkzNkUsVUFBVWt5RSxPQUFTLFdBQ25CLE9BQU8zeUUsS0FBS3E3RSxZQUdoQkQsRUFBSTM2RSxVQUFVNjZFLG1CQUFxQixXQUMvQixJQUFJcEosRUFBTWx5RSxLQUFLcTdFLFdBQ1hweEUsRUFBV2lvRSxFQUFJam9FLFNBQVdpb0UsRUFBSWpvRSxTQUFXLElBQU0sR0FDL0NxbkUsRUFBT1ksRUFBSVosS0FBTyxJQUFNWSxFQUFJWixLQUFPLEdBQ3ZDLE9BQU9ybkUsRUFBVyxLQUFPaW9FLEVBQUlub0UsS0FBT3VuRSxHQUFRWSxFQUFJbG9FLEtBQU8sSUFBTWtvRSxFQUFJbG9FLEtBQU8sSUFBTSxTQUdsRm94RSxFQUFJMzZFLFVBQVU4NkUsaUJBQW1CLFdBQzdCLE9BQU92N0UsS0FBS3c3RSxtQkFBbUIsVUFPbkNKLEVBQUkzNkUsVUFBVXc2RSxtQ0FBcUMsV0FDL0MsT0FBT2o3RSxLQUFLdTdFLG1CQUFxQixJQUFNdjdFLEtBQUt5N0UsZ0JBT2hETCxFQUFJMzZFLFVBQVUrNUUsc0NBQXdDLFdBQ2xELE9BQU94NkUsS0FBSzA3RSx1QkFBeUIsSUFBTTE3RSxLQUFLeTdFLGdCQUdwREwsRUFBSTM2RSxVQUFVazdFLHFCQUF1QixXQUNqQyxJQUFJekosRUFBTWx5RSxLQUFLcTdFLFdBQ2YsT0FBUW5KLEVBQUlsb0UsS0FBTyxJQUFNa29FLEVBQUlsb0UsS0FBTyxJQUFNLFFBQVVrb0UsRUFBSVgsVUFBWSxXQU14RTZKLEVBQUkzNkUsVUFBVW03RSxrQkFBb0IsU0FBVUMsRUFBWUMsR0FFcEQsSUFBSTVKLEVBQU1seUUsS0FBS3E3RSxXQUNYM3ZFLEVBQVMsQ0FBQywyQkFNZCxPQUxBQSxFQUFPbkcsS0FBSyxpQkFBbUJzMkUsRUFBYSxJQUFNQyxHQUNsRHB3RSxFQUFPbkcsS0FBSyxjQUFnQjJzRSxFQUFJVixXQUM1QlUsRUFBSWIsTUFDSjNsRSxFQUFPbkcsS0FBSyxpQkFBbUIyc0UsRUFBSWIsTUFFaEMsQ0FDSCxlQUFnQixtQkFDaEIsZ0JBQWlCM2xFLEVBQU9oRyxLQUFLLFFBSXJDMDFFLEVBQUkzNkUsVUFBVXM3RSx3QkFBMEIsU0FBVUMsUUFDeEIsSUFBbEJBLElBQTRCQSxFQUFnQixJQUNoRCxJQUFJOUosRUFBTWx5RSxLQUFLcTdFLFdBQ1h4YixFQUFXNy9ELEtBQUtzN0UscUJBQXVCLG9CQUN2Q1csRUFBaUIsR0FFckIsSUFBSyxJQUFJbjJFLEtBRFRtMkUsRUFBZTEyRSxLQUFLLE9BQVMyc0UsRUFBSTFyRSxZQUNqQncxRSxFQUNaLEdBQVksUUFBUmwyRSxFQUdKLEdBQVksU0FBUkEsRUFBZ0IsQ0FDaEIsSUFBS2syRSxFQUFjbmdELEtBQ2YsU0FFQW1nRCxFQUFjbmdELEtBQUs1N0IsTUFDbkJnOEUsRUFBZTEyRSxLQUFLLFFBQVVxSSxtQkFBbUJvdUUsRUFBY25nRCxLQUFLNTdCLE9BRXBFKzdFLEVBQWNuZ0QsS0FBS3dxQyxPQUNuQjRWLEVBQWUxMkUsS0FBSyxTQUFXcUksbUJBQW1Cb3VFLEVBQWNuZ0QsS0FBS3dxQyxhQUl6RTRWLEVBQWUxMkUsS0FBS3FJLG1CQUFtQjlILEdBQU8sSUFBTThILG1CQUFtQm91RSxFQUFjbDJFLEtBRzdGLE9BQUltMkUsRUFBZWg2RSxPQUNSNDlELEVBQVcsSUFBTW9jLEVBQWV2MkUsS0FBSyxLQUV6Q202RCxHQUdYdWIsRUFBSTM2RSxVQUFVaTdFLHFCQUF1QixXQUNqQyxPQUFPMTdFLEtBQUt3N0UsbUJBQW1CLGFBR25DSixFQUFJMzZFLFVBQVUrNkUsbUJBQXFCLFNBQVV0dEUsR0FHekMsTUFBTyxHQUZJbE8sS0FBS3M3RSxxQkFDTnQ3RSxLQUFLcTdFLFdBQ1E5SixVQUFZLElBQU1yakUsRUFBUyxLQUd0RGt0RSxFQUFJMzZFLFVBQVVnN0UsYUFBZSxXQUN6QixJQUNJUyxFQUFPLENBR1BDLFdBSk1uOEUsS0FBS3E3RSxXQUlLN0osVUFDaEI0SyxlQXBIYSxLQXNIakIsT0FBTyxTQUFVRixJQUVkZCxFQWxIYSxHQ0pwQmlCLEdBQStCLFdBQy9CLFNBQVNBLEVBQWNDLEdBQ25CdDhFLEtBQUtzOEUsT0FBU0EsRUFFZHQ4RSxLQUFLdThFLFFBQVUsR0F3RW5CLE9BbkVBRixFQUFjNTdFLFVBQVUrN0UsUUFBVSxXQUM5QixZQUF1QjlxRSxJQUFoQjFSLEtBQUtzOEUsUUFBd0J0OEUsS0FBS2lDLFNBQVdqQyxLQUFLczhFLFFBUTdERCxFQUFjNTdFLFVBQVVxTSxJQUFNLFNBQVUydkUsR0FDcEMsSUFBSXY3RSxFQUFRbEIsS0FDWixPQUFLQSxLQUFLdzhFLFlBRzBCLElBQWhDeDhFLEtBQUt1OEUsUUFBUXRyRSxRQUFRd3JFLElBQ3JCejhFLEtBQUt1OEUsUUFBUWgzRSxLQUFLazNFLEdBRXRCQSxFQUNLNzVFLE1BQUssV0FBYyxPQUFPMUIsRUFBTW9WLE9BQU9tbUUsTUFDdkM3NUUsS0FBSyxNQUFNLFdBQ1osT0FBTzFCLEVBQU1vVixPQUFPbW1FLEdBQU03NUUsS0FBSyxNQUFNLGtCQUtsQzY1RSxHQWJJLFVBQW1CLElBQUk3TCxHQUFZLHFEQXFCbER5TCxFQUFjNTdFLFVBQVU2VixPQUFTLFNBQVVtbUUsR0FFdkMsT0FEa0J6OEUsS0FBS3U4RSxRQUFRdHZFLE9BQU9qTixLQUFLdThFLFFBQVF0ckUsUUFBUXdyRSxHQUFPLEdBQUcsSUFNekVKLEVBQWM1N0UsVUFBVXdCLE9BQVMsV0FDN0IsT0FBT2pDLEtBQUt1OEUsUUFBUXQ2RSxRQVF4Qm82RSxFQUFjNTdFLFVBQVVpOEUsTUFBUSxTQUFVL2tELEdBQ3RDLElBQUl6MkIsRUFBUWxCLEtBQ1osT0FBTyxJQUFJLElBQVksU0FBVXVxQixHQUM3QixJQUFJb3lELEVBQXFCbnlELFlBQVcsV0FDNUJtTixHQUFXQSxFQUFVLEdBQ3JCcE4sR0FBUSxLQUVib04sR0FDSCxPQUFnQnoyQixFQUFNcTdFLFNBQ2pCMzVFLE1BQUssV0FDTnkwQixhQUFhc2xELEdBQ2JweUQsR0FBUSxNQUVQM25CLEtBQUssTUFBTSxXQUNaMm5CLEdBQVEsVUFJYjh4RCxFQTVFdUIsR0NFOUJPLEdBQStCLFdBQy9CLFNBQVNBLEVBQWM3OEUsR0FDbkJDLEtBQUtELFFBQVVBLEVBRWZDLEtBQUt1OEUsUUFBVSxJQUFJRixHQUFjLElBRWpDcjhFLEtBQUs2OEUsWUFBYyxHQUNuQjc4RSxLQUFLODhFLEtBQU8sSUFBSTFCLEdBQUlyN0UsRUFBUW15RSxJQUFLbnlFLEVBQVFnOUUsV0FFekMvOEUsS0FBSzJKLElBQU0zSixLQUFLODhFLEtBQUs3QixxQ0FvR3pCLE9BL0ZBMkIsRUFBY244RSxVQUFVKzBFLFVBQVksU0FBVTcwRSxHQUMxQyxNQUFNLElBQUlpd0UsR0FBWSx3REFLMUJnTSxFQUFjbjhFLFVBQVVtL0MsTUFBUSxTQUFVam9CLEdBQ3RDLE9BQU8zM0IsS0FBS3U4RSxRQUFRRyxNQUFNL2tELElBSzlCaWxELEVBQWNuOEUsVUFBVXU4RSxnQkFBa0IsU0FBVXQ3RSxHQUNoRCxJQUFJdTdFLEVBQWN2N0UsRUFBR3U3RSxZQUFhN2MsRUFBVzErRCxFQUFHMCtELFNBQVVMLEVBQVVyK0QsRUFBR3ErRCxRQUFTeDFDLEVBQVU3b0IsRUFBRzZvQixRQUFTZ04sRUFBUzcxQixFQUFHNjFCLE9BQzlHeXVDLEVBQVM0TCxHQUFPc0UsYUFBYTlWLEVBQVM0RixRQUs1QmhtRSxLQUFLazlFLGlCQUFpQm5kLElBRWhDLFVBQVkseUNBQTJDLy9ELEtBQUttOUUsZUFBZUYsSUFDM0VqWCxJQUFXNEwsR0FBT3VFLFFBSXRCNStDLEVBQU82b0MsR0FISDcxQyxFQUFRLENBQUV5N0MsT0FBUUEsS0FRMUI0VyxFQUFjbjhFLFVBQVUwOEUsZUFBaUIsU0FBVUMsR0FDL0MsT0FBT3A5RSxLQUFLNjhFLFlBQVlPLElBQWFwOUUsS0FBSzY4RSxZQUFZdGxFLEtBSzFEcWxFLEVBQWNuOEUsVUFBVTQ4RSxlQUFpQixTQUFVRCxHQUMvQyxPQUFPcDlFLEtBQUttOUUsZUFBZUMsR0FBWSxJQUFJcnhFLEtBQUtBLEtBQUtOLFFBS3pEbXhFLEVBQWNuOEUsVUFBVXk4RSxpQkFBbUIsU0FBVW5kLEdBQ2pELElBQUlqd0QsRUFBS3BPLEVBQUk0N0UsRUFBSzM3RSxFQUNkOEosRUFBTU0sS0FBS04sTUFDWDh4RSxFQUFXeGQsRUFBUSx3QkFDbkJ5ZCxFQUFXemQsRUFBUSxlQUN2QixHQUFJd2QsRUFBVSxDQUNWLElBV0ksSUFBSyxJQUFJMzdFLEdBQUssU0FBUzI3RSxFQUFTanpDLE9BQU9wa0MsTUFBTSxNQUFPckUsRUFBS0QsRUFBR29PLFFBQVNuTyxFQUFHb08sS0FBTXBPLEVBQUtELEVBQUdvTyxPQUFRLENBQzFGLElBQ0l5dEUsRUFEUTU3RSxFQUFHMkksTUFDUXRFLE1BQU0sSUFBSyxHQUM5QnlGLEVBQWNDLFNBQVM2eEUsRUFBVyxHQUFJLElBQ3RDL2xELEVBQW1ELEtBQXpDN3JCLE1BQU1GLEdBQTZCLEdBQWRBLEdBQ25DLElBQ0ksSUFBSyxJQUFJakUsR0FBTTQxRSxPQUFNLEdBQVEsU0FBU0csRUFBVyxHQUFHdjNFLE1BQU0sT0FBUW9zQixFQUFLNXFCLEVBQUdzSSxRQUFTc2lCLEVBQUdyaUIsS0FBTXFpQixFQUFLNXFCLEVBQUdzSSxPQUFRLENBQ3hHLElBQUlvdEUsRUFBVzlxRCxFQUFHOW5CLE1BQ2xCeEssS0FBSzY4RSxZQUFZTyxHQUFZLE9BQVMsSUFBSXJ4RSxLQUFLTixFQUFNaXNCLElBRzdELE1BQU9nbUQsR0FBU0osRUFBTSxDQUFFbDFFLE1BQU9zMUUsR0FDL0IsUUFDSSxJQUNRcHJELElBQU9BLEVBQUdyaUIsT0FBU3RPLEVBQUsrRixFQUFHeUksU0FBU3hPLEVBQUdlLEtBQUtnRixHQUVwRCxRQUFVLEdBQUk0MUUsRUFBSyxNQUFNQSxFQUFJbDFFLFNBSXpDLE1BQU84SCxHQUFTSixFQUFNLENBQUUxSCxNQUFPOEgsR0FDL0IsUUFDSSxJQUNRck8sSUFBT0EsRUFBR29PLE9BQVN2TyxFQUFLRSxFQUFHdU8sU0FBU3pPLEVBQUdnQixLQUFLZCxHQUVwRCxRQUFVLEdBQUlrTyxFQUFLLE1BQU1BLEVBQUkxSCxPQUVqQyxPQUFPLEVBRU4sUUFBSW8xRSxJQUNMeDlFLEtBQUs2OEUsWUFBWXRsRSxJQUFNLElBQUl4TCxLQUFLTixHQUFNLFNBQXNCQSxFQUFLK3hFLEtBQzFELElBSVJaLEVBN0d1QixHQ0Q5QixJQUFTLFdBRVRlLEdBQWdDLFNBQVU5TSxHQUUxQyxTQUFTOE0sSUFDTCxPQUFrQixPQUFYOU0sR0FBbUJBLEVBQU9sdUUsTUFBTTNDLEtBQU1nQyxZQUFjaEMsS0E4RC9ELE9BaEVBLFNBQVUyOUUsRUFBZ0I5TSxHQU8xQjhNLEVBQWVsOUUsVUFBVSswRSxVQUFZLFNBQVVwckUsR0FDM0MsT0FBT3BLLEtBQUs0OUUsYUFBYW5ELEdBQXFCcndFLEVBQU9wSyxLQUFLODhFLE1BQU8xeUUsSUFLckV1ekUsRUFBZWw5RSxVQUFVNnpFLFlBQWMsU0FBVWpRLEdBQzdDLE9BQU9ya0UsS0FBSzQ5RSxhQUFhdEQsR0FBdUJqVyxFQUFTcmtFLEtBQUs4OEUsTUFBT3pZLElBTXpFc1osRUFBZWw5RSxVQUFVbTlFLGFBQWUsU0FBVUMsRUFBZUMsR0FDN0QsSUFBSTU4RSxFQUFRbEIsS0FDWixHQUFJQSxLQUFLcTlFLGVBQWVRLEVBQWN0ekUsTUFDbEMsT0FBTytmLFFBQVFpTixPQUFPLENBQ2xCbnRCLE1BQU8wekUsRUFDUHZ6RSxLQUFNc3pFLEVBQWN0ekUsS0FDcEJpdEIsT0FBUSx5QkFBMkJ4M0IsS0FBS205RSxlQUFlVSxFQUFjdHpFLE1BQVEsNkJBQzdFeTdELE9BQVEsTUFHaEIsSUFBSWptRSxFQUFVLENBQ1Y4K0MsS0FBTWcvQixFQUFjaC9CLEtBQ3BCMzZCLE9BQVEsT0FLUituRCxlQUFpQkQsS0FBMkIsU0FBVyxJQVEzRCxZQU5xQ3Q2RCxJQUFqQzFSLEtBQUtELFFBQVFnK0UsaUJBQ2J4M0UsT0FBT2tTLE9BQU8xWSxFQUFTQyxLQUFLRCxRQUFRZytFLHNCQUVYcnNFLElBQXpCMVIsS0FBS0QsUUFBUWdnRSxVQUNiaGdFLEVBQVFnZ0UsUUFBVS8vRCxLQUFLRCxRQUFRZ2dFLFNBRTVCLy9ELEtBQUt1OEUsUUFBUXp2RSxJQUFJLElBQUksSUFBWSxTQUFVeWQsRUFBU2dOLEdBQ3ZELEdBQ0s4b0MsTUFBTXdkLEVBQWNsMEUsSUFBSzVKLEdBQ3pCNkMsTUFBSyxTQUFVdzlELEdBQ2hCLElBQUlMLEVBQVUsQ0FDVix1QkFBd0JLLEVBQVNMLFFBQVFqbUQsSUFBSSx3QkFDN0MsY0FBZXNtRCxFQUFTTCxRQUFRam1ELElBQUksZ0JBRXhDNVksRUFBTTg3RSxnQkFBZ0IsQ0FDbEJDLFlBQWFZLEVBQWN0ekUsS0FDM0I2MUQsU0FBVUEsRUFDVkwsUUFBU0EsRUFDVHgxQyxRQUFTQSxFQUNUZ04sT0FBUUEsT0FHWHJjLE1BQU1xYyxRQUdab21ELEVBakV3QixDQWtFakNmLElDbkVFb0IsR0FBOEIsU0FBVW5OLEdBRXhDLFNBQVNtTixJQUNMLE9BQWtCLE9BQVhuTixHQUFtQkEsRUFBT2x1RSxNQUFNM0MsS0FBTWdDLFlBQWNoQyxLQWdEL0QsT0FsREEsU0FBVWcrRSxFQUFjbk4sR0FPeEJtTixFQUFhdjlFLFVBQVUrMEUsVUFBWSxTQUFVcHJFLEdBQ3pDLE9BQU9wSyxLQUFLNDlFLGFBQWFuRCxHQUFxQnJ3RSxFQUFPcEssS0FBSzg4RSxNQUFPMXlFLElBS3JFNHpFLEVBQWF2OUUsVUFBVTZ6RSxZQUFjLFNBQVVqUSxHQUMzQyxPQUFPcmtFLEtBQUs0OUUsYUFBYXRELEdBQXVCalcsRUFBU3JrRSxLQUFLODhFLE1BQU96WSxJQU16RTJaLEVBQWF2OUUsVUFBVW05RSxhQUFlLFNBQVVDLEVBQWVDLEdBQzNELElBQUk1OEUsRUFBUWxCLEtBQ1osT0FBSUEsS0FBS3E5RSxlQUFlUSxFQUFjdHpFLE1BQzNCK2YsUUFBUWlOLE9BQU8sQ0FDbEJudEIsTUFBTzB6RSxFQUNQdnpFLEtBQU1zekUsRUFBY3R6RSxLQUNwQml0QixPQUFRLHlCQUEyQngzQixLQUFLbTlFLGVBQWVVLEVBQWN0ekUsTUFBUSw2QkFDN0V5N0QsT0FBUSxNQUdUaG1FLEtBQUt1OEUsUUFBUXp2RSxJQUFJLElBQUksSUFBWSxTQUFVeWQsRUFBU2dOLEdBQ3ZELElBQUlsckIsRUFBVSxJQUFJa2hFLGVBV2xCLElBQUssSUFBSTdoRSxLQVZUVyxFQUFROGhFLG1CQUFxQixXQUN6QixHQUEyQixJQUF2QjloRSxFQUFRd2hFLFdBQWtCLENBQzFCLElBQUk5TixFQUFVLENBQ1YsdUJBQXdCMXpELEVBQVE0eEUsa0JBQWtCLHdCQUNsRCxjQUFlNXhFLEVBQVE0eEUsa0JBQWtCLGdCQUU3Qy84RSxFQUFNODdFLGdCQUFnQixDQUFFQyxZQUFhWSxFQUFjdHpFLEtBQU02MUQsU0FBVS96RCxFQUFTMHpELFFBQVNBLEVBQVN4MUMsUUFBU0EsRUFBU2dOLE9BQVFBLE1BR2hJbHJCLEVBQVFzekMsS0FBSyxPQUFRaytCLEVBQWNsMEUsS0FDaEJ6SSxFQUFNbkIsUUFBUWdnRSxRQUN6QjcrRCxFQUFNbkIsUUFBUWdnRSxRQUFRL3hELGVBQWV0QyxJQUNyQ1csRUFBUTZ4RSxpQkFBaUJ4eUUsRUFBUXhLLEVBQU1uQixRQUFRZ2dFLFFBQVFyMEQsSUFHL0RXLEVBQVE4eEUsS0FBS04sRUFBY2gvQixXQUc1Qm0vQixFQW5Ec0IsQ0FvRC9CcEIsSUMvQ0V3QixHQUFnQyxTQUFVdk4sR0FFMUMsU0FBU3VOLElBQ0wsT0FBa0IsT0FBWHZOLEdBQW1CQSxFQUFPbHVFLE1BQU0zQyxLQUFNZ0MsWUFBY2hDLEtBZ0MvRCxPQWxDQSxTQUFVbytFLEVBQWdCdk4sR0FPMUJ1TixFQUFlMzlFLFVBQVU2eEUsbUJBQXFCLFNBQVVob0UsRUFBVzI2RCxHQUMvRCxPUFZELFNBQTRCbGxFLEVBQVN1SyxFQUFXMjZELEdBQ25ELElBQ0k3NkQsRUFBUW92RSxHQUFzQmx2RSxFQURSMjZELEdBQVFBLEVBQUsyQyx5QkFBdUJsMkQsRUFDRyxDQUM3RHNvRSxpQkFBa0JqNkUsRUFBUWk2RSxtQkFVOUIsT0FSQSxTQUFzQjV2RSxFQUFPLENBQ3pCZ3FFLFNBQVMsRUFDVDdwRSxLQUFNLFlBRVZILEVBQU1TLE1BQVEyckUsR0FBUzl2RSxNQUNuQnUrRCxHQUFRQSxFQUFLeDZELFdBQ2JMLEVBQU1LLFNBQVd3NkQsRUFBS3g2RCxVQUVuQixXQUFvQkwsR09IaEJrb0UsQ0FBbUJ0eUUsS0FBS3k4RCxTQUFVbnlELEVBQVcyNkQsSUFLeERtWixFQUFlMzlFLFVBQVVneUUsaUJBQW1CLFNBQVVwb0UsRUFBU1EsRUFBT282RCxHQUVsRSxZQURjLElBQVZwNkQsSUFBb0JBLEVBQVEyckUsR0FBU1csTVBHMUMsU0FBMEJwM0UsRUFBU3NLLEVBQVNRLEVBQU9vNkQsUUFDeEMsSUFBVnA2RCxJQUFvQkEsRUFBUTJyRSxHQUFTVyxNQUN6QyxJQUNJL3NFLEVBQVF1dkUsR0FBZ0J0dkUsRUFERjQ2RCxHQUFRQSxFQUFLMkMseUJBQXVCbDJELEVBQ0wsQ0FDckRzb0UsaUJBQWtCajZFLEVBQVFpNkUsbUJBTTlCLE9BSkE1dkUsRUFBTVMsTUFBUUEsRUFDVm82RCxHQUFRQSxFQUFLeDZELFdBQ2JMLEVBQU1LLFNBQVd3NkQsRUFBS3g2RCxVQUVuQixXQUFvQkwsR09aaEJxb0UsQ0FBaUJ6eUUsS0FBS3k4RCxTQUFVcHlELEVBQVNRLEVBQU9vNkQsSUFLM0RtWixFQUFlMzlFLFVBQVVvMkUsZ0JBQWtCLFdBQ3ZDLElBQUs3MkUsS0FBS3k4RCxTQUFTeVYsSUFFZixPQUFPckIsRUFBT3B3RSxVQUFVbzJFLGdCQUFnQm4wRSxLQUFLMUMsTUFFakQsSUFBSXErRSxHQUFtQixVQUFTLFNBQVMsR0FBSXIrRSxLQUFLeThELFNBQVM0aEIsa0JBQW1CLENBQUVuTSxJQUFLbHlFLEtBQUt5OEQsU0FBU3lWLElBQUs2SyxVQUFXLzhFLEtBQUt5OEQsU0FBU3NnQixZQUNqSSxPQUFJLzhFLEtBQUt5OEQsU0FBUzZoQixVQUNQLElBQUl0K0UsS0FBS3k4RCxTQUFTNmhCLFVBQVVELEdBRW5DMVMsS0FDTyxJQUFJZ1MsR0FBZVUsR0FFdkIsSUFBSUwsR0FBYUssSUFFckJELEVBbkN3QixDQW9DakN6SCxJQzNDRTRILEdBQWdCLEVBSWIsU0FBU0MsS0FDWixPQUFPRCxHQUFnQixFQUtwQixTQUFTRSxLQUVaRixJQUFpQixFQUNqQi96RCxZQUFXLFdBQ1ArekQsSUFBaUIsS0FXbEIsU0FBU0csR0FBS3B1RSxFQUFJdlEsRUFBU2c3QixHQUU5QixRQURnQixJQUFaaDdCLElBQXNCQSxFQUFVLElBQ2xCLG1CQUFQdVEsRUFDUCxPQUFPQSxFQUVYLElBRUksR0FBSUEsRUFBR3dsRSxXQUNILE9BQU94bEUsRUFHWCxHQUFJQSxFQUFHcXVFLG1CQUNILE9BQU9ydUUsRUFBR3F1RSxtQkFHbEIsTUFBTzM5RSxHQUlILE9BQU9zUCxFQUlYLElBQUlzdUUsRUFBZ0IsV0FDaEIsSUFBSTk4RSxFQUFPMUIsTUFBTUssVUFBVXVDLE1BQU1OLEtBQUtWLFdBQ3RDLElBQ1ErNEIsR0FBNEIsbUJBQVhBLEdBQ2pCQSxFQUFPcDRCLE1BQU0zQyxLQUFNZ0MsV0FHdkIsSUFBSTY4RSxFQUFtQi84RSxFQUFLK0IsS0FBSSxTQUFVeWpDLEdBQU8sT0FBT28zQyxHQUFLcDNDLEVBQUt2bkMsTUFDbEUsT0FBSXVRLEVBQUd3dUUsWUFNSXh1RSxFQUFHd3VFLFlBQVluOEUsTUFBTTNDLEtBQU02K0UsR0FNL0J2dUUsRUFBRzNOLE1BQU0zQyxLQUFNNitFLEdBRTFCLE1BQU85RyxHQWNILE1BYkEwRyxLQUNBbFgsSUFBVSxTQUFVcGxFLEdBQ2hCQSxFQUFNMmdFLG1CQUFrQixTQUFVMTRELEdBQzlCLElBQUk0ckUsR0FBaUIsU0FBUyxHQUFJNXJFLEdBTWxDLE9BTElySyxFQUFRbUwsYUFDUixTQUFzQjhxRSxPQUFnQnRrRSxPQUFXQSxJQUNqRCxTQUFzQnNrRSxFQUFnQmoyRSxFQUFRbUwsWUFFbEQ4cUUsRUFBZXhTLE9BQVEsVUFBUyxTQUFTLEdBQUl3UyxFQUFleFMsT0FBUSxDQUFFeGhFLFVBQVdGLElBQzFFazBFLEtBRVh4TyxHQUFpQnVRLE1BRWZBLElBTWQsSUFDSSxJQUFLLElBQUl2eUQsS0FBWWxWLEVBQ2IvSixPQUFPOUYsVUFBVXVOLGVBQWV0TCxLQUFLNE4sRUFBSWtWLEtBQ3pDbzVELEVBQWNwNUQsR0FBWWxWLEVBQUdrVixJQUl6QyxNQUFPdGhCLElBQ1BvTSxFQUFHN1AsVUFBWTZQLEVBQUc3UCxXQUFhLEdBQy9CbStFLEVBQWNuK0UsVUFBWTZQLEVBQUc3UCxVQUM3QjhGLE9BQU9zVCxlQUFldkosRUFBSSxxQkFBc0IsQ0FDNUM5QyxZQUFZLEVBQ1poRCxNQUFPbzBFLElBSVhyNEUsT0FBT2dILGlCQUFpQnF4RSxFQUFlLENBQ25DOUksV0FBWSxDQUNSdG9FLFlBQVksRUFDWmhELE9BQU8sR0FFWE0sb0JBQXFCLENBQ2pCMEMsWUFBWSxFQUNaaEQsTUFBTzhGLEtBSWYsSUFDcUIvSixPQUFPa2YseUJBQXlCbTVELEVBQWUsUUFDakR4L0QsY0FDWDdZLE9BQU9zVCxlQUFlK2tFLEVBQWUsT0FBUSxDQUN6QzlrRSxJQUFLLFdBQ0QsT0FBT3hKLEVBQUdyUSxRQU0xQixNQUFPaUUsSUFDUCxPQUFPMDZFLEUsY0MxSFBHLEdBQTZCLFdBSTdCLFNBQVNBLEVBQVloL0UsR0FJakJDLEtBQUtDLEtBQU84K0UsRUFBWTcrRSxHQUN4QkYsS0FBS3k4RCxVQUFXLFNBQVMsQ0FBRXYwRCxTQUFTLEVBQU04MkUsS0FBSyxFQUFNM2UsT0FBTyxFQUFNaVAsU0FBUyxFQUFNaEcsUUFBUSxFQUFNbUUsS0FBSyxHQUFRMXRFLEdBaVBoSCxPQTVPQWcvRSxFQUFZdCtFLFVBQVV3K0Usb0JBQXNCLFNBQVU3MEUsR0FDN0NwSyxLQUFLeThELFNBQVM2TSxRQUduQixLQUFnQjVFLGNBQWMsQ0FDMUIwWSxTQUFVLFdBQTRCLGdCQUFmaHpFLEVBQU1HLEtBQXlCLGNBQWdCLFNBQ3RFRSxTQUFVTCxFQUFNSyxTQUNoQkksTUFBT1QsRUFBTVMsTUFDYlIsU0FBUyxTQUFvQkQsSUFDOUIsQ0FDQ0EsTUFBT0EsS0FXZjIwRSxFQUFZdCtFLFVBQVVDLFVBQVksV0FDOUIsSUFBSVEsRUFBUWxCLEtBQ1JBLEtBQUt5OEQsU0FBU3YwRCxTQUNkb2tFLEdBQTBCLENBQ3RCaG9FLFNBQVUsV0FFTixJQURBLElBQUl4QyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCYixFQUFNZytFLG1CQUFtQnY4RSxNQUFNekIsR0FBTyxTQUFTWSxLQUVuRHlJLEtBQU0sWUFHVnZLLEtBQUt5OEQsU0FBU3VpQixLQUNkMVMsR0FBMEIsQ0FDdEJob0UsU0FBVSxXQUVOLElBREEsSUFBSXhDLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FFekJiLEVBQU1pK0UsZUFBZXg4RSxNQUFNekIsR0FBTyxTQUFTWSxLQUUvQ3lJLEtBQU0sUUFHVnZLLEtBQUt5OEQsU0FBU2dSLEtBQ2RuQixHQUEwQixDQUN0QmhvRSxTQUFVLFdBRU4sSUFEQSxJQUFJeEMsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQUV6QmIsRUFBTWsrRSxlQUFlejhFLE1BQU16QixHQUFPLFNBQVNZLEtBRS9DeUksS0FBTSxRQUdWdkssS0FBS3k4RCxTQUFTNEQsT0FDZGlNLEdBQTBCLENBQ3RCaG9FLFNBQVUsV0FFTixJQURBLElBQUl4QyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCYixFQUFNbStFLGlCQUFpQjE4RSxNQUFNekIsR0FBTyxTQUFTWSxLQUVqRHlJLEtBQU0sVUFHVnZLLEtBQUt5OEQsU0FBUzZTLFNBQ2RoRCxHQUEwQixDQUN0QmhvRSxTQUFVLFdBRU4sSUFEQSxJQUFJeEMsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQUV6QmIsRUFBTW8rRSxtQkFBbUIzOEUsTUFBTXpCLEdBQU8sU0FBU1ksS0FFbkR5SSxLQUFNLGFBUWxCdzBFLEVBQVl0K0UsVUFBVXkrRSxtQkFBcUIsU0FBVXJRLEdBQ2pELElBQUlsSyxFQUFhLENBQ2J5WSxTQUFVLFVBQ1ZqNkUsS0FBTSxDQUNGbkIsVUFBVzZzRSxFQUFZL3NFLEtBQ3ZCd0csT0FBUSxXQUVadUMsTUFBTzJyRSxHQUFTUyxXQUFXcEksRUFBWWhrRSxPQUN2Q1IsU0FBUyxTQUFTd2tFLEVBQVkvc0UsS0FBTSxNQUV4QyxHQUEwQixXQUF0QitzRSxFQUFZaGtFLE1BQW9CLENBQ2hDLElBQTRCLElBQXhCZ2tFLEVBQVkvc0UsS0FBSyxHQU1qQixPQUxBNmlFLEVBQVd0NkQsUUFBVSx1QkFBd0IsU0FBU3drRSxFQUFZL3NFLEtBQUtrQixNQUFNLEdBQUksTUFBUSxrQkFDekYyaEUsRUFBV3hoRSxLQUFLbkIsVUFBWTZzRSxFQUFZL3NFLEtBQUtrQixNQUFNLEdBTzNELEtBQWdCMGhFLGNBQWNDLEVBQVksQ0FDdENwMUQsTUFBT3MvRCxFQUFZL3NFLEtBQ25CK0ksTUFBT2drRSxFQUFZaGtFLFNBTzNCazBFLEVBQVl0K0UsVUFBVTArRSxlQUFpQixTQUFVdFEsR0FDN0MsSUFBSTNnRSxFQUVKLElBQ0lBLEVBQVMyZ0UsRUFBWXprRSxNQUFNOEQsUUFDckIsUUFBaUIyZ0UsRUFBWXprRSxNQUFNOEQsU0FDbkMsUUFBaUIyZ0UsRUFBWXprRSxPQUV2QyxNQUFPcEosR0FDSGtOLEVBQVMsWUFFUyxJQUFsQkEsRUFBT2pNLFFBR1gsS0FBZ0J5aUUsY0FBYyxDQUMxQjBZLFNBQVUsTUFBUXZPLEVBQVk1dUUsS0FDOUJvSyxRQUFTNkQsR0FDVixDQUNDOUQsTUFBT3lrRSxFQUFZemtFLE1BQ25CbkssS0FBTTR1RSxFQUFZNXVFLEtBQ2xCMEgsT0FBUWtuRSxFQUFZbG5FLFVBTzVCbzNFLEVBQVl0K0UsVUFBVTIrRSxlQUFpQixTQUFVdlEsR0FDN0MsR0FBSUEsRUFBWVosYUFBaEIsQ0FFSSxHQUFJWSxFQUFZcEIsSUFBSUUsdUJBQ2hCLE9BRUosSUFBSWpzRSxFQUFLbXRFLEVBQVlwQixJQUFJQyxnQkFBa0IsR0FBSXhwRCxFQUFTeGlCLEVBQUd3aUIsT0FBUXZhLEVBQU1qSSxFQUFHaUksSUFBS21rRSxFQUFjcHNFLEVBQUdvc0UsWUFBYWp2QixFQUFPbjlDLEVBQUdtOUMsS0FDekgsS0FBZ0I2bEIsY0FBYyxDQUMxQjBZLFNBQVUsTUFDVmo2RSxLQUFNLENBQ0YrZ0IsT0FBUUEsRUFDUnZhLElBQUtBLEVBQ0xta0UsWUFBYUEsR0FFakJ2akUsS0FBTSxRQUNQLENBQ0NrakUsSUFBS29CLEVBQVlwQixJQUNqQmwrRCxNQUFPc3ZDLE1BU25Ca2dDLEVBQVl0K0UsVUFBVTQrRSxpQkFBbUIsU0FBVXhRLEdBRTFDQSxFQUFZWixlQUdiWSxFQUFZQyxVQUFVbmxFLElBQUlDLE1BQU0sZUFBa0QsU0FBakNpbEUsRUFBWUMsVUFBVTVxRCxTQUl2RTJxRCxFQUFZem1FLE1BQ1osS0FBZ0JzOEQsY0FBYyxDQUMxQjBZLFNBQVUsUUFDVmo2RSxLQUFNMHJFLEVBQVlDLFVBQ2xCamtFLE1BQU8yckUsR0FBUzl2RSxNQUNoQjZELEtBQU0sUUFDUCxDQUNDcEgsS0FBTTByRSxFQUFZem1FLE1BQ2xCbUgsTUFBT3MvRCxFQUFZL3NFLE9BSXZCLEtBQWdCNGlFLGNBQWMsQ0FDMUIwWSxTQUFVLFFBQ1ZqNkUsTUFBTSxVQUFTLFNBQVMsR0FBSTByRSxFQUFZQyxXQUFZLENBQUVoQixZQUFhZSxFQUFZek8sU0FBUzRGLFNBQ3hGejdELEtBQU0sUUFDUCxDQUNDZ0YsTUFBT3MvRCxFQUFZL3NFLEtBQ25CcytELFNBQVV5TyxFQUFZek8sY0FRbEMyZSxFQUFZdCtFLFVBQVU2K0UsbUJBQXFCLFNBQVV6USxHQUNqRCxJQUFJbG5FLEdBQVMsV0FDVDhMLEVBQU9vN0QsRUFBWXA3RCxLQUNuQmlKLEVBQUtteUQsRUFBWW55RCxHQUNqQjZpRSxHQUFZLFNBQVM1M0UsRUFBTzBELFNBQVNDLE1BQ3JDazBFLEdBQWEsU0FBUy9yRSxHQUN0QmdzRSxHQUFXLFNBQVMvaUUsR0FFbkI4aUUsRUFBV3gxRSxPQUNadzFFLEVBQWFELEdBSWJBLEVBQVV0MUUsV0FBYXcxRSxFQUFTeDFFLFVBQVlzMUUsRUFBVXgxRSxPQUFTMDFFLEVBQVMxMUUsT0FDeEUyUyxFQUFLK2lFLEVBQVN2MUUsVUFFZHExRSxFQUFVdDFFLFdBQWF1MUUsRUFBV3YxRSxVQUFZczFFLEVBQVV4MUUsT0FBU3kxRSxFQUFXejFFLE9BQzVFMEosRUFBTytyRSxFQUFXdDFFLFVBRXRCLEtBQWdCdzZELGNBQWMsQ0FDMUIwWSxTQUFVLGFBQ1ZqNkUsS0FBTSxDQUNGc1EsS0FBTUEsRUFDTmlKLEdBQUlBLE1BT2hCcWlFLEVBQVk3K0UsR0FBSyxjQUNWNitFLEVBMVBxQixHQ0U1QlcsR0FBK0IsU0FBVTdPLEdBT3pDLFNBQVM2TyxFQUFjMy9FLEdBRW5CLFlBRGdCLElBQVpBLElBQXNCQSxFQUFVLElBQzdCOHdFLEVBQU9udUUsS0FBSzFDLEtBQU1vK0UsR0FBZ0JyK0UsSUFBWUMsS0FxQ3pELE9BN0NBLFNBQVUwL0UsRUFBZTdPLEdBZXpCNk8sRUFBY2ovRSxVQUFVay9FLGlCQUFtQixTQUFVNS9FLFFBQ2pDLElBQVpBLElBQXNCQSxFQUFVLEtBRXJCLFdBQWtCcUwsV0FJNUJwTCxLQUFLa3pFLGFGdUdYLFNBQTRCbnpFLEdBRS9CLFFBRGdCLElBQVpBLElBQXNCQSxFQUFVLElBQy9CQSxFQUFRMG5FLFFBSWIsR0FBSzFuRSxFQUFRbXlFLElBQWIsQ0FJQSxJQUFJME4sRUFBU3gwRSxTQUFTdUssY0FBYyxVQUNwQ2lxRSxFQUFPL2dFLE9BQVEsRUFDZitnRSxFQUFPOTZELElBQU0sSUFBSXMyRCxHQUFJcjdFLEVBQVFteUUsS0FBSzZKLHdCQUF3Qmg4RSxHQUN0REEsRUFBUTgvRSxTQUVSRCxFQUFPRSxPQUFTLy9FLEVBQVE4L0UsU0FFM0J6MEUsU0FBU3NKLE1BQVF0SixTQUFTeXpDLE1BQU03b0MsWUFBWTRwRSxRQVZ6QyxXQUFhLG9EQUpiLFdBQWEsbURFdEdiRyxFQUFtQixVQUFTLFNBQVMsR0FBSWhnRixHQUFVLENBQUVteUUsSUFBS255RSxFQUFRbXlFLEtBQU9seUUsS0FBSzJ5RSxZQUgxRSxXQUFhLGlFQVFyQitNLEVBQWNqL0UsVUFBVWswRSxjQUFnQixTQUFVdnFFLEVBQU9qSSxFQUFPOGlFLEdBRTVELE9BREE3NkQsRUFBTXdWLFNBQVd4VixFQUFNd1YsVUFBWSxhQUM1Qml4RCxFQUFPcHdFLFVBQVVrMEUsY0FBY2p5RSxLQUFLMUMsS0FBTW9LLEVBQU9qSSxFQUFPOGlFLElBS25FeWEsRUFBY2ovRSxVQUFVODBFLFdBQWEsU0FBVW5yRSxHQUMzQyxJQUFJcStELEVBQWN6b0UsS0FBS3dvRSxlQUFldVcsSUFDbEN0VyxHQUNBQSxFQUFZd1csb0JBQW9CNzBFLEdBRXBDeW1FLEVBQU9wd0UsVUFBVTgwRSxXQUFXN3lFLEtBQUsxQyxLQUFNb0ssSUFFcENzMUUsRUE5Q3VCLENBK0NoQzdOLElDeERFbU8sR0FBdUIsQ0FDdkIsY0FDQSxTQUNBLE9BQ0EsbUJBQ0EsaUJBQ0Esb0JBQ0Esa0JBQ0EsY0FDQSxhQUNBLHFCQUNBLGNBQ0EsYUFDQSxpQkFDQSxlQUNBLGtCQUNBLGNBQ0EsY0FDQSxlQUNBLHFCQUNBLFNBQ0EsWUFDQSxlQUNBLGdCQUNBLFlBQ0Esa0JBQ0EsU0FDQSxpQkFDQSw0QkFDQSx3QkFHQUMsR0FBMEIsV0FJMUIsU0FBU0EsRUFBU2xnRixHQUlkQyxLQUFLQyxLQUFPZ2dGLEVBQVMvL0UsR0FDckJGLEtBQUt5OEQsVUFBVyxTQUFTLENBQUU4USxnQkFBZ0IsRUFBTTJTLGFBQWEsRUFBTW51Qyx1QkFBdUIsRUFBTTBpQyxhQUFhLEVBQU1qcUQsWUFBWSxHQUFRenFCLEdBc0w1SSxPQWhMQWtnRixFQUFTeC9FLFVBQVVDLFVBQVksV0FDM0IsSUFBSWlILEdBQVMsV0FDVDNILEtBQUt5OEQsU0FBU2p5QyxhQUNkLFNBQUs3aUIsRUFBUSxhQUFjM0gsS0FBS21nRixrQkFBa0IzK0UsS0FBS3hCLE9BRXZEQSxLQUFLeThELFNBQVNnWSxjQUNkLFNBQUs5c0UsRUFBUSxjQUFlM0gsS0FBS21nRixrQkFBa0IzK0UsS0FBS3hCLE9BRXhEQSxLQUFLeThELFNBQVMxcUIsd0JBQ2QsU0FBS3BxQyxFQUFRLHdCQUF5QjNILEtBQUtvZ0YsU0FBUzUrRSxLQUFLeEIsT0FFekRBLEtBQUt5OEQsU0FBUzhRLGdCQUFrQixtQkFBb0I1bEUsSUFDcEQsU0FBSzRsRSxlQUFlOXNFLFVBQVcsT0FBUVQsS0FBS3FnRixTQUFTNytFLEtBQUt4QixPQUUxREEsS0FBS3k4RCxTQUFTeWpCLGNBQ0k5L0UsTUFBTUMsUUFBUUwsS0FBS3k4RCxTQUFTeWpCLGFBQWVsZ0YsS0FBS3k4RCxTQUFTeWpCLFlBQWNGLElBQzdFNytFLFFBQVFuQixLQUFLc2dGLGlCQUFpQjkrRSxLQUFLeEIsUUFJdkRpZ0YsRUFBU3gvRSxVQUFVMC9FLGtCQUFvQixTQUFVOXlFLEdBRTdDLE9BQU8sV0FFSCxJQURBLElBQUl2TCxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBRXpCLElBQUl3K0UsRUFBbUJ6K0UsRUFBSyxHQVE1QixPQVBBQSxFQUFLLEdBQUs0OEUsR0FBSzZCLEVBQWtCLENBQzdCcjFFLFVBQVcsQ0FDUC9ILEtBQU0sQ0FBRWsyRSxVQUFVLFFBQWdCaHNFLElBQ2xDK21FLFNBQVMsRUFDVDdwRSxLQUFNLGdCQUdQOEMsRUFBUzFLLE1BQU0zQyxLQUFNOEIsS0FLcENtK0UsRUFBU3gvRSxVQUFVMi9FLFNBQVcsU0FBVS95RSxHQUVwQyxPQUFPLFNBQVUvSSxHQUViLE9BQU8rSSxFQUFTM0ssS0FBSzFDLEtBQU0wK0UsR0FBS3A2RSxFQUFVLENBQ3RDNEcsVUFBVyxDQUNQL0gsS0FBTSxDQUNGazJFLFNBQVUsd0JBQ1Z4dkQsU0FBUyxRQUFnQnhjLElBRTdCK21FLFNBQVMsRUFDVDdwRSxLQUFNLG1CQU10QjAxRSxFQUFTeC9FLFVBQVU2L0UsaUJBQW1CLFNBQVVweUUsR0FFNUMsSUFBSXZHLEdBQVMsV0FFVGd2RCxFQUFRaHZELEVBQU91RyxJQUFXdkcsRUFBT3VHLEdBQVF6TixVQUV4Q2syRCxHQUFVQSxFQUFNM29ELGdCQUFtQjJvRCxFQUFNM29ELGVBQWUsdUJBRzdELFNBQUsyb0QsRUFBTyxvQkFBb0IsU0FBVXRwRCxHQUN0QyxPQUFPLFNBQVVtekUsRUFBV2x3RSxFQUFJdlEsR0FDNUIsSUFDa0MsbUJBQW5CdVEsRUFBR3d1RSxjQUNWeHVFLEVBQUd3dUUsWUFBY0osR0FBS3B1RSxFQUFHd3VFLFlBQVl0OUUsS0FBSzhPLEdBQUssQ0FDM0NwRixVQUFXLENBQ1AvSCxLQUFNLENBQ0ZrMkUsU0FBVSxjQUNWeHZELFNBQVMsUUFBZ0J2WixHQUN6QnBDLE9BQVFBLEdBRVprbUUsU0FBUyxFQUNUN3BFLEtBQU0saUJBS3RCLE1BQU90SCxJQUdQLE9BQU9vSyxFQUFTM0ssS0FBSzFDLEtBQU13Z0YsRUFFM0I5QixHQUFLcHVFLEVBQUksQ0FDTHBGLFVBQVcsQ0FDUC9ILEtBQU0sQ0FDRmsyRSxTQUFVLG1CQUNWeHZELFNBQVMsUUFBZ0J2WixHQUN6QnBDLE9BQVFBLEdBRVprbUUsU0FBUyxFQUNUN3BFLEtBQU0sZ0JBRVZ4SyxRQUdaLFNBQUs0MkQsRUFBTyx1QkFBdUIsU0FBVXNXLEdBQ3pDLE9BQU8sU0FBVXVULEVBQVdsd0UsRUFBSXZRLEdBQzVCLElBQUkyQixFQWtCQSsrRSxFQUFzQm53RSxFQUMxQixJQUNJLElBQUlvd0UsRUFBc0QsUUFBOUJoL0UsRUFBSysrRSxTQUF3QyxJQUFQLytFLE9BQWdCLEVBQVNBLEVBQUdpOUUsbUJBQzFGK0IsR0FDQXpULEVBQTRCdnFFLEtBQUsxQyxLQUFNd2dGLEVBQVdFLEVBQXNCM2dGLEdBR2hGLE1BQU9pQixJQUdQLE9BQU9pc0UsRUFBNEJ2cUUsS0FBSzFDLEtBQU13Z0YsRUFBV0MsRUFBcUIxZ0YsU0FLMUZrZ0YsRUFBU3gvRSxVQUFVNC9FLFNBQVcsU0FBVWhTLEdBRXBDLE9BQU8sV0FFSCxJQURBLElBQUl2c0UsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQUd6QixJQUFJMHJFLEVBQU16dEUsS0FDTjJnRixFQUFzQixDQUFDLFNBQVUsVUFBVyxhQUFjLHNCQXdCOUQsT0F2QkFBLEVBQW9CeC9FLFNBQVEsU0FBVWlaLEdBQzlCQSxLQUFRcXpELEdBQTRCLG1CQUFkQSxFQUFJcnpELEtBRTFCLFNBQUtxekQsRUFBS3J6RCxHQUFNLFNBQVUvTSxHQUN0QixJQUFJdXpFLEVBQWMsQ0FDZDExRSxVQUFXLENBQ1AvSCxLQUFNLENBQ0ZrMkUsU0FBVWovRCxFQUNWeVAsU0FBUyxRQUFnQnhjLElBRTdCK21FLFNBQVMsRUFDVDdwRSxLQUFNLGVBUWQsT0FKSThDLEVBQVN2QyxzQkFDVDgxRSxFQUFZMTFFLFVBQVUvSCxLQUFLMG1CLFNBQVUsUUFBZ0J4YyxFQUFTdkMsc0JBRzNENHpFLEdBQUtyeEUsRUFBVXV6RSxTQUkzQnZTLEVBQWExckUsTUFBTTNDLEtBQU04QixLQU14Q20rRSxFQUFTLy9FLEdBQUssV0FDUCsvRSxFQS9Ma0IsR0MzQnpCWSxHQUFnQyxXQUVoQyxTQUFTQSxFQUFlOWdGLEdBSXBCQyxLQUFLQyxLQUFPNGdGLEVBQWUzZ0YsR0FFM0JGLEtBQUs4Z0YsMEJBQTJCLEVBRWhDOWdGLEtBQUsrZ0YsdUNBQXdDLEVBQzdDL2dGLEtBQUt5OEQsVUFBVyxTQUFTLENBQUV1VCxTQUFTLEVBQU1JLHNCQUFzQixHQUFRcndFLEdBb0w1RSxPQS9LQThnRixFQUFlcGdGLFVBQVVDLFVBQVksV0FDakNnRyxNQUFNczZFLGdCQUFrQixHQUNwQmhoRixLQUFLeThELFNBQVN1VCxVQUNkLEtBQUEvbkUsSUFBVyxvQ0FDWGpJLEtBQUtpaEYsZ0NBRUxqaEYsS0FBS3k4RCxTQUFTMlQsdUJBQ2QsS0FBQW5vRSxJQUFXLGlEQUNYakksS0FBS2toRiw4Q0FJYkwsRUFBZXBnRixVQUFVd2dGLDZCQUErQixXQUNwRCxJQUFJLy9FLEVBQVFsQixLQUNSQSxLQUFLOGdGLDJCQUdUeFUsR0FBMEIsQ0FFdEJob0UsU0FBVSxTQUFVbkIsR0FDaEIsSUFBSWlGLEVBQVFqRixFQUFLaUYsTUFDYis0RSxFQUFhLEtBQ2JDLEVBQWlCRCxFQUFXM1ksZUFBZXFZLEdBQzNDUSxFQUFzQmo1RSxJQUEwQyxJQUFqQ0EsRUFBTXVsRSx1QkFDekMsR0FBS3lULElBQWtCNUMsT0FBeUI2QyxFQUFoRCxDQUdBLElBQUkzOEUsRUFBU3k4RSxFQUFXOVosWUFDcEJqOUQsR0FBUSxFQUFBMEQsR0FBQSxJQUFZMUYsR0FDbEJsSCxFQUFNb2dGLDRCQUE0Qm4rRSxFQUFLdW5DLElBQUt2bkMsRUFBS3dHLElBQUt4RyxFQUFLOHNFLEtBQU05c0UsRUFBSytzRSxRQUN0RWh2RSxFQUFNcWdGLDhCQUE4Qi9ILEdBQXNCcHhFLE9BQU9zSixFQUFXLENBQzFFc29FLGlCQUFrQnQxRSxHQUFVQSxFQUFPd2pFLGFBQWE4UixpQkFDaERKLFdBQVcsSUFDWHoyRSxFQUFLd0csSUFBS3hHLEVBQUs4c0UsS0FBTTlzRSxFQUFLK3NFLFNBQ2xDLFNBQXNCOWxFLEVBQU8sQ0FDekJncUUsU0FBUyxFQUNUN3BFLEtBQU0sWUFFVjQyRSxFQUFXblosYUFBYTU5RCxFQUFPLENBQzNCeTlELGtCQUFtQnovRCxNQUczQm1DLEtBQU0sVUFFVnZLLEtBQUs4Z0YsMEJBQTJCLElBR3BDRCxFQUFlcGdGLFVBQVV5Z0YsMENBQTRDLFdBQ2pFLElBQUloZ0YsRUFBUWxCLEtBQ1JBLEtBQUsrZ0Ysd0NBR1R6VSxHQUEwQixDQUV0QmhvRSxTQUFVLFNBQVV0RCxHQUNoQixJQUFJb0gsRUFBUXBILEVBRVosSUFHUSxXQUFZQSxFQUNab0gsRUFBUXBILEVBQUV3MkIsT0FPTCxXQUFZeDJCLEdBQUssV0FBWUEsRUFBRXFOLFNBQ3BDakcsRUFBUXBILEVBQUVxTixPQUFPbXBCLFFBR3pCLE1BQU90ekIsSUFHUCxJQUFJaTlFLEVBQWEsS0FDYkMsRUFBaUJELEVBQVczWSxlQUFlcVksR0FDM0NRLEVBQXNCajVFLElBQTBDLElBQWpDQSxFQUFNdWxFLHVCQUN6QyxJQUFLeVQsR0FBa0I1QyxNQUF5QjZDLEVBQzVDLE9BQU8sRUFFWCxJQUFJMzhFLEVBQVN5OEUsRUFBVzlaLFlBQ3BCajlELEdBQVEsRUFBQTBELEdBQUEsSUFBWTFGLEdBQ2xCbEgsRUFBTXNnRixpQ0FBaUNwNUUsR0FDdkNveEUsR0FBc0JweEUsT0FBT3NKLEVBQVcsQ0FDdENzb0UsaUJBQWtCdDFFLEdBQVVBLEVBQU93akUsYUFBYThSLGlCQUNoREosV0FBVyxJQUVuQnh2RSxFQUFNUyxNQUFRMnJFLEdBQVM5dkUsT0FDdkIsU0FBc0IwRCxFQUFPLENBQ3pCZ3FFLFNBQVMsRUFDVDdwRSxLQUFNLHlCQUVWNDJFLEVBQVduWixhQUFhNTlELEVBQU8sQ0FDM0J5OUQsa0JBQW1Cei9ELEtBSTNCbUMsS0FBTSx1QkFFVnZLLEtBQUsrZ0YsdUNBQXdDLElBTWpERixFQUFlcGdGLFVBQVU2Z0YsNEJBQThCLFNBQVU1MkMsRUFBSy9nQyxFQUFLc21FLEVBQU1DLEdBQzdFLElBR0lqd0UsRUFEQW9LLEdBQVUsRUFBQXlELEdBQUEsSUFBYTQ4QixHQUFPQSxFQUFJcmdDLFFBQVVxZ0MsRUFFaEQsSUFBSSxFQUFBNThCLEdBQUEsSUFBU3pELEdBQVUsQ0FDbkIsSUFBSW8zRSxFQUFTcDNFLEVBQVFULE1BTEosNEdBTWI2M0UsSUFDQXhoRixFQUFPd2hGLEVBQU8sR0FDZHAzRSxFQUFVbzNFLEVBQU8sSUFHekIsSUFBSXIzRSxFQUFRLENBQ1JFLFVBQVcsQ0FDUGpHLE9BQVEsQ0FDSixDQUNJa0csS0FBTXRLLEdBQVEsUUFDZHVLLE1BQU9ILE1BS3ZCLE9BQU9ySyxLQUFLdWhGLDhCQUE4Qm4zRSxFQUFPVCxFQUFLc21FLEVBQU1DLElBUWhFMlEsRUFBZXBnRixVQUFVK2dGLGlDQUFtQyxTQUFVaHFELEdBQ2xFLE1BQU8sQ0FDSGx0QixVQUFXLENBQ1BqRyxPQUFRLENBQ0osQ0FDSWtHLEtBQU0scUJBRU5DLE1BQU8sb0RBQXNEdUUsT0FBT3lvQixRQVF4RnFwRCxFQUFlcGdGLFVBQVU4Z0YsOEJBQWdDLFNBQVVuM0UsRUFBT1QsRUFBS3NtRSxFQUFNQyxHQUNqRjlsRSxFQUFNRSxVQUFZRixFQUFNRSxXQUFhLEdBQ3JDRixFQUFNRSxVQUFVakcsT0FBUytGLEVBQU1FLFVBQVVqRyxRQUFVLEdBQ25EK0YsRUFBTUUsVUFBVWpHLE9BQU8sR0FBSytGLEVBQU1FLFVBQVVqRyxPQUFPLElBQU0sR0FDekQrRixFQUFNRSxVQUFVakcsT0FBTyxHQUFHZ25FLFdBQWFqaEUsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2duRSxZQUFjLEdBQy9FamhFLEVBQU1FLFVBQVVqRyxPQUFPLEdBQUdnbkUsV0FBV0UsT0FBU25oRSxFQUFNRSxVQUFVakcsT0FBTyxHQUFHZ25FLFdBQVdFLFFBQVUsR0FDN0YsSUFBSTZOLEVBQVF2dEUsTUFBTUQsU0FBU3NrRSxFQUFRLFVBQU94K0QsRUFBWXcrRCxFQUNsRHFKLEVBQVMxdEUsTUFBTUQsU0FBU3FrRSxFQUFNLFVBQU92K0QsRUFBWXUrRCxFQUNqRHpFLEdBQVcsRUFBQTE5RCxHQUFBLElBQVNuRSxJQUFRQSxFQUFJMUgsT0FBUyxFQUFJMEgsR0FBTSxXQVV2RCxPQVQyRCxJQUF2RFMsRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2duRSxXQUFXRSxPQUFPdHBFLFFBQzVDbUksRUFBTUUsVUFBVWpHLE9BQU8sR0FBR2duRSxXQUFXRSxPQUFPaG1FLEtBQUssQ0FDN0M2ekUsTUFBT0EsRUFDUDVOLFNBQVVBLEVBQ1Y2TixTQUFVLElBQ1ZDLFFBQVEsRUFDUkMsT0FBUUEsSUFHVG52RSxHQUtYeTJFLEVBQWUzZ0YsR0FBSyxpQkFDYjJnRixFQS9Md0IsR0NBL0JhLEdBQThCLFdBSTlCLFNBQVNBLEVBQWEzaEYsUUFDRixJQUFaQSxJQUFzQkEsRUFBVSxJQUlwQ0MsS0FBS0MsS0FBT3loRixFQUFheGhGLEdBQ3pCRixLQUFLNDRELEtBQU83NEQsRUFBUStGLEtBYlYsUUFjVjlGLEtBQUtzOEUsT0FBU3Y4RSxFQUFRNGhGLE9BYlYsRUFzRGhCLE9BcENBRCxFQUFhamhGLFVBQVVDLFVBQVksV0FDL0JrbEUsSUFBd0IsU0FBVXg3RCxFQUFPNjZELEdBQ3JDLElBQUl0OEQsRUFBTyxLQUFnQjYvRCxlQUFla1osR0FDMUMsT0FBSS80RSxFQUNPQSxFQUFLaTVFLFNBQVN4M0UsRUFBTzY2RCxHQUV6Qjc2RCxNQU1mczNFLEVBQWFqaEYsVUFBVW1oRixTQUFXLFNBQVV4M0UsRUFBTzY2RCxHQUMvQyxLQUFLNzZELEVBQU1FLFdBQWNGLEVBQU1FLFVBQVVqRyxRQUFXNGdFLElBQVMsRUFBQW4zRCxHQUFBLElBQWFtM0QsRUFBSzRDLGtCQUFtQm5oRSxRQUM5RixPQUFPMEQsRUFFWCxJQUFJeTNFLEVBQWU3aEYsS0FBSzhoRixlQUFlN2MsRUFBSzRDLGtCQUFtQjduRSxLQUFLNDRELE1BRXBFLE9BREF4dUQsRUFBTUUsVUFBVWpHLFFBQVMsU0FBU3c5RSxFQUFjejNFLEVBQU1FLFVBQVVqRyxRQUN6RCtGLEdBS1hzM0UsRUFBYWpoRixVQUFVcWhGLGVBQWlCLFNBQVUxNUUsRUFBT3RDLEVBQUtpSSxHQUUxRCxRQURjLElBQVZBLElBQW9CQSxFQUFRLE1BQzNCLEVBQUFELEdBQUEsSUFBYTFGLEVBQU10QyxHQUFNWSxRQUFVcUgsRUFBTTlMLE9BQVMsR0FBS2pDLEtBQUtzOEUsT0FDN0QsT0FBT3Z1RSxFQUVYLElBQ0l6RCxFQUFZdXVFLEdBRENmLEdBQWtCMXZFLEVBQU10QyxLQUV6QyxPQUFPOUYsS0FBSzhoRixlQUFlMTVFLEVBQU10QyxHQUFNQSxHQUFLLFNBQVMsQ0FBQ3dFLEdBQVl5RCxLQUt0RTJ6RSxFQUFheGhGLEdBQUssZUFDWHdoRixFQXBEc0IsR0NMN0IsSUFBUyxXQUVUSyxHQUEyQixXQUMzQixTQUFTQSxJQUlML2hGLEtBQUtDLEtBQU84aEYsRUFBVTdoRixHQTRCMUIsT0F2QkE2aEYsRUFBVXRoRixVQUFVQyxVQUFZLFdBQzVCa2xFLElBQXdCLFNBQVV4N0QsR0FDOUIsSUFBSTFJLEVBQUlDLEVBQUlDLEVBQ1osR0FBSSxLQUFnQjRtRSxlQUFldVosR0FBWSxDQUUzQyxJQUFLLEdBQU9oaUUsWUFBYyxHQUFPMVUsV0FBYSxHQUFPRCxTQUNqRCxPQUFPaEIsRUFHWCxJQUFJVCxHQUFnQyxRQUF4QmpJLEVBQUswSSxFQUFNaUMsZUFBNEIsSUFBUDNLLE9BQWdCLEVBQVNBLEVBQUdpSSxPQUFvQyxRQUExQmhJLEVBQUssR0FBTzBKLGdCQUE2QixJQUFQMUosT0FBZ0IsRUFBU0EsRUFBRzJKLE1BQzVJMDJFLEdBQVksR0FBTzUyRSxVQUFZLElBQUk0MkUsU0FDbkNoaUUsR0FBYSxHQUFPRCxXQUFhLElBQUlDLFVBQ3JDKy9DLEdBQVUsVUFBUyxVQUFTLFNBQVMsR0FBNkIsUUFBeEJuK0QsRUFBS3dJLEVBQU1pQyxlQUE0QixJQUFQekssT0FBZ0IsRUFBU0EsRUFBR20rRCxTQUFXaWlCLEdBQVksQ0FBRUMsUUFBU0QsSUFBZWhpRSxHQUFhLENBQUUsYUFBY0EsSUFDcEwzVCxHQUFVLFVBQVMsU0FBUyxHQUFLMUMsR0FBTyxDQUFFQSxJQUFLQSxJQUFTLENBQUVvMkQsUUFBU0EsSUFDdkUsT0FBTyxVQUFTLFNBQVMsR0FBSTMxRCxHQUFRLENBQUVpQyxRQUFTQSxJQUVwRCxPQUFPakMsTUFNZjIzRSxFQUFVN2hGLEdBQUssWUFDUjZoRixFQWpDbUIsR0NBbkIzTyxHQUFzQixDQUM3QixJQUFJLEdBQ0osSUFBSSxHQUNKLElBQUk2TSxHQUNKLElBQUlsQixHQUNKLElBQUk4QixHQUNKLElBQUlhLEdBQ0osSUFBSUssSUNxQlIsSUFBSUcsR0FBYyw2REM1QmxCLElDTFdDLEdDRUFDLEdGR1BDLEdBQVEsQ0FDUnByQyxTQUFVLENBQUMsWUFBYSxlQUN4QjErQixPQUFRLENBQUMsZUFBZ0IsV0FDekJ5ZCxRQUFTLENBQUMsZ0JBQWlCLGFBQzNCZzhCLE1BQU8sQ0FBQyxjQUFlLFdBQ3ZCNzZDLE9BQVEsQ0FBQyxlQUFnQixZQUV6Qm1yRSxHQUF3QixtQkFDeEJDLEdBQXNCLE9BQ3RCQyxHQUEyQixzQkErQjNCQyxHQUEyQixXQUkzQixTQUFTQSxFQUFVMWlGLEdBQ2YsSUFBSW1CLEVBQVFsQixLQUlaQSxLQUFLMGlGLGlCQUFtQixHQUd4QjFpRixLQUFLMmlGLG1CQUFxQixTQUFVcDhELEdBRWhDLElBQUlBLEVBQUd3QyxTQUFTNjVELGlCQUFoQixDQUdBcjhELEVBQUd3QyxTQUFTNjVELGtCQUFtQixFQUMvQixJQUFJM2lGLEVBQU9pQixFQUFNMmhGLGtCQUFrQnQ4RCxHQUMvQnU4RCxFQUFZN2lGLElBQVNzaUYsR0FDckJwZSxFQUFRLEdBTVI0ZSxFQUFjLFNBQVVqOEQsR0FDeEIsSUFBSXJiLEdBQU0sRUFBQXUzRSxHQUFBLE1BR045aEYsRUFBTStoRixVQUNOL2hGLEVBQU1naUYsZ0JBQWdCejNFLEdBR3RCOGEsRUFBR3NhLE1BQU0sUUFBVS9aLEdBQU0sV0FHckIsSUFBSXE4RCxFQUFvQkMsS0FDcEJELElBQ0FqaUYsRUFBTStoRixVQUFZRSxFQUFrQjNnRixXQUFXLENBQzNDaUIsWUFBYSxxQkFDYkQsR0FBSSxhQU1wQjYvRSxFQUFlLFNBQVV2OEQsRUFBTTFsQixHQUUvQixJQUFJa2lGLEVBQWNsakYsTUFBTUMsUUFBUWEsRUFBTXU3RCxTQUFTOG1CLGVBQWVDLGlCQUN4RHRpRixFQUFNdTdELFNBQVM4bUIsZUFBZUMsZ0JBQWdCdnlFLFFBQVFoUixJQUFTLEVBQy9EaUIsRUFBTXU3RCxTQUFTOG1CLGVBQWVDLGdCQUNoQ0MsRUFBVXZpRixFQUFNK2hGLFdBQWFHLEtBQ2pDLEdBQUtLLEdBQVlILEVBQWpCLENBR0EsSUFBSTczRSxHQUFNLEVBQUF1M0UsR0FBQSxNQUNOamdGLEVBQU9vaEUsRUFBTS9pRSxHQUdiMkIsR0FDQUEsRUFBS0QsU0FDTDVCLEVBQU1naUYsZ0JBQWdCejNFLElBR3RCOGEsRUFBR3NhLE1BQU0sUUFBVS9aLEdBQU0sV0FDakIyOEQsSUFDQXRmLEVBQU0vaUUsR0FBYXFpRixFQUFRamhGLFdBQVcsQ0FDbENpQixZQUFhLFFBQVV4RCxFQUFPLElBQzlCdUQsR0FBSXBDLFVBT3hCRixFQUFNdTdELFNBQVM4bUIsZUFBZTU4RCxNQUFNeGxCLFNBQVEsU0FBVUMsR0FHbEQsSUFBSXNpRixFQUFnQnJCLEdBQU1qaEYsR0FDckJzaUYsRUFJTEEsRUFBY3ZpRixTQUFRLFNBQVV3aUYsR0FDNUIsSUFBSTk1RCxFQUFVaTVELEVBQ1JDLEVBQVl2aEYsS0FBS04sRUFBT3lpRixHQUN4Qk4sRUFBYTdoRixLQUFLTixFQUFPeWlGLEVBQWN2aUYsR0FDekN3aUYsRUFBZXI5RCxFQUFHd0MsU0FBUzQ2RCxHQUMzQnZqRixNQUFNQyxRQUFRdWpGLEdBQ2RyOUQsRUFBR3dDLFNBQVM0NkQsSUFBZ0IsU0FBUyxDQUFDOTVELEdBQVUrNUQsR0FHaERyOUQsRUFBR3dDLFNBQVM0NkQsR0FEaUIsbUJBQWpCQyxFQUNnQixDQUFDLzVELEVBQVMrNUQsR0FHVixDQUFDLzVELE1BZmpDLFVBQVksaUJBQW1Cem9CLFFBb0IzQ3BCLEtBQUt5OEQsU0FBVzE4RCxFQTZHcEIsT0F4R0EwaUYsRUFBVWhpRixVQUFVb2pGLE1BQVEsV0FDeEI3akYsS0FBSzhqRix1QkFDRCxxQkFBc0I5akYsS0FBS3k4RCxVQUFZLGtCQUFtQno4RCxLQUFLeThELFdBQy9EejhELEtBQUsrakYsaUJBTWJ0QixFQUFVaGlGLFVBQVVvaUYsa0JBQW9CLFNBQVV0OEQsR0FFOUMsSUFBS0EsRUFDRCxPQUFPaThELEdBRVgsR0FBSWo4RCxFQUFHNlksUUFBVTdZLEVBQ2IsT0FBT2c4RCxHQUVYLElBQUtoOEQsRUFBR3dDLFNBQ0osT0FBT3k1RCxHQUVYLEdBQUlqOEQsRUFBR3dDLFNBQVM5b0IsS0FDWixPQUFPc21CLEVBQUd3QyxTQUFTOW9CLEtBRXZCLEdBQUlzbUIsRUFBR3dDLFNBQVNrVyxjQUNaLE9BQU8xWSxFQUFHd0MsU0FBU2tXLGNBR3ZCLEdBQUkxWSxFQUFHd0MsU0FBU2k3RCxPQUFRLENBQ3BCLElBQ0l4WSxFRDFCVCxTQUFrQnhoRSxFQUFNaTZFLEdBQzNCLElBQUk3d0IsRUF4SFIsU0FBbUJvWSxHQUNmLElBQUkwTSxFQUFRZ0ssR0FBWTF3QixLQUFLZ2EsR0FDN0IsT0FBTzBNLEVBQVFBLEVBQU1sMUUsTUFBTSxHQUFLLEdBc0h4QmtoRixDQUFVbDZFLEdBQU0sR0FJeEIsT0FIV29wRCxFQUFFMWlELFFBQXFCLEVBQWR1ekUsRUFBSWhpRixVQUFpQmdpRixJQUNyQzd3QixFQUFJQSxFQUFFMWlELE9BQU8sRUFBRzBpRCxFQUFFbnhELE9BQVNnaUYsRUFBSWhpRixTQUU1Qm14RCxFQ3FCZ0Ird0IsQ0FERzU5RCxFQUFHd0MsU0FBU2k3RCxPQUFPMzZFLFFBQVEsYUFBYyxJQUFJQSxRQUFRLE1BQU8sS0FDekMsUUFDckMsT0FBUXJKLEtBQUswaUYsaUJBQWlCbFgsS0FDekJ4ckUsS0FBSzBpRixpQkFBaUJsWCxHQUFZQSxFQUFTbmlFLFFBQVFpNUUsSUFBdUIsU0FBVTNoRixFQUFHMkksR0FDcEYsT0FBT0EsRUFBSUEsRUFBRXVTLGNBQWdCLE9BR3pDLE9BQU8ybUUsSUFHWEMsRUFBVWhpRixVQUFVeWlGLGdCQUFrQixTQUFVcGUsR0FDNUMsSUFBSTVqRSxFQUFRbEIsS0FDUkEsS0FBS29rRixnQkFDTC9zRCxhQUFhcjNCLEtBQUtva0YsZ0JBRXRCcGtGLEtBQUtva0YsZUFBaUI1NUQsWUFBVyxXQUV6QnRwQixFQUFNK2hGLFlBQ04vaEYsRUFBTStoRixVQUFVbmdGLE9BQU9naUUsR0FDdkI1akUsRUFBTStoRixlQUFZdnhFLEtBRXZCMVIsS0FBS3k4RCxTQUFTOG1CLGVBQWU1ckQsVUFHcEM4cUQsRUFBVWhpRixVQUFVc2pGLGNBQWdCLFdBQ2hDLElBQUlNLEVBQW9CcmtGLEtBQUsyaUYsbUJBQ3pCMkIsRUFBc0I5NUQsWUFBVyxXQUNqQyxVQUFZLHdGQUNiLEtBQ0h4cUIsS0FBS3k4RCxTQUFTcCtCLElBQUkyRSxNQUFNLENBQ3BCdWhELGFBQWMsV0FDVmx0RCxhQUFhaXRELEdBQ2JELEVBQWtCcmtGLFVBSzlCeWlGLEVBQVVoaUYsVUFBVXFqRixvQkFBc0IsV0FDdEMsSUFBSTVpRixFQUFRbEIsS0FFUndrRixFQUFzQnhrRixLQUFLeThELFNBQVNwK0IsSUFBSXo1QixPQUFPdVosYUFDbkRuZSxLQUFLeThELFNBQVNwK0IsSUFBSXo1QixPQUFPdVosYUFBZSxTQUFVL1YsRUFBT21lLEVBQUlnRCxHQUN6RCxJQUFJNHdELEVBQVcsR0FDZixHQUFJNXpELEVBQ0EsSUFDSTR6RCxFQUFTenVCLGNBQWdCeHFELEVBQU0yaEYsa0JBQWtCdDhELEdBQzdDcmxCLEVBQU11N0QsU0FBU2dvQixjQUNmdEssRUFBUzF4RCxVQUFZbEMsRUFBR3dDLFNBQVNOLFdBR3pDLE1BQU92a0IsR0FDSCxVQUFZLGtEQUdoQnFsQixJQUNBNHdELEVBQVN1SyxjQUFnQm43RCxHQUc3QmlCLFlBQVcsV0FDUCxLQUFnQis4QyxXQUFVLFNBQVVwbEUsR0FDaENBLEVBQU0yaEUsV0FBVyxNQUFPcVcsR0FDeEIsS0FBZ0IzUyxpQkFBaUJwL0QsU0FHTixtQkFBeEJvOEUsR0FDUEEsRUFBb0I5aEYsS0FBS3hCLEVBQU11N0QsU0FBU3ArQixJQUFLajJCLEVBQU9tZSxFQUFJZ0QsR0FFeERyb0IsRUFBTXU3RCxTQUFTa29CLFlBQ1h6akYsRUFBTXU3RCxTQUFTcCtCLElBQUlrRSxNQUNuQnJoQyxFQUFNdTdELFNBQVNwK0IsSUFBSWtFLEtBQUtwNkIsS0FBSyxZQUFjb2hCLEVBQU8sT0FBVW5oQixHQUFTQSxFQUFNNUIsWUFBYyxJQUFNK2YsR0FHbkdyZSxRQUFRRSxNQUFNQSxNQUluQnE2RSxFQWxObUIsR0FxTnZCLFNBQVNXLEtBQ1osSUFBSTFoRixFQUNKLE9BQ3FCLFFBRGJBLEVBQUssS0FDUlUsa0JBQStCLElBQVBWLE9BQWdCLEVBQVNBLEVBQUdzaUUsa0JDcFE3RCxTQUFXbWUsR0FDUEEsRUFBb0MsU0FBSSxpQkFDeENBLEVBQW1DLFFBQUksaUJBQ3ZDQSxFQUFnQyxLQUFJLGNBQ3BDQSxFQUF1QyxZQUFJLGNBSi9DLENBS0dBLEtBQThCQSxHQUE0QixLQ0g3RCxTQUFXQyxHQUVQQSxFQUFlLEdBQUksS0FFbkJBLEVBQTZCLGlCQUFJLG9CQUVqQ0EsRUFBNEIsZ0JBQUksa0JBRWhDQSxFQUE2QixpQkFBSSxvQkFFakNBLEVBQXFCLFNBQUksWUFFekJBLEVBQThCLGtCQUFJLHFCQUVsQ0EsRUFBNEIsZ0JBQUksbUJBRWhDQSxFQUEwQixjQUFJLGdCQUU5QkEsRUFBd0IsWUFBSSxjQUU1QkEsRUFBMEIsY0FBSSxpQkFFOUJBLEVBQXlCLGFBQUksZ0JBRTdCQSxFQUFzQixVQUFJLFlBRTFCQSxFQUEwQixjQUFJLGlCQUU5QkEsRUFBK0IsbUJBQUksc0JBRW5DQSxFQUFvQixRQUFJLFVBRXhCQSxFQUF1QixXQUFJLGVBRTNCQSxFQUFxQixTQUFJLFlBbEM3QixDQW1DR0EsS0FBZUEsR0FBYSxLQUUvQixTQUFXQSxHQTJDUEEsRUFBV2xNLGFBcENYLFNBQXNCME8sR0FDbEIsR0FBSUEsRUFBYSxJQUNiLE9BQU94QyxFQUFXbmMsR0FFdEIsR0FBSTJlLEdBQWMsS0FBT0EsRUFBYSxJQUNsQyxPQUFRQSxHQUNKLEtBQUssSUFDRCxPQUFPeEMsRUFBV3lDLGdCQUN0QixLQUFLLElBQ0QsT0FBT3pDLEVBQVcwQyxpQkFDdEIsS0FBSyxJQUNELE9BQU8xQyxFQUFXMkMsU0FDdEIsS0FBSyxJQUNELE9BQU8zQyxFQUFXNEMsY0FDdEIsS0FBSyxJQUNELE9BQU81QyxFQUFXNkMsbUJBQ3RCLEtBQUssSUFDRCxPQUFPN0MsRUFBVzhDLGtCQUN0QixRQUNJLE9BQU85QyxFQUFXK0MsZ0JBRzlCLEdBQUlQLEdBQWMsS0FBT0EsRUFBYSxJQUNsQyxPQUFRQSxHQUNKLEtBQUssSUFDRCxPQUFPeEMsRUFBV2dELGNBQ3RCLEtBQUssSUFDRCxPQUFPaEQsRUFBV2lELFlBQ3RCLEtBQUssSUFDRCxPQUFPakQsRUFBV2tELGlCQUN0QixRQUNJLE9BQU9sRCxFQUFXbUQsY0FHOUIsT0FBT25ELEVBQVdvRCxjQXpDMUIsQ0E0Q0dwRCxLQUFlQSxHQUFhLEtDbkZ4QixJQUFJcUQsR0FBcUIsSUFBSWxtRSxPQUFPLDZEQVVwQyxTQUFTbW1FLEdBQWtCM2xGLEdBQzlCLE1BQU8scUJBQXNCQSxHQUFXLGtCQUFtQkEsRUE0QnhELFNBQVMsR0FBcUJ5cEUsR0FFakMsSUFBSTluRSxFQUFJQyxFQUNSLFlBRlksSUFBUjZuRSxJQUFrQkEsRUFBTSxNQUVvRCxRQUF4RTduRSxFQUFvQixRQUFkRCxFQUFLOG5FLFNBQXdCLElBQVA5bkUsT0FBZ0IsRUFBU0EsRUFBR1Usa0JBQStCLElBQVBULE9BQWdCLEVBQVNBLEVBQUdxaUUsaUJBTWpILFNBQVMyaEIsR0FBUTNDLEdBQ3BCLE9BQU9BLEVBQU8sSUMvQmxCLFNBQVM0QyxLQUNMLElBQUl6QyxFQUFvQixLQUNwQkEsSUFDQSxLQUFBbDdFLElBQVcsMEJBQTRCbTZFLEdBQVdtRCxjQUFnQiw0QkFDbEVwQyxFQUFrQjBDLFVBQVV6RCxHQUFXbUQsZ0JDZC9DLElBQUlPLEdBQThCLFdBQzlCLFNBQVNBLEVBQWFDLFFBQ0gsSUFBWEEsSUFBcUJBLEVBQVMsS0FDbEMvbEYsS0FBS21rRSxNQUFRLEdBQ2Jua0UsS0FBS2dtRixRQUFVRCxFQWdCbkIsT0FSQUQsRUFBYXJsRixVQUFVcU0sSUFBTSxTQUFVL0osR0FDL0IvQyxLQUFLbWtFLE1BQU1saUUsT0FBU2pDLEtBQUtnbUYsUUFDekJqakYsRUFBS21oRSxrQkFBZXh5RCxFQUdwQjFSLEtBQUtta0UsTUFBTTUrRCxLQUFLeEMsSUFHakIraUYsRUFwQnNCLEdDSjdCRyxHQUE2QixTQUFVcFYsR0FTdkMsU0FBU29WLEVBQVlDLEVBQW9CMWMsR0FDckMsSUFBSXRvRSxFQUFRMnZFLEVBQU9udUUsS0FBSzFDLEtBQU1rbUYsSUFBdUJsbUYsS0FjckQsT0FiQWtCLEVBQU02N0UsVUFBWSxHQUNsQjc3RSxFQUFNaWxGLGNBQWdCLEdBSXRCamxGLEVBQU1rbEYsS0FBTyxNQUNULEVBQUF0NEUsR0FBQSxJQUFhMDdELEVBQUs1QyxNQUNsQjFsRSxFQUFNa2xGLEtBQU81YyxHQUVqQnRvRSxFQUFNakIsS0FBT2ltRixFQUFtQmptRixNQUFRLEdBQ3hDaUIsRUFBTW1sRixTQUFXSCxFQUFtQkksUUFFcENwbEYsRUFBTStpRSxZQUFjL2lFLEVBQ2JBLEVBa0dYLE9BekhBLFNBQVUra0YsRUFBYXBWLEdBNEJ2Qm9WLEVBQVl4bEYsVUFBVThsRixRQUFVLFNBQVV0bUYsR0FDdENELEtBQUtDLEtBQU9BLEdBTWhCZ21GLEVBQVl4bEYsVUFBVStsRixpQkFBbUIsU0FBVVQsUUFDaEMsSUFBWEEsSUFBcUJBLEVBQVMsS0FDN0IvbEYsS0FBS2trRSxlQUNObGtFLEtBQUtra0UsYUFBZSxJQUFJNGhCLEdBQWFDLElBRXpDL2xGLEtBQUtra0UsYUFBYXAzRCxJQUFJOU0sT0FNMUJpbUYsRUFBWXhsRixVQUFVZ21GLGdCQUFrQixTQUFVQyxHQUM5QzFtRixLQUFLbW1GLGVBQWdCLFNBQVMsR0FBSU8sSUFNdENULEVBQVl4bEYsVUFBVWttRixZQUFjLFNBQVVDLEdBQzFDNW1GLEtBQUsrOEUsV0FBWSxVQUFTLFNBQVMsR0FBSS84RSxLQUFLKzhFLFdBQVk2SixJQUs1RFgsRUFBWXhsRixVQUFVcUMsT0FBUyxTQUFVbXJFLEdBQ3JDLElBQUkvc0UsRUFBUWxCLEtBRVosUUFBMEIwUixJQUF0QjFSLEtBQUtpdUUsYUFBVCxDQVNBLEdBTktqdUUsS0FBS0MsT0FDTixVQUFZLHVFQUNaRCxLQUFLQyxLQUFPLDJCQUdoQjR3RSxFQUFPcHdFLFVBQVVxQyxPQUFPSixLQUFLMUMsS0FBTWl1RSxJQUNkLElBQWpCanVFLEtBQUs2bUYsUUFBVCxDQUtBLElBQUlDLEVBQWdCOW1GLEtBQUtra0UsYUFBZWxrRSxLQUFLa2tFLGFBQWFDLE1BQU0vdEQsUUFBTyxTQUFVdUMsR0FBSyxPQUFPQSxJQUFNelgsR0FBU3lYLEVBQUVzMUQsZ0JBQW1CLEdBQzdIanVFLEtBQUtxbUYsVUFBWVMsRUFBYzdrRixPQUFTLElBQ3hDakMsS0FBS2l1RSxhQUFlNlksRUFBY2hqRixRQUFPLFNBQVU4bEMsRUFBTS9LLEdBQ3JELE9BQUkrSyxFQUFLcWtDLGNBQWdCcHZDLEVBQVFvdkMsYUFDdEJya0MsRUFBS3FrQyxhQUFlcHZDLEVBQVFvdkMsYUFBZXJrQyxFQUFPL0ssRUFFdEQrSyxLQUNScWtDLGNBRVAsSUFBSWhLLEVBQWMsQ0FDZFEsU0FBVSxDQUNOdEcsTUFBT24rRCxLQUFLa2xFLG1CQUVoQmYsTUFBTzJpQixFQUNQQyxnQkFBaUIvbUYsS0FBS2t1RSxlQUN0Qi9LLEtBQU1uakUsS0FBS21qRSxLQUNYMkIsVUFBVzlrRSxLQUFLaXVFLGFBQ2hCaEssWUFBYWprRSxLQUFLQyxLQUNsQnNLLEtBQU0sY0FDTnF3RSxXQUFZNTZFLEtBQUsrOEUsV0FPckIsT0FMc0J4MkUsT0FBT3dFLEtBQUsvSyxLQUFLbW1GLGVBQWVsa0YsT0FBUyxJQUUzRCxLQUFBZ0csSUFBVyxvREFBcURqRSxLQUFLQyxVQUFVakUsS0FBS21tRixtQkFBZXowRSxFQUFXLElBQzlHdXlELEVBQVl5aUIsYUFBZTFtRixLQUFLbW1GLGVBRTdCbm1GLEtBQUtvbUYsS0FBS3BlLGFBQWEvRCxHQTdCMUIsS0FBQWg4RCxJQUFXLHNGQWtDbkJnK0UsRUFBWXhsRixVQUFVdW1GLFVBQVksV0FDOUIsSUFBSXpqRixFQUFjc3RFLEVBQU9wd0UsVUFBVXVtRixVQUFVdGtGLEtBQUsxQyxNQUNsRCxPQUFPLFVBQWtCLFVBQVMsU0FBUyxHQUFJdUQsR0FBYyxDQUFFdEQsS0FBTUQsS0FBS0MsS0FBTXFtRixRQUFTdG1GLEtBQUtxbUYsYUFLbEdKLEVBQVl4bEYsVUFBVXdtRixrQkFBb0IsU0FBVWYsR0FDaEQsSUFBSXhrRixFQUlKLE9BSEFtdkUsRUFBT3B3RSxVQUFVd21GLGtCQUFrQnZrRixLQUFLMUMsS0FBTWttRixHQUM5Q2xtRixLQUFLQyxLQUF1Q3lCLE9BQS9CQSxFQUFLd2tGLEVBQW1Cam1GLE1BQXNDeUIsRUFBSyxHQUNoRjFCLEtBQUtxbUYsU0FBV0gsRUFBbUJJLFFBQzVCdG1GLE1BRUppbUYsRUExSHFCLENEOEJOLFdBUXRCLFNBQVNpQixFQUFLM2pGLEdBc0JWLEdBbEJBdkQsS0FBS21uRixTQUFVLFdBSWZubkYsS0FBS29uRixRQUFTLFdBQVF6M0IsVUFBVSxJQUloQzN2RCxLQUFLa3VFLGdCQUFpQixFQUFBOFUsR0FBQSxNQUl0QmhqRixLQUFLbWpFLEtBQU8sR0FLWm5qRSxLQUFLbUQsS0FBTyxJQUNQSSxFQUNELE9BQU92RCxLQUVQdUQsRUFBWTRqRixVQUNabm5GLEtBQUttbkYsUUFBVTVqRixFQUFZNGpGLFNBRTNCNWpGLEVBQVk2akYsU0FDWnBuRixLQUFLb25GLE9BQVM3akYsRUFBWTZqRixRQUUxQjdqRixFQUFZOGpGLGVBQ1pybkYsS0FBS3FuRixhQUFlOWpGLEVBQVk4akYsY0FHaEMsWUFBYTlqRixJQUNidkQsS0FBSzZtRixRQUFVdGpGLEVBQVlzakYsU0FFM0J0akYsRUFBWUMsS0FDWnhELEtBQUt3RCxHQUFLRCxFQUFZQyxJQUV0QkQsRUFBWUUsY0FDWnpELEtBQUt5RCxZQUFjRixFQUFZRSxhQUUvQkYsRUFBWUosT0FDWm5ELEtBQUttRCxLQUFPSSxFQUFZSixNQUV4QkksRUFBWTQvRCxPQUNabmpFLEtBQUttakUsS0FBTzUvRCxFQUFZNC9ELE1BRXhCNS9ELEVBQVl5aUUsU0FDWmhtRSxLQUFLZ21FLE9BQVN6aUUsRUFBWXlpRSxRQUUxQnppRSxFQUFZMnFFLGlCQUNabHVFLEtBQUtrdUUsZUFBaUIzcUUsRUFBWTJxRSxnQkFFbEMzcUUsRUFBWTBxRSxlQUNaanVFLEtBQUtpdUUsYUFBZTFxRSxFQUFZMHFFLGNBbUp4QyxPQTVJQWlaLEVBQUt6bUYsVUFBVWdqQixNQUFRLFNBQVVsZ0IsR0FDN0IsT0FBT3ZELEtBQUt3QyxXQUFXZSxJQUszQjJqRixFQUFLem1GLFVBQVUrQixXQUFhLFNBQVVlLEdBQ2xDLElBQUkrakYsRUFBWSxJQUFJSixHQUFLLFVBQVMsU0FBUyxHQUFJM2pGLEdBQWMsQ0FBRThqRixhQUFjcm5GLEtBQUtvbkYsT0FBUVAsUUFBUzdtRixLQUFLNm1GLFFBQVNNLFFBQVNubkYsS0FBS21uRixXQU0vSCxPQUxBRyxFQUFVcGpCLGFBQWVsa0UsS0FBS2trRSxhQUMxQm9qQixFQUFVcGpCLGNBQ1ZvakIsRUFBVXBqQixhQUFhcDNELElBQUl3NkUsR0FFL0JBLEVBQVVyakIsWUFBY2prRSxLQUFLaWtFLFlBQ3RCcWpCLEdBS1hKLEVBQUt6bUYsVUFBVTJpRSxPQUFTLFNBQVV0OUQsRUFBSzBFLEdBQ25DLElBQUk5SSxFQUVKLE9BREExQixLQUFLbWpFLE1BQU8sVUFBUyxTQUFTLEdBQUluakUsS0FBS21qRSxRQUFRemhFLEVBQUssSUFBT29FLEdBQU8wRSxFQUFPOUksSUFDbEUxQixNQU1Ya25GLEVBQUt6bUYsVUFBVThtRixRQUFVLFNBQVV6aEYsRUFBSzBFLEdBQ3BDLElBQUk5SSxFQUVKLE9BREExQixLQUFLbUQsTUFBTyxVQUFTLFNBQVMsR0FBSW5ELEtBQUttRCxRQUFRekIsRUFBSyxJQUFPb0UsR0FBTzBFLEVBQU85SSxJQUNsRTFCLE1BS1hrbkYsRUFBS3ptRixVQUFVb2xGLFVBQVksU0FBVXI3RSxHQUVqQyxPQURBeEssS0FBS2dtRSxPQUFTeDdELEVBQ1B4SyxNQUtYa25GLEVBQUt6bUYsVUFBVSttRixjQUFnQixTQUFVNUMsR0FDckM1a0YsS0FBS29qRSxPQUFPLG1CQUFvQnIwRCxPQUFPNjFFLElBQ3ZDLElBQUk2QyxFQUFhckYsR0FBV2xNLGFBQWEwTyxHQUl6QyxPQUhJNkMsSUFBZXJGLEdBQVdvRCxjQUMxQnhsRixLQUFLNmxGLFVBQVU0QixHQUVaem5GLE1BS1hrbkYsRUFBS3ptRixVQUFVaW5GLFVBQVksV0FDdkIsT0FBTzFuRixLQUFLZ21FLFNBQVdvYyxHQUFXbmMsSUFLdENpaEIsRUFBS3ptRixVQUFVcUMsT0FBUyxTQUFVbXJFLEdBQzlCanVFLEtBQUtpdUUsYUFBdUMsaUJBQWpCQSxFQUE0QkEsR0FBZSxFQUFBK1UsR0FBQSxPQUsxRWtFLEVBQUt6bUYsVUFBVWtuRixjQUFnQixXQUMzQixJQUFJQyxFQUFnQixHQUlwQixZQUhxQmwyRSxJQUFqQjFSLEtBQUs2bUYsVUFDTGUsRUFBZ0I1bkYsS0FBSzZtRixRQUFVLEtBQU8sTUFFbkM3bUYsS0FBS21uRixRQUFVLElBQU1ubkYsS0FBS29uRixPQUFTUSxHQUs5Q1YsRUFBS3ptRixVQUFVdW1GLFVBQVksV0FDdkIsT0FBTyxTQUFrQixDQUNyQjdqRixLQUFNbkQsS0FBS21ELEtBQ1hNLFlBQWF6RCxLQUFLeUQsWUFDbEJ3cUUsYUFBY2p1RSxLQUFLaXVFLGFBQ25CenFFLEdBQUl4RCxLQUFLd0QsR0FDVDZqRixhQUFjcm5GLEtBQUtxbkYsYUFDbkJSLFFBQVM3bUYsS0FBSzZtRixRQUNkTyxPQUFRcG5GLEtBQUtvbkYsT0FDYmxaLGVBQWdCbHVFLEtBQUtrdUUsZUFDckJsSSxPQUFRaG1FLEtBQUtnbUUsT0FDYjdDLEtBQU1uakUsS0FBS21qRSxLQUNYZ2tCLFFBQVNubkYsS0FBS21uRixXQU10QkQsRUFBS3ptRixVQUFVd21GLGtCQUFvQixTQUFVMWpGLEdBQ3pDLElBQUk3QixFQUFJQyxFQUFJQyxFQUFJQyxFQUFJNkYsRUFZcEIsT0FYQTFILEtBQUttRCxLQUFnQ3pCLE9BQXhCQSxFQUFLNkIsRUFBWUosTUFBc0N6QixFQUFLLEdBQ3pFMUIsS0FBS3lELFlBQWNGLEVBQVlFLFlBQy9CekQsS0FBS2l1RSxhQUFlMXFFLEVBQVkwcUUsYUFDaENqdUUsS0FBS3dELEdBQUtELEVBQVlDLEdBQ3RCeEQsS0FBS3FuRixhQUFlOWpGLEVBQVk4akYsYUFDaENybkYsS0FBSzZtRixRQUFVdGpGLEVBQVlzakYsUUFDM0I3bUYsS0FBS29uRixPQUFvQ3psRixPQUExQkEsRUFBSzRCLEVBQVk2akYsUUFBd0N6bEYsRUFBSzNCLEtBQUtvbkYsT0FDbEZwbkYsS0FBS2t1RSxlQUFvRHRzRSxPQUFsQ0EsRUFBSzJCLEVBQVkycUUsZ0JBQWdEdHNFLEVBQUs1QixLQUFLa3VFLGVBQ2xHbHVFLEtBQUtnbUUsT0FBU3ppRSxFQUFZeWlFLE9BQzFCaG1FLEtBQUttakUsS0FBZ0N0aEUsT0FBeEJBLEVBQUswQixFQUFZNC9ELE1BQXNDdGhFLEVBQUssR0FDekU3QixLQUFLbW5GLFFBQXNDei9FLE9BQTNCQSxFQUFLbkUsRUFBWTRqRixTQUF5Q3ovRSxFQUFLMUgsS0FBS21uRixRQUM3RW5uRixNQUtYa25GLEVBQUt6bUYsVUFBVXlrRSxnQkFBa0IsV0FDN0IsT0FBTyxTQUFrQixDQUNyQi9oRSxLQUFNb0QsT0FBT3dFLEtBQUsvSyxLQUFLbUQsTUFBTWxCLE9BQVMsRUFBSWpDLEtBQUttRCxVQUFPdU8sRUFDdERqTyxZQUFhekQsS0FBS3lELFlBQ2xCRCxHQUFJeEQsS0FBS3dELEdBQ1Rxa0YsZUFBZ0I3bkYsS0FBS3FuRixhQUNyQlMsUUFBUzluRixLQUFLb25GLE9BQ2RwaEIsT0FBUWhtRSxLQUFLZ21FLE9BQ2I3QyxLQUFNNThELE9BQU93RSxLQUFLL0ssS0FBS21qRSxNQUFNbGhFLE9BQVMsRUFBSWpDLEtBQUttakUsVUFBT3p4RCxFQUN0RHEyRSxTQUFVL25GLEtBQUttbkYsV0FNdkJELEVBQUt6bUYsVUFBVTJPLE9BQVMsV0FDcEIsT0FBTyxTQUFrQixDQUNyQmpNLEtBQU1vRCxPQUFPd0UsS0FBSy9LLEtBQUttRCxNQUFNbEIsT0FBUyxFQUFJakMsS0FBS21ELFVBQU91TyxFQUN0RGpPLFlBQWF6RCxLQUFLeUQsWUFDbEJELEdBQUl4RCxLQUFLd0QsR0FDVHFrRixlQUFnQjduRixLQUFLcW5GLGFBQ3JCUyxRQUFTOW5GLEtBQUtvbkYsT0FDZEwsZ0JBQWlCL21GLEtBQUtrdUUsZUFDdEJsSSxPQUFRaG1FLEtBQUtnbUUsT0FDYjdDLEtBQU01OEQsT0FBT3dFLEtBQUsvSyxLQUFLbWpFLE1BQU1saEUsT0FBUyxFQUFJakMsS0FBS21qRSxVQUFPenhELEVBQ3REb3pELFVBQVc5a0UsS0FBS2l1RSxhQUNoQjhaLFNBQVUvbkYsS0FBS21uRixXQUdoQkQsRUFwTmMsSUUxQnJCYyxHQUE2QyxTQUFVblgsR0FFdkQsU0FBU21YLEVBQTRCQyxFQUFlQyxFQUFjQyxFQUFtQnBDLFFBQ3ZELElBQXRCb0MsSUFBZ0NBLEVBQW9CLElBQ3hELElBQUlqbkYsRUFBUTJ2RSxFQUFPbnVFLEtBQUsxQyxLQUFNK2xGLElBQVcvbEYsS0FJekMsT0FIQWtCLEVBQU0rbUYsY0FBZ0JBLEVBQ3RCL21GLEVBQU1nbkYsYUFBZUEsRUFDckJobkYsRUFBTWluRixrQkFBb0JBLEVBQ25Cam5GLEVBc0JYLE9BN0JBLFNBQVU4bUYsRUFBNkJuWCxHQVl2Q21YLEVBQTRCdm5GLFVBQVVxTSxJQUFNLFNBQVUvSixHQUNsRCxJQUFJN0IsRUFBUWxCLEtBR1IrQyxFQUFLcWtGLFNBQVdwbkYsS0FBS21vRixvQkFFckJwbEYsRUFBS0QsT0FBUyxTQUFVbXJFLEdBQ3BCbHJFLEVBQUtrckUsYUFBdUMsaUJBQWpCQSxFQUE0QkEsR0FBZSxFQUFBK1UsR0FBQSxNQUN0RTloRixFQUFNZ25GLGFBQWFubEYsRUFBS3FrRixjQUdGMTFFLElBQXRCM08sRUFBS2tyRSxjQUNManVFLEtBQUtpb0YsY0FBY2xsRixFQUFLcWtGLFNBR2hDdlcsRUFBT3B3RSxVQUFVcU0sSUFBSXBLLEtBQUsxQyxLQUFNK0MsSUFFN0JpbEYsRUE5QnFDLENBK0I5Q2xDLElBT0VzQyxHQUFpQyxTQUFVdlgsR0FFM0MsU0FBU3VYLEVBQWdCbEMsRUFBb0JtQyxFQUU3Q0MsRUFFQUMsUUFDeUIsSUFBakJELElBQTJCQSxFQWpETCxVQWtEVCxJQUFiQyxJQUF1QkEsR0FBVyxHQUN0QyxJQUFJcm5GLEVBQVEydkUsRUFBT251RSxLQUFLMUMsS0FBTWttRixFQUFvQm1DLElBQWFyb0YsS0EwQi9ELE9BekJBa0IsRUFBTW1uRixTQUFXQSxFQUNqQm5uRixFQUFNb25GLGFBQWVBLEVBQ3JCcG5GLEVBQU1xbkYsU0FBV0EsRUFFakJybkYsRUFBTXNuRixXQUFhLEdBRW5CdG5GLEVBQU11bkYsZ0JBQWtCLEVBRXhCdm5GLEVBQU13bkYsa0JBQW9CLEVBRTFCeG5GLEVBQU15bkYsV0FBWSxFQUNsQnpuRixFQUFNMG5GLHVCQUF5QixHQUMzQlAsR0FBWUUsSUFFWk0sR0FBdUJSLEdBR3ZCLEtBQUFwZ0YsSUFBVywrQ0FBaUQvRyxFQUFNa21GLFFBQ2xFaUIsRUFBU2hnQixnQkFBZSxTQUFVbG1FLEdBQVMsT0FBT0EsRUFBTTRoRSxRQUFRN2lFLE9BRXBFQSxFQUFNNG5GLGFBQWV0K0QsWUFBVyxXQUN2QnRwQixFQUFNeW5GLFdBQ1B6bkYsRUFBTTRCLFdBRVg1QixFQUFNb25GLGNBQ0ZwbkYsRUFtS1gsT0FyTUEsU0FBVWtuRixFQUFpQnZYLEdBcUMzQnVYLEVBQWdCM25GLFVBQVVxQyxPQUFTLFNBQVVtckUsR0FDekMsSUFBSW4rRCxFQUFLcE8sRUFDTFIsRUFBUWxCLEtBSVosUUFIcUIsSUFBakJpdUUsSUFBMkJBLEdBQWUsRUFBQStVLEdBQUEsT0FDOUNoakYsS0FBSzJvRixXQUFZLEVBQ2pCM29GLEtBQUt3b0YsV0FBYSxHQUNkeG9GLEtBQUtra0UsYUFBYyxDQUNuQixLQUFBajhELElBQVcsc0NBQXVDLElBQUk4RCxLQUFvQixJQUFma2lFLEdBQXFCdkgsY0FBZTFtRSxLQUFLd0QsSUFDcEcsSUFDSSxJQUFLLElBQUk3QixHQUFLLFNBQVMzQixLQUFLNG9GLHdCQUF5QmhuRixFQUFLRCxFQUFHcU8sUUFBU3BPLEVBQUdxTyxLQUFNck8sRUFBS0QsRUFBR3FPLFFBRW5GMUwsRUFEZTFDLEVBQUc0SSxPQUNUeEssS0FBTWl1RSxHQUd2QixNQUFPLzlELEdBQVNKLEVBQU0sQ0FBRTFILE1BQU84SCxHQUMvQixRQUNJLElBQ1F0TyxJQUFPQSxFQUFHcU8sT0FBU3ZPLEVBQUtDLEVBQUd3TyxTQUFTek8sRUFBR2dCLEtBQUtmLEdBRXBELFFBQVUsR0FBSW1PLEVBQUssTUFBTUEsRUFBSTFILE9BRWpDcEksS0FBS2trRSxhQUFhQyxNQUFRbmtFLEtBQUtra0UsYUFBYUMsTUFBTS90RCxRQUFPLFNBQVVyVCxHQUUvRCxHQUFJQSxFQUFLcWtGLFNBQVdsbUYsRUFBTWttRixPQUN0QixPQUFPLEVBR05ya0YsRUFBS2tyRSxlQUNObHJFLEVBQUtrckUsYUFBZUEsRUFDcEJsckUsRUFBSzhpRixVQUFVekQsR0FBVzJHLFdBQzFCLEtBQUE5Z0YsSUFBVywwREFBMkRqRSxLQUFLQyxVQUFVbEIsT0FBTTJPLEVBQVcsS0FFMUcsSUFBSXMzRSxFQUFXam1GLEVBQUttckUsZUFBaUJELEVBSXJDLE9BSEsrYSxHQUNELEtBQUEvZ0YsSUFBVyw2RUFBOEVqRSxLQUFLQyxVQUFVbEIsT0FBTTJPLEVBQVcsSUFFdEhzM0UsS0FFWCxLQUFBL2dGLElBQVcsMkNBR1gsS0FBQUEsSUFBVyx1Q0FNZixPQUhJakksS0FBS3VvRixVQUNMTSxHQUF1QjdvRixLQUFLcW9GLFVBRXpCeFgsRUFBT3B3RSxVQUFVcUMsT0FBT0osS0FBSzFDLEtBQU1pdUUsSUFTOUNtYSxFQUFnQjNuRixVQUFVd29GLDZCQUErQixTQUFVM2tGLEdBQy9EdEUsS0FBSzRvRix1QkFBdUJyakYsS0FBS2pCLElBS3JDOGpGLEVBQWdCM25GLFVBQVUrbEYsaUJBQW1CLFNBQVVULEdBQ25ELElBQUk3a0YsRUFBUWxCLEtBQ1BBLEtBQUtra0UsZUFhTmxrRSxLQUFLa2tFLGFBQWUsSUFBSThqQixJQVpMLFNBQVU5bkYsR0FDckJnQixFQUFNeW5GLFdBR1Z6bkYsRUFBTSttRixjQUFjL25GLE1BRU4sU0FBVUEsR0FDcEJnQixFQUFNeW5GLFdBR1Z6bkYsRUFBTWduRixhQUFhaG9GLEtBRXdERixLQUFLb25GLE9BQVFyQixHQUU1RixLQUFBOTlFLElBQVcsc0JBQ1hqSSxLQUFLa3BGLGtCQUVUbHBGLEtBQUtra0UsYUFBYXAzRCxJQUFJOU0sT0FNMUJvb0YsRUFBZ0IzbkYsVUFBVXduRixjQUFnQixTQUFVYixHQUM1Q3BuRixLQUFLOG9GLGVBQ0x6eEQsYUFBYXIzQixLQUFLOG9GLGNBQ2xCOW9GLEtBQUs4b0Ysa0JBQWVwM0UsR0FFeEIsS0FBQXpKLElBQVcsMkJBQTZCbS9FLEdBQ3hDcG5GLEtBQUt3b0YsV0FBV3BCLElBQVUsRUFDMUIsS0FBQW4vRSxJQUFXLGlDQUFrQzFCLE9BQU93RSxLQUFLL0ssS0FBS3dvRixZQUFZdm1GLFNBTTlFbW1GLEVBQWdCM25GLFVBQVV5bkYsYUFBZSxTQUFVZCxHQUMvQyxJQUFJbG1GLEVBQVFsQixLQU9aLEdBTklBLEtBQUt3b0YsV0FBV3BCLEtBQ2hCLEtBQUFuL0UsSUFBVyx5QkFBMkJtL0UsVUFFL0JwbkYsS0FBS3dvRixXQUFXcEIsR0FDdkIsS0FBQW4vRSxJQUFXLGlDQUFrQzFCLE9BQU93RSxLQUFLL0ssS0FBS3dvRixZQUFZdm1GLFNBRWxDLElBQXhDc0UsT0FBT3dFLEtBQUsvSyxLQUFLd29GLFlBQVl2bUYsT0FBYyxDQUMzQyxJQUFJMDFCLEVBQVUzM0IsS0FBS3NvRixhQUdmYSxHQUFRLEVBQUFuRyxHQUFBLE1BQW9CcnJELEVBQVUsSUFDMUNuTixZQUFXLFdBQ0Z0cEIsRUFBTXluRixXQUNQem5GLEVBQU00QixPQUFPcW1GLEtBRWxCeHhELEtBT1h5d0QsRUFBZ0IzbkYsVUFBVTJvRixNQUFRLFdBRzlCLEdBRkEveEQsYUFBYXIzQixLQUFLeW9GLGtCQUVkem9GLEtBQUsyb0YsVUFBVCxDQUdBLElBQUk1OUUsRUFBT3hFLE9BQU93RSxLQUFLL0ssS0FBS3dvRixZQUN4QmEsRUFBa0J0K0UsRUFBSzlJLE9BQVM4SSxFQUFLakgsUUFBTyxTQUFVOGxDLEVBQU0vSyxHQUFXLE9BQU8rSyxFQUFPL0ssS0FBYyxHQUNuR3dxRCxJQUFvQnJwRixLQUFLc3BGLHFCQUN6QnRwRixLQUFLMG9GLG1CQUFxQixFQUcxQjFvRixLQUFLMG9GLGtCQUFvQixFQUU3QjFvRixLQUFLc3BGLHFCQUF1QkQsRUFDeEJycEYsS0FBSzBvRixtQkFBcUIsR0FDMUIsS0FBQXpnRixJQUFXLHlFQUNYakksS0FBSzZsRixVQUFVekQsR0FBV2tELGtCQUMxQnRsRixLQUFLb2pFLE9BQU8sWUFBYSxVQUN6QnBqRSxLQUFLOEMsVUFHTDlDLEtBQUtrcEYsbUJBTWJkLEVBQWdCM25GLFVBQVV5b0YsZUFBaUIsV0FDdkMsSUFBSWhvRixFQUFRbEIsS0FDWixLQUFBaUksSUFBVyx5Q0FBMkNqSSxLQUFLMG9GLG1CQUMzRDFvRixLQUFLeW9GLGdCQUFrQmorRCxZQUFXLFdBQzlCdHBCLEVBQU1rb0YsVUFDUCxNQUVBaEIsRUF0TXlCLENBdU1sQ25DLElBS0YsU0FBUzRDLEdBQXVCcmYsR0FDNUIsR0FBSUEsRUFBSyxDQUNMLElBQUlybkUsRUFBUXFuRSxFQUFJcG5FLFdBQ1pELEdBQ2tCQSxFQUFNNmhFLGtCQUVwQjdoRSxFQUFNNGhFLGFBQVFyeUQsSUNoTzlCLFNBQVM2M0UsR0FBTy9mLEVBQUt2RixFQUFhdWxCLEdBQzlCLElBQUk5bkYsRUFpQkFrMEUsRUEyRG1CbUYsRUEzRW5CcjJFLEVBQVM4a0UsRUFBSW5DLFlBQ2J0bkUsRUFBVzJFLEdBQVVBLEVBQU93akUsY0FBaUIsR0FFakQsT0FBS3hqRSxHQUFXZ2hGLEdBQWtCM2xGLFFBS04yUixJQUF4QnV5RCxFQUFZNGlCLFNBQ1o1aUIsRUFBWTBpQixZQUFZLENBQ3BCOUwsb0JBQXFCLENBQUUzMkQsT0FBUWkrRCxHQUEwQnNILFlBRXREeGxCLElBSzBCLG1CQUExQmxrRSxFQUFRMnBGLGVBQ2Y5VCxFQUFhNzFFLEVBQVEycEYsY0FBY0YsR0FDbkN2bEIsRUFBWTBpQixZQUFZLENBQ3BCOUwsb0JBQXFCLENBQ2pCMzJELE9BQVFpK0QsR0FBMEJ3SCxRQUVsQzVPLEtBQU03NEMsT0FBTzB6QyxZQUlrQmxrRSxJQUFsQzgzRSxFQUFnQkksZUFDckJoVSxFQUFhNFQsRUFBZ0JJLGNBQzdCM2xCLEVBQVkwaUIsWUFBWSxDQUNwQjlMLG9CQUFxQixDQUFFMzJELE9BQVFpK0QsR0FBMEIwSCxpQkFJN0RqVSxFQUFhNzFFLEVBQVErcEYsaUJBQ3JCN2xCLEVBQVkwaUIsWUFBWSxDQUNwQjlMLG9CQUFxQixDQUNqQjMyRCxPQUFRaStELEdBQTBCNEgsS0FFbENoUCxLQUFNNzRDLE9BQU8wekMsT0FvQ0ZtRixFQTlCQW5GLEdBaUNuQi9wRSxNQUFNa3ZFLElBQTJCLGlCQUFUQSxHQUFxQyxrQkFBVEEsR0FDcEQsVUFBWSwwR0FBNEcvMkUsS0FBS0MsVUFBVTgyRSxHQUFRLFlBQWMvMkUsS0FBS0MsaUJBQWlCODJFLEdBQVEsS0FDcEwsS0FHUEEsRUFBTyxHQUFLQSxFQUFPLEtBQ25CLFVBQVksb0ZBQXNGQSxFQUFPLEtBQ2xHLElBbENObkYsR0FTTDNSLEVBQVk0aUIsUUFBVXI5RSxLQUFLQyxTQUFXbXNFLEVBRWpDM1IsRUFBWTRpQixTQU1qQjVpQixFQUFZdWlCLGlCQUFpRCxRQUEvQjlrRixFQUFLM0IsRUFBUWlxRixvQkFBaUMsSUFBUHRvRixPQUFnQixFQUFTQSxFQUFHdW9GLFVBQ2pHLEtBQUFoaUYsSUFBVyxzQkFBd0JnOEQsRUFBWXpnRSxHQUFLLGtCQUFvQnlnRSxFQUFZaGtFLE1BQzdFZ2tFLElBUEgsS0FBQWg4RCxJQUFXLG9HQUFzR2k2QixPQUFPMHpDLEdBQWMsS0FDL0gzUixLQVpQLEtBQUFoOEQsSUFBVyw2Q0FBZ0YsbUJBQTFCbEksRUFBUTJwRixjQUNuRSxvQ0FDQSwrRUFDTnpsQixFQUFZNGlCLFNBQVUsRUFDZjVpQixJQVZQLFVBQVksb0VBQ1pBLEVBQVk0aUIsU0FBVSxFQUNmNWlCLEtBNUNQQSxFQUFZNGlCLFNBQVUsRUFDZjVpQixHQ3JDZixJQ2FJaW1CLEdDREFDLEdGWkEsSUFBUyxXR1lGQyxHQUFlLFNBQVU5bEYsRUFBVStsRixFQUFRQyxFQUFJQyxHQUN0RCxJQUFJQyxFQUNKLE9BQU8sV0FDQ0YsR0FBTUQsRUFBT0ksU0FDYkgsRUFBR0ksYUFFSEwsRUFBTzcvRSxPQUFTLElBQ1orL0UsR0FBcUJGLEVBQU9JLFNBQXdDLFdBQTdCci9FLFNBQVN1L0UsbUJBQ2hETixFQUFPTyxNQUFRUCxFQUFPNy9FLE9BQVNnZ0YsR0FBYSxJQUt4Q0gsRUFBT08sT0FBU1AsRUFBT0ksY0FBeUIvNEUsSUFBZDg0RSxLQUNsQ2xtRixFQUFTK2xGLEdBQ1RHLEVBQVlILEVBQU83L0UsVUNkNUJxZ0YsR0FBYSxTQUFVNXFGLEVBQU11SyxHQUVwQyxZQURjLElBQVZBLElBQW9CQSxHQUFTLEdBQzFCLENBQ0h2SyxLQUFNQSxFQUNOdUssTUFBT0EsRUFDUG9nRixNQUFPLEVBQ1BFLFFBQVMsR0FDVDVxRixHQ0ZHNkwsS0FBS04sTUFBUSxLQUFPakMsS0FBS3VSLE1BQXNCLGNBQWhCdlIsS0FBS0MsVUFBeUIsTURHaEVnaEYsU0FBUyxJRUROLEdBQVUsU0FBVWxnRixFQUFNakcsR0FDakMsSUFDSSxHQUFJeW1GLG9CQUFvQkMsb0JBQW9CcG5GLFNBQVMyRyxHQUFPLENBQ3hELElBQUkrL0UsRUFBSyxJQUFJUyxxQkFBb0IsU0FBVTN1RSxHQUFLLE9BQU9BLEVBQUU2dUUsYUFBYXBuRixJQUFJUyxNQUUxRSxPQURBZ21GLEVBQUdybEUsUUFBUSxDQUFFMWEsS0FBTUEsRUFBTTJnRixVQUFVLElBQzVCWixHQUdmLE1BQU90cEYsTUNoQlBtcUYsSUFBYyxFQUNkQyxJQUFpQixFQUNqQkMsR0FBYSxTQUFVamhGLEdBQ3ZCK2dGLElBQWUvZ0YsRUFBTWtoRixXQVNkQyxHQUFXLFNBQVV2Z0UsRUFBSXROLFFBQ25CLElBQVRBLElBQW1CQSxHQUFPLEdBQ3pCMHRFLEtBUkwxcUUsaUJBQWlCLFdBQVkycUUsSUFJN0IzcUUsaUJBQWlCLGdCQUFnQixlQU03QjBxRSxJQUFpQixHQUVyQjFxRSxpQkFBaUIsb0JBQW9CLFNBQVVoZixHQUMzQyxJQUFJazVCLEVBQVlsNUIsRUFBR2s1QixVQUNjLFdBQTdCeHZCLFNBQVN1L0UsaUJBQ1QzL0QsRUFBRyxDQUFFNFAsVUFBV0EsRUFBV3V3RCxZQUFhQSxPQUU3QyxDQUFFdi9ELFNBQVMsRUFBTWxPLEtBQU1BLEtOckJuQjh0RSxHQUFpQixXQWF4QixZQVp3Qjk1RSxJQUFwQnc0RSxLQUtBQSxHQUErQyxXQUE3QjkrRSxTQUFTdS9FLGdCQUErQixFQUFJYyxJQUU5REYsSUFBUyxTQUFVN3BGLEdBQ2YsSUFBSWs1QixFQUFZbDVCLEVBQUdrNUIsVUFDbkIsT0FBUXN2RCxHQUFrQnR2RCxLQUMzQixJQUVBLENBQ0gsZ0JBQ0ksT0FBT3N2RCxNT2ZmLElBQVMsV0NUVCxJQUFTLFdBRVR3QixHQUF3QyxXQUN4QyxTQUFTQSxJQUNMMXJGLEtBQUttbUYsY0FBZ0IsR0FDckJubUYsS0FBSzJyRixtQkFBcUIsRUFDdEIsSUFBVSxHQUFPdDZFLGNBQ2IsR0FBT0EsWUFBWXU2RSxNQUNuQixHQUFPdjZFLFlBQVl1NkUsS0FBSyx1QkFFNUI1ckYsS0FBSzZyRixZQUNMN3JGLEtBQUs4ckYsWUFDTDlyRixLQUFLK3JGLFlBQ0wvckYsS0FBS2dzRixjQThNYixPQTFNQU4sRUFBdUJqckYsVUFBVXdyRixzQkFBd0IsU0FBVWhvQixHQUMvRCxJQUFJL2lFLEVBQVFsQixLQUNaLEdBQUssSUFBVyxHQUFPcVIsYUFBZ0IsR0FBT0EsWUFBWTQ1RSxZQUFlLE1BQXpFLENBSUEsS0FBQWhqRixJQUFXLDREQUNYLElBQ0lpa0YsRUFhQUMsRUFDQUMsRUFmQTc2RSxFQUFhbzBFLEdBQVEsT0FFekIsR0FBSSxHQUFPdjZFLFNBRVAsSUFBSyxJQUFJckgsRUFBSSxFQUFHQSxFQUFJcUgsU0FBU2loRixRQUFRcHFGLE9BQVE4QixJQUl6QyxHQUEwQyxTQUF0Q3FILFNBQVNpaEYsUUFBUXRvRixHQUFHdW9GLFFBQVFDLE1BQWtCLENBQzlDTCxFQUFpQjlnRixTQUFTaWhGLFFBQVF0b0YsR0FBRytnQixJQUNyQyxNQWtFWixHQTVEQSxHQUFPelQsWUFDRjQ1RSxhQUNBam9GLE1BQU1oRCxLQUFLMnJGLG9CQUNYeHFGLFNBQVEsU0FBVW9yRixHQUNuQixJQUFJQyxFQUFZN0csR0FBUTRHLEVBQU1DLFdBQzFCLzNDLEVBQVdreEMsR0FBUTRHLEVBQU05M0MsVUFDN0IsS0FBdUIsZUFBbkJ3dkIsRUFBWXpnRSxJQUF1QitOLEVBQWFpN0UsRUFBWXZvQixFQUFZaUssZ0JBRzVFLE9BQVFxZSxFQUFNRSxXQUNWLElBQUssY0E2S3JCLFNBQTRCeG9CLEVBQWFzb0IsRUFBT2g3RSxHQUM1Q203RSxHQUErQnpvQixFQUFhc29CLEVBQU8sY0FBZWg3RSxHQUNsRW03RSxHQUErQnpvQixFQUFhc29CLEVBQU8sV0FBWWg3RSxHQUMvRG03RSxHQUErQnpvQixFQUFhc29CLEVBQU8sd0JBQXlCaDdFLEdBQzVFbTdFLEdBQStCem9CLEVBQWFzb0IsRUFBTyxZQUFhaDdFLEdBQ2hFbTdFLEdBQStCem9CLEVBQWFzb0IsRUFBTyxVQUFXaDdFLEdBQzlEbTdFLEdBQStCem9CLEVBQWFzb0IsRUFBTyxtQkFBb0JoN0UsRUFBWSxjQUNuRm03RSxHQUErQnpvQixFQUFhc29CLEVBQU8sUUFBU2g3RSxFQUFZLHFCQUN4RW03RSxHQUErQnpvQixFQUFhc29CLEVBQU8sZUFBZ0JoN0UsR0EwRHZFLFNBQW9CMHlELEVBQWFzb0IsRUFBT2g3RSxHQUNwQ283RSxHQUFZMW9CLEVBQWEsQ0FDckJ6Z0UsR0FBSSxVQUNKQyxZQUFhLFVBQ2J5cUUsZUFBZ0IzOEQsRUFBYW8wRSxHQUFRNEcsRUFBTUssY0FDM0MzZSxhQUFjMThELEVBQWFvMEUsR0FBUTRHLEVBQU1NLGVBRTdDRixHQUFZMW9CLEVBQWEsQ0FDckJ6Z0UsR0FBSSxVQUNKQyxZQUFhLFdBQ2J5cUUsZUFBZ0IzOEQsRUFBYW8wRSxHQUFRNEcsRUFBTU8sZUFDM0M3ZSxhQUFjMThELEVBQWFvMEUsR0FBUTRHLEVBQU1NLGVBcEU3Q0UsQ0FBVzlvQixFQUFhc29CLEVBQU9oN0UsR0FyTGZ5N0UsQ0FBbUIvb0IsRUFBYXNvQixFQUFPaDdFLEdBQ3ZDLE1BQ0osSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0QsSUFBSTI4RCxFQW1MeEIsU0FBeUJqSyxFQUFhc29CLEVBQU9DLEVBQVcvM0MsRUFBVWxqQyxHQUM5RCxJQUFJMDdFLEVBQXdCMTdFLEVBQWFpN0UsRUFDckNVLEVBQXNCRCxFQUF3Qng0QyxFQU9sRCxPQU5BazRDLEdBQVkxb0IsRUFBYSxDQUNyQnhnRSxZQUFhOG9GLEVBQU10c0YsS0FDbkJndUUsYUFBY2lmLEVBQ2QxcEYsR0FBSStvRixFQUFNRSxVQUNWdmUsZUFBZ0IrZSxJQUViQSxFQTVMOEJFLENBQWdCbHBCLEVBQWFzb0IsRUFBT0MsRUFBVy8zQyxFQUFVbGpDLFFBQzdDRyxJQUE3QjA2RSxHQUF5RCx3QkFBZkcsRUFBTXRzRixPQUNoRG1zRixFQUEyQmxlLEdBRy9CLElBQUlrZixFQUFjNUIsS0FFZDZCLEVBQWVkLEVBQU1DLFVBQVlZLEVBQVl4eUQsVUFDOUIsZ0JBQWYyeEQsRUFBTXRzRixNQUEwQm90RixJQUNoQyxLQUFBcGxGLElBQVcsNEJBQ1gvRyxFQUFNaWxGLGNBQWtCLEdBQUksQ0FBRTM3RSxNQUFPK2hGLEVBQU1DLFdBQzNDdHJGLEVBQU1pbEYsY0FBYyxXQUFhLENBQUUzN0UsTUFBTzBqRSxJQUUzQiwyQkFBZnFlLEVBQU10c0YsTUFBcUNvdEYsSUFDM0MsS0FBQXBsRixJQUFXLDZCQUNYL0csRUFBTWlsRixjQUFtQixJQUFJLENBQUUzN0UsTUFBTytoRixFQUFNQyxXQUM1Q3RyRixFQUFNaWxGLGNBQWMsWUFBYyxDQUFFMzdFLE1BQU8wakUsSUFFL0MsTUFFSixJQUFLLFdBQ0QsSUFBSW9mLEVBQWVmLEVBQU10c0YsS0FBS29KLFFBQVFYLE9BQU8yQyxTQUFTa2lGLE9BQVEsSUFDMUR0ZixFQXlLakIsU0FBMEJoSyxFQUFhc29CLEVBQU9lLEVBQWNkLEVBQVcvM0MsRUFBVWxqQyxHQUdwRixHQUE0QixtQkFBeEJnN0UsRUFBTWlCLGVBQThELFVBQXhCakIsRUFBTWlCLGNBQXRELENBR0EsSUFBSXJxRixFQUFPLEdBQ1AsaUJBQWtCb3BGLElBQ2xCcHBGLEVBQUssaUJBQW1Cb3BGLEVBQU1rQixjQUU5QixvQkFBcUJsQixJQUNyQnBwRixFQUFLLHFCQUF1Qm9wRixFQUFNbUIsaUJBRWxDLG9CQUFxQm5CLElBQ3JCcHBGLEVBQUsscUJBQXVCb3BGLEVBQU1vQixpQkFFdEMsSUFBSXpmLEVBQWlCMzhELEVBQWFpN0UsRUFDOUJ2ZSxFQUFlQyxFQUFpQno1QixFQVFwQyxPQVBBazRDLEdBQVkxb0IsRUFBYSxDQUNyQnhnRSxZQUFhNnBGLEVBQ2JyZixhQUFjQSxFQUNkenFFLEdBQUkrb0YsRUFBTWlCLGNBQWdCLFlBQWNqQixFQUFNaUIsY0FBZ0IsV0FDOUR0ZixlQUFnQkEsRUFDaEIvcUUsS0FBTUEsSUFFSDhxRSxHQWxNNEIyZixDQUFpQjNwQixFQUFhc29CLEVBQU9lLEVBQWNkLEVBQVcvM0MsRUFBVWxqQyxRQUV6REcsSUFBOUJ5NkUsSUFBNENELEdBQWtCLElBQUlqN0UsUUFBUXE4RSxJQUFpQixJQUMzRm5CLEVBQTRCbGUsWUFRVnY4RCxJQUE5Qnk2RSxRQUF3RXo2RSxJQUE3QjA2RSxHQUMzQ08sR0FBWTFvQixFQUFhLENBQ3JCeGdFLFlBQWEsYUFDYndxRSxhQUFjbWUsRUFDZDVvRixHQUFJLFNBQ0owcUUsZUFBZ0JpZSxJQUd4Qm5zRixLQUFLMnJGLG1CQUFxQm5pRixLQUFLaUgsSUFBSVksWUFBWTQ1RSxhQUFhaHBGLE9BQVMsRUFBRyxHQUN4RWpDLEtBQUs2dEYsZ0JBQWdCNXBCLEdBRUUsYUFBbkJBLEVBQVl6Z0UsR0FBbUIsQ0FFL0IsSUFBSXNxRixFQUFlbkksR0FBUSxPQUMzQixDQUFDLE1BQU8sS0FBTSxNQUFPLFFBQVF4a0YsU0FBUSxTQUFVbEIsR0FDM0MsR0FBS2lCLEVBQU1pbEYsY0FBY2xtRixNQUFTNnRGLEdBQWdCN3BCLEVBQVlpSyxnQkFBOUQsQ0FNQSxJQUFJdnhDLEVBQVd6N0IsRUFBTWlsRixjQUFjbG1GLEdBQU11SyxNQUNyQ3VqRixFQUF1QkQsRUFBZW5JLEdBQVFocEQsR0FFOUNxeEQsRUFBa0J4a0YsS0FBS3lrRixJQUEwRCxLQUFyREYsRUFBdUI5cEIsRUFBWWlLLGlCQUMvRDBjLEVBQVFvRCxFQUFrQnJ4RCxFQUM5QixLQUFBMTBCLElBQVcsNkJBQStCaEksRUFBTyxTQUFXMDhCLEVBQVcsT0FBU3F4RCxFQUFrQixLQUFPcEQsRUFBUSxLQUNqSDFwRixFQUFNaWxGLGNBQWNsbUYsR0FBTXVLLE1BQVF3akYsTUFFbENodUYsS0FBS21tRixjQUFjLGFBQWVubUYsS0FBS21tRixjQUFtQixLQUUxRHdHLEdBQVkxb0IsRUFBYSxDQUNyQnhnRSxZQUFhLG9CQUNid3FFLGFBQWNqdUUsS0FBS21tRixjQUFjLFlBQVkzN0UsTUFBUW03RSxHQUFRM2xGLEtBQUttbUYsY0FBbUIsSUFBRTM3RSxPQUN2RmhILEdBQUksYUFDSjBxRSxlQUFnQmx1RSxLQUFLbW1GLGNBQWMsWUFBWTM3RSxRQUd2RHk1RCxFQUFZd2lCLGdCQUFnQnptRixLQUFLbW1GLGtCQUl6Q3VGLEVBQXVCanJGLFVBQVVvckYsVUFBWSxXQUN6QyxJQUFJM3FGLEVBQVFsQixNQ3pIQSxTQUFVa3VGLEVBQVVDLFFBQ1gsSUFBckJBLElBQStCQSxHQUFtQixHQUN0RCxJQUNJQyxFQURBL0QsRUFBU1EsR0FBVyxNQUFPLEdBRTNCd0QsRUFBZSxTQUFVOUIsR0FFcEJBLEVBQU0rQixpQkFDUGpFLEVBQU83L0UsT0FBUytoRixFQUFNL2hGLE1BQ3RCNi9FLEVBQU9TLFFBQVF2bEYsS0FBS2duRixHQUNwQjZCLE1BR0o5RCxFQUFLLEdBQVEsZUFBZ0IrRCxHQUM3Qi9ELElBQ0E4RCxFQUFTaEUsSUQ0R0YsU0FBVUMsR0FDREEsRUFBT1MsUUFBUTNvRSxRQUkzQixLQUFBbGEsSUFBVyw2QkFDWC9HLEVBQU1pbEYsY0FBbUIsSUFBSSxDQUFFMzdFLE1BQU82L0UsRUFBTzcvRSxVQ2xIakI2L0UsRUFBUUMsRUFBSTZELEdBQzVDNUMsSUFBUyxTQUFVN3BGLEdBQ2YsSUFBSXlwRixFQUFjenBGLEVBQUd5cEYsWUFDckJiLEVBQUdpRSxjQUFjMXFGLElBQUl3cUYsR0FDakJsRCxJQUNBZCxFQUFPSSxTQUFVLEdBRXJCMkQsUURxR0pJLElBWUo5QyxFQUF1QmpyRixVQUFVb3RGLGdCQUFrQixTQUFVNXBCLEdBQ3pELElBQUlsa0QsRUFBWSxHQUFPQSxVQUN2QixHQUFLQSxFQUFMLENBSUEsSUFBSTNiLEVBQWEyYixFQUFVM2IsV0FDdkJBLElBQ0lBLEVBQVdxcUYsZUFDWHhxQixFQUFZYixPQUFPLDBCQUEyQmgvRCxFQUFXcXFGLGVBRXpEcnFGLEVBQVdtRyxNQUNYMDVELEVBQVliLE9BQU8saUJBQWtCaC9ELEVBQVdtRyxNQUVoRG1rRixHQUFtQnRxRixFQUFXdXFGLE9BQzlCM3VGLEtBQUttbUYsY0FBYyxrQkFBb0IsQ0FBRTM3RSxNQUFPcEcsRUFBV3VxRixNQUUzREQsR0FBbUJ0cUYsRUFBV3dxRixZQUM5QjV1RixLQUFLbW1GLGNBQWMsdUJBQXlCLENBQUUzN0UsTUFBT3BHLEVBQVd3cUYsWUFHcEVGLEdBQW1CM3VFLEVBQVU4dUUsZUFDN0I1cUIsRUFBWWIsT0FBTyxlQUFnQnIwRCxPQUFPZ1IsRUFBVTh1RSxlQUVwREgsR0FBbUIzdUUsRUFBVSt1RSxzQkFDN0I3cUIsRUFBWWIsT0FBTyxzQkFBdUJyMEQsT0FBT2dSLEVBQVUrdUUsd0JBSW5FcEQsRUFBdUJqckYsVUFBVXFyRixVQUFZLFdBQ3pDLElBQUk1cUYsRUFBUWxCLE1FbEtBLFNBQVVrdUYsRUFBVUMsUUFDWCxJQUFyQkEsSUFBK0JBLEdBQW1CLEdBQ3RELElBRUlDLEVBRkEvRCxFQUFTUSxHQUFXLE9BQ3BCdUMsRUFBYzVCLEtBRWQ2QyxFQUFlLFNBQVU5QixHQUd6QixJQUFJL2hGLEVBQVEraEYsRUFBTUMsVUFHZGhpRixFQUFRNGlGLEVBQVl4eUQsV0FDcEJ5dkQsRUFBTzcvRSxNQUFRQSxFQUNmNi9FLEVBQU9TLFFBQVF2bEYsS0FBS2duRixJQUdwQmxDLEVBQU9JLFNBQVUsRUFFckIyRCxLQUVBOUQsRUFBSyxHQUFRLDJCQUE0QitELEdBQzdDLEdBQUkvRCxFQUFJLENBQ0o4RCxFQUFTaEUsR0FBYThELEVBQVU3RCxFQUFRQyxFQUFJNkQsR0FDNUMsSUFBSVksRUFBVSxXQUNMMUUsRUFBT0ksVUFDUkgsRUFBR2lFLGNBQWMxcUYsSUFBSXdxRixHQUNyQmhFLEVBQU9JLFNBQVUsRUFDakIyRCxPVC9CUGpFLEtBQ0RBLEdBQWUsSUFBSTcvRCxTQUFRLFNBQVUvZ0IsR0FDakMsTUFBTyxDQUFDLFNBQVUsVUFBVyxlQUFlMUYsS0FBSSxTQUFVMEcsR0FDdERtVyxpQkFBaUJuVyxFQUFNaEIsRUFBRyxDQUN0Qm1VLE1BQU0sRUFDTmdPLFNBQVMsRUFDVEUsU0FBUyxXQUtsQnUrRCxJU3VCY3ZuRixLQUFLbXNGLEdBQ3RCeEQsR0FBU3dELEdBQVMsSUZvSWxCQyxFQUFPLFNBQVUzRSxHQUNiLElBQUlrQyxFQUFRbEMsRUFBT1MsUUFBUTNvRSxNQUMzQixHQUFLb3FFLEVBQUwsQ0FHQSxJQUFJaDdFLEVBQWFvMEUsR0FBUXQwRSxZQUFZRSxZQUNqQ2k3RSxFQUFZN0csR0FBUTRHLEVBQU1DLFdBQzlCLEtBQUF2a0YsSUFBVyw2QkFDWC9HLEVBQU1pbEYsY0FBbUIsSUFBSSxDQUFFMzdFLE1BQU82L0UsRUFBTzcvRSxPQUM3Q3RKLEVBQU1pbEYsY0FBYyxZQUFjLENBQUUzN0UsTUFBTytHLEVBQWFpN0UsUUFJaEVkLEVBQXVCanJGLFVBQVVzckYsVUFBWSxXQUN6QyxJR2xMc0JtQyxFQUN0QjdELEVBQ0ErQyxFQUNBaUIsRUFTQS9ELEVBQ0E4RCxFSHFLSWx0RixFQUFRbEIsS0dsTFVrdUYsRUhtTGYsU0FBVTdELEdBQ2IsSUFBSWtDLEVBQVFsQyxFQUFPUyxRQUFRM29FLE1BQzNCLEdBQUtvcUUsRUFBTCxDQUdBLElBQUloN0UsRUFBYW8wRSxHQUFRdDBFLFlBQVlFLFlBQ2pDaTdFLEVBQVk3RyxHQUFRNEcsRUFBTUMsV0FDOUIsS0FBQXZrRixJQUFXLDZCQUNYL0csRUFBTWlsRixjQUFtQixJQUFJLENBQUUzN0UsTUFBTzYvRSxFQUFPNy9FLE9BQzdDdEosRUFBTWlsRixjQUFjLFlBQWMsQ0FBRTM3RSxNQUFPK0csRUFBYWk3RSxLRzNMNURuQyxFQUFTUSxHQUFXLE9BQ3BCdUMsRUFBYzVCLEtBVWRsQixFQUFLLEdBQVEsY0FUYitELEVBQWUsU0FBVTlCLEdBRXJCQSxFQUFNQyxVQUFZWSxFQUFZeHlELFlBQzlCeXZELEVBQU83L0UsTUFBUStoRixFQUFNMEMsZ0JBQWtCMUMsRUFBTUMsVUFDN0NuQyxFQUFPUyxRQUFRdmxGLEtBQUtnbkYsR0FDcEJsQyxFQUFPSSxTQUFVLEVBQ2pCMkQsT0FJSkEsRUFBU2hFLEdBQWE4RCxFQUFVN0QsRUFBUUMsR0FDeENBLEVBQ0FpQixJQUFTLFdBQ0xqQixFQUFHaUUsY0FBYzFxRixJQUFJd3FGLEdBQ3JCL0QsRUFBR0ksZ0JBQ0osR0FHQ2hpRixPQUFPd21GLGFBQWV4bUYsT0FBT3dtRixZQUFZQyxtQkFDekN6bUYsT0FBT3dtRixZQUFZQyxtQkFBa0IsU0FBVTNrRixFQUFPSixHQUU5Q0EsRUFBTXd3QixVQUFZd3lELEVBQVl4eUQsWUFDOUJ5dkQsRUFBTzcvRSxNQUFRQSxFQUNmNi9FLEVBQU9JLFNBQVUsRUFDakJKLEVBQU9TLFFBQVUsQ0FDYixDQUNJMkIsVUFBVyxjQUNYeHNGLEtBQU1tSyxFQUFNRyxLQUNaMkQsT0FBUTlELEVBQU04RCxPQUNka2hGLFdBQVlobEYsRUFBTWdsRixXQUNsQjVDLFVBQVdwaUYsRUFBTXd3QixVQUNqQnEwRCxnQkFBaUI3a0YsRUFBTXd3QixVQUFZcHdCLElBRzNDNGpGLFNIMkpoQjFDLEVBQXVCanJGLFVBQVV1ckYsV0FBYSxXQUMxQyxJRDFLdUJrQyxFQXpCTDVwRixFQTBCbEIrbEYsRUN5S0lucEYsRUFBUWxCLEtEMUtXa3VGLEVDMktmLFNBQVU3RCxHQUNkLElBQUkzb0YsRUFDQTZxRixFQUFRbEMsRUFBT1MsUUFBUTNvRSxNQUMzQixHQUFLb3FFLEVBQUwsQ0FHQSxLQUFBdGtGLElBQVcsOEJBQ1gvRyxFQUFNaWxGLGNBQW9CLEtBQUksQ0FBRTM3RSxNQUFPNi9FLEVBQU83L0UsT0FFOUMsSUFBSTZrRixFQUFjaEYsRUFBTzcvRSxPQUFTOUksRUFBSzJvRixFQUFPUyxRQUFRLEdBQUtwcEYsUUFBK0JBLEVBQUs2cUYsR0FBUUssYUFDdkcxckYsRUFBTWlsRixjQUFjLG9CQUFzQixDQUFFMzdFLE1BQU82a0YsS0RwTHZEaEYsRUFBU1EsR0FBVyxRQTFCRnZtRixFQTJCWixXQUNOLElBRUksSUFBSWdyRixFQUFrQixHQUFPaitFLFlBQVlrK0UsaUJBQWlCLGNBQWMsSUFwQnRDLFdBRzFDLElBQUl6OUUsRUFBUyxHQUFPVCxZQUFZUyxPQUM1Qnc5RSxFQUFrQixDQUNsQjdDLFVBQVcsYUFDWEQsVUFBVyxHQUVmLElBQUssSUFBSTFtRixLQUFPZ00sRUFDQSxvQkFBUmhNLEdBQXFDLFdBQVJBLElBQzdCd3BGLEVBQWdCeHBGLEdBQU8wRCxLQUFLaUgsSUFBSXFCLEVBQU9oTSxHQUFPZ00sRUFBT0MsZ0JBQWlCLElBRzlFLE9BQU91OUUsRUFPK0VFLEdBQzlFbkYsRUFBTzcvRSxNQUFRNi9FLEVBQU9PLE1BQVEwRSxFQUFnQnhDLGNBQzlDekMsRUFBT1MsUUFBVSxDQUFDd0UsR0FDbEJwQixFQUFTN0QsR0FFYixNQUFPamlGLE1BbENpQixhQUF4QmdELFNBQVN5aUUsV0FFVHJqRCxXQUFXbG1CLEVBQVUsR0FJckJvYyxpQkFBaUIsV0FBWXBjLElDME0xQm9uRixFQXpOZ0MsR0FpUjNDLFNBQVNnQixHQUErQnpvQixFQUFhc29CLEVBQU9uaUYsRUFBT21ILEVBQVlrK0UsR0FDM0UsSUFBSWpqRCxFQUFNaWpELEVBQVdsRCxFQUFNa0QsR0FBWWxELEVBQU1uaUYsRUFBUSxPQUNqRG1TLEVBQVFnd0UsRUFBTW5pRixFQUFRLFNBQ3JCbVMsR0FBVWl3QixHQUdmbWdELEdBQVkxb0IsRUFBYSxDQUNyQnpnRSxHQUFJLFVBQ0pDLFlBQWEyRyxFQUNiOGpFLGVBQWdCMzhELEVBQWFvMEUsR0FBUXBwRSxHQUNyQzB4RCxhQUFjMThELEVBQWFvMEUsR0FBUW41QyxLQXVCcEMsU0FBU21nRCxHQUFZMW9CLEVBQWF2aUUsR0FDckMsSUFBSXdzRSxFQUFpQnhzRSxFQUFHd3NFLGVBQWdCaHlELEdBQU0sU0FBT3hhLEVBQUksQ0FBQyxtQkFJMUQsT0FISXdzRSxHQUFrQmpLLEVBQVlpSyxlQUFpQkEsSUFDL0NqSyxFQUFZaUssZUFBaUJBLEdBRTFCakssRUFBWXpoRSxZQUFXLFNBQVMsQ0FBRTByRSxlQUFnQkEsR0FBa0JoeUQsSUFLL0UsU0FBU3d5RSxHQUFtQmxrRixHQUN4QixNQUF3QixpQkFBVkEsR0FBc0J3USxTQUFTeFEsR0luVTFDLElBQ0lrbEYsR0FBdUMsQ0FDOUNDLFlBQVksRUFDWkMsVUFBVSxFQUNWQyxlQUppQyxDQUFDLFlBQWEsUUNIbkQsSUFBSSxJQUFTLFdDVVRDLElBQWtDLFNBQVMsQ0FBRUMsWWpCTmYsSWlCTWtEQyw0QkFBNEIsRUFBTUMsdUJBRGhFLElBQ2tJQyx1QkROakwsU0FBdUN0bkIsRUFBa0J1bkIsRUFBNEJDLEdBR3hGLFFBRm1DLElBQS9CRCxJQUF5Q0EsR0FBNkIsUUFDakMsSUFBckNDLElBQStDQSxHQUFtQyxHQUNqRixJQUFXLEdBQU8va0YsU0FBdkIsQ0FJQSxJQUNJODNFLEVBREFrTixFQUFjLEdBQU9obEYsU0FBU0MsS0FFOUI2a0YsSUFDQWhOLEVBQW9CdmEsRUFBaUIsQ0FBRTNvRSxLQUFNLEdBQU9vTCxTQUFTaWxGLFNBQVU5c0YsR0FBSSxjQUUzRTRzRixHQUNBOWpCLEdBQTBCLENBQ3RCaG9FLFNBQVUsU0FBVTVDLEdBQ2hCLElBQUlnYixFQUFLaGIsRUFBR2diLEdBQUlqSixFQUFPL1IsRUFBRytSLFVBVWIvQixJQUFUK0IsR0FBc0I0OEUsSUFBNEMsSUFBN0JBLEVBQVlwL0UsUUFBUXlMLEdBQ3pEMnpFLE9BQWMzK0UsRUFHZCtCLElBQVNpSixJQUNUMnpFLE9BQWMzK0UsRUFDVnl4RSxJQUNBLEtBQUFsN0UsSUFBVyxvREFBc0RrN0UsRUFBa0IzL0UsSUFFbkYyL0UsRUFBa0JyZ0YsVUFFdEJxZ0YsRUFBb0J2YSxFQUFpQixDQUFFM29FLEtBQU0sR0FBT29MLFNBQVNpbEYsU0FBVTlzRixHQUFJLGlCQUduRitHLEtBQU0saUJBbkNWLFVBQVkseUVDRTJONmxGLGtDQUFrQyxFQUFNRCw0QkFBNEIsR0FBUVQsSUFRdlRhLEdBQWdDLFdBQ2hDLFNBQVNBLEVBQWU5ekIsR0FJcEJ6OEQsS0FBS0MsS0FBT3N3RixFQUFlcndGLEdBQzNCRixLQUFLd3dGLFNBQVcsSUFBSTlFLEdBQ3BCMXJGLEtBQUt5d0YscUJBQXNCLEVBQzNCLElBQUlaLEVBQWlCSCxHQUFxQ0csZUFFdERwekIsR0FDQUEsRUFBU296QixnQkFDVHp2RixNQUFNQyxRQUFRbzhELEVBQVNvekIsaUJBQ1ksSUFBbkNwekIsRUFBU296QixlQUFlNXRGLE9BQ3hCNHRGLEVBQWlCcHpCLEVBQVNvekIsZUFHMUI3dkYsS0FBS3l3RixxQkFBc0IsRUFFL0J6d0YsS0FBS0QsU0FBVSxVQUFTLFVBQVMsU0FBUyxHQUFJK3ZGLElBQWtDcnpCLEdBQVcsQ0FBRW96QixlQUFnQkEsSUFvRGpILE9BL0NBVSxFQUFlOXZGLFVBQVVDLFVBQVksU0FBVUMsRUFBR0MsR0FDOUMsSUFBSU0sRUFBUWxCLEtBQ1pBLEtBQUswd0YsZUFBaUI5dkYsRUFDbEJaLEtBQUt5d0Ysc0JBQ0wsVUFBWSw0R0FDWixVQUFZLG9EQUFzRGYsR0FBcUNHLGlCQUczRyxJQUFJbnVGLEVBQUsxQixLQUFLRCxRQUFTbXdGLEVBQXlCeHVGLEVBQUd3dUYsdUJBQXdCRSxFQUFtQzF1RixFQUFHMHVGLGlDQUFrQ0QsRUFBNkJ6dUYsRUFBR3l1RiwyQkFBNEJILEVBQTZCdHVGLEVBQUdzdUYsMkJBQTRCTCxFQUFhanVGLEVBQUdpdUYsV0FBWUMsRUFBV2x1RixFQUFHa3VGLFNBQVVDLEVBQWlCbnVGLEVBQUdtdUYsZUFBZ0JjLEVBQTZCanZGLEVBQUdpdkYsMkJBQ25ZVCxHQUF1QixTQUFVM3RFLEdBQVcsT0FBT3JoQixFQUFNMHZGLHdCQUF3QnJ1RSxLQUFhNHRFLEVBQTRCQyxHQUN0SEosSWY1Q0osSUFBVSxHQUFPNWtGLFNBQ2pCLEdBQU9BLFNBQVNzVixpQkFBaUIsb0JBQW9CLFdBQ2pELElBQUl5aUUsRUFBb0IsS0FDcEIsR0FBTy8zRSxTQUFTcWpFLFFBQVUwVSxJQUMxQixLQUFBbDdFLElBQVcsMEJBQTRCbTZFLEdBQVcyRyxVQUFZLDhDQUFnRDVGLEVBQWtCMy9FLElBRzNIMi9FLEVBQWtCbmQsUUFDbkJtZCxFQUFrQjBDLFVBQVV6RCxHQUFXMkcsV0FFM0M1RixFQUFrQi9mLE9BQU8sbUJBQW9CLG1CQUM3QytmLEVBQWtCcmdGLGFBSzFCLFVBQVksdUZhZGIsU0FBd0MyNUQsR0FFM0MsSUFBSS82RCxHQUFLLFVBQVMsU0FBUyxHQUFJZ3VGLElBQXVDanpCLEdBQVdrekIsRUFBYWp1RixFQUFHaXVGLFdBQVlDLEVBQVdsdUYsRUFBR2t1RixTQUFVQyxFQUFpQm51RixFQUFHbXVGLGVBQWdCYyxFQUE2Qmp2RixFQUFHaXZGLDJCQUdyTUUsRUFBUyxHQUNUQyxFQUEwQixTQUFVbm5GLEdBQ3BDLEdBQUlrbkYsRUFBT2xuRixHQUNQLE9BQU9rbkYsRUFBT2xuRixHQUVsQixJQUFJb25GLEVBQVVsQixFQUlkLE9BSEFnQixFQUFPbG5GLEdBQ0hvbkYsRUFBUWgyQyxNQUFLLFNBQVV3eUMsR0FBVSxPQUFPLFNBQWtCNWpGLEVBQUs0akYsU0FDMUQsU0FBa0I1akYsRUFBSyxjQUN6QmtuRixFQUFPbG5GLElBSWRxbkYsRUFBbUJGLEVBQ21CLG1CQUEvQkgsSUFDUEssRUFBbUIsU0FBVXJuRixHQUN6QixPQUFPbW5GLEVBQXdCbm5GLElBQVFnbkYsRUFBMkJobkYsS0FHMUUsSUFBSXc2RCxFQUFRLEdBQ1J3ckIsR0FDQXJqQixHQUEwQixDQUN0QmhvRSxTQUFVLFNBQVV1cUUsSUFrQnpCLFNBQXVCQSxFQUFhbWlCLEVBQWtCN3NCLEdBQ3pELElBQUl6aUUsRUFDQXV2RixFQUNrQixRQURNdnZGLEVBQUssS0FDNUIybEUsbUJBQWdDLElBQVAzbEUsT0FBZ0IsRUFBU0EsRUFBR3dtRSxhQUMxRCxHQUFNK29CLEdBQXdCdkwsR0FBa0J1TCxJQUMxQ3BpQixFQUFZQyxXQUFha2lCLEVBQWlCbmlCLEVBQVlDLFVBQVVubEUsS0FHdEUsR0FBSWtsRSxFQUFZWixjQUFnQlksRUFBWUMsVUFBVW9pQixRQUVsRCxHQURJbnVGLEVBQU9vaEUsRUFBTTBLLEVBQVlDLFVBQVVvaUIsUUFDN0IsQ0FDTixJQUFJOXdCLEVBQVd5TyxFQUFZek8sU0FDdkJBLEdBR0FyOUQsRUFBS3lrRixjQUFjcG5CLEVBQVM0RixRQUVoQ2pqRSxFQUFLRCxnQkFFRXFoRSxFQUFNMEssRUFBWUMsVUFBVW9pQixhQVgzQyxDQWVBLElBQUkvTixFQUFvQixLQUN4QixHQUFJQSxFQUFtQixDQUNuQixJQUFJcGdGLEVBQU9vZ0YsRUFBa0IzZ0YsV0FBVyxDQUNwQ1csTUFBTSxVQUFTLFNBQVMsR0FBSTByRSxFQUFZQyxXQUFZLENBQUV2a0UsS0FBTSxVQUM1RDlHLFlBQWFvckUsRUFBWUMsVUFBVTVxRCxPQUFTLElBQU0ycUQsRUFBWUMsVUFBVW5sRSxJQUN4RW5HLEdBQUksU0FFUnFyRSxFQUFZQyxVQUFVb2lCLE9BQVNudUYsRUFBS3FrRixPQUNwQ2pqQixFQUFNcGhFLEVBQUtxa0YsUUFBVXJrRixFQUNyQixJQUFJc0osRUFBV3dpRSxFQUFZL3NFLEtBQUssR0FBSytzRSxFQUFZL3NFLEtBQUssR0FFbEQvQixFQUFXOHVFLEVBQVkvc0UsS0FBSyxHQUFLK3NFLEVBQVkvc0UsS0FBSyxJQUFNLEdBQ3hEaStELEVBQVVoZ0UsRUFBUWdnRSxTQUNsQixFQUFBanlELEdBQUEsSUFBYXpCLEVBQVN3L0QsV0FDdEI5TCxFQUFVMXpELEVBQVEwekQsU0FFbEJBLEVBRThCLG1CQUFuQkEsRUFBUUksT0FFZkosRUFBUUksT0FBTyxlQUFnQnA5RCxFQUFLNGtGLGlCQUdwQzVuQixFQURLMy9ELE1BQU1DLFFBQVEwL0QsSUFDVCxTQUFTQSxFQUFTLENBQUMsQ0FBQyxlQUFnQmg5RCxFQUFLNGtGLG9CQUd6QyxVQUFTLFNBQVMsR0FBSTVuQixHQUFVLENBQUUsZUFBZ0JoOUQsRUFBSzRrRixrQkFJckU1bkIsRUFBVSxDQUFFLGVBQWdCaDlELEVBQUs0a0YsaUJBRXJDNW5GLEVBQVFnZ0UsUUFBVUEsSUF4RVZveEIsQ0FBY3RpQixFQUFhbWlCLEVBQWtCN3NCLElBRWpENTVELEtBQU0sVUFHVnFsRixHQUNBdGpCLEdBQTBCLENBQ3RCaG9FLFNBQVUsU0FBVXVxRSxJQXVFekIsU0FBcUJBLEVBQWFtaUIsRUFBa0I3c0IsR0FDdkQsSUFBSXppRSxFQUNBdXZGLEVBQ2tCLFFBRE12dkYsRUFBSyxLQUM1QjJsRSxtQkFBZ0MsSUFBUDNsRSxPQUFnQixFQUFTQSxFQUFHd21FLGFBQzFELEdBQU0rb0IsR0FBd0J2TCxHQUFrQnVMLElBQzFDcGlCLEVBQVlwQixLQUFPb0IsRUFBWXBCLElBQUlDLGdCQUFrQnNqQixFQUFpQm5pQixFQUFZcEIsSUFBSUMsZUFBZS9qRSxPQUN2R2tsRSxFQUFZcEIsSUFBSUUsdUJBRnBCLENBS0EsSUFBSUYsRUFBTW9CLEVBQVlwQixJQUFJQyxlQUUxQixHQUFJbUIsRUFBWVosY0FBZ0JZLEVBQVlwQixJQUFJMmpCLHdCQUN4Q3J1RixFQUFPb2hFLEVBQU0wSyxFQUFZcEIsSUFBSTJqQiwyQkFFN0JydUYsRUFBS3lrRixjQUFjL1osRUFBSUssYUFDdkIvcUUsRUFBS0QsZ0JBRUVxaEUsRUFBTTBLLEVBQVlwQixJQUFJMmpCLDZCQU5yQyxDQVdBLElBQUlqTyxFQUFvQixLQUN4QixHQUFJQSxFQUFtQixDQUNuQixJQUFJcGdGLEVBQU9vZ0YsRUFBa0IzZ0YsV0FBVyxDQUNwQ1csTUFBTSxVQUFTLFNBQVMsR0FBSXNxRSxFQUFJdHFFLE1BQU8sQ0FBRW9ILEtBQU0sTUFBTzJaLE9BQVF1cEQsRUFBSXZwRCxPQUFRdmEsSUFBSzhqRSxFQUFJOWpFLE1BQ25GbEcsWUFBYWdxRSxFQUFJdnBELE9BQVMsSUFBTXVwRCxFQUFJOWpFLElBQ3BDbkcsR0FBSSxTQUlSLEdBRkFxckUsRUFBWXBCLElBQUkyakIsdUJBQXlCcnVGLEVBQUtxa0YsT0FDOUNqakIsRUFBTTBLLEVBQVlwQixJQUFJMmpCLHdCQUEwQnJ1RixFQUM1QzhyRSxFQUFZcEIsSUFBSXlRLGlCQUNoQixJQUNJclAsRUFBWXBCLElBQUl5USxpQkFBaUIsZUFBZ0JuN0UsRUFBSzRrRixpQkFFMUQsTUFBT2huRixRQXpHSDB3RixDQUFZeGlCLEVBQWFtaUIsRUFBa0I3c0IsSUFFL0M1NUQsS0FBTSxRRU9WK21GLENBQStCLENBQUUzQixXQUFZQSxFQUFZQyxTQUFVQSxFQUFVQyxlQUFnQkEsRUFBZ0JjLDJCQUE0QkEsS0FHN0lKLEVBQWU5dkYsVUFBVW13Rix3QkFBMEIsU0FBVXJ1RSxHQUN6RCxJQUFJcmhCLEVBQVFsQixLQUNaLEdBQUtBLEtBQUswd0YsZUFBVixDQUtBLElBQUlodkYsRUFBSzFCLEtBQUtELFFBQVN3eEYsRUFBaUI3dkYsRUFBRzZ2RixlQUFnQnhCLEVBQWNydUYsRUFBR3F1RixZQUFhRSxFQUF5QnZ1RixFQUFHdXVGLHVCQUNqSHVCLEVBQXlDLGFBQWZqdkUsRUFBUS9lLEdBK0J2QyxXQUNILElBUUltQyxFQVJBK0YsR0FBd0IsZ0JBUXhCL0YsRUFBS3lGLFNBQVNtSixjQUFjLDRCQUNwQjVPLEVBQUdTLGFBQWEsV0FBYSxNQVJ6QyxHQUFJc0YsRUFDQSxPckJoRkQsU0FBZ0MrbEYsR0FDbkMsSUFBSWp6RCxFQUFVaXpELEVBQVk3bkYsTUFBTTY3RSxJQUNoQyxHQUFJam5ELEVBQVMsQ0FDVCxJQUFJb3JELE9BQWdCLEVBT3BCLE1BTm1CLE1BQWZwckQsRUFBUSxHQUNSb3JELEdBQWdCLEVBRUksTUFBZnByRCxFQUFRLEtBQ2JvckQsR0FBZ0IsR0FFYixDQUNIekMsUUFBUzNvRCxFQUFRLEdBQ2pCb3JELGNBQWVBLEVBQ2Z2QyxhQUFjN29ELEVBQVEsS3FCbUVuQmt6RCxDQUF1QmhtRixHQWxDNEJpbUYsUUFBcUJqZ0YsRUFDM0VrZ0YsR0FBa0IsVUFBUyxVQUFTLFNBQVMsR0FBSXJ2RSxHQUFVaXZFLEdBQTBCLENBQUVsTCxTQUFTLElBQ2hHdUwsRUFBNEMsbUJBQW5CTixFQUFnQ0EsRUFBZUssR0FBbUJBLEVBRzNGRSxPQUFtQ3BnRixJQUFwQm1nRixHQUFnQyxVQUFTLFNBQVMsR0FBSUQsR0FBa0IsQ0FBRS9LLFNBQVMsSUFBV2dMLEdBQ3BGLElBQXpCQyxFQUFhakwsU0FDYixLQUFBNStFLElBQVcsMkJBQTZCNnBGLEVBQWF0dUYsR0FBSywyQ0FFOUQsS0FBQXlFLElBQVcsc0JBQXdCNnBGLEVBQWF0dUYsR0FBSyx5QkFDckQsSUFFSXV1RixFaEJtRUwsU0FBOEJ2b0IsRUFBSzBjLEVBQW9CNkosRUFBYWlDLEVBQVNucEIsR0FFaEYsT0FBTzBnQixHQUFPL2YsRUFESSxJQUFJNGUsR0FBZ0JsQyxFQUFvQjFjLEVBQUt1bUIsR2dCcEVnQixJaEJxRS9DLFNBQVMsQ0FBRW5HLGNBQWUxRCxFQUFtQjBELGNBQWUxRCxtQkFBb0JBLEdBQXNCcmQsSWdCckU1R29wQixDQUZaanlGLEtBQUswd0YsaUJBRWlDb0IsRUFBYy9CLEVBQWEsRUFBTSxDQUFFMWtGLFVBRHBFLFdBQWtCQSxXQU1qQyxPQUpBMG1GLEVBQWdCOUksOEJBQTZCLFNBQVVobEIsRUFBYWdLLEdBQ2hFL3NFLEVBQU1zdkYsU0FBU3ZFLHNCQUFzQmhvQixHQThCakQsU0FBbUNpdUIsRUFBYWp1QixFQUFhZ0ssR0FDekQsSUFBSWtrQixFQUFPbGtCLEVBQWVoSyxFQUFZaUssZUFDVkQsSUFBaUJra0IsRUFBT0QsR0FBZUMsRUFBTyxLQUV0RWx1QixFQUFZNGhCLFVBQVV6RCxHQUFXa0Qsa0JBQ2pDcmhCLEVBQVliLE9BQU8saUNBQWtDLFNBbENqRGd2QixDckIxQkwsU0FBaUJwUCxHQUNwQixPQUFjLElBQVBBLEVxQnlCMkJxUCxDQUFRcEMsR0FBeUJoc0IsRUFBYWdLLE1BRXJFOGpCLEVBdEJILFVBQVksNEJBQThCeHZFLEVBQVEvZSxHQUFLLG9EQTJCL0Qrc0YsRUFBZXJ3RixHQUFLLGlCQUNicXdGLEVBdkV3QixHQ1ovQitCLEdBQXlCLFdBSXpCLFNBQVNBLEVBQVF2eUYsUUFDRyxJQUFaQSxJQUFzQkEsRUFBVSxJQUlwQ0MsS0FBS0MsS0FBT3F5RixFQUFRcHlGLEdBQ3BCRixLQUFLdXlGLFFBQVV4eUYsRUFBUXl5RixRQUFVenlGLEVBQVFvdkUsSUFDekNudkUsS0FBS3l5RixVQUFZcnlGLE1BQU1DLFFBQVFOLEVBQVFrbkIsU0FBV2xuQixFQUFRa25CLFFBQVUsSUFBSTNVLE9BQU8sT0FnQm5GLE9BWEFnZ0YsRUFBUTd4RixVQUFVQyxVQUFZLFdBcUlsQyxJQUErQjh4RixFQUFRdnJFLEVBcEkxQmpuQixLQUFLdXlGLFNBb0lhQyxFQWhJRHh5RixLQUFLdXlGLGFBaUlmLEtBRG1CdHJFLEVBaElLam5CLEtBQUt5eUYsWUFpSW5CeHJFLEVBQVUsSUFDcENBLEVBQVE5bEIsU0FBUSxTQUFVK2lCLEdBQVUsT0FoQnhDLFNBQXlCc3VFLEVBQVF0dUUsR0FDN0IsSUFBSXE4RCxFQUFtQmlTLEVBQU90dUUsR0FROUIsT0FQQXN1RSxFQUFPdHVFLEdBQVUsV0FFYixJQURBLElBQUlwaUIsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxHQUFNQyxVQUFVRCxHQUV6QixPQUFPdytFLEVBQWlCNzlFLEtBQUtDLE1BQU00OUUsR0FBa0IsU0FBUyxDQUFDdmdGLE1BQU8weUYsR0FBbUI1d0YsRUFBTW9pQixNQUU1RnN1RSxFQU9vQ0csQ0FBZ0JILEVBQVF0dUUsT0FySTNELFdBQWEsc0RBUXJCb3VFLEVBQVFweUYsR0FBSyxVQUNOb3lGLEVBM0JpQixHQTZDNUIsU0FBUyxHQUFLaGlGLEVBQUk0VCxHQUNkLElBQUkwdUUsRUFBUXRpRixFQUFHck8sT0FDZixPQUFRMndGLEdBQ0osS0FBSyxFQUNELE9BQU8sU0FBVTVYLEVBQUtuNEUsR0FDbEIsSUFBSW9oRSxFQUFjcGhFLEVBQUlnd0YscUJBQ3RCLEdBQUk1dUIsRUFBYSxDQUNiLElBQUkxaEUsRUFBUzBoRSxFQUFZemhFLFdBQVcsQ0FDaENpQixZQUFhNk0sRUFBR3JRLEtBQ2hCdUQsR0FBSSxjQUFnQjBnQixJQUV4QnJoQixFQUFJNmEsS0FBSyxVQUFVLFdBQ2ZuYixFQUFPTyxZQUdmLE9BQU93TixFQUFHNU4sS0FBSzFDLEtBQU1nN0UsRUFBS240RSxJQUdsQyxLQUFLLEVBQ0QsT0FBTyxTQUFVbTRFLEVBQUtuNEUsRUFBS21OLEdBQ3ZCLElBQUl0TyxFQUVBcUIsRUFBOEIsUUFBdEJyQixFQURNbUIsRUFBSWd3Riw0QkFDMkIsSUFBUG54RixPQUFnQixFQUFTQSxFQUFHYyxXQUFXLENBQzdFaUIsWUFBYTZNLEVBQUdyUSxLQUNoQnVELEdBQUksY0FBZ0IwZ0IsSUFFeEI1VCxFQUFHNU4sS0FBSzFDLEtBQU1nN0UsRUFBS240RSxHQUFLLFdBRXBCLElBREEsSUFJSW5CLEVBSkFJLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsR0FBTUMsVUFBVUQsR0FHVCxRQUFmTCxFQUFLcUIsU0FBeUIsSUFBUHJCLEdBQXlCQSxFQUFHb0IsU0FDcERrTixFQUFLdE4sS0FBS0MsTUFBTXFOLEdBQU0sU0FBUyxDQUFDaFEsTUFBTzhCLFFBSW5ELEtBQUssRUFDRCxPQUFPLFNBQVVtQixFQUFLKzNFLEVBQUtuNEUsRUFBS21OLEdBQzVCLElBQUl0TyxFQUVBcUIsRUFBOEIsUUFBdEJyQixFQURNbUIsRUFBSWd3Riw0QkFDMkIsSUFBUG54RixPQUFnQixFQUFTQSxFQUFHYyxXQUFXLENBQzdFaUIsWUFBYTZNLEVBQUdyUSxLQUNoQnVELEdBQUksY0FBZ0IwZ0IsSUFFeEI1VCxFQUFHNU4sS0FBSzFDLEtBQU1pRCxFQUFLKzNFLEVBQUtuNEUsR0FBSyxXQUV6QixJQURBLElBSUluQixFQUpBSSxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEdBQU1DLFVBQVVELEdBR1QsUUFBZkwsRUFBS3FCLFNBQXlCLElBQVByQixHQUF5QkEsRUFBR29CLFNBQ3BEa04sRUFBS3ROLEtBQUtDLE1BQU1xTixHQUFNLFNBQVMsQ0FBQ2hRLE1BQU84QixRQUluRCxRQUNJLE1BQU0sSUFBSTRFLE1BQU0sZ0RBQWtEa3NGLElBYzlFLFNBQVNGLEdBQW1CNXdGLEVBQU1vaUIsR0FDOUIsT0FBT3BpQixFQUFLK0IsS0FBSSxTQUFVeWpDLEdBQ3RCLE1BQW1CLG1CQUFSQSxFQUNBLEdBQUtBLEVBQUtwakIsR0FFakI5akIsTUFBTUMsUUFBUWluQyxHQUNQQSxFQUFJempDLEtBQUksU0FBVThWLEdBQ3JCLE1BQWlCLG1CQUFOQSxFQUNBLEdBQUtBLEVBQUd1SyxHQUVadkssS0FHUjJ0QixLLElqQmtCUDhoQyxHLDhCa0J0SkowcEIsSUFBZSxVQUFTLFNBQVMsR0FBSSxHQUFzQixDQUFFdkMsZUFBZ0JBLE1sQnNKekVubkIsR0FBVUMsTUFDRmhoRSxhQUNSK2dFLEdBQVEvZ0UsV0FBV2toRSxXQUFhSCxHQUFRL2dFLFdBQVdraEUsWUFBYyxHQUM1REgsR0FBUS9nRSxXQUFXa2hFLFdBQVdYLG1CQUMvQlEsR0FBUS9nRSxXQUFXa2hFLFdBQVdYLGlCQW5CMUMsU0FBMkJzZCxFQUFvQnJkLEdBRTNDLE9BQU8wZ0IsR0FBT3ZwRixLQURJLElBQUlpbUYsR0FBWUMsRUFBb0JsbUYsT0FDckIsU0FBUyxDQUFFNHBGLGNBQWUxRCxFQUFtQjBELGNBQWUxRCxtQkFBb0JBLEdBQXNCcmQsTUFtQjlITyxHQUFRL2dFLFdBQVdraEUsV0FBV1QsZUFDL0JNLEdBQVEvZ0UsV0FBV2toRSxXQUFXVCxhQXhKMUMsV0FDSSxJQUFJM21FLEVBQVFuQyxLQUFLb0MsV0FDakIsR0FBSUQsRUFBTyxDQUNQLElBQUlZLEVBQU9aLEVBQU1HLFVBQ2pCLEdBQUlTLEVBQ0EsTUFBTyxDQUNILGVBQWdCQSxFQUFLNGtGLGlCQUlqQyxNQUFPLE1KWlByYixHQUEwQixDQUN0QmhvRSxTQUFVc2hGLEdBQ1ZyN0UsS0FBTSxVQUVWK2hFLEdBQTBCLENBQ3RCaG9FLFNBQVVzaEYsR0FDVnI3RSxLQUFNLHVCSktQLFNBQWN4SyxRQUNELElBQVpBLElBQXNCQSxFQUFVLElBQ3BDLElBQUkyeEQsR0FBZSxVQUFTLFNBQVMsQ0FFakNyekIsS0FBSyxXQUFrQkEsSUFBS29tRCxhQUFhLEVBQU1FLFdBQVcsRUFBT29PLFNBQVMsR0FBU2h6RixHQUFVLENBQUV3akYsZ0JBQWdCLFNBQVMsQ0FBRTU4RCxNQUFPLENBQUMsV0FBWSxRQUFTLFVBQVdnUixRQUFTLElBQU02ckQsaUJBQWlCLEdBQVN6akYsRUFBUXdqRixrQkFDdk43eEIsRUFBYXFyQixVQUFZcnJCLEVBQWFxckIsV0FBYSxHQUNuRHJyQixFQUFhcXJCLFVBQVUxSCxJQUFNLENBQ3pCcDFFLEtBQU0sd0JBQ05vNkUsU0FBVSxDQUNOLENBQ0lwNkUsS0FBTSxrQkFDTjZqQyxRQUFTcW1DLEtBR2pCcm1DLFFBQVNxbUMsSUZ1Q1YsU0FBY3BxRSxHQUtqQixRQUpnQixJQUFaQSxJQUFzQkEsRUFBVSxTQUNBMlIsSUFBaEMzUixFQUFRcXpFLHNCQUNScnpFLEVBQVFxekUsb0JBQXNCQSxTQUVWMWhFLElBQXBCM1IsRUFBUXdtRSxRQUF1QixDQUMvQixJQUFJeXNCLEdBQVcsV0FFWEEsRUFBU0MsZ0JBQWtCRCxFQUFTQyxlQUFlL3lGLEtBQ25ESCxFQUFRd21FLFFBQVV5c0IsRUFBU0MsZUFBZS95RixTQUdkd1IsSUFBaEMzUixFQUFRbXpGLHNCQUNSbnpGLEVBQVFtekYscUJBQXNCLEdBRWxDbnpGLEVBQVFnOUUsVUFBWWg5RSxFQUFRZzlFLFdBQWEsR0FDekNoOUUsRUFBUWc5RSxVQUFVMUgsSUFBTSxDQUNwQnAxRSxLQUFNLDRCQUNObzZFLFNBQVUsQ0FDTixDQUNJcDZFLEtBQU0sc0JBQ042akMsUUFBU3FtQyxLQUdqQnJtQyxRQUFTcW1DLEk2QnRGVixTQUFxQmdwQixFQUFhcHpGLElBQ2YsSUFBbEJBLEVBQVFxekYsT0FDUixjQUVKLElBQUk1cEIsRUFBTSxLQUNOOWtFLEVBQVMsSUFBSXl1RixFQUFZcHpGLEdBQzdCeXBFLEVBQUl4QyxXQUFXdGlFLEc3QmtGZjJ1RixDQUFZM1QsR0FBZTMvRSxHQUN2QkEsRUFBUW16RixxQkFpRmhCLFdBR0ksUUFBd0IsS0FGWCxXQUNTOW5GLFNBQ3RCLENBSUEsSUFBSW8rRCxFQUFNLEtBQ1ZBLEVBQUlOLGVBQ0pNLEVBQUlULGlCQUVKdUQsR0FBMEIsQ0FDdEJob0UsU0FBVSxXQUNOa2xFLEVBQUlOLGVBQ0pNLEVBQUlULGtCQUVSeCtELEtBQU0saUJBWk4sVUFBWSxzRkFwRlorb0YsR0VqRUosQ0FBWTVoQyxRQUNhaGdELElBQXJCZ2dELEVBQWFyekIsS0FDYixVQUFZLHVGQUNaLFVBQVksa0RBR0ksSUFBSW9rRCxHQUFVL3dCLEdBQ3BCbXlCLFE0QnJDbEIsQ0FBWSxDQUNWeGxELElBQUcsR0FDSDZ6QyxJQUFJLDRFQUNKaUIsYUFBYyxDQUFDLElBQUkyZixHQUFhdkMsZ0JBQ2hDNUwsV0FBVSxFQUlWbUYsaUJBQWtCLElDRnBCLE1BQU15SixHQUFnQixVQUFXLENBQy9CcmtFLE9BQU92WixHQUNFQSxFQUFjLFNBQVUsQ0FDN0JxWSxNQUFPLENBQ0w5dEIsR0FBSSxXQUVOdXdCLFNBQVUsQ0FDUjhkLFVBQVcsV0FFYnJpQixHQUFJLENBQ0ZzbkUsTUFBUXBwRixJQUNOa3lELEdBQU8zRSxTQUFjLFVBT2xCLElBQUksR0FBSSxDQUNuQmh5RCxHQUFJLGVBQ0p5NEIsV0FBWSxDQUNWaTBCLFdBQVlBLEdBQ1pHLGVBQWdCQSxHQUNoQkYsYUFBY0EsR0FDZGloQyxjQUFlQSxHQUNmRSxlQUFnQmhoQyxJQUVsQixPQUFPcFcsR0FDTCxPQUFPQSxFQUFFLE1BQU8sQ0FDZEEsRUFBRWdXLElBQ0ZoVyxFQUFFLE1BQ0ZBLEVBQUVtVyxHQUFnQixDQUFFeHJDLE1BQU8sQ0FBRTZQLFFBQVM3MkIsS0FBS3FSLFlBQVl3bEIsV0FDdkR3bEIsRUFBRWlXLEdBQWMsQ0FBRXRyQyxNQUFPLENBQUU1ZSxNQUFPcEksS0FBS3FSLFlBQVlqSixTQUNuRGkwQyxFQUFFazNDLElBQ0ZsM0MsRUFBRW9XLEdBQVMsQ0FBRXpyQyxNQUFPLENBQUUwckMsUUFBUzF5RCxLQUFLcVIsWUFBWW9oRCxjQUdwRHR2RCxLQUFNLENBQ0prTyxZQUFhLElBRWYsVUFDRXJSLEtBQUtxUixZQUFjaXJELEdBQU8vRSxZQUU1QixVQUNFK0UsR0FBTzlFLFdBQVUsS0FDZngzRCxLQUFLcVIsWUFBY2lyRCxHQUFPL0UsY0FFNUIrRSxHQUFPM0UsU0FBYyxRIiwiZmlsZSI6InBlcmZvcm1hbmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZHluYW1pY1JlcXVpcmUsIGZpbGwsIGlzVGhlbmFibGUsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIE9QRVJBVElPTlMgPSBbXG4gICAgJ2FnZ3JlZ2F0ZScsXG4gICAgJ2J1bGtXcml0ZScsXG4gICAgJ2NvdW50RG9jdW1lbnRzJyxcbiAgICAnY3JlYXRlSW5kZXgnLFxuICAgICdjcmVhdGVJbmRleGVzJyxcbiAgICAnZGVsZXRlTWFueScsXG4gICAgJ2RlbGV0ZU9uZScsXG4gICAgJ2Rpc3RpbmN0JyxcbiAgICAnZHJvcCcsXG4gICAgJ2Ryb3BJbmRleCcsXG4gICAgJ2Ryb3BJbmRleGVzJyxcbiAgICAnZXN0aW1hdGVkRG9jdW1lbnRDb3VudCcsXG4gICAgJ2ZpbmRPbmUnLFxuICAgICdmaW5kT25lQW5kRGVsZXRlJyxcbiAgICAnZmluZE9uZUFuZFJlcGxhY2UnLFxuICAgICdmaW5kT25lQW5kVXBkYXRlJyxcbiAgICAnaW5kZXhlcycsXG4gICAgJ2luZGV4RXhpc3RzJyxcbiAgICAnaW5kZXhJbmZvcm1hdGlvbicsXG4gICAgJ2luaXRpYWxpemVPcmRlcmVkQnVsa09wJyxcbiAgICAnaW5zZXJ0TWFueScsXG4gICAgJ2luc2VydE9uZScsXG4gICAgJ2lzQ2FwcGVkJyxcbiAgICAnbWFwUmVkdWNlJyxcbiAgICAnb3B0aW9ucycsXG4gICAgJ3BhcmFsbGVsQ29sbGVjdGlvblNjYW4nLFxuICAgICdyZW5hbWUnLFxuICAgICdyZXBsYWNlT25lJyxcbiAgICAnc3RhdHMnLFxuICAgICd1cGRhdGVNYW55JyxcbiAgICAndXBkYXRlT25lJyxcbl07XG4vLyBBbGwgb2YgdGhlIG9wZXJhdGlvbnMgYWJvdmUgdGFrZSBgb3B0aW9uc2AgYW5kIGBjYWxsYmFja2AgYXMgdGhlaXIgZmluYWwgcGFyYW1ldGVycywgYnV0IHNvbWUgb2YgdGhlbVxuLy8gdGFrZSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgYXMgd2VsbC4gRm9yIHRob3NlIG9wZXJhdGlvbnMsIHRoaXMgaXMgYSBtYXAgb2Zcbi8vIHsgPG9wZXJhdGlvbiBuYW1lPjogIFs8bmFtZXMgb2YgYWRkaXRpb25hbCBwYXJhbWV0ZXJzPl0gfSwgYXMgYSB3YXkgdG8ga25vdyB3aGF0IHRvIGNhbGwgdGhlIG9wZXJhdGlvbidzXG4vLyBwb3NpdGlvbmFsIGFyZ3VtZW50cyB3aGVuIHdlIGFkZCB0aGVtIHRvIHRoZSBzcGFuJ3MgYGRhdGFgIG9iamVjdCBsYXRlclxudmFyIE9QRVJBVElPTl9TSUdOQVRVUkVTID0ge1xuICAgIC8vIGFnZ3JlZ2F0ZSBpbnRlbnRpb25hbGx5IG5vdCBpbmNsdWRlZCBiZWNhdXNlIGBwaXBlbGluZWAgYXJndW1lbnRzIGFyZSB0b28gY29tcGxleCB0byBzZXJpYWxpemUgd2VsbFxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvMzEwMlxuICAgIGJ1bGtXcml0ZTogWydvcGVyYXRpb25zJ10sXG4gICAgY291bnREb2N1bWVudHM6IFsncXVlcnknXSxcbiAgICBjcmVhdGVJbmRleDogWydmaWVsZE9yU3BlYyddLFxuICAgIGNyZWF0ZUluZGV4ZXM6IFsnaW5kZXhTcGVjcyddLFxuICAgIGRlbGV0ZU1hbnk6IFsnZmlsdGVyJ10sXG4gICAgZGVsZXRlT25lOiBbJ2ZpbHRlciddLFxuICAgIGRpc3RpbmN0OiBbJ2tleScsICdxdWVyeSddLFxuICAgIGRyb3BJbmRleDogWydpbmRleE5hbWUnXSxcbiAgICBmaW5kT25lOiBbJ3F1ZXJ5J10sXG4gICAgZmluZE9uZUFuZERlbGV0ZTogWydmaWx0ZXInXSxcbiAgICBmaW5kT25lQW5kUmVwbGFjZTogWydmaWx0ZXInLCAncmVwbGFjZW1lbnQnXSxcbiAgICBmaW5kT25lQW5kVXBkYXRlOiBbJ2ZpbHRlcicsICd1cGRhdGUnXSxcbiAgICBpbmRleEV4aXN0czogWydpbmRleGVzJ10sXG4gICAgaW5zZXJ0TWFueTogWydkb2NzJ10sXG4gICAgaW5zZXJ0T25lOiBbJ2RvYyddLFxuICAgIG1hcFJlZHVjZTogWydtYXAnLCAncmVkdWNlJ10sXG4gICAgcmVuYW1lOiBbJ25ld05hbWUnXSxcbiAgICByZXBsYWNlT25lOiBbJ2ZpbHRlcicsICdkb2MnXSxcbiAgICB1cGRhdGVNYW55OiBbJ2ZpbHRlcicsICd1cGRhdGUnXSxcbiAgICB1cGRhdGVPbmU6IFsnZmlsdGVyJywgJ3VwZGF0ZSddLFxufTtcbi8qKiBUcmFjaW5nIGludGVncmF0aW9uIGZvciBtb25nbyBwYWNrYWdlICovXG52YXIgTW9uZ28gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNb25nbyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gTW9uZ28uaWQ7XG4gICAgICAgIHRoaXMuX29wZXJhdGlvbnMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMub3BlcmF0aW9ucylcbiAgICAgICAgICAgID8gb3B0aW9ucy5vcGVyYXRpb25zXG4gICAgICAgICAgICA6IE9QRVJBVElPTlM7XG4gICAgICAgIHRoaXMuX2Rlc2NyaWJlT3BlcmF0aW9ucyA9ICdkZXNjcmliZU9wZXJhdGlvbnMnIGluIG9wdGlvbnMgPyBvcHRpb25zLmRlc2NyaWJlT3BlcmF0aW9ucyA6IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTW9uZ28ucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uIChfLCBnZXRDdXJyZW50SHViKSB7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG1vbmdvZGJNb2R1bGUgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdtb25nb2RiJyk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gbW9uZ29kYk1vZHVsZS5Db2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01vbmdvIEludGVncmF0aW9uIHdhcyB1bmFibGUgdG8gcmVxdWlyZSBgbW9uZ29kYmAgcGFja2FnZS4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnN0cnVtZW50T3BlcmF0aW9ucyhjb2xsZWN0aW9uLCB0aGlzLl9vcGVyYXRpb25zLCBnZXRDdXJyZW50SHViKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhdGNoZXMgb3JpZ2luYWwgY29sbGVjdGlvbiBtZXRob2RzXG4gICAgICovXG4gICAgTW9uZ28ucHJvdG90eXBlLl9pbnN0cnVtZW50T3BlcmF0aW9ucyA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBvcGVyYXRpb25zLCBnZXRDdXJyZW50SHViKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIG9wZXJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3BlcmF0aW9uKSB7IHJldHVybiBfdGhpcy5fcGF0Y2hPcGVyYXRpb24oY29sbGVjdGlvbiwgb3BlcmF0aW9uLCBnZXRDdXJyZW50SHViKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXRjaGVzIG9yaWdpbmFsIGNvbGxlY3Rpb24gdG8gdXRpbGl6ZSBvdXIgdHJhY2luZyBmdW5jdGlvbmFsaXR5XG4gICAgICovXG4gICAgTW9uZ28ucHJvdG90eXBlLl9wYXRjaE9wZXJhdGlvbiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBvcGVyYXRpb24sIGdldEN1cnJlbnRIdWIpIHtcbiAgICAgICAgaWYgKCEob3BlcmF0aW9uIGluIGNvbGxlY3Rpb24ucHJvdG90eXBlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGdldFNwYW5Db250ZXh0ID0gdGhpcy5fZ2V0U3BhbkNvbnRleHRGcm9tT3BlcmF0aW9uQXJndW1lbnRzLmJpbmQodGhpcyk7XG4gICAgICAgIGZpbGwoY29sbGVjdGlvbi5wcm90b3R5cGUsIG9wZXJhdGlvbiwgZnVuY3Rpb24gKG9yaWcpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdEFyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGUgPSBnZXRDdXJyZW50SHViKCkuZ2V0U2NvcGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50U3BhbiA9IChfYSA9IHNjb3BlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0U3BhbigpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBvcGVyYXRpb24gd2FzIHBhc3NlZCBhIGNhbGxiYWNrLiAobWFwUmVkdWNlIHJlcXVpcmVzIGEgZGlmZmVyZW50IGNoZWNrLCBhc1xuICAgICAgICAgICAgICAgIC8vIGl0cyAobm9uLWNhbGxiYWNrKSBhcmd1bWVudHMgY2FuIGFsc28gYmUgZnVuY3Rpb25zLilcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RBcmcgIT09ICdmdW5jdGlvbicgfHwgKG9wZXJhdGlvbiA9PT0gJ21hcFJlZHVjZScgJiYgYXJncy5sZW5ndGggPT09IDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuXzEgPSAoX2IgPSBwYXJlbnRTcGFuKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3RhcnRDaGlsZChnZXRTcGFuQ29udGV4dCh0aGlzLCBvcGVyYXRpb24sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IG9yaWcuY2FsbC5hcHBseShvcmlnLCBfX3NwcmVhZChbdGhpc10sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGhlbmFibGUobWF5YmVQcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gc3Bhbl8xKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0gc3Bhbl8xKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzcGFuID0gKF9kID0gcGFyZW50U3BhbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnN0YXJ0Q2hpbGQoZ2V0U3BhbkNvbnRleHQodGhpcywgb3BlcmF0aW9uLCBhcmdzLnNsaWNlKDAsIC0xKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnLmNhbGwuYXBwbHkob3JpZywgX19zcHJlYWQoW3RoaXNdLCBhcmdzLnNsaWNlKDAsIC0xKSwgW2Z1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gc3BhbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFyZyhlcnIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1dKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvcm0gYSBTcGFuQ29udGV4dCBiYXNlZCBvbiB0aGUgdXNlciBpbnB1dCB0byBhIGdpdmVuIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBNb25nby5wcm90b3R5cGUuX2dldFNwYW5Db250ZXh0RnJvbU9wZXJhdGlvbkFyZ3VtZW50cyA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBvcGVyYXRpb24sIGFyZ3MpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uTmFtZTogY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIGRiTmFtZTogY29sbGVjdGlvbi5kYk5hbWUsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IGNvbGxlY3Rpb24ubmFtZXNwYWNlLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3BhbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBvcDogXCJkYlwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG9wZXJhdGlvbixcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHRoZSBvcGVyYXRpb24gdGFrZXMgbm8gYXJndW1lbnRzIGJlc2lkZXMgYG9wdGlvbnNgIGFuZCBgY2FsbGJhY2tgLCBvciBpZiBhcmd1bWVudFxuICAgICAgICAvLyBjb2xsZWN0aW9uIGlzIGRpc2FibGVkIGZvciB0aGlzIG9wZXJhdGlvbiwganVzdCByZXR1cm4gZWFybHkuXG4gICAgICAgIHZhciBzaWduYXR1cmUgPSBPUEVSQVRJT05fU0lHTkFUVVJFU1tvcGVyYXRpb25dO1xuICAgICAgICB2YXIgc2hvdWxkRGVzY3JpYmUgPSBBcnJheS5pc0FycmF5KHRoaXMuX2Rlc2NyaWJlT3BlcmF0aW9ucylcbiAgICAgICAgICAgID8gdGhpcy5fZGVzY3JpYmVPcGVyYXRpb25zLmluY2x1ZGVzKG9wZXJhdGlvbilcbiAgICAgICAgICAgIDogdGhpcy5fZGVzY3JpYmVPcGVyYXRpb25zO1xuICAgICAgICBpZiAoIXNpZ25hdHVyZSB8fCAhc2hvdWxkRGVzY3JpYmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzcGFuQ29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBgbWFwUmVkdWNlYCwgYXMgdGhlIG9ubHkgb25lIGFjY2VwdGluZyBmdW5jdGlvbnMgYXMgYXJndW1lbnRzLlxuICAgICAgICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJ21hcFJlZHVjZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfX3JlYWQoYXJncywgMiksIG1hcCA9IF9hWzBdLCByZWR1Y2UgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICBkYXRhW3NpZ25hdHVyZVswXV0gPSB0eXBlb2YgbWFwID09PSAnc3RyaW5nJyA/IG1hcCA6IG1hcC5uYW1lIHx8ICc8YW5vbnltb3VzPic7XG4gICAgICAgICAgICAgICAgZGF0YVtzaWduYXR1cmVbMV1dID0gdHlwZW9mIHJlZHVjZSA9PT0gJ3N0cmluZycgPyByZWR1Y2UgOiByZWR1Y2UubmFtZSB8fCAnPGFub255bW91cz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWduYXR1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtzaWduYXR1cmVbaV1dID0gSlNPTi5zdHJpbmdpZnkoYXJnc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwYW5Db250ZXh0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBNb25nby5pZCA9ICdNb25nbyc7XG4gICAgcmV0dXJuIE1vbmdvO1xufSgpKTtcbmV4cG9ydCB7IE1vbmdvIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nby5qcy5tYXAiLCJpbXBvcnQgeyBkeW5hbWljUmVxdWlyZSwgZmlsbCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKiogVHJhY2luZyBpbnRlZ3JhdGlvbiBmb3Igbm9kZS1teXNxbCBwYWNrYWdlICovXG52YXIgTXlzcWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTXlzcWwoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gTXlzcWwuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTXlzcWwucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uIChfLCBnZXRDdXJyZW50SHViKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVsbHkgbXlzcWwgaXMgdXNpbmcgc29tZSBjdXN0b20gbG9hZGluZyBzeXN0ZW0gYW5kIGBDb25uZWN0aW9uYCBpcyBub3QgZXhwb3J0ZWQgZGlyZWN0bHkuXG4gICAgICAgICAgICBjb25uZWN0aW9uID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnbXlzcWwvbGliL0Nvbm5lY3Rpb24uanMnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdNeXNxbCBJbnRlZ3JhdGlvbiB3YXMgdW5hYmxlIHRvIHJlcXVpcmUgYG15c3FsYCBwYWNrYWdlLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aWxsIGhhdmUgb25lIG9mIHRoZXNlIHNpZ25hdHVyZXM6XG4gICAgICAgIC8vICAgIGZ1bmN0aW9uIChjYWxsYmFjaykgPT4gdm9pZFxuICAgICAgICAvLyAgICBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spID0+IHZvaWRcbiAgICAgICAgLy8gICAgZnVuY3Rpb24gKG9wdGlvbnMsIHZhbHVlcywgY2FsbGJhY2spID0+IHZvaWRcbiAgICAgICAgZmlsbChjb25uZWN0aW9uLnByb3RvdHlwZSwgJ3F1ZXJ5JywgZnVuY3Rpb24gKG9yaWcpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucywgdmFsdWVzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlID0gZ2V0Q3VycmVudEh1YigpLmdldFNjb3BlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFNwYW4gPSAoX2EgPSBzY29wZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFNwYW4oKTtcbiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IChfYiA9IHBhcmVudFNwYW4pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/IG9wdGlvbnMgOiBvcHRpb25zLnNxbCxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiZGJcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnLmNhbGwodGhpcywgb3B0aW9ucywgdmFsdWVzLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQsIGZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gc3BhbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQsIGZpZWxkcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCwgZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMoZXJyLCByZXN1bHQsIGZpZWxkcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIG9wdGlvbnMsIHZhbHVlcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE15c3FsLmlkID0gJ015c3FsJztcbiAgICByZXR1cm4gTXlzcWw7XG59KCkpO1xuZXhwb3J0IHsgTXlzcWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLmpzLm1hcCIsImltcG9ydCB7IGR5bmFtaWNSZXF1aXJlLCBmaWxsLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKiBUcmFjaW5nIGludGVncmF0aW9uIGZvciBub2RlLXBvc3RncmVzIHBhY2thZ2UgKi9cbnZhciBQb3N0Z3JlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb3N0Z3JlcygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBQb3N0Z3Jlcy5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBQb3N0Z3Jlcy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKF8sIGdldEN1cnJlbnRIdWIpIHtcbiAgICAgICAgdmFyIGNsaWVudDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBwZ01vZHVsZSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3BnJyk7XG4gICAgICAgICAgICBjbGllbnQgPSBwZ01vZHVsZS5DbGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignUG9zdGdyZXMgSW50ZWdyYXRpb24gd2FzIHVuYWJsZSB0byByZXF1aXJlIGBwZ2AgcGFja2FnZS4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogZnVuY3Rpb24gKHF1ZXJ5LCBjYWxsYmFjaykgPT4gdm9pZFxuICAgICAgICAgKiBmdW5jdGlvbiAocXVlcnksIHBhcmFtcywgY2FsbGJhY2spID0+IHZvaWRcbiAgICAgICAgICogZnVuY3Rpb24gKHF1ZXJ5KSA9PiBQcm9taXNlXG4gICAgICAgICAqIGZ1bmN0aW9uIChxdWVyeSwgcGFyYW1zKSA9PiBQcm9taXNlXG4gICAgICAgICAqL1xuICAgICAgICBmaWxsKGNsaWVudC5wcm90b3R5cGUsICdxdWVyeScsIGZ1bmN0aW9uIChvcmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbmZpZywgdmFsdWVzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlID0gZ2V0Q3VycmVudEh1YigpLmdldFNjb3BlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFNwYW4gPSAoX2EgPSBzY29wZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFNwYW4oKTtcbiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IChfYiA9IHBhcmVudFNwYW4pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogY29uZmlnLnRleHQsXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcImRiXCIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIGNvbmZpZywgdmFsdWVzLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IHNwYW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnLmNhbGwodGhpcywgY29uZmlnLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IHNwYW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyhlcnIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIGNvbmZpZywgdmFsdWVzKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgUG9zdGdyZXMuaWQgPSAnUG9zdGdyZXMnO1xuICAgIHJldHVybiBQb3N0Z3Jlcztcbn0oKSk7XG5leHBvcnQgeyBQb3N0Z3JlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwIiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcbi8qKlxuICogR2l2ZW4gYSBjaGlsZCBET00gZWxlbWVudCwgcmV0dXJucyBhIHF1ZXJ5LXNlbGVjdG9yIHN0YXRlbWVudCBkZXNjcmliaW5nIHRoYXRcbiAqIGFuZCBpdHMgYW5jZXN0b3JzXG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbSkge1xuICAgIC8vIHRyeS9jYXRjaCBib3RoOlxuICAgIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gICAgLy8gLSBgaHRtbFRyZWVBc1N0cmluZ2AgYmVjYXVzZSBpdCdzIGNvbXBsZXgsIGFuZCBqdXN0IGFjY2Vzc2luZyB0aGUgRE9NIGluY29ycmVjdGx5XG4gICAgLy8gLSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy5cbiAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudEVsZW0gPSBlbGVtO1xuICAgICAgICB2YXIgTUFYX1RSQVZFUlNFX0hFSUdIVCA9IDU7XG4gICAgICAgIHZhciBNQVhfT1VUUFVUX0xFTiA9IDgwO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcgPiAnO1xuICAgICAgICB2YXIgc2VwTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgdmFyIG5leHRTdHIgPSB2b2lkIDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgICAgICB3aGlsZSAoY3VycmVudEVsZW0gJiYgaGVpZ2h0KysgPCBNQVhfVFJBVkVSU0VfSEVJR0hUKSB7XG4gICAgICAgICAgICBuZXh0U3RyID0gX2h0bWxFbGVtZW50QXNTdHJpbmcoY3VycmVudEVsZW0pO1xuICAgICAgICAgICAgLy8gYmFpbCBvdXQgaWZcbiAgICAgICAgICAgIC8vIC0gbmV4dFN0ciBpcyB0aGUgJ2h0bWwnIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRoYXQgd291bGQgYmUgY3JlYXRlZCBleGNlZWRzIE1BWF9PVVRQVVRfTEVOXG4gICAgICAgICAgICAvLyAgIChpZ25vcmUgdGhpcyBsaW1pdCBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IGl0ZXJhdGlvbilcbiAgICAgICAgICAgIGlmIChuZXh0U3RyID09PSAnaHRtbCcgfHwgKGhlaWdodCA+IDEgJiYgbGVuICsgb3V0Lmxlbmd0aCAqIHNlcExlbmd0aCArIG5leHRTdHIubGVuZ3RoID49IE1BWF9PVVRQVVRfTEVOKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0LnB1c2gobmV4dFN0cik7XG4gICAgICAgICAgICBsZW4gKz0gbmV4dFN0ci5sZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIHJldHVybiAnPHVua25vd24+JztcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgYSBzaW1wbGUsIHF1ZXJ5LXNlbGVjdG9yIHJlcHJlc2VudGF0aW9uIG9mIGEgRE9NIGVsZW1lbnRcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBpbnB1dCNmb28uYnRuW25hbWU9YmF6XVxuICogQHJldHVybnMgZ2VuZXJhdGVkIERPTSBwYXRoXG4gKi9cbmZ1bmN0aW9uIF9odG1sRWxlbWVudEFzU3RyaW5nKGVsKSB7XG4gICAgdmFyIGVsZW0gPSBlbDtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgdmFyIGNsYXNzTmFtZTtcbiAgICB2YXIgY2xhc3NlcztcbiAgICB2YXIga2V5O1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBpO1xuICAgIGlmICghZWxlbSB8fCAhZWxlbS50YWdOYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgb3V0LnB1c2goZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIGlmIChlbGVtLmlkKSB7XG4gICAgICAgIG91dC5wdXNoKFwiI1wiICsgZWxlbS5pZCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZTtcbiAgICBpZiAoY2xhc3NOYW1lICYmIGlzU3RyaW5nKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0LnB1c2goXCIuXCIgKyBjbGFzc2VzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgYWxsb3dlZEF0dHJzID0gWyd0eXBlJywgJ25hbWUnLCAndGl0bGUnLCAnYWx0J107XG4gICAgZm9yIChpID0gMDsgaSA8IGFsbG93ZWRBdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBhbGxvd2VkQXR0cnNbaV07XG4gICAgICAgIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgb3V0LnB1c2goXCJbXCIgKyBrZXkgKyBcIj1cXFwiXCIgKyBhdHRyICsgXCJcXFwiXVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBvbmUgb2YgYSBmZXcgRXJyb3Igb3IgRXJyb3ItbGlrZVxuICoge0BsaW5rIGlzRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcih3YXQpIHtcbiAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpKSB7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRXJyb3JdJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdbb2JqZWN0IEV4Y2VwdGlvbl0nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpc0luc3RhbmNlT2Yod2F0LCBFcnJvcik7XG4gICAgfVxufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRXJyb3JFdmVudFxuICoge0BsaW5rIGlzRXJyb3JFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBFcnJvckV2ZW50XSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FcnJvclxuICoge0BsaW5rIGlzRE9NRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNET01FcnJvcih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUVycm9yXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FeGNlcHRpb25cbiAqIHtAbGluayBpc0RPTUV4Y2VwdGlvbn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUV4Y2VwdGlvbih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBzdHJpbmdcbiAqIHtAbGluayBpc1N0cmluZ30uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIGlzIGEgcHJpbWl0aXZlICh1bmRlZmluZWQsIG51bGwsIG51bWJlciwgYm9vbGVhbiwgc3RyaW5nLCBiaWdpbnQsIHN5bWJvbClcbiAqIHtAbGluayBpc1ByaW1pdGl2ZX0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh3YXQpIHtcbiAgICByZXR1cm4gd2F0ID09PSBudWxsIHx8ICh0eXBlb2Ygd2F0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygd2F0ICE9PSAnZnVuY3Rpb24nKTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB7QGxpbmsgaXNQbGFpbk9iamVjdH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBFdmVudCBpbnN0YW5jZVxuICoge0BsaW5rIGlzRXZlbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudCh3YXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIEV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luc3RhbmNlT2Yod2F0LCBFdmVudCk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBFbGVtZW50IGluc3RhbmNlXG4gKiB7QGxpbmsgaXNFbGVtZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudCh3YXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih3YXQsIEVsZW1lbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gcmVnZXhwXG4gKiB7QGxpbmsgaXNSZWdFeHB9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWdFeHAod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUgaGFzIGEgdGhlbiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUaGVuYWJsZSh3YXQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgcmV0dXJuIEJvb2xlYW4od2F0ICYmIHdhdC50aGVuICYmIHR5cGVvZiB3YXQudGhlbiA9PT0gJ2Z1bmN0aW9uJyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhIFN5bnRoZXRpY0V2ZW50XG4gKiB7QGxpbmsgaXNTeW50aGV0aWNFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KHdhdCkge1xuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHdhdCkgJiYgJ25hdGl2ZUV2ZW50JyBpbiB3YXQgJiYgJ3ByZXZlbnREZWZhdWx0JyBpbiB3YXQgJiYgJ3N0b3BQcm9wYWdhdGlvbicgaW4gd2F0O1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gaW5zdGFuY2Ugb2YgcHJvdmlkZWQgY29uc3RydWN0b3IuXG4gKiB7QGxpbmsgaXNJbnN0YW5jZU9mfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEBwYXJhbSBiYXNlIEEgY29uc3RydWN0b3IgdG8gYmUgdXNlZCBpbiBhIGNoZWNrLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbnN0YW5jZU9mKHdhdCwgYmFzZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB3YXQgaW5zdGFuY2VvZiBiYXNlO1xuICAgIH1cbiAgICBjYXRjaCAoX2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94LCBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuLy8gVE9ETzogSW1wbGVtZW50IGRpZmZlcmVudCBsb2dnZXJzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzXG52YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4vKiogUHJlZml4IGZvciBsb2dnaW5nIHN0cmluZ3MgKi9cbnZhciBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xuLyoqIEpTRG9jICovXG52YXIgTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIGZ1bmN0aW9uIExvZ2dlcigpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbC5jb25zb2xlLmxvZyhQUkVGSVggKyBcIltMb2ddOiBcIiArIGFyZ3Muam9pbignICcpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZVNhbmRib3goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsLmNvbnNvbGUud2FybihQUkVGSVggKyBcIltXYXJuXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS5lcnJvcihQUkVGSVggKyBcIltFcnJvcl06IFwiICsgYXJncy5qb2luKCcgJykpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBMb2dnZXI7XG59KCkpO1xuLy8gRW5zdXJlIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSBsb2dnZXIgaW5zdGFuY2UsIGV2ZW4gaWYgbXVsdGlwbGUgdmVyc2lvbnMgb2YgQHNlbnRyeS91dGlscyBhcmUgYmVpbmcgdXNlZFxuZ2xvYmFsLl9fU0VOVFJZX18gPSBnbG9iYWwuX19TRU5UUllfXyB8fCB7fTtcbnZhciBsb2dnZXIgPSBnbG9iYWwuX19TRU5UUllfXy5sb2dnZXIgfHwgKGdsb2JhbC5fX1NFTlRSWV9fLmxvZ2dlciA9IG5ldyBMb2dnZXIoKSk7XG5leHBvcnQgeyBsb2dnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiLCJpbXBvcnQgeyBpc05vZGVFbnYgfSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgc25pcExpbmUgfSBmcm9tICcuL3N0cmluZyc7XG52YXIgZmFsbGJhY2tHbG9iYWxPYmplY3QgPSB7fTtcbi8qKlxuICogU2FmZWx5IGdldCBnbG9iYWwgc2NvcGUgb2JqZWN0XG4gKlxuICogQHJldHVybnMgR2xvYmFsIHNjb3BlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsT2JqZWN0KCkge1xuICAgIHJldHVybiAoaXNOb2RlRW52KClcbiAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBzZWxmXG4gICAgICAgICAgICAgICAgOiBmYWxsYmFja0dsb2JhbE9iamVjdCk7XG59XG4vKipcbiAqIFVVSUQ0IGdlbmVyYXRvclxuICpcbiAqIEByZXR1cm5zIHN0cmluZyBHZW5lcmF0ZWQgVVVJRDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dWlkNCgpIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvO1xuICAgIGlmICghKGNyeXB0byA9PT0gdm9pZCAwKSAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIC8vIFVzZSB3aW5kb3cuY3J5cHRvIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50MTZBcnJheSg4KTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgICAvLyBzZXQgNCBpbiBieXRlIDdcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgYXJyWzNdID0gKGFyclszXSAmIDB4ZmZmKSB8IDB4NDAwMDtcbiAgICAgICAgLy8gc2V0IDIgbW9zdCBzaWduaWZpY2FudCBiaXRzIG9mIGJ5dGUgOSB0byAnMTAnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIGFycls0XSA9IChhcnJbNF0gJiAweDNmZmYpIHwgMHg4MDAwO1xuICAgICAgICB2YXIgcGFkID0gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICAgICAgdmFyIHYgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgd2hpbGUgKHYubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgICAgIHYgPSBcIjBcIiArIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChwYWQoYXJyWzBdKSArIHBhZChhcnJbMV0pICsgcGFkKGFyclsyXSkgKyBwYWQoYXJyWzNdKSArIHBhZChhcnJbNF0pICsgcGFkKGFycls1XSkgKyBwYWQoYXJyWzZdKSArIHBhZChhcnJbN10pKTtcbiAgICB9XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xuICAgIHJldHVybiAneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgdmFyIHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIHZhciB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICAgIHZhciBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICAgIHZhciBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgICAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICAgICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgICAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LFxuICAgIH07XG59XG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50Lm1lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB7XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uLnR5cGUgJiYgZXhjZXB0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uLnR5cGUgKyBcIjogXCIgKyBleGNlcHRpb24udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbi50eXBlIHx8IGV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudC5ldmVudF9pZCB8fCAnPHVua25vd24+JztcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50LmV2ZW50X2lkIHx8ICc8dW5rbm93bj4nO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGxldmVscyA9IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2xvZycsICdhc3NlcnQnXTtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHZhciBvcmlnaW5hbENvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgICB2YXIgd3JhcHBlZExldmVscyA9IHt9O1xuICAgIC8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG4gICAgbGV2ZWxzLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgaWYgKGxldmVsIGluIGdsb2JhbC5jb25zb2xlICYmIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgd3JhcHBlZExldmVsc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdO1xuICAgICAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFBlcmZvcm0gY2FsbGJhY2sgbWFuaXB1bGF0aW9uc1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgT2JqZWN0LmtleXMod3JhcHBlZExldmVscykuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IHdyYXBwZWRMZXZlbHNbbGV2ZWxdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIHZhbHVlLCB0eXBlKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzIHx8IFtdO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udmFsdWUgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnZhbHVlIHx8IHZhbHVlIHx8ICcnO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSB8fCB0eXBlIHx8ICdFcnJvcic7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIG1lY2hhbmlzbSB0byBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbWVjaGFuaXNtIE1lY2hhbmlzbSBvZiB0aGUgbWVjaGFuaXNtLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCBtZWNoYW5pc20pIHtcbiAgICBpZiAobWVjaGFuaXNtID09PSB2b2lkIDApIHsgbWVjaGFuaXNtID0ge307IH1cbiAgICAvLyBUT0RPOiBVc2UgcmVhbCB0eXBlIHdpdGggYGtleW9mIE1lY2hhbmlzbWAgdGhpbmd5IGFuZCBtYXliZSBtYWtlIGl0IGJldHRlcj9cbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFR5cGUgJ01lY2hhbmlzbSB8IHt9JyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdNZWNoYW5pc20gfCB1bmRlZmluZWQnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0ubWVjaGFuaXNtID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc20gfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKG1lY2hhbmlzbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIE1lY2hhbmlzbSBoYXMgbm8gaW5kZXggc2lnbmF0dXJlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc21ba2V5XSA9IG1lY2hhbmlzbVtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbn1cbi8qKlxuICogQSBzYWZlIGZvcm0gb2YgbG9jYXRpb24uaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAob08pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbi8vIGh0dHBzOi8vc2VtdmVyLm9yZy8jaXMtdGhlcmUtYS1zdWdnZXN0ZWQtcmVndWxhci1leHByZXNzaW9uLXJlZ2V4LXRvLWNoZWNrLWEtc2VtdmVyLXN0cmluZ1xudmFyIFNFTVZFUl9SRUdFWFAgPSAvXigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopXFwuKDB8WzEtOV1cXGQqKSg/Oi0oKD86MHxbMS05XVxcZCp8XFxkKlthLXpBLVotXVswLTlhLXpBLVotXSopKD86XFwuKD86MHxbMS05XVxcZCp8XFxkKlthLXpBLVotXVswLTlhLXpBLVotXSopKSopKT8oPzpcXCsoWzAtOWEtekEtWi1dKyg/OlxcLlswLTlhLXpBLVotXSspKikpPyQvO1xuLyoqXG4gKiBQYXJzZXMgaW5wdXQgaW50byBhIFNlbVZlciBpbnRlcmZhY2VcbiAqIEBwYXJhbSBpbnB1dCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzZW12ZXIgdmVyc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTZW12ZXIoaW5wdXQpIHtcbiAgICB2YXIgbWF0Y2ggPSBpbnB1dC5tYXRjaChTRU1WRVJfUkVHRVhQKSB8fCBbXTtcbiAgICB2YXIgbWFqb3IgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgIHZhciBtaW5vciA9IHBhcnNlSW50KG1hdGNoWzJdLCAxMCk7XG4gICAgdmFyIHBhdGNoID0gcGFyc2VJbnQobWF0Y2hbM10sIDEwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBidWlsZG1ldGFkYXRhOiBtYXRjaFs1XSxcbiAgICAgICAgbWFqb3I6IGlzTmFOKG1ham9yKSA/IHVuZGVmaW5lZCA6IG1ham9yLFxuICAgICAgICBtaW5vcjogaXNOYU4obWlub3IpID8gdW5kZWZpbmVkIDogbWlub3IsXG4gICAgICAgIHBhdGNoOiBpc05hTihwYXRjaCkgPyB1bmRlZmluZWQgOiBwYXRjaCxcbiAgICAgICAgcHJlcmVsZWFzZTogbWF0Y2hbNF0sXG4gICAgfTtcbn1cbnZhciBkZWZhdWx0UmV0cnlBZnRlciA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuLyoqXG4gKiBFeHRyYWN0cyBSZXRyeS1BZnRlciB2YWx1ZSBmcm9tIHRoZSByZXF1ZXN0IGhlYWRlciBvciByZXR1cm5zIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSBub3cgY3VycmVudCB1bml4IHRpbWVzdGFtcFxuICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmV0cnlBZnRlckhlYWRlcihub3csIGhlYWRlcikge1xuICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0UmV0cnlBZnRlcjtcbiAgICB9XG4gICAgdmFyIGhlYWRlckRlbGF5ID0gcGFyc2VJbnQoXCJcIiArIGhlYWRlciwgMTApO1xuICAgIGlmICghaXNOYU4oaGVhZGVyRGVsYXkpKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJEZWxheSAqIDEwMDA7XG4gICAgfVxuICAgIHZhciBoZWFkZXJEYXRlID0gRGF0ZS5wYXJzZShcIlwiICsgaGVhZGVyKTtcbiAgICBpZiAoIWlzTmFOKGhlYWRlckRhdGUpKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJEYXRlIC0gbm93O1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJldHJ5QWZ0ZXI7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWRkcyBjb250ZXh0IChwcmUvcG9zdC9saW5lKSBsaW5lcyB0byB0aGUgcHJvdmlkZWQgZnJhbWVcbiAqXG4gKiBAcGFyYW0gbGluZXMgc3RyaW5nW10gY29udGFpbmluZyBhbGwgbGluZXNcbiAqIEBwYXJhbSBmcmFtZSBTdGFja0ZyYW1lIHRoYXQgd2lsbCBiZSBtdXRhdGVkXG4gKiBAcGFyYW0gbGluZXNPZkNvbnRleHQgbnVtYmVyIG9mIGNvbnRleHQgbGluZXMgd2Ugd2FudCB0byBhZGQgcHJlL3Bvc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbnRleHRUb0ZyYW1lKGxpbmVzLCBmcmFtZSwgbGluZXNPZkNvbnRleHQpIHtcbiAgICBpZiAobGluZXNPZkNvbnRleHQgPT09IHZvaWQgMCkgeyBsaW5lc09mQ29udGV4dCA9IDU7IH1cbiAgICB2YXIgbGluZW5vID0gZnJhbWUubGluZW5vIHx8IDA7XG4gICAgdmFyIG1heExpbmVzID0gbGluZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VMaW5lID0gTWF0aC5tYXgoTWF0aC5taW4obWF4TGluZXMsIGxpbmVubyAtIDEpLCAwKTtcbiAgICBmcmFtZS5wcmVfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1heCgwLCBzb3VyY2VMaW5lIC0gbGluZXNPZkNvbnRleHQpLCBzb3VyY2VMaW5lKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG4gICAgZnJhbWUuY29udGV4dF9saW5lID0gc25pcExpbmUobGluZXNbTWF0aC5taW4obWF4TGluZXMgLSAxLCBzb3VyY2VMaW5lKV0sIGZyYW1lLmNvbG5vIHx8IDApO1xuICAgIGZyYW1lLnBvc3RfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1pbihzb3VyY2VMaW5lICsgMSwgbWF4TGluZXMpLCBzb3VyY2VMaW5lICsgMSArIGxpbmVzT2ZDb250ZXh0KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG59XG4vKipcbiAqIFN0cmlwIHRoZSBxdWVyeSBzdHJpbmcgYW5kIGZyYWdtZW50IG9mZiBvZiBhIGdpdmVuIFVSTCBvciBwYXRoIChpZiBwcmVzZW50KVxuICpcbiAqIEBwYXJhbSB1cmxQYXRoIEZ1bGwgVVJMIG9yIHBhdGgsIGluY2x1ZGluZyBwb3NzaWJsZSBxdWVyeSBzdHJpbmcgYW5kL29yIGZyYWdtZW50XG4gKiBAcmV0dXJucyBVUkwgb3IgcGF0aCB3aXRob3V0IHF1ZXJ5IHN0cmluZyBvciBmcmFnbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHVybFBhdGgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICByZXR1cm4gdXJsUGF0aC5zcGxpdCgvW1xcPyNdLywgMSlbMF07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXNjLmpzLm1hcCIsIi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgd2UncmUgaW4gdGhlIE5vZGUuanMgb3IgQnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byBnaXZlbiBxdWVzdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG59XG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vKipcbiAqIE1lbW8gY2xhc3MgdXNlZCBmb3IgZGVjeWNsZSBqc29uIG9iamVjdHMuIFVzZXMgV2Vha1NldCBpZiBhdmFpbGFibGUgb3RoZXJ3aXNlIGFycmF5LlxuICovXG52YXIgTWVtbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZW1vKCkge1xuICAgICAgICB0aGlzLl9oYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHRoaXMuX2lubmVyID0gdGhpcy5faGFzV2Vha1NldCA/IG5ldyBXZWFrU2V0KCkgOiBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBvYmogdG8gcmVtZW1iZXIuXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gcmVtZW1iZXJcbiAgICAgKi9cbiAgICBNZW1vLnByb3RvdHlwZS5tZW1vaXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAodGhpcy5faGFzV2Vha1NldCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lubmVyLmhhcyhvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbm5lci5hZGQob2JqKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5faW5uZXJbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lubmVyLnB1c2gob2JqKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBvYmplY3QgZnJvbSBpbnRlcm5hbCBzdG9yYWdlLlxuICAgICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGZvcmdldFxuICAgICAqL1xuICAgIE1lbW8ucHJvdG90eXBlLnVubWVtb2l6ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1dlYWtTZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lubmVyLmRlbGV0ZShvYmopO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbm5lcltpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWVtbztcbn0oKSk7XG5leHBvcnQgeyBNZW1vIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vLmpzLm1hcCIsImltcG9ydCB7IF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBodG1sVHJlZUFzU3RyaW5nIH0gZnJvbSAnLi9icm93c2VyJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNFcnJvciwgaXNFdmVudCwgaXNJbnN0YW5jZU9mLCBpc1BsYWluT2JqZWN0LCBpc1ByaW1pdGl2ZSwgaXNTeW50aGV0aWNFdmVudCB9IGZyb20gJy4vaXMnO1xuaW1wb3J0IHsgTWVtbyB9IGZyb20gJy4vbWVtbyc7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbk5hbWUgfSBmcm9tICcuL3N0YWNrdHJhY2UnO1xuaW1wb3J0IHsgdHJ1bmNhdGUgfSBmcm9tICcuL3N0cmluZyc7XG4vKipcbiAqIFdyYXAgYSBnaXZlbiBvYmplY3QgbWV0aG9kIHdpdGggYSBoaWdoZXItb3JkZXIgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gc291cmNlIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbWV0aG9kIHRvIGJlIHdyYXBwZWQuXG4gKiBAcGFyYW0gbmFtZSBBIG5hbWUgb2YgbWV0aG9kIHRvIGJlIHdyYXBwZWQuXG4gKiBAcGFyYW0gcmVwbGFjZW1lbnRGYWN0b3J5IEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgdXNlZCB0byB3cmFwIGEgZ2l2ZW4gbWV0aG9kLCByZXR1cm5pbmcgdGhlIHdyYXBwZWQgbWV0aG9kIHdoaWNoXG4gKiB3aWxsIGJlIHN1YnN0aXR1dGVkIGluIGZvciBgc291cmNlW25hbWVdYC5cbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGwoc291cmNlLCBuYW1lLCByZXBsYWNlbWVudEZhY3RvcnkpIHtcbiAgICBpZiAoIShuYW1lIGluIHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb3JpZ2luYWwgPSBzb3VyY2VbbmFtZV07XG4gICAgdmFyIHdyYXBwZWQgPSByZXBsYWNlbWVudEZhY3Rvcnkob3JpZ2luYWwpO1xuICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGEgZnVuY3Rpb24gZmlyc3QsIGFzIHdlIG5lZWQgdG8gYXR0YWNoIGFuIGVtcHR5IHByb3RvdHlwZSBmb3IgYGRlZmluZVByb3BlcnRpZXNgIHRvIHdvcmtcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgdGhyb3cgXCJUeXBlRXJyb3I6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIGNhbGxlZCBvbiBub24tb2JqZWN0XCJcbiAgICBpZiAodHlwZW9mIHdyYXBwZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdyYXBwZWQucHJvdG90eXBlID0gd3JhcHBlZC5wcm90b3R5cGUgfHwge307XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3cmFwcGVkLCB7XG4gICAgICAgICAgICAgICAgX19zZW50cnlfb3JpZ2luYWxfXzoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9yaWdpbmFsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX09vKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiB0aHJvdyBpZiBtdWx0aXBsZSBmaWxsIGhhcHBlbnMgb24gYSBnbG9iYWwgb2JqZWN0IGxpa2UgWE1MSHR0cFJlcXVlc3RcbiAgICAgICAgICAgIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzIwNDNcbiAgICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VbbmFtZV0gPSB3cmFwcGVkO1xufVxuLyoqXG4gKiBFbmNvZGVzIGdpdmVuIG9iamVjdCBpbnRvIHVybC1mcmllbmRseSBmb3JtYXRcbiAqXG4gKiBAcGFyYW0gb2JqZWN0IEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cmxFbmNvZGUob2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9iamVjdFtrZXldKTsgfSlcbiAgICAgICAgLmpvaW4oJyYnKTtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbnkgb2JqZWN0IGludG8gYW4gb2JqZWN0IGxpdGVyYWwgd2l0aCBhbGwgaXRzIGF0dHJpYnV0ZXNcbiAqIGF0dGFjaGVkIHRvIGl0LlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBJbml0aWFsIHNvdXJjZSB0aGF0IHdlIGhhdmUgdG8gdHJhbnNmb3JtIGluIG9yZGVyIGZvciBpdCB0byBiZSB1c2FibGUgYnkgdGhlIHNlcmlhbGl6ZXJcbiAqL1xuZnVuY3Rpb24gZ2V0V2Fsa1NvdXJjZSh2YWx1ZSkge1xuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB2YWx1ZTtcbiAgICAgICAgdmFyIGVyciA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICBuYW1lOiBlcnJvci5uYW1lLFxuICAgICAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpIGluIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVycm9yLCBpKSkge1xuICAgICAgICAgICAgICAgIGVycltpXSA9IGVycm9yW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIGlmIChpc0V2ZW50KHZhbHVlKSkge1xuICAgICAgICB2YXIgZXZlbnRfMSA9IHZhbHVlO1xuICAgICAgICB2YXIgc291cmNlID0ge307XG4gICAgICAgIHNvdXJjZS50eXBlID0gZXZlbnRfMS50eXBlO1xuICAgICAgICAvLyBBY2Nlc3NpbmcgZXZlbnQudGFyZ2V0IGNhbiB0aHJvdyAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb3VyY2UudGFyZ2V0ID0gaXNFbGVtZW50KGV2ZW50XzEudGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhldmVudF8xLnRhcmdldClcbiAgICAgICAgICAgICAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChldmVudF8xLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgc291cmNlLnRhcmdldCA9ICc8dW5rbm93bj4nO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb3VyY2UuY3VycmVudFRhcmdldCA9IGlzRWxlbWVudChldmVudF8xLmN1cnJlbnRUYXJnZXQpXG4gICAgICAgICAgICAgICAgPyBodG1sVHJlZUFzU3RyaW5nKGV2ZW50XzEuY3VycmVudFRhcmdldClcbiAgICAgICAgICAgICAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChldmVudF8xLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIHNvdXJjZS5jdXJyZW50VGFyZ2V0ID0gJzx1bmtub3duPic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBDdXN0b21FdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbnN0YW5jZU9mKHZhbHVlLCBDdXN0b21FdmVudCkpIHtcbiAgICAgICAgICAgIHNvdXJjZS5kZXRhaWwgPSBldmVudF8xLmRldGFpbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpIGluIGV2ZW50XzEpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXZlbnRfMSwgaSkpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VbaV0gPSBldmVudF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8qKiBDYWxjdWxhdGVzIGJ5dGVzIHNpemUgb2YgaW5wdXQgc3RyaW5nICovXG5mdW5jdGlvbiB1dGY4TGVuZ3RoKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICByZXR1cm4gfi1lbmNvZGVVUkkodmFsdWUpLnNwbGl0KC8lLi58Li8pLmxlbmd0aDtcbn1cbi8qKiBDYWxjdWxhdGVzIGJ5dGVzIHNpemUgb2YgaW5wdXQgb2JqZWN0ICovXG5mdW5jdGlvbiBqc29uU2l6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB1dGY4TGVuZ3RoKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG59XG4vKiogSlNEb2MgKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUb1NpemUob2JqZWN0LCBcbi8vIERlZmF1bHQgTm9kZS5qcyBSRVBMIGRlcHRoXG5kZXB0aCwgXG4vLyAxMDBrQiwgYXMgMjAwa0IgaXMgbWF4IHBheWxvYWQgc2l6ZSwgc28gaGFsZiBzb3VuZHMgcmVhc29uYWJsZVxubWF4U2l6ZSkge1xuICAgIGlmIChkZXB0aCA9PT0gdm9pZCAwKSB7IGRlcHRoID0gMzsgfVxuICAgIGlmIChtYXhTaXplID09PSB2b2lkIDApIHsgbWF4U2l6ZSA9IDEwMCAqIDEwMjQ7IH1cbiAgICB2YXIgc2VyaWFsaXplZCA9IG5vcm1hbGl6ZShvYmplY3QsIGRlcHRoKTtcbiAgICBpZiAoanNvblNpemUoc2VyaWFsaXplZCkgPiBtYXhTaXplKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVUb1NpemUob2JqZWN0LCBkZXB0aCAtIDEsIG1heFNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8qKlxuICogVHJhbnNmb3JtIGFueSBub24tcHJpbWl0aXZlLCBCaWdJbnQsIG9yIFN5bWJvbC10eXBlIHZhbHVlIGludG8gYSBzdHJpbmcuIEFjdHMgYXMgYSBuby1vcCBvbiBzdHJpbmdzLCBudW1iZXJzLFxuICogYm9vbGVhbnMsIG51bGwsIGFuZCB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzdHJpbmdpZnlcbiAqIEByZXR1cm5zIEZvciBub24tcHJpbWl0aXZlLCBCaWdJbnQsIGFuZCBTeW1ib2wtdHlwZSB2YWx1ZXMsIGEgc3RyaW5nIGRlbm90aW5nIHRoZSB2YWx1ZSdzIHR5cGUsIHR5cGUgYW5kIHZhbHVlLCBvclxuICogIHR5cGUgYW5kIGBkZXNjcmlwdGlvbmAgcHJvcGVydHksIHJlc3BlY3RpdmVseS4gRm9yIG5vbi1CaWdJbnQsIG5vbi1TeW1ib2wgcHJpbWl0aXZlcywgcmV0dXJucyB0aGUgb3JpZ2luYWwgdmFsdWUsXG4gKiAgdW5jaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAvLyBOb2RlLmpzIFJFUEwgbm90YXRpb25cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICByZXR1cm4gJ1tPYmplY3RdJztcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgcmV0dXJuICdbQXJyYXldJztcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIGlzUHJpbWl0aXZlKG5vcm1hbGl6ZWQpID8gbm9ybWFsaXplZCA6IHR5cGU7XG59XG4vKipcbiAqIG5vcm1hbGl6ZVZhbHVlKClcbiAqXG4gKiBUYWtlcyB1bnNlcmlhbGl6YWJsZSBpbnB1dCBhbmQgbWFrZSBpdCBzZXJpYWxpemFibGUgZnJpZW5kbHlcbiAqXG4gKiAtIHRyYW5zbGF0ZXMgdW5kZWZpbmVkL05hTiB2YWx1ZXMgdG8gXCJbdW5kZWZpbmVkXVwiL1wiW05hTl1cIiByZXNwZWN0aXZlbHksXG4gKiAtIHNlcmlhbGl6ZXMgRXJyb3Igb2JqZWN0c1xuICogLSBmaWx0ZXIgZ2xvYmFsIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUsIGtleSkge1xuICAgIGlmIChrZXkgPT09ICdkb21haW4nICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuX2V2ZW50cykge1xuICAgICAgICByZXR1cm4gJ1tEb21haW5dJztcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ2RvbWFpbkVtaXR0ZXInKSB7XG4gICAgICAgIHJldHVybiAnW0RvbWFpbkVtaXR0ZXJdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSBnbG9iYWwpIHtcbiAgICAgICAgcmV0dXJuICdbR2xvYmFsXSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSA9PT0gd2luZG93KSB7XG4gICAgICAgIHJldHVybiAnW1dpbmRvd10nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuICdbRG9jdW1lbnRdJztcbiAgICB9XG4gICAgLy8gUmVhY3QncyBTeW50aGV0aWNFdmVudCB0aGluZ3lcbiAgICBpZiAoaXNTeW50aGV0aWNFdmVudCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdbU3ludGhldGljRXZlbnRdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAnW05hTl0nO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gJ1t1bmRlZmluZWRdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gXCJbRnVuY3Rpb246IFwiICsgZ2V0RnVuY3Rpb25OYW1lKHZhbHVlKSArIFwiXVwiO1xuICAgIH1cbiAgICAvLyBzeW1ib2xzIGFuZCBiaWdpbnRzIGFyZSBjb25zaWRlcmVkIHByaW1pdGl2ZXMgYnkgVFMsIGJ1dCBhcmVuJ3QgbmF0aXZlbHkgSlNPTi1zZXJpbGFpemFibGVcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuICAgICAgICByZXR1cm4gXCJbXCIgKyBTdHJpbmcodmFsdWUpICsgXCJdXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHJldHVybiBcIltCaWdJbnQ6IFwiICsgU3RyaW5nKHZhbHVlKSArIFwiXVwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFdhbGtzIGFuIG9iamVjdCB0byBwZXJmb3JtIGEgbm9ybWFsaXphdGlvbiBvbiBpdFxuICpcbiAqIEBwYXJhbSBrZXkgb2Ygb2JqZWN0IHRoYXQncyB3YWxrZWQgaW4gY3VycmVudCBpdGVyYXRpb25cbiAqIEBwYXJhbSB2YWx1ZSBvYmplY3QgdG8gYmUgd2Fsa2VkXG4gKiBAcGFyYW0gZGVwdGggT3B0aW9uYWwgbnVtYmVyIGluZGljYXRpbmcgaG93IGRlZXAgc2hvdWxkIHdhbGtpbmcgYmUgcGVyZm9ybWVkXG4gKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBNZW1vIGNsYXNzIGhhbmRsaW5nIGRlY3ljbGluZ1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHdhbGsoa2V5LCB2YWx1ZSwgZGVwdGgsIG1lbW8pIHtcbiAgICBpZiAoZGVwdGggPT09IHZvaWQgMCkgeyBkZXB0aCA9ICtJbmZpbml0eTsgfVxuICAgIGlmIChtZW1vID09PSB2b2lkIDApIHsgbWVtbyA9IG5ldyBNZW1vKCk7IH1cbiAgICAvLyBJZiB3ZSByZWFjaCB0aGUgbWF4aW11bSBkZXB0aCwgc2VyaWFsaXplIHdoYXRldmVyIGhhcyBsZWZ0XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIC8vIElmIHZhbHVlIGltcGxlbWVudHMgYHRvSlNPTmAgbWV0aG9kLCBjYWxsIGl0IGFuZCByZXR1cm4gZWFybHlcbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b0pTT04oKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICAvLyBJZiBub3JtYWxpemVkIHZhbHVlIGlzIGEgcHJpbWl0aXZlLCB0aGVyZSBhcmUgbm8gYnJhbmNoZXMgbGVmdCB0byB3YWxrLCBzbyB3ZSBjYW4ganVzdCBiYWlsIG91dCwgYXMgdGhlcmVzIG5vIHBvaW50IGluIGdvaW5nIGRvd24gdGhhdCBicmFuY2ggYW55IGZ1cnRoZXJcbiAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlLCBrZXkpO1xuICAgIGlmIChpc1ByaW1pdGl2ZShub3JtYWxpemVkKSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHNvdXJjZSB0aGF0IHdlIHdpbGwgdXNlIGZvciBuZXh0IGl0dGVyYXRpb25zLCBlaXRoZXIgb2JqZWN0aWZpZWQgZXJyb3Igb2JqZWN0IChFcnJvciB0eXBlIHdpdGggZXh0cmFjdGVkIGtleXM6dmFsdWUgcGFpcnMpIG9yIHRoZSBpbnB1dCBpdHNlbGZcbiAgICB2YXIgc291cmNlID0gZ2V0V2Fsa1NvdXJjZSh2YWx1ZSk7XG4gICAgLy8gQ3JlYXRlIGFuIGFjY3VtdWxhdG9yIHRoYXQgd2lsbCBhY3QgYXMgYSBwYXJlbnQgZm9yIGFsbCBmdXR1cmUgaXR0ZXJhdGlvbnMgb2YgdGhhdCBicmFuY2hcbiAgICB2YXIgYWNjID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuICAgIC8vIElmIHdlIGFscmVhZHkgd2Fsa2VkIHRoYXQgYnJhbmNoLCBiYWlsIG91dCwgYXMgaXQncyBjaXJjdWxhciByZWZlcmVuY2VcbiAgICBpZiAobWVtby5tZW1vaXplKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ1tDaXJjdWxhciB+XSc7XG4gICAgfVxuICAgIC8vIFdhbGsgYWxsIGtleXMgb2YgdGhlIHNvdXJjZVxuICAgIGZvciAodmFyIGlubmVyS2V5IGluIHNvdXJjZSkge1xuICAgICAgICAvLyBBdm9pZCBpdGVyYXRpbmcgb3ZlciBmaWVsZHMgaW4gdGhlIHByb3RvdHlwZSBpZiB0aGV5J3ZlIHNvbWVob3cgYmVlbiBleHBvc2VkIHRvIGVudW1lcmF0aW9uLlxuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGlubmVyS2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgd2FsayB0aHJvdWdoIGFsbCB0aGUgY2hpbGQgbm9kZXNcbiAgICAgICAgYWNjW2lubmVyS2V5XSA9IHdhbGsoaW5uZXJLZXksIHNvdXJjZVtpbm5lcktleV0sIGRlcHRoIC0gMSwgbWVtbyk7XG4gICAgfVxuICAgIC8vIE9uY2Ugd2Fsa2VkIHRocm91Z2ggYWxsIHRoZSBicmFuY2hlcywgcmVtb3ZlIHRoZSBwYXJlbnQgZnJvbSBtZW1vIHN0b3JhZ2VcbiAgICBtZW1vLnVubWVtb2l6ZSh2YWx1ZSk7XG4gICAgLy8gUmV0dXJuIGFjY3VtdWxhdGVkIHZhbHVlc1xuICAgIHJldHVybiBhY2M7XG59XG4vKipcbiAqIG5vcm1hbGl6ZSgpXG4gKlxuICogLSBDcmVhdGVzIGEgY29weSB0byBwcmV2ZW50IG9yaWdpbmFsIGlucHV0IG11dGF0aW9uXG4gKiAtIFNraXAgbm9uLWVudW1lcmFibGVyc1xuICogLSBDYWxscyBgdG9KU09OYCBpZiBpbXBsZW1lbnRlZFxuICogLSBSZW1vdmVzIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAqIC0gVHJhbnNsYXRlcyBub24tc2VyaWFsaXplYWJsZSB2YWx1ZXMgKHVuZGVmaW5lZC9OYU4vRnVuY3Rpb25zKSB0byBzZXJpYWxpemFibGUgZm9ybWF0XG4gKiAtIFRyYW5zbGF0ZXMga25vd24gZ2xvYmFsIG9iamVjdHMvQ2xhc3NlcyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbnNcbiAqIC0gVGFrZXMgY2FyZSBvZiBFcnJvciBvYmplY3RzIHNlcmlhbGl6YXRpb25cbiAqIC0gT3B0aW9uYWxseSBsaW1pdCBkZXB0aCBvZiBmaW5hbCBvdXRwdXRcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoaW5wdXQsIGRlcHRoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW5wdXQsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiB3YWxrKGtleSwgdmFsdWUsIGRlcHRoKTsgfSkpO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIHJldHVybiAnKipub24tc2VyaWFsaXphYmxlKionO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYW55IGNhcHR1cmVkIGV4Y2VwdGlvbiwgZXh0cmFjdCBpdHMga2V5cyBhbmQgY3JlYXRlIGEgc29ydGVkXG4gKiBhbmQgdHJ1bmNhdGVkIGxpc3QgdGhhdCB3aWxsIGJlIHVzZWQgaW5zaWRlIHRoZSBldmVudCBtZXNzYWdlLlxuICogZWcuIGBOb24tZXJyb3IgZXhjZXB0aW9uIGNhcHR1cmVkIHdpdGgga2V5czogZm9vLCBiYXIsIGJhemBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UoZXhjZXB0aW9uLCBtYXhMZW5ndGgpIHtcbiAgICBpZiAobWF4TGVuZ3RoID09PSB2b2lkIDApIHsgbWF4TGVuZ3RoID0gNDA7IH1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGdldFdhbGtTb3VyY2UoZXhjZXB0aW9uKSk7XG4gICAga2V5cy5zb3J0KCk7XG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgaGFzIG5vIGtleXNdJztcbiAgICB9XG4gICAgaWYgKGtleXNbMF0ubGVuZ3RoID49IG1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1bmNhdGUoa2V5c1swXSwgbWF4TGVuZ3RoKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaW5jbHVkZWRLZXlzID0ga2V5cy5sZW5ndGg7IGluY2x1ZGVkS2V5cyA+IDA7IGluY2x1ZGVkS2V5cy0tKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVkID0ga2V5cy5zbGljZSgwLCBpbmNsdWRlZEtleXMpLmpvaW4oJywgJyk7XG4gICAgICAgIGlmIChzZXJpYWxpemVkLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVkS2V5cyA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVuY2F0ZShzZXJpYWxpemVkLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG4vKipcbiAqIEdpdmVuIGFueSBvYmplY3QsIHJldHVybiB0aGUgbmV3IG9iamVjdCB3aXRoIHJlbW92ZWQga2V5cyB0aGF0IHZhbHVlIHdhcyBgdW5kZWZpbmVkYC5cbiAqIFdvcmtzIHJlY3Vyc2l2ZWx5IG9uIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyb3BVbmRlZmluZWRLZXlzKHZhbCkge1xuICAgIHZhciBlXzEsIF9hO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgdmFyIG9iaiA9IHZhbDtcbiAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKE9iamVjdC5rZXlzKG9iaikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ2W2tleV0gPSBkcm9wVW5kZWZpbmVkS2V5cyhvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHJldHVybiB2YWwubWFwKGRyb3BVbmRlZmluZWRLZXlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCJ2YXIgZGVmYXVsdEZ1bmN0aW9uTmFtZSA9ICc8YW5vbnltb3VzPic7XG4vKipcbiAqIFNhZmVseSBleHRyYWN0IGZ1bmN0aW9uIG5hbWUgZnJvbSBpdHNlbGZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmbikge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghZm4gfHwgdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4ubmFtZSB8fCBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBKdXN0IGFjY2Vzc2luZyBjdXN0b20gcHJvcHMgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIHJhdmVuLWpzIzQ5NSkuXG4gICAgICAgIHJldHVybiBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YWNrdHJhY2UuanMubWFwIiwiaW1wb3J0IHsgaXNSZWdFeHAsIGlzU3RyaW5nIH0gZnJvbSAnLi9pcyc7XG4vKipcbiAqIFRydW5jYXRlcyBnaXZlbiBzdHJpbmcgdG8gdGhlIG1heGltdW0gY2hhcmFjdGVycyBjb3VudFxuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmcgKDAgPSB1bmxpbWl0ZWQpXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyLCBtYXgpIHtcbiAgICBpZiAobWF4ID09PSB2b2lkIDApIHsgbWF4ID0gMDsgfVxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBtYXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPD0gbWF4ID8gc3RyIDogc3RyLnN1YnN0cigwLCBtYXgpICsgXCIuLi5cIjtcbn1cbi8qKlxuICogVGhpcyBpcyBiYXNpY2FsbHkganVzdCBgdHJpbV9saW5lYCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS9ibG9iL21hc3Rlci9zcmMvc2VudHJ5L2xhbmcvamF2YXNjcmlwdC9wcm9jZXNzb3IucHkjTDY3XG4gKlxuICogQHBhcmFtIHN0ciBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZ1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNuaXBMaW5lKGxpbmUsIGNvbG5vKSB7XG4gICAgdmFyIG5ld0xpbmUgPSBsaW5lO1xuICAgIHZhciBsbCA9IG5ld0xpbmUubGVuZ3RoO1xuICAgIGlmIChsbCA8PSAxNTApIHtcbiAgICAgICAgcmV0dXJuIG5ld0xpbmU7XG4gICAgfVxuICAgIGlmIChjb2xubyA+IGxsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBjb2xubyA9IGxsO1xuICAgIH1cbiAgICB2YXIgc3RhcnQgPSBNYXRoLm1heChjb2xubyAtIDYwLCAwKTtcbiAgICBpZiAoc3RhcnQgPCA1KSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgMTQwLCBsbCk7XG4gICAgaWYgKGVuZCA+IGxsIC0gNSkge1xuICAgICAgICBlbmQgPSBsbDtcbiAgICB9XG4gICAgaWYgKGVuZCA9PT0gbGwpIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLm1heChlbmQgLSAxNDAsIDApO1xuICAgIH1cbiAgICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgIG5ld0xpbmUgPSBcIid7c25pcH0gXCIgKyBuZXdMaW5lO1xuICAgIH1cbiAgICBpZiAoZW5kIDwgbGwpIHtcbiAgICAgICAgbmV3TGluZSArPSAnIHtzbmlwfSc7XG4gICAgfVxuICAgIHJldHVybiBuZXdMaW5lO1xufVxuLyoqXG4gKiBKb2luIHZhbHVlcyBpbiBhcnJheVxuICogQHBhcmFtIGlucHV0IGFycmF5IG9mIHZhbHVlcyB0byBiZSBqb2luZWQgdG9nZXRoZXJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgc3RyaW5nIHRvIGJlIHBsYWNlZCBpbi1iZXR3ZWVuIHZhbHVlc1xuICogQHJldHVybnMgSm9pbmVkIHZhbHVlc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKb2luKGlucHV0LCBkZWxpbWl0ZXIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJ1t2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF0nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3IgaW5jbHVkZXMgdGhlIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0XG4gKiBAcGFyYW0gcGF0dGVybiBFaXRoZXIgYSByZWdleCBvciBhIHN0cmluZyB0aGF0IG11c3QgYmUgY29udGFpbmVkIGluIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICAgIGlmICghaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKHBhdHRlcm4pICE9PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4vbWlzYyc7XG5pbXBvcnQgeyBkeW5hbWljUmVxdWlyZSwgaXNOb2RlRW52IH0gZnJvbSAnLi9ub2RlJztcbi8qKlxuICogQSBUaW1lc3RhbXBTb3VyY2UgaW1wbGVtZW50YXRpb24gZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBQZXJmb3JtYW5jZSBXZWIgQVBJIG5hdGl2ZWx5LlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIFRpbWVzdGFtcFNvdXJjZSBkb2VzIG5vdCB1c2UgYSBtb25vdG9uaWMgY2xvY2suIEEgY2FsbCB0byBgbm93U2Vjb25kc2AgbWF5IHJldHVybiBhIHRpbWVzdGFtcCBlYXJsaWVyXG4gKiB0aGFuIGEgcHJldmlvdXNseSByZXR1cm5lZCB2YWx1ZS4gV2UgZG8gbm90IHRyeSB0byBlbXVsYXRlIGEgbW9ub3RvbmljIGJlaGF2aW9yIGluIG9yZGVyIHRvIGZhY2lsaXRhdGUgZGVidWdnaW5nLiBJdFxuICogaXMgbW9yZSBvYnZpb3VzIHRvIGV4cGxhaW4gXCJ3aHkgZG9lcyBteSBzcGFuIGhhdmUgbmVnYXRpdmUgZHVyYXRpb25cIiB0aGFuIFwid2h5IG15IHNwYW5zIGhhdmUgemVybyBkdXJhdGlvblwiLlxuICovXG52YXIgZGF0ZVRpbWVzdGFtcFNvdXJjZSA9IHtcbiAgICBub3dTZWNvbmRzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBEYXRlLm5vdygpIC8gMTAwMDsgfSxcbn07XG4vKipcbiAqIFJldHVybnMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgbmF0aXZlIFBlcmZvcm1hbmNlIEFQSSBicm93c2VyIGltcGxlbWVudGF0aW9uLCBvciB1bmRlZmluZWQgZm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90XG4gKiBzdXBwb3J0IHRoZSBBUEkuXG4gKlxuICogV3JhcHBpbmcgdGhlIG5hdGl2ZSBBUEkgd29ya3MgYXJvdW5kIGRpZmZlcmVuY2VzIGluIGJlaGF2aW9yIGZyb20gZGlmZmVyZW50IGJyb3dzZXJzLlxuICovXG5mdW5jdGlvbiBnZXRCcm93c2VyUGVyZm9ybWFuY2UoKSB7XG4gICAgdmFyIHBlcmZvcm1hbmNlID0gZ2V0R2xvYmFsT2JqZWN0KCkucGVyZm9ybWFuY2U7XG4gICAgaWYgKCFwZXJmb3JtYW5jZSB8fCAhcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIFJlcGxhY2UgcGVyZm9ybWFuY2UudGltZU9yaWdpbiB3aXRoIG91ciBvd24gdGltZU9yaWdpbiBiYXNlZCBvbiBEYXRlLm5vdygpLlxuICAgIC8vXG4gICAgLy8gVGhpcyBpcyBhIHBhcnRpYWwgd29ya2Fyb3VuZCBmb3IgYnJvd3NlcnMgcmVwb3J0aW5nIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gc3VjaCB0aGF0IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gK1xuICAgIC8vIHBlcmZvcm1hbmNlLm5vdygpIGdpdmVzIGEgZGF0ZSBhcmJpdHJhcmlseSBpbiB0aGUgcGFzdC5cbiAgICAvL1xuICAgIC8vIEFkZGl0aW9uYWxseSwgY29tcHV0aW5nIHRpbWVPcmlnaW4gaW4gdGhpcyB3YXkgZmlsbHMgdGhlIGdhcCBmb3IgYnJvd3NlcnMgd2hlcmUgcGVyZm9ybWFuY2UudGltZU9yaWdpbiBpc1xuICAgIC8vIHVuZGVmaW5lZC5cbiAgICAvL1xuICAgIC8vIFRoZSBhc3N1bXB0aW9uIHRoYXQgcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpIH49IERhdGUubm93KCkgaXMgZmxhd2VkLCBidXQgd2UgZGVwZW5kIG9uIGl0IHRvXG4gICAgLy8gaW50ZXJhY3Qgd2l0aCBkYXRhIGNvbWluZyBvdXQgb2YgcGVyZm9ybWFuY2UgZW50cmllcy5cbiAgICAvL1xuICAgIC8vIE5vdGUgdGhhdCBkZXNwaXRlIHJlY29tbWVuZGF0aW9ucyBhZ2FpbnN0IGl0IGluIHRoZSBzcGVjLCBicm93c2VycyBpbXBsZW1lbnQgdGhlIFBlcmZvcm1hbmNlIEFQSSB3aXRoIGEgY2xvY2sgdGhhdFxuICAgIC8vIG1pZ2h0IHN0b3Agd2hlbiB0aGUgY29tcHV0ZXIgaXMgYXNsZWVwIChhbmQgcGVyaGFwcyB1bmRlciBvdGhlciBjaXJjdW1zdGFuY2VzKS4gU3VjaCBiZWhhdmlvciBjYXVzZXNcbiAgICAvLyBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCkgdG8gaGF2ZSBhbiBhcmJpdHJhcnkgc2tldyBvdmVyIERhdGUubm93KCkuIEluIGxhcHRvcCBjb21wdXRlcnMsIHdlIGhhdmVcbiAgICAvLyBvYnNlcnZlZCBza2V3cyB0aGF0IGNhbiBiZSBhcyBsb25nIGFzIGRheXMsIHdlZWtzIG9yIG1vbnRocy5cbiAgICAvL1xuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTkwLlxuICAgIC8vXG4gICAgLy8gQlVHOiBkZXNwaXRlIG91ciBiZXN0IGludGVudGlvbnMsIHRoaXMgd29ya2Fyb3VuZCBoYXMgaXRzIGxpbWl0YXRpb25zLiBJdCBtb3N0bHkgYWRkcmVzc2VzIHRpbWluZ3Mgb2YgcGFnZWxvYWRcbiAgICAvLyB0cmFuc2FjdGlvbnMsIGJ1dCBpZ25vcmVzIHRoZSBza2V3IGJ1aWx0IHVwIG92ZXIgdGltZSB0aGF0IGNhbiBhdmVyc2VseSBhZmZlY3QgdGltZXN0YW1wcyBvZiBuYXZpZ2F0aW9uXG4gICAgLy8gdHJhbnNhY3Rpb25zIG9mIGxvbmctbGl2ZWQgd2ViIHBhZ2VzLlxuICAgIHZhciB0aW1lT3JpZ2luID0gRGF0ZS5ub3coKSAtIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH0sXG4gICAgICAgIHRpbWVPcmlnaW46IHRpbWVPcmlnaW4sXG4gICAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmF0aXZlIFBlcmZvcm1hbmNlIEFQSSBpbXBsZW1lbnRhdGlvbiBmcm9tIE5vZGUuanMuIFJldHVybnMgdW5kZWZpbmVkIGluIG9sZCBOb2RlLmpzIHZlcnNpb25zIHRoYXQgZG9uJ3RcbiAqIGltcGxlbWVudCB0aGUgQVBJLlxuICovXG5mdW5jdGlvbiBnZXROb2RlUGVyZm9ybWFuY2UoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHBlcmZIb29rcyA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3BlcmZfaG9va3MnKTtcbiAgICAgICAgcmV0dXJuIHBlcmZIb29rcy5wZXJmb3JtYW5jZTtcbiAgICB9XG4gICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBQZXJmb3JtYW5jZSBBUEkgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBjdXJyZW50IHBsYXRmb3JtLCBpZiBhdmFpbGFibGUuXG4gKi9cbnZhciBwbGF0Zm9ybVBlcmZvcm1hbmNlID0gaXNOb2RlRW52KCkgPyBnZXROb2RlUGVyZm9ybWFuY2UoKSA6IGdldEJyb3dzZXJQZXJmb3JtYW5jZSgpO1xudmFyIHRpbWVzdGFtcFNvdXJjZSA9IHBsYXRmb3JtUGVyZm9ybWFuY2UgPT09IHVuZGVmaW5lZFxuICAgID8gZGF0ZVRpbWVzdGFtcFNvdXJjZVxuICAgIDoge1xuICAgICAgICBub3dTZWNvbmRzOiBmdW5jdGlvbiAoKSB7IHJldHVybiAocGxhdGZvcm1QZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgcGxhdGZvcm1QZXJmb3JtYW5jZS5ub3coKSkgLyAxMDAwOyB9LFxuICAgIH07XG4vKipcbiAqIFJldHVybnMgYSB0aW1lc3RhbXAgaW4gc2Vjb25kcyBzaW5jZSB0aGUgVU5JWCBlcG9jaCB1c2luZyB0aGUgRGF0ZSBBUEkuXG4gKi9cbmV4cG9ydCB2YXIgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyA9IGRhdGVUaW1lc3RhbXBTb3VyY2Uubm93U2Vjb25kcy5iaW5kKGRhdGVUaW1lc3RhbXBTb3VyY2UpO1xuLyoqXG4gKiBSZXR1cm5zIGEgdGltZXN0YW1wIGluIHNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2ggdXNpbmcgZWl0aGVyIHRoZSBQZXJmb3JtYW5jZSBvciBEYXRlIEFQSXMsIGRlcGVuZGluZyBvbiB0aGVcbiAqIGF2YWlsYWJpbGl0eSBvZiB0aGUgUGVyZm9ybWFuY2UgQVBJLlxuICpcbiAqIFNlZSBgdXNpbmdQZXJmb3JtYW5jZUFQSWAgdG8gdGVzdCB3aGV0aGVyIHRoZSBQZXJmb3JtYW5jZSBBUEkgaXMgdXNlZC5cbiAqXG4gKiBCVUc6IE5vdGUgdGhhdCBiZWNhdXNlIG9mIGhvdyBicm93c2VycyBpbXBsZW1lbnQgdGhlIFBlcmZvcm1hbmNlIEFQSSwgdGhlIGNsb2NrIG1pZ2h0IHN0b3Agd2hlbiB0aGUgY29tcHV0ZXIgaXNcbiAqIGFzbGVlcC4gVGhpcyBjcmVhdGVzIGEgc2tldyBiZXR3ZWVuIGBkYXRlVGltZXN0YW1wSW5TZWNvbmRzYCBhbmQgYHRpbWVzdGFtcEluU2Vjb25kc2AuIFRoZVxuICogc2tldyBjYW4gZ3JvdyB0byBhcmJpdHJhcnkgYW1vdW50cyBsaWtlIGRheXMsIHdlZWtzIG9yIG1vbnRocy5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTkwLlxuICovXG5leHBvcnQgdmFyIHRpbWVzdGFtcEluU2Vjb25kcyA9IHRpbWVzdGFtcFNvdXJjZS5ub3dTZWNvbmRzLmJpbmQodGltZXN0YW1wU291cmNlKTtcbi8vIFJlLWV4cG9ydGVkIHdpdGggYW4gb2xkIG5hbWUgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LlxuZXhwb3J0IHZhciB0aW1lc3RhbXBXaXRoTXMgPSB0aW1lc3RhbXBJblNlY29uZHM7XG4vKipcbiAqIEEgYm9vbGVhbiB0aGF0IGlzIHRydWUgd2hlbiB0aW1lc3RhbXBJblNlY29uZHMgdXNlcyB0aGUgUGVyZm9ybWFuY2UgQVBJIHRvIHByb2R1Y2UgbW9ub3RvbmljIHRpbWVzdGFtcHMuXG4gKi9cbmV4cG9ydCB2YXIgdXNpbmdQZXJmb3JtYW5jZUFQSSA9IHBsYXRmb3JtUGVyZm9ybWFuY2UgIT09IHVuZGVmaW5lZDtcbi8qKlxuICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2guIFRoaXMgdmFsdWUgaXMgb25seSB1c2FibGUgaW4gYSBicm93c2VyLCBhbmQgb25seSB3aGVuIHRoZVxuICogcGVyZm9ybWFuY2UgQVBJIGlzIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IHZhciBicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGVyZm9ybWFuY2UgPSBnZXRHbG9iYWxPYmplY3QoKS5wZXJmb3JtYW5jZTtcbiAgICBpZiAoIXBlcmZvcm1hbmNlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChwZXJmb3JtYW5jZS50aW1lT3JpZ2luKSB7XG4gICAgICAgIHJldHVybiBwZXJmb3JtYW5jZS50aW1lT3JpZ2luO1xuICAgIH1cbiAgICAvLyBXaGlsZSBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0IGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgcGVyZm9ybWFuY2UudGltZU9yaWdpbiwgcGVyZm9ybWFuY2UudGltZU9yaWdpblxuICAgIC8vIGlzIG5vdCBhcyB3aWRlbHkgc3VwcG9ydGVkLiBOYW1lbHksIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gaXMgdW5kZWZpbmVkIGluIFNhZmFyaSBhcyBvZiB3cml0aW5nLlxuICAgIC8vIEFsc28gYXMgb2Ygd3JpdGluZywgcGVyZm9ybWFuY2UudGltaW5nIGlzIG5vdCBhdmFpbGFibGUgaW4gV2ViIFdvcmtlcnMgaW4gbWFpbnN0cmVhbSBicm93c2Vycywgc28gaXQgaXMgbm90IGFsd2F5c1xuICAgIC8vIGEgdmFsaWQgZmFsbGJhY2suIEluIHRoZSBhYnNlbmNlIG9mIGFuIGluaXRpYWwgdGltZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciwgZmFsbGJhY2sgdG8gdGhlIGN1cnJlbnQgdGltZSBmcm9tIHRoZVxuICAgIC8vIERhdGUgQVBJLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHJldHVybiAocGVyZm9ybWFuY2UudGltaW5nICYmIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQpIHx8IERhdGUubm93KCk7XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5lcnJvciB7XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG4ucHJpbWFyeSB7XFxyXFxuICBjb2xvcjogYmx1ZTtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vd2ViYXBwL3NyYy9wZXJmb3JtYW5jZS9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7QUFDWjtBQUNBO0VBQ0UsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5lcnJvciB7XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG4ucHJpbWFyeSB7XFxyXFxuICBjb2xvcjogYmx1ZTtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY3JlYXRlQmluZGluZyhvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjEyXG4gKiAoYykgMjAxNC0yMDIwIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdHJpbmcgY29udGFpbmluZyBzdGF0aWMga2V5cyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEyJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgKGFyZ3MgIT09ICcpJyA/ICcsJyArIGFyZ3MgOiBhcmdzKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ2NvbnRleHRtZW51JztcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGlmaWVycy5taWRkbGUpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J21vdXNldXAnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIGlmIChtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCd+JywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChtb2RpZmllcnMucGFzc2l2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxuXG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWVcbikge1xuICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFsndi1iaW5kOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlbW92ZUZyb21NYXApIHtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5mdW5jdGlvbiBnZW5Db21wb25lbnRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG5cbiAgdmFyIGJhc2VWYWx1ZUV4cHJlc3Npb24gPSAnJCR2JztcbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGJhc2VWYWx1ZUV4cHJlc3Npb247XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID1cbiAgICAgIFwiKHR5cGVvZiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIiA9PT0gJ3N0cmluZydcIiArXG4gICAgICBcIj8gXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIudHJpbSgpXCIgK1xuICAgICAgXCI6IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBlbC5tb2RlbCA9IHtcbiAgICB2YWx1ZTogKFwiKFwiICsgdmFsdWUgKyBcIilcIiksXG4gICAgZXhwcmVzc2lvbjogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuICAgIGNhbGxiYWNrOiAoXCJmdW5jdGlvbiAoXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpIHtcIiArIGFzc2lnbm1lbnQgKyBcIn1cIilcbiAgfTtcbn1cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2VuQXNzaWdubWVudENvZGUgKFxuICB2YWx1ZSxcbiAgYXNzaWdubWVudFxuKSB7XG4gIHZhciByZXMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYSB2LW1vZGVsIGV4cHJlc3Npb24gaW50byBhIGJhc2UgcGF0aCBhbmQgYSBmaW5hbCBrZXkgc2VnbWVudC5cbiAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIFBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2tleV1cbiAqIC0gdGVzdFt0ZXN0MVtrZXldXVxuICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtrZXldXVxuICpcbiAqL1xuXG52YXIgbGVuLCBzdHIsIGNociwgaW5kZXgkMSwgZXhwcmVzc2lvblBvcywgZXhwcmVzc2lvbkVuZFBvcztcblxuXG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9wdWxsLzc3MzBcbiAgLy8gYWxsb3cgdi1tb2RlbD1cIm9iai52YWwgXCIgKHRyYWlsaW5nIHdoaXRlc3BhY2UpXG4gIHZhbCA9IHZhbC50cmltKCk7XG4gIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICBpZiAoaW5kZXgkMSA+IC0xKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAga2V5OiAnXCInICsgdmFsLnNsaWNlKGluZGV4JDEgKyAxKSArICdcIidcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwsXG4gICAgICAgIGtleTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0ciA9IHZhbDtcbiAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc2xpY2UoMCwgZXhwcmVzc2lvblBvcyksXG4gICAga2V5OiB2YWwuc2xpY2UoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dCAoKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG59XG5cbmZ1bmN0aW9uIGVvZiAoKSB7XG4gIHJldHVybiBpbmRleCQxID49IGxlblxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcbiAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4Mjdcbn1cblxuZnVuY3Rpb24gcGFyc2VCcmFja2V0IChjaHIpIHtcbiAgdmFyIGluQnJhY2tldCA9IDE7XG4gIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY2hyID09PSAweDVCKSB7IGluQnJhY2tldCsrOyB9XG4gICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHtcbiAgICAgIGV4cHJlc3Npb25FbmRQb3MgPSBpbmRleCQxO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcgKGNocikge1xuICB2YXIgc3RyaW5nUXVvdGUgPSBjaHI7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiQxO1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuZnVuY3Rpb24gbW9kZWwgKFxuICBlbCxcbiAgZGlyLFxuICBfd2FyblxuKSB7XG4gIHdhcm4kMSA9IF93YXJuO1xuICB2YXIgdmFsdWUgPSBkaXIudmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBkaXIubW9kaWZpZXJzO1xuICB2YXIgdGFnID0gZWwudGFnO1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3NcbiAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIiArXG4gICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4kMShcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgXCJ2LW1vZGVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBlbGVtZW50IHR5cGUuIFwiICtcbiAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcbiAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YXIgdHJ1ZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHJ1ZS12YWx1ZScpIHx8ICd0cnVlJztcbiAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJyxcbiAgICBcIkFycmF5LmlzQXJyYXkoXCIgKyB2YWx1ZSArIFwiKVwiICtcbiAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICA/IChcIjooXCIgKyB2YWx1ZSArIFwiKVwiKVxuICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJyxcbiAgICBcInZhciAkJGE9XCIgKyB2YWx1ZSArIFwiLFwiICtcbiAgICAgICAgJyQkZWw9JGV2ZW50LnRhcmdldCwnICtcbiAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgK1xuICAgICAgXCJ2YXIgJCR2PVwiICsgKG51bWJlciA/ICdfbignICsgdmFsdWVCaW5kaW5nICsgJyknIDogdmFsdWVCaW5kaW5nKSArIFwiLFwiICtcbiAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgXCJpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuY29uY2F0KFskJHZdKScpKSArIFwiKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKScpKSArIFwiKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArIFwifVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFsdWVCaW5kaW5nID0gbnVtYmVyID8gKFwiX24oXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikgOiB2YWx1ZUJpbmRpbmc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUJpbmRpbmcpLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU2VsZWN0IChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciBzZWxlY3RlZFZhbCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuICAgIFwiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiO1xuXG4gIHZhciBhc3NpZ25tZW50ID0gJyRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXSc7XG4gIHZhciBjb2RlID0gXCJ2YXIgJCRzZWxlY3RlZFZhbCA9IFwiICsgc2VsZWN0ZWRWYWwgKyBcIjtcIjtcbiAgY29kZSA9IGNvZGUgKyBcIiBcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCkpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgLy8gZXhjZXB0IGZvciBpbnB1dHMgd2l0aCB2LWJpbmQ6dHlwZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciB2YWx1ZSQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddIHx8IGVsLmF0dHJzTWFwWyc6dmFsdWUnXTtcbiAgICB2YXIgdHlwZUJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddID8gJ3YtYmluZDp2YWx1ZScgOiAnOnZhbHVlJztcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgJ2JlY2F1c2UgdGhlIGxhdHRlciBhbHJlYWR5IGV4cGFuZHMgdG8gYSB2YWx1ZSBiaW5kaW5nIGludGVybmFsbHknLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFtiaW5kaW5nXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIG5lZWRDb21wb3NpdGlvbkd1YXJkID0gIWxhenkgJiYgdHlwZSAhPT0gJ3JhbmdlJztcbiAgdmFyIGV2ZW50ID0gbGF6eVxuICAgID8gJ2NoYW5nZSdcbiAgICA6IHR5cGUgPT09ICdyYW5nZSdcbiAgICAgID8gUkFOR0VfVE9LRU5cbiAgICAgIDogJ2lucHV0JztcblxuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gJyRldmVudC50YXJnZXQudmFsdWUnO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcbiAgaWYgKG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgY29kZSA9IFwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiICsgY29kZTtcbiAgfVxuXG4gIGFkZFByb3AoZWwsICd2YWx1ZScsIChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgZXZlbnQsIGNvZGUsIG51bGwsIHRydWUpO1xuICBpZiAodHJpbSB8fCBudW1iZXIpIHtcbiAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2Vzc2FyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSk7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgcmF3VG9rZW5zLnB1c2goeyAnQGJpbmRpbmcnOiBleHAgfSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4KSk7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICB0b2tlbnM6IHJhd1Rva2Vuc1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICBlbC5zdGF0aWNDbGFzcyA9IEpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTtcbiAgfVxuICB2YXIgY2xhc3NCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdjbGFzcycsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChjbGFzc0JpbmRpbmcpIHtcbiAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzdHlsZSddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQxXG59O1xuXG4vKiAgKi9cblxudmFyIGRlY29kZXI7XG5cbnZhciBoZSA9IHtcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcbiAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnXG4pO1xuXG4vLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4vLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcbnZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIGF0dHJpYnV0ZSA9IC9eXFxzKihbXlxcc1wiJzw+XFwvPV0rKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIGR5bmFtaWNBcmdBdHRyaWJ1dGUgPSAvXlxccyooKD86di1bXFx3LV0rOnxAfDp8IylcXFtbXj1dK1xcXVteXFxzXCInPD5cXC89XSopKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgbmNuYW1lID0gXCJbYS16QS1aX11bXFxcXC1cXFxcLjAtOV9hLXpBLVpcIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qXCI7XG52YXIgcW5hbWVDYXB0dXJlID0gXCIoKD86XCIgKyBuY25hbWUgKyBcIlxcXFw6KT9cIiArIG5jbmFtZSArIFwiKVwiO1xudmFyIHN0YXJ0VGFnT3BlbiA9IG5ldyBSZWdFeHAoKFwiXjxcIiArIHFuYW1lQ2FwdHVyZSkpO1xudmFyIHN0YXJ0VGFnQ2xvc2UgPSAvXlxccyooXFwvPyk+LztcbnZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKChcIl48XFxcXC9cIiArIHFuYW1lQ2FwdHVyZSArIFwiW14+XSo+XCIpKTtcbnZhciBkb2N0eXBlID0gL148IURPQ1RZUEUgW14+XSs+L2k7XG4vLyAjNzI5ODogZXNjYXBlIC0gdG8gYXZvaWQgYmVpbmcgcGFzc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyQkMSA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIiksIHsgc3RhcnQ6IGluZGV4ICsgaHRtbC5sZW5ndGggfSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnJCQxKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGFyZ3MuZW5kO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG9uUkUgPSAvXkB8XnYtb246LztcbnZhciBkaXJSRSA9IC9edi18XkB8Xjp8XiMvO1xudmFyIGZvckFsaWFzUkUgPSAvKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS87XG52YXIgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcbnZhciBzdHJpcFBhcmVuc1JFID0gL15cXCh8XFwpJC9nO1xudmFyIGR5bmFtaWNBcmdSRSA9IC9eXFxbLipcXF0kLztcblxudmFyIGFyZ1JFID0gLzooLiopJC87XG52YXIgYmluZFJFID0gL146fF5cXC58XnYtYmluZDovO1xudmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZztcblxudmFyIHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvO1xuXG52YXIgbGluZUJyZWFrUkUgPSAvW1xcclxcbl0vO1xudmFyIHdoaXRlc3BhY2VSRSQxID0gL1xccysvZztcblxudmFyIGludmFsaWRBdHRyaWJ1dGVSRSA9IC9bXFxzXCInPD5cXC89XS87XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGhlLmRlY29kZSk7XG5cbnZhciBlbXB0eVNsb3RTY29wZVRva2VuID0gXCJfZW1wdHlfXCI7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMjtcbnZhciBkZWxpbWl0ZXJzO1xudmFyIHRyYW5zZm9ybXM7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciBwb3N0VHJhbnNmb3JtcztcbnZhciBwbGF0Zm9ybUlzUHJlVGFnO1xudmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG52YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG52YXIgbWF5YmVDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUFTVEVsZW1lbnQgKFxuICB0YWcsXG4gIGF0dHJzLFxuICBwYXJlbnRcbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDEsXG4gICAgdGFnOiB0YWcsXG4gICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICByYXdBdHRyc01hcDoge30sXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgY2hpbGRyZW46IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICBtYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcblxuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgcG9zdFRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3Bvc3RUcmFuc2Zvcm1Ob2RlJyk7XG5cbiAgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycztcblxuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcbiAgdmFyIHdoaXRlc3BhY2VPcHRpb24gPSBvcHRpb25zLndoaXRlc3BhY2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2csIHJhbmdlKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB3YXJuJDIobXNnLCByYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VFbGVtZW50IChlbGVtZW50KSB7XG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgaWYgKCFpblZQcmUgJiYgIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICBlbGVtZW50ID0gcHJvY2Vzc0VsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgIGlmICghc3RhY2subGVuZ3RoICYmIGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgZXhwOiBlbGVtZW50LmVsc2VpZixcbiAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIFwiICtcbiAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgLy8gc2NvcGVkIHNsb3RcbiAgICAgICAgICAvLyBrZWVwIGl0IGluIHRoZSBjaGlsZHJlbiBsaXN0IHNvIHRoYXQgdi1lbHNlKC1pZikgY29uZGl0aW9ucyBjYW5cbiAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ1wiZGVmYXVsdFwiJ1xuICAgICAgICAgIDsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsIGNoaWxkcmVuIGNsZWFudXBcbiAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gIShjKS5zbG90U2NvcGU7IH0pO1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGUgYWdhaW5cbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9zdFRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJpbUVuZGluZ1doaXRlc3BhY2UgKGVsKSB7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZVxuICAgIGlmICghaW5QcmUpIHtcbiAgICAgIHZhciBsYXN0Tm9kZTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgIGxhc3ROb2RlLnR5cGUgPT09IDMgJiZcbiAgICAgICAgbGFzdE5vZGUudGV4dCA9PT0gJyAnXG4gICAgICApIHtcbiAgICAgICAgZWwuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgIFwiQ2Fubm90IHVzZSA8XCIgKyAoZWwudGFnKSArIFwiPiBhcyBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgaXQgbWF5IFwiICtcbiAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVsLmF0dHJzTWFwLmhhc093blByb3BlcnR5KCd2LWZvcicpKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50cy4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICB3YXJuOiB3YXJuJDIsXG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICBzaG91bGRLZWVwQ29tbWVudDogb3B0aW9ucy5jb21tZW50cyxcbiAgICBvdXRwdXRTb3VyY2VSYW5nZTogb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQVNURWxlbWVudCh0YWcsIGF0dHJzLCBjdXJyZW50UGFyZW50KTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBlbGVtZW50Lm5zID0gbnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgZWxlbWVudC5zdGFydCA9IHN0YXJ0JDE7XG4gICAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQ7XG4gICAgICAgICAgZWxlbWVudC5yYXdBdHRyc01hcCA9IGVsZW1lbnQuYXR0cnNMaXN0LnJlZHVjZShmdW5jdGlvbiAoY3VtdWxhdGVkLCBhdHRyKSB7XG4gICAgICAgICAgICBjdW11bGF0ZWRbYXR0ci5uYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICByZXR1cm4gY3VtdWxhdGVkXG4gICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICBpZiAoaW52YWxpZEF0dHJpYnV0ZVJFLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIkludmFsaWQgZHluYW1pYyBhcmd1bWVudCBleHByZXNzaW9uOiBhdHRyaWJ1dGUgbmFtZXMgY2Fubm90IGNvbnRhaW4gXCIgK1xuICAgICAgICAgICAgICBcInNwYWNlcywgcXVvdGVzLCA8LCA+LCAvIG9yID0uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMocm9vdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKHRhZywgc3RhcnQsIGVuZCQxKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgLy8gcG9wIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggLT0gMTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQkMTtcbiAgICAgIH1cbiAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQuJyxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgKFwidGV4dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIG91dHNpZGUgcm9vdCBlbGVtZW50IHdpbGwgYmUgaWdub3JlZC5cIiksXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXIgPT09IHRleHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICBpZiAoaW5QcmUgfHwgdGV4dC50cmltKCkpIHtcbiAgICAgICAgdGV4dCA9IGlzVGV4dFRhZyhjdXJyZW50UGFyZW50KSA/IHRleHQgOiBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpO1xuICAgICAgfSBlbHNlIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIC8vIHJlbW92ZSB0aGUgd2hpdGVzcGFjZS1vbmx5IG5vZGUgcmlnaHQgYWZ0ZXIgYW4gb3BlbmluZyB0YWdcbiAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlT3B0aW9uKSB7XG4gICAgICAgIGlmICh3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gaW4gY29uZGVuc2UgbW9kZSwgcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIG5vZGUgaWYgaXQgY29udGFpbnNcbiAgICAgICAgICAvLyBsaW5lIGJyZWFrLCBvdGhlcndpc2UgY29uZGVuc2UgdG8gYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gbGluZUJyZWFrUkUudGVzdCh0ZXh0KSA/ICcnIDogJyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSAnICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPyAnICcgOiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGlmICghaW5QcmUgJiYgd2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGNvbmRlbnNlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VzIGludG8gc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSh3aGl0ZXNwYWNlUkUkMSwgJyAnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzO1xuICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLFxuICAgICAgICAgICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8ICFjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY2hpbGQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIGFkZGluZyBhbnl0aGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDIoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIGNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZiA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICB2YXIgc2xvdEJpbmRpbmckMSA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nJDEpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIW1heWJlQ29tcG9uZW50KGVsKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcInYtc2xvdCBjYW4gb25seSBiZSB1c2VkIG9uIGNvbXBvbmVudHMgb3IgPHRlbXBsYXRlPi5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNsb3RTY29wZSB8fCBlbC5zbG90VGFyZ2V0KSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eSwgdGhlIGRlZmF1bHQgc2xvdCBzaG91bGQgYWxzbyB1c2UgXCIgK1xuICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZT4gc3ludGF4IHdoZW4gdGhlcmUgYXJlIG90aGVyIG5hbWVkIHNsb3RzLlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3RcbiAgICAgICAgdmFyIHNsb3RzID0gZWwuc2NvcGVkU2xvdHMgfHwgKGVsLnNjb3BlZFNsb3RzID0ge30pO1xuICAgICAgICB2YXIgcmVmJDEgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyQxKTtcbiAgICAgICAgdmFyIG5hbWUkMSA9IHJlZiQxLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljJDEgPSByZWYkMS5keW5hbWljO1xuICAgICAgICB2YXIgc2xvdENvbnRhaW5lciA9IHNsb3RzW25hbWUkMV0gPSBjcmVhdGVBU1RFbGVtZW50KCd0ZW1wbGF0ZScsIFtdLCBlbCk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWUkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWMkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlmICghYy5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgIGMucGFyZW50ID0gc2xvdENvbnRhaW5lcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90U2NvcGUgPSBzbG90QmluZGluZyQxLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47XG4gICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vd1xuICAgICAgICBlbC5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAvLyBtYXJrIGVsIG5vbi1wbGFpbiBzbyBkYXRhIGdldHMgZ2VuZXJhdGVkXG4gICAgICAgIGVsLnBsYWluID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNsb3ROYW1lIChiaW5kaW5nKSB7XG4gIHZhciBuYW1lID0gYmluZGluZy5uYW1lLnJlcGxhY2Uoc2xvdFJFLCAnJyk7XG4gIGlmICghbmFtZSkge1xuICAgIGlmIChiaW5kaW5nLm5hbWVbMF0gIT09ICcjJykge1xuICAgICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ2LXNsb3Qgc2hvcnRoYW5kIHN5bnRheCByZXF1aXJlcyBhIHNsb3QgbmFtZS5cIixcbiAgICAgICAgYmluZGluZ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpXG4gICAgLy8gZHluYW1pYyBbbmFtZV1cbiAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfVxuICAgIC8vIHN0YXRpYyBuYW1lXG4gICAgOiB7IG5hbWU6IChcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIiksIGR5bmFtaWM6IGZhbHNlIH1cbn1cblxuLy8gaGFuZGxlIDxzbG90Lz4gb3V0bGV0c1xuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RPdXRsZXQgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICBcIlVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLlwiLFxuICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuICB2YXIgYmluZGluZztcbiAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG4gIH1cbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBzeW5jR2VuLCBpc0R5bmFtaWM7XG4gIGZvciAoaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lO1xuICAgIHZhbHVlID0gbGlzdFtpXS52YWx1ZTtcbiAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWNcbiAgICAgIGVsLmhhc0JpbmRpbmdzID0gdHJ1ZTtcbiAgICAgIC8vIG1vZGlmaWVyc1xuICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZS5yZXBsYWNlKGRpclJFLCAnJykpO1xuICAgICAgLy8gc3VwcG9ydCAuZm9vIHNob3J0aGFuZCBzeW50YXggZm9yIHRoZSAucHJvcCBtb2RpZmllclxuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkgeyAvLyB2LWJpbmRcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICBpc0R5bmFtaWMgPSBkeW5hbWljQXJnUkUudGVzdChuYW1lKTtcbiAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgKFwiVGhlIHZhbHVlIGZvciBhIHYtYmluZCBleHByZXNzaW9uIGNhbm5vdCBiZSBlbXB0eS4gRm91bmQgaW4gXFxcInYtYmluZDpcIiArIG5hbWUgKyBcIlxcXCJcIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3AgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbm5lckh0bWwnKSB7IG5hbWUgPSAnaW5uZXJIVE1MJzsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmNhbWVsICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICBzeW5jR2VuID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIFwiJGV2ZW50XCIpO1xuICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoY2FtZWxpemUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKGh5cGhlbmF0ZShuYW1lKSAhPT0gY2FtZWxpemUobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoaHlwaGVuYXRlKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lXG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwiXFxcInVwZGF0ZTpcXFwiKyhcIiArIG5hbWUgKyBcIilcIiksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldLFxuICAgICAgICAgICAgICAgIHRydWUgLy8gZHluYW1pY1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKFxuICAgICAgICAgICFlbC5jb21wb25lbnQgJiYgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpXG4gICAgICAgICkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsgLy8gdi1vblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSGFuZGxlcihlbCwgbmFtZSwgdmFsdWUsIG1vZGlmaWVycywgZmFsc2UsIHdhcm4kMiwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIHZhciBhcmdNYXRjaCA9IG5hbWUubWF0Y2goYXJnUkUpO1xuICAgICAgICB2YXIgYXJnID0gYXJnTWF0Y2ggJiYgYXJnTWF0Y2hbMV07XG4gICAgICAgIGlzRHluYW1pYyA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJnKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICAgIGlmIChkeW5hbWljQXJnUkUudGVzdChhcmcpKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgaXNEeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBpc0R5bmFtaWMsIG1vZGlmaWVycywgbGlzdFtpXSk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6aWQ9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIGxpc3RbaV0pO1xuICAgICAgLy8gIzY4ODcgZmlyZWZveCBkb2Vzbid0IHVwZGF0ZSBtdXRlZCBzdGF0ZSBpZiBzZXQgdmlhIGF0dHJpYnV0ZVxuICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uXG4gICAgICBpZiAoIWVsLmNvbXBvbmVudCAmJlxuICAgICAgICAgIG5hbWUgPT09ICdtdXRlZCcgJiZcbiAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgJ3RydWUnLCBsaXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgdmFyIHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSAmJiAhaXNFZGdlXG4gICAgKSB7XG4gICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuLy8gZm9yIHNjcmlwdCAoZS5nLiB0eXBlPVwieC90ZW1wbGF0ZVwiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50XG5mdW5jdGlvbiBpc1RleHRUYWcgKGVsKSB7XG4gIHJldHVybiBlbC50YWcgPT09ICdzY3JpcHQnIHx8IGVsLnRhZyA9PT0gJ3N0eWxlJ1xufVxuXG5mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAhZWwuYXR0cnNNYXAudHlwZSB8fFxuICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICApKVxuICApXG59XG5cbnZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xudmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICB2YXIgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICBcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiICtcbiAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0Jykge1xuICAgIHZhciBtYXAgPSBlbC5hdHRyc01hcDtcbiAgICBpZiAoIW1hcFsndi1tb2RlbCddKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgdHlwZUJpbmRpbmc7XG4gICAgaWYgKG1hcFsnOnR5cGUnXSB8fCBtYXBbJ3YtYmluZDp0eXBlJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0eXBlJyk7XG4gICAgfVxuICAgIGlmICghbWFwLnR5cGUgJiYgIXR5cGVCaW5kaW5nICYmIG1hcFsndi1iaW5kJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gXCIoXCIgKyAobWFwWyd2LWJpbmQnXSkgKyBcIikudHlwZVwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlQmluZGluZykge1xuICAgICAgdmFyIGlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnLCB0cnVlKTtcbiAgICAgIHZhciBpZkNvbmRpdGlvbkV4dHJhID0gaWZDb25kaXRpb24gPyAoXCImJihcIiArIGlmQ29uZGl0aW9uICsgXCIpXCIpIDogXCJcIjtcbiAgICAgIHZhciBoYXNFbHNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScsIHRydWUpICE9IG51bGw7XG4gICAgICB2YXIgZWxzZUlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicsIHRydWUpO1xuICAgICAgLy8gMS4gY2hlY2tib3hcbiAgICAgIHZhciBicmFuY2gwID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIC8vIHByb2Nlc3MgZm9yIG9uIHRoZSBtYWluIG5vZGVcbiAgICAgIHByb2Nlc3NGb3IoYnJhbmNoMCk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDAsICd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gwLCBvcHRpb25zKTtcbiAgICAgIGJyYW5jaDAucHJvY2Vzc2VkID0gdHJ1ZTsgLy8gcHJldmVudCBpdCBmcm9tIGRvdWJsZS1wcm9jZXNzZWRcbiAgICAgIGJyYW5jaDAuaWYgPSBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J2NoZWNrYm94J1wiICsgaWZDb25kaXRpb25FeHRyYTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBicmFuY2gwLmlmLFxuICAgICAgICBibG9jazogYnJhbmNoMFxuICAgICAgfSk7XG4gICAgICAvLyAyLiBhZGQgcmFkaW8gZWxzZS1pZiBjb25kaXRpb25cbiAgICAgIHZhciBicmFuY2gxID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMSwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDEsICd0eXBlJywgJ3JhZGlvJyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gxLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J3JhZGlvJ1wiICsgaWZDb25kaXRpb25FeHRyYSxcbiAgICAgICAgYmxvY2s6IGJyYW5jaDFcbiAgICAgIH0pO1xuICAgICAgLy8gMy4gb3RoZXJcbiAgICAgIHZhciBicmFuY2gyID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMiwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDIsICc6dHlwZScsIHR5cGVCaW5kaW5nKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDIsIG9wdGlvbnMpO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IGlmQ29uZGl0aW9uLFxuICAgICAgICBibG9jazogYnJhbmNoMlxuICAgICAgfSk7XG5cbiAgICAgIGlmIChoYXNFbHNlKSB7XG4gICAgICAgIGJyYW5jaDAuZWxzZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGVsc2VJZkNvbmRpdGlvbikge1xuICAgICAgICBicmFuY2gwLmVsc2VpZiA9IGVsc2VJZkNvbmRpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyYW5jaDBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBU1RFbGVtZW50IChlbCkge1xuICByZXR1cm4gY3JlYXRlQVNURWxlbWVudChlbC50YWcsIGVsLmF0dHJzTGlzdC5zbGljZSgpLCBlbC5wYXJlbnQpXG59XG5cbnZhciBtb2RlbCQxID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlXG59O1xuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxLFxuICBtb2RlbCQxXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIHZhciBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2s7XG4gICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaywgaXNJbkZvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvO1xudmFyIGZuSW52b2tlUkUgPSAvXFwoW14pXSo/XFwpOyokLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xudmFyIGtleU5hbWVzID0ge1xuICAvLyAjNzg4MDogSUUxMSBhbmQgRWRnZSB1c2UgYEVzY2AgZm9yIEVzY2FwZSBrZXkgbmFtZS5cbiAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgdGFiOiAnVGFiJyxcbiAgZW50ZXI6ICdFbnRlcicsXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gIHNwYWNlOiBbJyAnLCAnU3BhY2ViYXInXSxcbiAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy5cbiAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICBsZWZ0OiBbJ0xlZnQnLCAnQXJyb3dMZWZ0J10sXG4gIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSxcbiAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBEZWxgIGZvciBEZWxldGUga2V5IG5hbWUuXG4gICdkZWxldGUnOiBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRGVsJ11cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZVxuKSB7XG4gIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gIHZhciBzdGF0aWNIYW5kbGVycyA9IFwiXCI7XG4gIHZhciBkeW5hbWljSGFuZGxlcnMgPSBcIlwiO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHZhciBoYW5kbGVyQ29kZSA9IGdlbkhhbmRsZXIoZXZlbnRzW25hbWVdKTtcbiAgICBpZiAoZXZlbnRzW25hbWVdICYmIGV2ZW50c1tuYW1lXS5keW5hbWljKSB7XG4gICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljSGFuZGxlcnMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljSGFuZGxlcnMgPSBcIntcIiArIChzdGF0aWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgXCJfZChcIiArIHN0YXRpY0hhbmRsZXJzICsgXCIsW1wiICsgKGR5bmFtaWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJdKVwiXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICBpZiAoIWhhbmRsZXIpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCl7fSdcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgcmV0dXJuIChcIltcIiArIChoYW5kbGVyLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gZ2VuSGFuZGxlcihoYW5kbGVyKTsgfSkuam9pbignLCcpKSArIFwiXVwiKVxuICB9XG5cbiAgdmFyIGlzTWV0aG9kUGF0aCA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICBpZiAoaXNNZXRob2RQYXRoIHx8IGlzRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChpc0Z1bmN0aW9uSW52b2NhdGlvbiA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSkgOiBoYW5kbGVyLnZhbHVlKSArIFwifVwiKSAvLyBpbmxpbmUgc3RhdGVtZW50XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICB2YXIgZ2VuTW9kaWZpZXJDb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgIC8vIGxlZnQvcmlnaHRcbiAgICAgICAgaWYgKGtleUNvZGVzW2tleV0pIHtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdleGFjdCcpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBnZW5HdWFyZChcbiAgICAgICAgICBbJ2N0cmwnLCAnc2hpZnQnLCAnYWx0JywgJ21ldGEnXVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuIChcIiRldmVudC5cIiArIGtleU1vZGlmaWVyICsgXCJLZXlcIik7IH0pXG4gICAgICAgICAgICAuam9pbignfHwnKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSBtb2RpZmllcnMgbGlrZSBwcmV2ZW50IGFuZCBzdG9wIGdldCBleGVjdXRlZCBhZnRlciBrZXkgZmlsdGVyaW5nXG4gICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgY29kZSArPSBnZW5Nb2RpZmllckNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIigkZXZlbnQpXCIpXG4gICAgICA6IGlzRnVuY3Rpb25FeHByZXNzaW9uXG4gICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKSgkZXZlbnQpXCIpXG4gICAgICAgIDogaXNGdW5jdGlvbkludm9jYXRpb25cbiAgICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSlcbiAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAvLyAjOTQ0MTogY2FuJ3QgdXNlICdrZXlDb2RlJyBpbiAkZXZlbnQgYmVjYXVzZSBDaHJvbWUgYXV0b2ZpbGwgZmlyZXMgZmFrZVxuICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uXG4gICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIlxuICApXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICB2YXIga2V5VmFsID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcbiAgfVxuICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gIHZhciBrZXlOYW1lID0ga2V5TmFtZXNba2V5XTtcbiAgcmV0dXJuIChcbiAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyBcIixcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleUNvZGUpKSArIFwiLFwiICtcbiAgICBcIiRldmVudC5rZXksXCIgK1xuICAgIFwiXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5TmFtZSkpICtcbiAgICBcIilcIlxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkaXIubW9kaWZpZXJzKSB7XG4gICAgd2FybihcInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy5cIik7XG4gIH1cbiAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIFwiLFwiICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIG9uOiBvbixcbiAgYmluZDogYmluZCQxLFxuICBjbG9hazogbm9vcFxufTtcblxuLyogICovXG5cblxuXG5cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICB0aGlzLnByZSA9IGZhbHNlO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwucGFyZW50KSB7XG4gICAgZWwucHJlID0gZWwucHJlIHx8IGVsLnBhcmVudC5wcmU7XG4gIH1cblxuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0ICYmICFzdGF0ZS5wcmUpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJ1xuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgcmV0dXJuIGdlblNsb3QoZWwsIHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgdmFyIGNvZGU7XG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhO1xuICAgICAgaWYgKCFlbC5wbGFpbiB8fCAoZWwucHJlICYmIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSkpIHtcbiAgICAgICAgZGF0YSA9IGdlbkRhdGEkMihlbCwgc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICB2YXIgb3JpZ2luYWxQcmVTdGF0ZSA9IHN0YXRlLnByZTtcbiAgaWYgKGVsLnByZSkge1xuICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgfVxuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSxcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRhdGEgPSAneyc7XG5cbiAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cbiAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOlwiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBET00gcHJvcHNcbiAgaWYgKGVsLnByb3BzKSB7XG4gICAgZGF0YSArPSBcImRvbVByb3BzOlwiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBldmVudCBoYW5kbGVyc1xuICBpZiAoZWwuZXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwuZXZlbnRzLCBmYWxzZSkpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLm5hdGl2ZUV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2xvdFRhcmdldCAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgZGF0YSArPSBcInNsb3Q6XCIgKyAoZWwuc2xvdFRhcmdldCkgKyBcIixcIjtcbiAgfVxuICAvLyBzY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gY29tcG9uZW50IHYtbW9kZWxcbiAgaWYgKGVsLm1vZGVsKSB7XG4gICAgZGF0YSArPSBcIm1vZGVsOnt2YWx1ZTpcIiArIChlbC5tb2RlbC52YWx1ZSkgKyBcIixjYWxsYmFjazpcIiArIChlbC5tb2RlbC5jYWxsYmFjaykgKyBcIixleHByZXNzaW9uOlwiICsgKGVsLm1vZGVsLmV4cHJlc3Npb24pICsgXCJ9LFwiO1xuICB9XG4gIC8vIGlubGluZS10ZW1wbGF0ZVxuICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSBnZW5JbmxpbmVUZW1wbGF0ZShlbCwgc3RhdGUpO1xuICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKC8sJC8sICcnKSArICd9JztcbiAgLy8gdi1iaW5kIGR5bmFtaWMgYXJndW1lbnQgd3JhcFxuICAvLyB2LWJpbmQgd2l0aCBkeW5hbWljIGFyZ3VtZW50cyBtdXN0IGJlIGFwcGxpZWQgdXNpbmcgdGhlIHNhbWUgdi1iaW5kIG9iamVjdFxuICAvLyBtZXJnZSBoZWxwZXIgc28gdGhhdCBjbGFzcy9zdHlsZS9tdXN0VXNlUHJvcCBhdHRycyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkuXG4gIGlmIChlbC5keW5hbWljQXR0cnMpIHtcbiAgICBkYXRhID0gXCJfYihcIiArIGRhdGEgKyBcIixcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIiArIChnZW5Qcm9wcyhlbC5keW5hbWljQXR0cnMpKSArIFwiKVwiO1xuICB9XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIC8vIHYtb24gZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgZGF0YSA9IGVsLndyYXBMaXN0ZW5lcnMoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBcIntuYW1lOlxcXCJcIiArIChkaXIubmFtZSkgKyBcIlxcXCIscmF3TmFtZTpcXFwiXCIgKyAoZGlyLnJhd05hbWUpICsgXCJcXFwiXCIgKyAoZGlyLnZhbHVlID8gKFwiLHZhbHVlOihcIiArIChkaXIudmFsdWUpICsgXCIpLGV4cHJlc3Npb246XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKSkpIDogJycpICsgKGRpci5hcmcgPyAoXCIsYXJnOlwiICsgKGRpci5pc0R5bmFtaWNBcmcgPyBkaXIuYXJnIDogKFwiXFxcIlwiICsgKGRpci5hcmcpICsgXCJcXFwiXCIpKSkgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCwgc3RhdGUpIHtcbiAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGFzdC50eXBlICE9PSAxXG4gICkpIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicsXG4gICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgKTtcbiAgfVxuICBpZiAoYXN0ICYmIGFzdC50eXBlID09PSAxKSB7XG4gICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgc3RhdGUub3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gIGVsLFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICAvLyBieSBkZWZhdWx0IHNjb3BlZCBzbG90cyBhcmUgY29uc2lkZXJlZCBcInN0YWJsZVwiLCB0aGlzIGFsbG93cyBjaGlsZFxuICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAvLyBmb3IgZXhhbXBsZSBpZiB0aGUgc2xvdCBjb250YWlucyBkeW5hbWljIG5hbWVzLCBoYXMgdi1pZiBvciB2LWZvciBvbiB0aGVtLi4uXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gZWwuZm9yIHx8IE9iamVjdC5rZXlzKHNsb3RzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc2xvdCA9IHNsb3RzW2tleV07XG4gICAgcmV0dXJuIChcbiAgICAgIHNsb3Quc2xvdFRhcmdldER5bmFtaWMgfHxcbiAgICAgIHNsb3QuaWYgfHxcbiAgICAgIHNsb3QuZm9yIHx8XG4gICAgICBjb250YWluc1Nsb3RDaGlsZChzbG90KSAvLyBpcyBwYXNzaW5nIGRvd24gc2xvdCBmcm9tIHBhcmVudCB3aGljaCBtYXkgYmUgZHluYW1pY1xuICAgIClcbiAgfSk7XG5cbiAgLy8gIzk1MzQ6IGlmIGEgY29tcG9uZW50IHdpdGggc2NvcGVkIHNsb3RzIGlzIGluc2lkZSBhIGNvbmRpdGlvbmFsIGJyYW5jaCxcbiAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnRcbiAgLy8gY29tcGlsZWQgc2xvdCBjb250ZW50LiBUbyBhdm9pZCB0aGF0LCB3ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBrZXkgYmFzZWQgb25cbiAgLy8gdGhlIGdlbmVyYXRlZCBjb2RlIG9mIGFsbCB0aGUgc2xvdCBjb250ZW50cy5cbiAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjtcblxuICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmVcbiAgLy8gZGlzY29ubmVjdGVkIGR1ZSB0byB0aGUgaW50ZXJtZWRpYXRlIHNjb3BlIHZhcmlhYmxlKVxuICAvLyAjOTQzOCwgIzk1MDZcbiAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzXG4gIC8vIGFuZCBza2lwIGZvcmNlIHVwZGF0aW5nIG9uZXMgdGhhdCBkbyBub3QgYWN0dWFsbHkgdXNlIHNjb3BlIHZhcmlhYmxlcy5cbiAgaWYgKCFuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8XG4gICAgICAgIHBhcmVudC5mb3JcbiAgICAgICkge1xuICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuaWYpIHtcbiAgICAgICAgbmVlZHNLZXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVkU2xvdHMgPSBPYmplY3Qua2V5cyhzbG90cylcbiAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpOyB9KVxuICAgIC5qb2luKCcsJyk7XG5cbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIGdlbmVyYXRlZFNsb3RzICsgXCJdXCIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/IFwiLG51bGwsdHJ1ZVwiIDogXCJcIikgKyAoIW5lZWRzRm9yY2VVcGRhdGUgJiYgbmVlZHNLZXkgPyAoXCIsbnVsbCxmYWxzZSxcIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogXCJcIikgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgdmFyIGhhc2ggPSA1MzgxO1xuICB2YXIgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG4gIHJldHVybiBoYXNoID4+PiAwXG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2xvdENoaWxkIChlbCkge1xuICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgaXNMZWdhY3lTeW50YXggPSBlbC5hdHRyc01hcFsnc2xvdC1zY29wZSddO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkICYmICFpc0xlZ2FjeVN5bnRheCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QsIFwibnVsbFwiKVxuICB9XG4gIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90KVxuICB9XG4gIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW5cbiAgICA/IFwiXCJcbiAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICB2YXIgZm4gPSBcImZ1bmN0aW9uKFwiICsgc2xvdFNjb3BlICsgXCIpe1wiICtcbiAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgPyAoXCIoXCIgKyAoZWwuaWYpICsgXCIpP1wiICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgXCI6dW5kZWZpbmVkXCIpXG4gICAgICAgIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCI7XG4gIC8vIHJldmVyc2UgcHJveHkgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgdmFyIHJldmVyc2VQcm94eSA9IHNsb3RTY29wZSA/IFwiXCIgOiBcIixwcm94eTp0cnVlXCI7XG4gIHJldHVybiAoXCJ7a2V5OlwiICsgKGVsLnNsb3RUYXJnZXQgfHwgXCJcXFwiZGVmYXVsdFxcXCJcIikgKyBcIixmbjpcIiArIGZuICsgcmV2ZXJzZVByb3h5ICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChcbiAgZWwsXG4gIHN0YXRlLFxuICBjaGVja1NraXAsXG4gIGFsdEdlbkVsZW1lbnQsXG4gIGFsdEdlbk5vZGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwkMS5mb3IgJiZcbiAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/IFwiLDFcIiA6IFwiLDBcIlxuICAgICAgICA6IFwiXCI7XG4gICAgICByZXR1cm4gKFwiXCIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUkMSA9IGNoZWNrU2tpcFxuICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICA6IDA7XG4gICAgdmFyIGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlJDEgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICBjaGlsZHJlbixcbiAgbWF5YmVDb21wb25lbnRcbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSwgc3RhdGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMyAmJiBub2RlLmlzQ29tbWVudCkge1xuICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgcmV0dXJuIChcIl9lKFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnNcbiAgICA/IGdlblByb3BzKChlbC5hdHRycyB8fCBbXSkuY29uY2F0KGVsLmR5bmFtaWNBdHRycyB8fCBbXSkubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoe1xuICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgdmFsdWU6IGF0dHIudmFsdWUsXG4gICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgfSk7IH0pKVxuICAgIDogbnVsbDtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNQcm9wcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKTtcbiAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiAoXCJfZChcIiArIHN0YXRpY1Byb3BzICsgXCIsW1wiICsgKGR5bmFtaWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJdKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICd2LXNsb3QnIHx8IG5hbWVbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgY2hlY2tGdW5jdGlvblBhcmFtZXRlckV4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB2YXIgc3RyaXBwZWQgPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJyk7XG4gIHZhciBrZXl3b3JkTWF0Y2ggPSBzdHJpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdHJpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgIHdhcm4oXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKChcImludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpKSwgcmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKGV4cCwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgd2FybihcbiAgICAgIFwiaW52YWxpZCBmdW5jdGlvbiBwYXJhbWV0ZXIgZXhwcmVzc2lvbjogXCIgKyAoZS5tZXNzYWdlKSArIFwiIGluXFxuXFxuXCIgK1xuICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHJhbmdlID0gMjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUgKFxuICBzb3VyY2UsXG4gIHN0YXJ0LFxuICBlbmRcbikge1xuICBpZiAoIHN0YXJ0ID09PSB2b2lkIDAgKSBzdGFydCA9IDA7XG4gIGlmICggZW5kID09PSB2b2lkIDAgKSBlbmQgPSBzb3VyY2UubGVuZ3RoO1xuXG4gIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpIHsgY29udGludWUgfVxuICAgICAgICByZXMucHVzaCgoXCJcIiArIChqICsgMSkgKyAocmVwZWF0JDEoXCIgXCIsIDMgLSBTdHJpbmcoaiArIDEpLmxlbmd0aCkpICsgXCJ8ICBcIiArIChsaW5lc1tqXSkpKTtcbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIiBcIiwgcGFkKSArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCQxID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKVxufVxuXG5mdW5jdGlvbiByZXBlYXQkMSAoc3RyLCBuKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKG4gPiAwKSB7XG4gICAgd2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKG4gJiAxKSB7IHJlc3VsdCArPSBzdHI7IH1cbiAgICAgIG4gPj4+PSAxO1xuICAgICAgaWYgKG4gPD0gMCkgeyBicmVhayB9XG4gICAgICBzdHIgKz0gc3RyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICByZXR1cm4gbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgZm5HZW5FcnJvcnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyO1xuICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgcmV0dXJuICgoZXJyLnRvU3RyaW5nKCkpICsgXCIgaW5cXG5cXG5cIiArIGNvZGUgKyBcIlxcblwiKTtcbiAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGNvbXBpbGUgKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgdGlwcyA9IFtdO1xuXG4gICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZSA9IHJlZiQxLmNvbXBpbGU7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbnZhciBkaXY7XG5mdW5jdGlvbiBnZXRTaG91bGREZWNvZGUgKGhyZWYpIHtcbiAgZGl2ID0gZGl2IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoJyYjMTA7JykgPiAwXG59XG5cbi8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUoZmFsc2UpIDogZmFsc2U7XG4vLyAjNjgyODogY2hyb21lIGVuY29kZXMgY29udGVudCBpbiBhW2hyZWZdXG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gIHJldHVybiBlbCAmJiBlbC5pbm5lckhUTUxcbn0pO1xuXG52YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuICAgICAgICBvdXRwdXRTb3VyY2VSYW5nZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgfSwgdGhpcyk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh0aGlzLl9uYW1lKSArIFwiIGNvbXBpbGVcIiksICdjb21waWxlJywgJ2NvbXBpbGUgZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCJpbXBvcnQgVnVlLCB7IENyZWF0ZUVsZW1lbnQsIFZOb2RlIH0gZnJvbSAndnVlJztcclxuXHJcbmV4cG9ydCBjb25zdCBuYXZpZ2F0aW9uID0gVnVlLmV4dGVuZCh7XHJcbiAgcmVuZGVyKGNyZWF0ZUVsZW1lbnQ6IENyZWF0ZUVsZW1lbnQpOiBWTm9kZSB7XHJcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgndWwnLCBbXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xpJywgW1xyXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2EnLCB7IGF0dHJzOiB7IGhyZWY6ICd3b3JrZXIuaHRtbCcgfSB9LCAncGVrZXJqYScpLFxyXG4gICAgICBdKSxcclxuICAgICAgY3JlYXRlRWxlbWVudCgnbGknLCBbXHJcbiAgICAgICAgY3JlYXRlRWxlbWVudCgnYScsIHsgYXR0cnM6IHsgaHJlZjogJ3Rhc2tzLmh0bWwnIH0gfSwgJ3Bla2VyamFhbicpLFxyXG4gICAgICBdKSxcclxuICAgICAgY3JlYXRlRWxlbWVudCgnbGknLCBbXHJcbiAgICAgICAgY3JlYXRlRWxlbWVudCgnYScsIHsgYXR0cnM6IHsgaHJlZjogJ3BlcmZvcm1hbmNlLmh0bWwnIH0gfSwgJ2tpbmVyamEnKSxcclxuICAgICAgXSksXHJcbiAgICBdKTtcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IFZ1ZSwgeyBDcmVhdGVFbGVtZW50LCBWTm9kZSB9IGZyb20gJ3Z1ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZXJyb3JNZXNzYWdlID0gVnVlLmV4dGVuZCh7XHJcbiAgcHJvcHM6IFsnZXJyb3InXSxcclxuICByZW5kZXIoY3JlYXRlRWxlbWVudDogQ3JlYXRlRWxlbWVudCk6IFZOb2RlIHtcclxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdwJywge1xyXG4gICAgICBjbGFzczogJ2Vycm9yJyxcclxuICAgICAgYXR0cnM6IHtcclxuICAgICAgICBpZDogJ2Vycm9yLXRleHQnLFxyXG4gICAgICB9LFxyXG4gICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgIGlubmVySFRNTDogdGhpcy4kcHJvcHMuZXJyb3IgPz8gJycsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkaW5nTWVzc2FnZSA9IFZ1ZS5leHRlbmQoe1xyXG4gIHByb3BzOiBbJ2xvYWRpbmcnXSxcclxuICByZW5kZXIoY3JlYXRlRWxlbWVudDogQ3JlYXRlRWxlbWVudCk6IFZOb2RlIHtcclxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdwJywge1xyXG4gICAgICBjbGFzczogJ3ByaW1hcnknLFxyXG4gICAgICBhdHRyczoge1xyXG4gICAgICAgIGlkOiAnbG9hZGluZy10ZXh0JyxcclxuICAgICAgfSxcclxuICAgICAgc3R5bGU6IHtcclxuICAgICAgICBkaXNwbGF5OiB0aGlzLiRwcm9wcy5sb2FkaW5nID8gJycgOiAnbm9uZScsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRvbVByb3BzOiB7XHJcbiAgICAgICAgaW5uZXJIVE1MOiAnbWVtdWF0Li4uJyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgVnVlLCB7IENyZWF0ZUVsZW1lbnQsIFZOb2RlIH0gZnJvbSAndnVlJztcclxuXHJcbmV4cG9ydCBjb25zdCBzdW1tYXJ5ID0gVnVlLmV4dGVuZCh7XHJcbiAgcHJvcHM6IFsnZGV0YWlscyddLFxyXG4gIHJlbmRlcihjcmVhdGVFbGVtZW50OiBDcmVhdGVFbGVtZW50KTogVk5vZGUge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3VsJywgW1xyXG4gICAgICBjcmVhdGVFbGVtZW50KCdsaScsIFtcclxuICAgICAgICAnanVtbGFoIHBla2VyamEgOicsXHJcbiAgICAgICAgY3JlYXRlRWxlbWVudChcclxuICAgICAgICAgICdzcGFuJyxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICBpZDogJ3dvcmtlcnMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHRoaXMuJHByb3BzLmRldGFpbHMudG90YWxfd29ya2VyXHJcbiAgICAgICAgKSxcclxuICAgICAgXSksXHJcbiAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xpJywgW1xyXG4gICAgICAgICdqdW1sYWggdHVnYXM6JyxcclxuICAgICAgICBjcmVhdGVFbGVtZW50KFxyXG4gICAgICAgICAgJ3NwYW4nLFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBhdHRyczoge1xyXG4gICAgICAgICAgICAgIGlkOiAndGFza3MnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHRoaXMuJHByb3BzLmRldGFpbHMudG90YWxfdGFza1xyXG4gICAgICAgICksXHJcbiAgICAgIF0pLFxyXG4gICAgICBjcmVhdGVFbGVtZW50KCdsaScsIFtcclxuICAgICAgICAneWFuZyBzZWxlc2FpOicsXHJcbiAgICAgICAgY3JlYXRlRWxlbWVudChcclxuICAgICAgICAgICdzcGFuJyxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICBpZDogJ3Rhc2stZG9uZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdGhpcy4kcHJvcHMuZGV0YWlscy50YXNrX2RvbmVcclxuICAgICAgICApLFxyXG4gICAgICBdKSxcclxuICAgICAgY3JlYXRlRWxlbWVudCgnbGknLCBbXHJcbiAgICAgICAgJ3lhbmcgZGlhYnRhbGthbjonLFxyXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgICAnc3BhbicsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICAgICAgaWQ6ICd0YXNrLWNhbmNlbGVkJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0aGlzLiRwcm9wcy5kZXRhaWxzLnRhc2tfY2FuY2VsbGVkXHJcbiAgICAgICAgKSxcclxuICAgICAgXSksXHJcbiAgICBdKTtcclxuICB9LFxyXG59KTtcclxuIiwiZnVuY3Rpb24gdCh0KXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KG4+MT9uLTE6MCksZT0xO2U8bjtlKyspcltlLTFdPWFyZ3VtZW50c1tlXTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgaT1ZW3RdLG89aT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkobnVsbCxyKTppOlwidW5rbm93biBlcnJvciBucjogXCIrdDt0aHJvdyBFcnJvcihcIltJbW1lcl0gXCIrbyl9dGhyb3cgRXJyb3IoXCJbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiBcIit0KyhyLmxlbmd0aD9cIiBcIityLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCInXCIrdCtcIidcIn0pKS5qb2luKFwiLFwiKTpcIlwiKStcIi4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZlwiKX1mdW5jdGlvbiBuKHQpe3JldHVybiEhdCYmISF0W1FdfWZ1bmN0aW9uIHIodCl7cmV0dXJuISF0JiYoZnVuY3Rpb24odCl7aWYoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybiExO3ZhciBuPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4hbnx8bj09PU9iamVjdC5wcm90b3R5cGV9KHQpfHxBcnJheS5pc0FycmF5KHQpfHwhIXRbTF18fCEhdC5jb25zdHJ1Y3RvcltMXXx8cyh0KXx8dih0KSl9ZnVuY3Rpb24gZShyKXtyZXR1cm4gbihyKXx8dCgyMyxyKSxyW1FdLnR9ZnVuY3Rpb24gaSh0LG4scil7dm9pZCAwPT09ciYmKHI9ITEpLDA9PT1vKHQpPyhyP09iamVjdC5rZXlzOlopKHQpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ImJlwic3ltYm9sXCI9PXR5cGVvZiBlfHxuKGUsdFtlXSx0KX0pKTp0LmZvckVhY2goKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIG4oZSxyLHQpfSkpfWZ1bmN0aW9uIG8odCl7dmFyIG49dFtRXTtyZXR1cm4gbj9uLmk+Mz9uLmktNDpuLmk6QXJyYXkuaXNBcnJheSh0KT8xOnModCk/Mjp2KHQpPzM6MH1mdW5jdGlvbiB1KHQsbil7cmV0dXJuIDI9PT1vKHQpP3QuaGFzKG4pOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pfWZ1bmN0aW9uIGEodCxuKXtyZXR1cm4gMj09PW8odCk/dC5nZXQobik6dFtuXX1mdW5jdGlvbiBmKHQsbixyKXt2YXIgZT1vKHQpOzI9PT1lP3Quc2V0KG4scik6Mz09PWU/KHQuZGVsZXRlKG4pLHQuYWRkKHIpKTp0W25dPXJ9ZnVuY3Rpb24gYyh0LG4pe3JldHVybiB0PT09bj8wIT09dHx8MS90PT0xL246dCE9dCYmbiE9bn1mdW5jdGlvbiBzKHQpe3JldHVybiBYJiZ0IGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYodCl7cmV0dXJuIHEmJnQgaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcCh0KXtyZXR1cm4gdC5vfHx0LnR9ZnVuY3Rpb24gbCh0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KTt2YXIgbj10dCh0KTtkZWxldGUgbltRXTtmb3IodmFyIHI9WihuKSxlPTA7ZTxyLmxlbmd0aDtlKyspe3ZhciBpPXJbZV0sbz1uW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYobltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOnRbaV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbil9ZnVuY3Rpb24gZCh0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseSh0KXx8bih0KXx8IXIodCk/dDoobyh0KT4xJiYodC5zZXQ9dC5hZGQ9dC5jbGVhcj10LmRlbGV0ZT1oKSxPYmplY3QuZnJlZXplKHQpLGUmJmkodCwoZnVuY3Rpb24odCxuKXtyZXR1cm4gZChuLCEwKX0pLCEwKSx0KX1mdW5jdGlvbiBoKCl7dCgyKX1mdW5jdGlvbiB5KHQpe3JldHVybiBudWxsPT10fHxcIm9iamVjdFwiIT10eXBlb2YgdHx8T2JqZWN0LmlzRnJvemVuKHQpfWZ1bmN0aW9uIGIobil7dmFyIHI9bnRbbl07cmV0dXJuIHJ8fHQoMTgsbikscn1mdW5jdGlvbiBtKHQsbil7bnRbdF18fChudFt0XT1uKX1mdW5jdGlvbiBfKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8VXx8dCgwKSxVfWZ1bmN0aW9uIGoodCxuKXtuJiYoYihcIlBhdGNoZXNcIiksdC51PVtdLHQucz1bXSx0LnY9bil9ZnVuY3Rpb24gZyh0KXt3KHQpLHQucC5mb3JFYWNoKFMpLHQucD1udWxsfWZ1bmN0aW9uIHcodCl7dD09PVUmJihVPXQubCl9ZnVuY3Rpb24gTyh0KXtyZXR1cm4gVT17cDpbXSxsOlUsaDp0LG06ITAsXzowfX1mdW5jdGlvbiBTKHQpe3ZhciBuPXRbUV07MD09PW4uaXx8MT09PW4uaT9uLmooKTpuLmc9ITB9ZnVuY3Rpb24gUChuLGUpe2UuXz1lLnAubGVuZ3RoO3ZhciBpPWUucFswXSxvPXZvaWQgMCE9PW4mJm4hPT1pO3JldHVybiBlLmguT3x8YihcIkVTNVwiKS5TKGUsbixvKSxvPyhpW1FdLlAmJihnKGUpLHQoNCkpLHIobikmJihuPU0oZSxuKSxlLmx8fHgoZSxuKSksZS51JiZiKFwiUGF0Y2hlc1wiKS5NKGlbUV0sbixlLnUsZS5zKSk6bj1NKGUsaSxbXSksZyhlKSxlLnUmJmUudihlLnUsZS5zKSxuIT09SD9uOnZvaWQgMH1mdW5jdGlvbiBNKHQsbixyKXtpZih5KG4pKXJldHVybiBuO3ZhciBlPW5bUV07aWYoIWUpcmV0dXJuIGkobiwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQSh0LGUsbixpLG8scil9KSwhMCksbjtpZihlLkEhPT10KXJldHVybiBuO2lmKCFlLlApcmV0dXJuIHgodCxlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKG4saSl7cmV0dXJuIEEodCxlLG8sbixpLHIpfSkpLHgodCxvLCExKSxyJiZ0LnUmJmIoXCJQYXRjaGVzXCIpLlIoZSxyLHQudSx0LnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJnQoNSksbihjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIW4odikpcmV0dXJuO2UubT0hMX1pZihyKGMpJiYheShjKSl7aWYoIWUuaC5OJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgodCxuLHIpe3ZvaWQgMD09PXImJihyPSExKSx0LmguTiYmdC5tJiZkKG4scil9ZnVuY3Rpb24geih0LG4pe3ZhciByPXRbUV07cmV0dXJuKHI/cChyKTp0KVtuXX1mdW5jdGlvbiBJKHQsbil7aWYobiBpbiB0KWZvcih2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cjspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixuKTtpZihlKXJldHVybiBlO3I9T2JqZWN0LmdldFByb3RvdHlwZU9mKHIpfX1mdW5jdGlvbiBrKHQpe3QuUHx8KHQuUD0hMCx0LmwmJmsodC5sKSl9ZnVuY3Rpb24gRSh0KXt0Lm98fCh0Lm89bCh0LnQpKX1mdW5jdGlvbiBSKHQsbixyKXt2YXIgZT1zKG4pP2IoXCJNYXBTZXRcIikuVChuLHIpOnYobik/YihcIk1hcFNldFwiKS5GKG4scik6dC5PP2Z1bmN0aW9uKHQsbil7dmFyIHI9QXJyYXkuaXNBcnJheSh0KSxlPXtpOnI/MTowLEE6bj9uLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6bix0OnQsazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89cnQ7ciYmKGk9W2VdLG89ZXQpO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShuLHIpOmIoXCJFUzVcIikuSihuLHIpO3JldHVybihyP3IuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIG4oZSl8fHQoMjIsZSksZnVuY3Rpb24gdChuKXtpZighcihuKSlyZXR1cm4gbjt2YXIgZSx1PW5bUV0sYz1vKG4pO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1OKG4sYyksdS5JPSExfWVsc2UgZT1OKG4sYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24obixyKXt1JiZhKHUudCxuKT09PXJ8fGYoZSxuLHQocikpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gTih0LG4pe3N3aXRjaChuKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAodCk7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKHQpfXJldHVybiBsKHQpfWZ1bmN0aW9uIFQoKXtmdW5jdGlvbiByKHQsbil7dmFyIHI9c1t0XTtyZXR1cm4gcj9yLmVudW1lcmFibGU9bjpzW3RdPXI9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOm4sZ2V0OmZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKG4pLHJ0LmdldChuLHQpfSxzZXQ6ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLHJ0LnNldChyLHQsbil9fSxyfWZ1bmN0aW9uIGUodCl7Zm9yKHZhciBuPXQubGVuZ3RoLTE7bj49MDtuLS0pe3ZhciByPXRbbl1bUV07aWYoIXIuUClzd2l0Y2goci5pKXtjYXNlIDU6YShyKSYmayhyKTticmVhaztjYXNlIDQ6byhyKSYmayhyKX19fWZ1bmN0aW9uIG8odCl7Zm9yKHZhciBuPXQudCxyPXQuayxlPVoociksaT1lLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbz1lW2ldO2lmKG8hPT1RKXt2YXIgYT1uW29dO2lmKHZvaWQgMD09PWEmJiF1KG4sbykpcmV0dXJuITA7dmFyIGY9cltvXSxzPWYmJmZbUV07aWYocz9zLnQhPT1hOiFjKGYsYSkpcmV0dXJuITB9fXZhciB2PSEhbltRXTtyZXR1cm4gZS5sZW5ndGghPT1aKG4pLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEodCl7dmFyIG49dC5rO2lmKG4ubGVuZ3RoIT09dC50Lmxlbmd0aClyZXR1cm4hMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sbi5sZW5ndGgtMSk7cmV0dXJuISghcnx8ci5nZXQpfWZ1bmN0aW9uIGYobil7bi5nJiZ0KDMsSlNPTi5zdHJpbmdpZnkocChuKSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbih0LG4pe3ZhciBlPUFycmF5LmlzQXJyYXkodCksaT1mdW5jdGlvbih0LG4pe2lmKHQpe2Zvcih2YXIgZT1BcnJheShuLmxlbmd0aCksaT0wO2k8bi5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSxyKGksITApKTtyZXR1cm4gZX12YXIgbz10dChuKTtkZWxldGUgb1tRXTtmb3IodmFyIHU9WihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT1yKGYsdHx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSxvKX0oZSx0KSxvPXtpOmU/NTo0LEE6bj9uLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6bix0OnQsazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbih0LHIsbyl7bz9uKHIpJiZyW1FdLkE9PT10JiZlKHQucCk6KHQudSYmZnVuY3Rpb24gdChuKXtpZihuJiZcIm9iamVjdFwiPT10eXBlb2Ygbil7dmFyIHI9bltRXTtpZihyKXt2YXIgZT1yLnQsbz1yLmssZj1yLkQsYz1yLmk7aWYoND09PWMpaShvLChmdW5jdGlvbihuKXtuIT09USYmKHZvaWQgMCE9PWVbbl18fHUoZSxuKT9mW25dfHx0KG9bbl0pOihmW25dPSEwLGsocikpKX0pKSxpKGUsKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PW9bdF18fHUobyx0KXx8KGZbdF09ITEsayhyKSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYShyKSYmKGsociksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKyl2b2lkIDA9PT1mW2xdJiZ0KG9bbF0pfX19fSh0LnBbMF0pLGUodC5wKSl9LEs6ZnVuY3Rpb24odCl7cmV0dXJuIDQ9PT10Lmk/byh0KTphKHQpfX0pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiBlKHQpe2lmKCFyKHQpKXJldHVybiB0O2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIHQubWFwKGUpO2lmKHModCkpcmV0dXJuIG5ldyBNYXAoQXJyYXkuZnJvbSh0LmVudHJpZXMoKSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm5bdFswXSxlKHRbMV0pXX0pKSk7aWYodih0KSlyZXR1cm4gbmV3IFNldChBcnJheS5mcm9tKHQpLm1hcChlKSk7dmFyIG49T2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpO2Zvcih2YXIgaSBpbiB0KW5baV09ZSh0W2ldKTtyZXR1cm4gbn1mdW5jdGlvbiBmKHQpe3JldHVybiBuKHQpP2UodCk6dH12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihyKXtmb3IodmFyIGk9ci5wYXRoLHU9ci5vcCxmPW4scz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdOzAhPT12JiYxIT09dnx8XCJfX3Byb3RvX19cIiE9PXAmJlwiY29uc3RydWN0b3JcIiE9PXB8fHQoMjQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJlwicHJvdG90eXBlXCI9PT1wJiZ0KDI0KSxcIm9iamVjdFwiIT10eXBlb2YoZj1hKGYscCkpJiZ0KDE1LGkuam9pbihcIi9cIikpfXZhciBsPW8oZiksZD1lKHIudmFsdWUpLGg9aVtpLmxlbmd0aC0xXTtzd2l0Y2godSl7Y2FzZVwicmVwbGFjZVwiOnN3aXRjaChsKXtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOnQoMTYpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlIGM6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gZi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZShyLnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0OnQoMTcsdSl9fSkpLG59LFI6ZnVuY3Rpb24odCxuLHIsZSl7c3dpdGNoKHQuaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHQsbixyLGUpe3ZhciBvPXQudCxzPXQubztpKHQuRCwoZnVuY3Rpb24odCxpKXt2YXIgdj1hKG8sdCkscD1hKHMsdCksbD1pP3Uobyx0KT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9bi5jb25jYXQodCk7ci5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfSh0LG4scixlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0LG4scixlKXt2YXIgaT10LnQsbz10LkQsdT10Lm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2Uscl07cj1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9bi5jb25jYXQoW3ZdKTtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9bi5jb25jYXQoW2xdKTtyLnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOm4uY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0odCxuLHIsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0LG4scixlKXt2YXIgaT10LnQsbz10Lm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoIW8uaGFzKHQpKXt2YXIgaT1uLmNvbmNhdChbdV0pO3IucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6dH0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6dH0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbih0KXtpZighaS5oYXModCkpe3ZhciBvPW4uY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTp0fSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTp0fSl9dSsrfSkpfSh0LG4scixlKX19LE06ZnVuY3Rpb24odCxuLHIsZSl7ci5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6dC50fSl9fSl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIG4odCxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWEodCxuKSx0LnByb3RvdHlwZT0oci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIGUodCl7dC5vfHwodC5EPW5ldyBNYXAsdC5vPW5ldyBNYXAodC50KSl9ZnVuY3Rpb24gbyh0KXt0Lm98fCh0Lm89bmV3IFNldCx0LnQuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYocihuKSl7dmFyIGU9Uih0LkEuaCxuLHQpO3QucC5zZXQobixlKSx0Lm8uYWRkKGUpfWVsc2UgdC5vLmFkZChuKX0pKSl9ZnVuY3Rpb24gdShuKXtuLmcmJnQoMyxKU09OLnN0cmluZ2lmeShwKG4pKSl9dmFyIGE9ZnVuY3Rpb24odCxuKXtyZXR1cm4oYT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxuKXt0Ll9fcHJvdG9fXz1ufXx8ZnVuY3Rpb24odCxuKXtmb3IodmFyIHIgaW4gbiluLmhhc093blByb3BlcnR5KHIpJiYodFtyXT1uW3JdKX0pKHQsbil9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIHRoaXNbUV09e2k6MixsOm4sQTpuP24uQTpfKCksUDohMSxJOiExLG86dm9pZCAwLEQ6dm9pZCAwLHQ6dCxrOnRoaXMsQzohMSxnOiExfSx0aGlzfW4odCxNYXApO3ZhciBvPXQucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxvLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gcCh0aGlzW1FdKS5oYXModCl9LG8uc2V0PWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxwKHIpLmhhcyh0KSYmcChyKS5nZXQodCk9PT1ufHwoZShyKSxrKHIpLHIuRC5zZXQodCwhMCksci5vLnNldCh0LG4pLHIuRC5zZXQodCwhMCkpLHRoaXN9LG8uZGVsZXRlPWZ1bmN0aW9uKHQpe2lmKCF0aGlzLmhhcyh0KSlyZXR1cm4hMTt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLGUobiksayhuKSxuLkQuc2V0KHQsITEpLG4uby5kZWxldGUodCksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzW1FdO3UodCkscCh0KS5zaXplJiYoZSh0KSxrKHQpLHQuRD1uZXcgTWFwLGkodC50LChmdW5jdGlvbihuKXt0LkQuc2V0KG4sITEpfSkpLHQuby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7dC5jYWxsKG4sci5nZXQoaSksaSxyKX0pKX0sby5nZXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tRXTt1KG4pO3ZhciBpPXAobikuZ2V0KHQpO2lmKG4uSXx8IXIoaSkpcmV0dXJuIGk7aWYoaSE9PW4udC5nZXQodCkpcmV0dXJuIGk7dmFyIG89UihuLkEuaCxpLG4pO3JldHVybiBlKG4pLG4uby5zZXQodCxvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKHQ9e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIG4udmFsdWVzKCl9LHQubmV4dD1mdW5jdGlvbigpe3ZhciB0PXIubmV4dCgpO3JldHVybiB0LmRvbmU/dDp7ZG9uZTohMSx2YWx1ZTpuLmdldCh0LnZhbHVlKX19LHR9LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciB0LG49dGhpcyxyPXRoaXMua2V5cygpO3JldHVybih0PXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiBuLmVudHJpZXMoKX0sdC5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ci5uZXh0KCk7aWYodC5kb25lKXJldHVybiB0O3ZhciBlPW4uZ2V0KHQudmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOlt0LnZhbHVlLGVdfX0sdH0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sdH0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LG4pe3JldHVybiB0aGlzW1FdPXtpOjMsbDpuLEE6bj9uLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0OnQsazp0aGlzLHA6bmV3IE1hcCxnOiExLEM6ITF9LHRoaXN9bih0LFNldCk7dmFyIHI9dC5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHIuaGFzPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbi5vPyEhbi5vLmhhcyh0KXx8ISghbi5wLmhhcyh0KXx8IW4uby5oYXMobi5wLmdldCh0KSkpOm4udC5oYXModCl9LHIuYWRkPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksdGhpcy5oYXModCl8fChvKG4pLGsobiksbi5vLmFkZCh0KSksdGhpc30sci5kZWxldGU9ZnVuY3Rpb24odCl7aWYoIXRoaXMuaGFzKHQpKXJldHVybiExO3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxrKG4pLG4uby5kZWxldGUodCl8fCEhbi5wLmhhcyh0KSYmbi5vLmRlbGV0ZShuLnAuZ2V0KHQpKX0sci5jbGVhcj1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07dSh0KSxwKHQpLnNpemUmJihvKHQpLGsodCksdC5vLmNsZWFyKCkpfSxyLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSx0Lm8udmFsdWVzKCl9LHIuZW50cmllcz1mdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSx0Lm8uZW50cmllcygpfSxyLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0scltWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyLmZvckVhY2g9ZnVuY3Rpb24odCxuKXtmb3IodmFyIHI9dGhpcy52YWx1ZXMoKSxlPXIubmV4dCgpOyFlLmRvbmU7KXQuY2FsbChuLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXIubmV4dCgpfSx0fSgpO20oXCJNYXBTZXRcIix7VDpmdW5jdGlvbih0LG4pe3JldHVybiBuZXcgZih0LG4pfSxGOmZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBjKHQsbil9fSl9ZnVuY3Rpb24gSigpe1QoKSxDKCksRigpfWZ1bmN0aW9uIEsodCl7cmV0dXJuIHR9ZnVuY3Rpb24gJCh0KXtyZXR1cm4gdH12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKHQpe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIit0fSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24odCl7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIit0fSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24odCl7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK3R9LDE4OmZ1bmN0aW9uKHQpe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK3QrXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrdCtcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbih0KXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK3QrXCInXCJ9LDIyOmZ1bmN0aW9uKHQpe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIit0fSwyMzpmdW5jdGlvbih0KXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK3R9LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsdHQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKHQpe3ZhciBuPXt9O3JldHVybiBaKHQpLmZvckVhY2goKGZ1bmN0aW9uKHIpe25bcl09T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpfSkpLG59LG50PXt9LHJ0PXtnZXQ6ZnVuY3Rpb24odCxuKXtpZihuPT09USlyZXR1cm4gdDt2YXIgZT1wKHQpO2lmKCF1KGUsbikpcmV0dXJuIGZ1bmN0aW9uKHQsbixyKXt2YXIgZSxpPUkobixyKTtyZXR1cm4gaT9cInZhbHVlXCJpbiBpP2kudmFsdWU6bnVsbD09PShlPWkuZ2V0KXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKHQuayk6dm9pZCAwfSh0LGUsbik7dmFyIGk9ZVtuXTtyZXR1cm4gdC5JfHwhcihpKT9pOmk9PT16KHQudCxuKT8oRSh0KSx0Lm9bbl09Uih0LkEuaCxpLHQpKTppfSxoYXM6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbiBpbiBwKHQpfSxvd25LZXlzOmZ1bmN0aW9uKHQpe3JldHVybiBSZWZsZWN0Lm93bktleXMocCh0KSl9LHNldDpmdW5jdGlvbih0LG4scil7dmFyIGU9SShwKHQpLG4pO2lmKG51bGw9PWU/dm9pZCAwOmUuc2V0KXJldHVybiBlLnNldC5jYWxsKHQuayxyKSwhMDtpZighdC5QKXt2YXIgaT16KHAodCksbiksbz1udWxsPT1pP3ZvaWQgMDppW1FdO2lmKG8mJm8udD09PXIpcmV0dXJuIHQub1tuXT1yLHQuRFtuXT0hMSwhMDtpZihjKHIsaSkmJih2b2lkIDAhPT1yfHx1KHQudCxuKSkpcmV0dXJuITA7RSh0KSxrKHQpfXJldHVybiB0Lm9bbl09cix0LkRbbl09ITAsITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMCE9PXoodC50LG4pfHxuIGluIHQudD8odC5EW25dPSExLEUodCksayh0KSk6ZGVsZXRlIHQuRFtuXSx0Lm8mJmRlbGV0ZSB0Lm9bbl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbih0LG4pe3ZhciByPXAodCksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLG4pO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PXQuaXx8XCJsZW5ndGhcIiE9PW4sZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6cltuXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXt0KDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe3QoMTIpfX0sZXQ9e307aShydCwoZnVuY3Rpb24odCxuKXtldFt0XT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxldC5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihuLHIpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHIpKSYmdCgxMykscnQuZGVsZXRlUHJvcGVydHkuY2FsbCh0aGlzLG5bMF0scil9LGV0LnNldD1mdW5jdGlvbihuLHIsZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJsZW5ndGhcIiE9PXImJmlzTmFOKHBhcnNlSW50KHIpKSYmdCgxNCkscnQuc2V0LmNhbGwodGhpcyxuWzBdLHIsZSxuWzBdKX07dmFyIGl0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt0aGlzLk89Qix0aGlzLk49ITAsXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0LnVzZVByb3hpZXMpJiZ0aGlzLnNldFVzZVByb3hpZXModC51c2VQcm94aWVzKSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnQuYXV0b0ZyZWV6ZSkmJnRoaXMuc2V0QXV0b0ZyZWV6ZSh0LmF1dG9GcmVlemUpLHRoaXMucHJvZHVjZT10aGlzLnByb2R1Y2UuYmluZCh0aGlzKSx0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcz10aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKHRoaXMpfXZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLnByb2R1Y2U9ZnVuY3Rpb24obixlLGkpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpe3ZhciBvPWU7ZT1uO3ZhciB1PXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7dm9pZCAwPT09dCYmKHQ9byk7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheShyPjE/ci0xOjApLGE9MTthPHI7YSsrKWlbYS0xXT1hcmd1bWVudHNbYV07cmV0dXJuIHUucHJvZHVjZSh0LChmdW5jdGlvbih0KXt2YXIgcjtyZXR1cm4ocj1lKS5jYWxsLmFwcGx5KHIsW24sdF0uY29uY2F0KGkpKX0pKX19dmFyIGE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmdCg2KSx2b2lkIDAhPT1pJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZ0KDcpLHIobikpe3ZhciBmPU8odGhpcyksYz1SKHRoaXMsbix2b2lkIDApLHM9ITA7dHJ5e2E9ZShjKSxzPSExfWZpbmFsbHl7cz9nKGYpOncoZil9cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJmEgaW5zdGFuY2VvZiBQcm9taXNlP2EudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIGooZixpKSxQKHQsZil9KSwoZnVuY3Rpb24odCl7dGhyb3cgZyhmKSx0fSkpOihqKGYsaSksUChhLGYpKX1pZighbnx8XCJvYmplY3RcIiE9dHlwZW9mIG4pe2lmKChhPWUobikpPT09SClyZXR1cm47cmV0dXJuIHZvaWQgMD09PWEmJihhPW4pLHRoaXMuTiYmZChhLCEwKSxhfXQoMjEsbil9LGkucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKHQsbil7dmFyIHIsZSxpPXRoaXM7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD9mdW5jdGlvbihuKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHI+MT9yLTE6MCksbz0xO288cjtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gaS5wcm9kdWNlV2l0aFBhdGNoZXMobiwoZnVuY3Rpb24obil7cmV0dXJuIHQuYXBwbHkodm9pZCAwLFtuXS5jb25jYXQoZSkpfSkpfTpbdGhpcy5wcm9kdWNlKHQsbiwoZnVuY3Rpb24odCxuKXtyPXQsZT1ufSkpLHIsZV19LGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7cihlKXx8dCg4KSxuKGUpJiYoZT1EKGUpKTt2YXIgaT1PKHRoaXMpLG89Uih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLHcoaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbihuLHIpe3ZhciBlPW4mJm5bUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8dCg5KSxlLkkmJnQoMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSxyKSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKHQpe3RoaXMuTj10fSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24obil7biYmIUImJnQoMjApLHRoaXMuTz1ufSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbih0LHIpe3ZhciBlO2ZvcihlPXIubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXJbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7dD1pLnZhbHVlO2JyZWFrfX12YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiBuKHQpP28odCxyKTp0aGlzLnByb2R1Y2UodCwoZnVuY3Rpb24odCl7cmV0dXJuIG8odCxyLnNsaWNlKGUrMSkpfSkpfSxlfSgpLG90PW5ldyBpdCx1dD1vdC5wcm9kdWNlLGF0PW90LnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKG90KSxmdD1vdC5zZXRBdXRvRnJlZXplLmJpbmQob3QpLGN0PW90LnNldFVzZVByb3hpZXMuYmluZChvdCksc3Q9b3QuYXBwbHlQYXRjaGVzLmJpbmQob3QpLHZ0PW90LmNyZWF0ZURyYWZ0LmJpbmQob3QpLHB0PW90LmZpbmlzaERyYWZ0LmJpbmQob3QpO2V4cG9ydCBkZWZhdWx0IHV0O2V4cG9ydHtpdCBhcyBJbW1lcixzdCBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLHZ0IGFzIGNyZWF0ZURyYWZ0LEQgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsVCBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsRiBhcyBlbmFibGVQYXRjaGVzLHB0IGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLG4gYXMgaXNEcmFmdCxyIGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLHV0IGFzIHByb2R1Y2UsYXQgYXMgcHJvZHVjZVdpdGhQYXRjaGVzLGZ0IGFzIHNldEF1dG9GcmVlemUsY3QgYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVtb2l6ZU9wdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB2YXIgcmVzdWx0RnVuYyA9IGZ1bmNzLnBvcCgpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXG4gICAgdmFyIG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUuYXBwbHkodW5kZWZpbmVkLCBbZnVuY3Rpb24gKCkge1xuICAgICAgcmVjb21wdXRhdGlvbnMrKztcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChtZW1vaXplT3B0aW9ucykpO1xuXG4gICAgLy8gSWYgYSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgZXhhY3Qgc2FtZSBhcmd1bWVudHMgd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSBvdXIgZGVwZW5kZW5jaWVzIGFnYWluLlxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBjcmVhdGVOZXh0U3RhdGUsIHsgaXNEcmFmdCwgY3VycmVudCwgaXNEcmFmdGFibGUsIGVuYWJsZUVTNSB9IGZyb20gJ2ltbWVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlTmV4dFN0YXRlLCBjdXJyZW50LCBmcmVlemUgfSBmcm9tICdpbW1lcic7XG5pbXBvcnQgeyBjb21wb3NlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5leHBvcnQgKiBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmV4cG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tICdyZWR1eC10aHVuayc7XG5cbi8qKlxyXG4gKiBcIkRyYWZ0LVNhZmVcIiB2ZXJzaW9uIG9mIGByZXNlbGVjdGAncyBgY3JlYXRlU2VsZWN0b3JgOlxyXG4gKiBJZiBhbiBgaW1tZXJgLWRyYWZ0ZWQgb2JqZWN0IGlzIHBhc3NlZCBpbnRvIHRoZSByZXN1bHRpbmcgc2VsZWN0b3IncyBmaXJzdCBhcmd1bWVudCxcclxuICogdGhlIHNlbGVjdG9yIHdpbGwgYWN0IG9uIHRoZSBjdXJyZW50IGRyYWZ0IHZhbHVlLCBpbnN0ZWFkIG9mIHJldHVybmluZyBhIGNhY2hlZCB2YWx1ZVxyXG4gKiB0aGF0IG1pZ2h0IGJlIHBvc3NpYmx5IG91dGRhdGVkIGlmIHRoZSBkcmFmdCBoYXMgYmVlbiBtb2RpZmllZCBzaW5jZS5cclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IoKSB7XG4gIHZhciBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gd3JhcHBlZFNlbGVjdG9yKHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgW2lzRHJhZnQodmFsdWUpID8gY3VycmVudCh2YWx1ZSkgOiB2YWx1ZV0uY29uY2F0KHJlc3QpKTtcbiAgfTtcblxuICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xufTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHJldHVybiBjb21wb3NlO1xuICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIFwicGxhaW5cIiBvYmplY3QsIGkuZS4gYW4gb2JqZWN0IHdob3NlXHJcbiAqIHByb3RveXBlIGlzIHRoZSByb290IGBPYmplY3QucHJvdG90eXBlYC4gVGhpcyBpbmNsdWRlcyBvYmplY3RzIGNyZWF0ZWRcclxuICogdXNpbmcgb2JqZWN0IGxpdGVyYWxzLCBidXQgbm90IGZvciBpbnN0YW5jZSBmb3IgY2xhc3MgaW5zdGFuY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSB2YWx1ZTtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBwcm90bztcbn1cblxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XG4gIHZhciBlbGFwc2VkID0gMDtcbiAgcmV0dXJuIHtcbiAgICBtZWFzdXJlVGltZTogZnVuY3Rpb24gbWVhc3VyZVRpbWUoZm4pIHtcbiAgICAgIHZhciBzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiB3YXJuSWZFeGNlZWRlZCgpIHtcbiAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIE1pZGRsZXdhcmVBcnJheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1pZGRsZXdhcmVBcnJheSwgX0FycmF5KTtcblxuICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XG4gICAgcmV0dXJuIF9BcnJheS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBfQXJyYXkkcHJvdG90eXBlJGNvbmM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJyW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RydWN0KE1pZGRsZXdhcmVBcnJheSwgKF9BcnJheSRwcm90b3R5cGUkY29uYyA9IF9BcnJheS5wcm90b3R5cGUuY29uY2F0KS5jYWxsLmFwcGx5KF9BcnJheSRwcm90b3R5cGUkY29uYywgW3RoaXNdLmNvbmNhdChhcnIpKSk7XG4gIH07XG5cbiAgX3Byb3RvLnByZXBlbmQgPSBmdW5jdGlvbiBwcmVwZW5kKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcnJbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KE1pZGRsZXdhcmVBcnJheSwgYXJyWzBdLmNvbmNhdCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCBhcnIuY29uY2F0KHRoaXMpKTtcbiAgfTtcblxuICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xufShcbi8qI19fUFVSRV9fKi9cbl93cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnOyAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGUgY29uZGl0aW9uIGZhaWxzXG4vLyBTdHJpcCBvdXQgZXJyb3IgbWVzc2FnZXMgZm9yIHByb2R1Y3Rpb25cbi8vID4gTm90IHByb3ZpZGluZyBhbiBpbmxpbmUgZGVmYXVsdCBhcmd1bWVudCBmb3IgbWVzc2FnZSBhcyB0aGUgcmVzdWx0IGlzIHNtYWxsZXJcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENvbmRpdGlvbiBub3QgcGFzc2VkXG4gIC8vIEluIHByb2R1Y3Rpb24gd2Ugc3RyaXAgdGhlIG1lc3NhZ2UgYnV0IHN0aWxsIHRocm93XG5cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gLy8gV2hlbiBub3QgaW4gcHJvZHVjdGlvbiB3ZSBhbGxvdyB0aGUgbWVzc2FnZSB0byBwYXNzIHRocm91Z2hcbiAgLy8gKlRoaXMgYmxvY2sgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24gYnVpbGRzKlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XG4gIHZhciBzdGFjayA9IFtdLFxuICAgICAga2V5cyA9IFtdO1xuICBpZiAoIWRlY3ljbGVyKSBkZWN5Y2xlciA9IGZ1bmN0aW9uIGRlY3ljbGVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSkgcmV0dXJuICdbQ2lyY3VsYXIgfl0nO1xuICAgIHJldHVybiAnW0NpcmN1bGFyIH4uJyArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oJy4nKSArICddJztcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcbiAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XG4gICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XG4gICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKSB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9O1xufVxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGBpc0ltbXV0YWJsZWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xuICB2YXIgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xuICByZXR1cm4ge1xuICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKCkge1xuICAgICAgcmV0dXJuIF9kZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCkge1xuICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZVBhdGhzID0gW107XG4gIH1cblxuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFtdO1xuICB9XG5cbiAgdmFyIHRyYWNrZWQgPSB7XG4gICAgdmFsdWU6IG9ialxuICB9O1xuXG4gIGlmICghaXNJbW11dGFibGUob2JqKSkge1xuICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLmNvbmNhdChrZXkpO1xuXG4gICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoLmpvaW4oJy4nKSkgIT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJhY2tlZDtcbn1cblxuZnVuY3Rpb24gX2RldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XG4gIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlUGF0aHMgPSBbXTtcbiAgfVxuXG4gIGlmIChzYW1lUGFyZW50UmVmID09PSB2b2lkIDApIHtcbiAgICBzYW1lUGFyZW50UmVmID0gZmFsc2U7XG4gIH1cblxuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFtdO1xuICB9XG5cbiAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB1bmRlZmluZWQ7XG4gIHZhciBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xuXG4gIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiB0cnVlLFxuICAgICAgcGF0aDogcGF0aFxuICAgIH07XG4gIH1cblxuICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gR2F0aGVyIGFsbCBrZXlzIGZyb20gcHJldiAodHJhY2tlZCkgYW5kIGFmdGVyIG9ianNcblxuXG4gIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcbiAgT2JqZWN0LmtleXModHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XG4gIH0pO1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoa2V5c1RvRGV0ZWN0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgY2hpbGRQYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcblxuICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGguam9pbignLicpKSAhPT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBfZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBjaGlsZFBhdGgpO1xuXG4gICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2FzTXV0YXRlZDogZmFsc2VcbiAgfTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWlkZGxld2FyZSB0aGF0IGNoZWNrcyB3aGV0aGVyIGFueSBzdGF0ZSB3YXMgbXV0YXRlZCBpbiBiZXR3ZWVuXHJcbiAqIGRpc3BhdGNoZXMgb3IgZHVyaW5nIGEgZGlzcGF0Y2guIElmIGFueSBtdXRhdGlvbnMgYXJlIGRldGVjdGVkLCBhbiBlcnJvciBpc1xyXG4gKiB0aHJvd24uXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE1pZGRsZXdhcmUgb3B0aW9ucy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpc0ltbXV0YWJsZSA9IF9vcHRpb25zLmlzSW1tdXRhYmxlLFxuICAgICAgaXNJbW11dGFibGUgPSBfb3B0aW9ucyRpc0ltbXV0YWJsZSA9PT0gdm9pZCAwID8gaXNJbW11dGFibGVEZWZhdWx0IDogX29wdGlvbnMkaXNJbW11dGFibGUsXG4gICAgICBpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucy5pZ25vcmVkUGF0aHMsXG4gICAgICBfb3B0aW9ucyR3YXJuQWZ0ZXIgPSBfb3B0aW9ucy53YXJuQWZ0ZXIsXG4gICAgICB3YXJuQWZ0ZXIgPSBfb3B0aW9ucyR3YXJuQWZ0ZXIgPT09IHZvaWQgMCA/IDMyIDogX29wdGlvbnMkd2FybkFmdGVyLFxuICAgICAgaWdub3JlID0gX29wdGlvbnMuaWdub3JlOyAvLyBBbGlhcyBpZ25vcmUtPmlnbm9yZWRQYXRocywgYnV0IHByZWZlciBpZ25vcmVkUGF0aHMgaWYgcHJlc2VudFxuXG4gIGlnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocyB8fCBpZ25vcmU7XG4gIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCAnSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJyk7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7IC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XG5cbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgICEhcmVzdWx0Lndhc011dGF0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnXCIgKyAocmVzdWx0LnBhdGggfHwgW10pLmpvaW4oJy4nKSArIFwiJy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3Ryb3VibGVzaG9vdGluZyNuZXZlci1tdXRhdGUtcmVkdWNlci1hcmd1bWVudHMpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpOyAvLyBUcmFjayBiZWZvcmUgcG90ZW50aWFsbHkgbm90IG1lZXRpbmcgdGhlIGludmFyaWFudFxuXG4gICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJiAoISFyZXN1bHQud2FzTXV0YXRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFtdKS5qb2luKCcuJykgKyBcIi4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiBcIiArIHN0cmluZ2lmeShhY3Rpb24pICsgXCIuIChodHRwczovL3JlZHV4LmpzLm9yZy90cm91Ymxlc2hvb3RpbmcjbmV2ZXItbXV0YXRlLXJlZHVjZXItYXJndW1lbnRzKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDApO1xuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgXCJwbGFpblwiLCBpLmUuIGEgdmFsdWUgdGhhdCBpcyBlaXRoZXJcclxuICogZGlyZWN0bHkgSlNPTi1zZXJpYWxpemFibGUgKGJvb2xlYW4sIG51bWJlciwgc3RyaW5nLCBhcnJheSwgcGxhaW4gb2JqZWN0KVxyXG4gKiBvciBgdW5kZWZpbmVkYC5cclxuICpcclxuICogQHBhcmFtIHZhbCBUaGUgdmFsdWUgdG8gY2hlY2suXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyB8fCB2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiB2YWwgPT09ICdudW1iZXInIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICBpZiAoaXNTZXJpYWxpemFibGUgPT09IHZvaWQgMCkge1xuICAgIGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjtcbiAgfVxuXG4gIGlmIChpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZWRQYXRocyA9IFtdO1xuICB9XG5cbiAgdmFyIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuXG4gIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleVBhdGg6IHBhdGguam9pbignLicpIHx8ICc8cm9vdD4nLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcbiAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IGVudHJpZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgICBwcm9wZXJ0eSA9IF9yZWYyWzBdLFxuICAgICAgICBuZXN0ZWRWYWx1ZSA9IF9yZWYyWzFdO1xuICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aC5jb25jYXQocHJvcGVydHkpO1xuXG4gICAgaWYgKGhhc0lnbm9yZWRQYXRocyAmJiBpZ25vcmVkUGF0aHMuaW5kZXhPZihuZXN0ZWRQYXRoLmpvaW4oJy4nKSkgPj0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleVBhdGg6IG5lc3RlZFBhdGguam9pbignLicpLFxuICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcblxuICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XG4gICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1pZGRsZXdhcmUgdGhhdCwgYWZ0ZXIgZXZlcnkgc3RhdGUgY2hhbmdlLCBjaGVja3MgaWYgdGhlIG5ld1xyXG4gKiBzdGF0ZSBpcyBzZXJpYWxpemFibGUuIElmIGEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSBpcyBmb3VuZCB3aXRoaW4gdGhlXHJcbiAqIHN0YXRlLCBhbiBlcnJvciBpcyBwcmludGVkIHRvIHRoZSBjb25zb2xlLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBNaWRkbGV3YXJlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGlzU2VyaWFsaXphYiA9IF9vcHRpb25zLmlzU2VyaWFsaXphYmxlLFxuICAgICAgaXNTZXJpYWxpemFibGUgPSBfb3B0aW9ucyRpc1NlcmlhbGl6YWIgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfb3B0aW9ucyRpc1NlcmlhbGl6YWIsXG4gICAgICBnZXRFbnRyaWVzID0gX29wdGlvbnMuZ2V0RW50cmllcyxcbiAgICAgIF9vcHRpb25zJGlnbm9yZWRBY3RpbyA9IF9vcHRpb25zLmlnbm9yZWRBY3Rpb25zLFxuICAgICAgaWdub3JlZEFjdGlvbnMgPSBfb3B0aW9ucyRpZ25vcmVkQWN0aW8gPT09IHZvaWQgMCA/IFtdIDogX29wdGlvbnMkaWdub3JlZEFjdGlvLFxuICAgICAgX29wdGlvbnMkaWdub3JlZEFjdGlvMiA9IF9vcHRpb25zLmlnbm9yZWRBY3Rpb25QYXRocyxcbiAgICAgIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9vcHRpb25zJGlnbm9yZWRBY3RpbzIgPT09IHZvaWQgMCA/IFsnbWV0YS5hcmcnXSA6IF9vcHRpb25zJGlnbm9yZWRBY3RpbzIsXG4gICAgICBfb3B0aW9ucyRpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucy5pZ25vcmVkUGF0aHMsXG4gICAgICBpZ25vcmVkUGF0aHMgPSBfb3B0aW9ucyRpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCA/IFtdIDogX29wdGlvbnMkaWdub3JlZFBhdGhzLFxuICAgICAgX29wdGlvbnMkd2FybkFmdGVyID0gX29wdGlvbnMud2FybkFmdGVyLFxuICAgICAgd2FybkFmdGVyID0gX29wdGlvbnMkd2FybkFmdGVyID09PSB2b2lkIDAgPyAzMiA6IF9vcHRpb25zJHdhcm5BZnRlcjtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGlnbm9yZWRBY3Rpb25zLmxlbmd0aCAmJiBpZ25vcmVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCAnU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJyk7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBbXSwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocyk7XG5cbiAgICAgICAgICBpZiAoZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCAnXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogJywgYWN0aW9uLCAnXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvYWN0aW9ucyN3aHktc2hvdWxkLXR5cGUtYmUtYS1zdHJpbmctb3ItYXQtbGVhc3Qtc2VyaWFsaXphYmxlLXdoeS1zaG91bGQtbXktYWN0aW9uLXR5cGVzLWJlLWNvbnN0YW50cyknLCAnXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmVBUEkuZ2V0U3RhdGUoKTtcbiAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBbXSwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XG5cbiAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5mdW5jdGlvbiBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCkge1xuICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XG4gIH07XG59XG4vKipcclxuICogUmV0dXJucyBhbnkgYXJyYXkgY29udGFpbmluZyB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGluc3RhbGxlZCBieVxyXG4gKiBgY29uZmlndXJlU3RvcmUoKWAuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBjb25maWd1cmUgeW91ciBzdG9yZSB3aXRoIGEgY3VzdG9tXHJcbiAqIGBtaWRkbGV3YXJlYCBhcnJheSBidXQgc3RpbGwga2VlcCB0aGUgZGVmYXVsdCBzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGRlZmF1bHQgbWlkZGxld2FyZSB1c2VkIGJ5IGBjb25maWd1cmVTdG9yZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHRodW5rID0gX29wdGlvbnMudGh1bmssXG4gICAgICB0aHVuayA9IF9vcHRpb25zJHRodW5rID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGh1bmssXG4gICAgICBfb3B0aW9ucyRpbW11dGFibGVDaGUgPSBfb3B0aW9ucy5pbW11dGFibGVDaGVjayxcbiAgICAgIGltbXV0YWJsZUNoZWNrID0gX29wdGlvbnMkaW1tdXRhYmxlQ2hlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaW1tdXRhYmxlQ2hlLFxuICAgICAgX29wdGlvbnMkc2VyaWFsaXphYmxlID0gX29wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssXG4gICAgICBzZXJpYWxpemFibGVDaGVjayA9IF9vcHRpb25zJHNlcmlhbGl6YWJsZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNlcmlhbGl6YWJsZTtcbiAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcblxuICBpZiAodGh1bmspIHtcbiAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbW11dGFibGVDaGVjaykge1xuICAgICAgLyogUFJPRF9TVEFSVF9SRU1PVkVfVU1EICovXG4gICAgICB2YXIgaW1tdXRhYmxlT3B0aW9ucyA9IHt9O1xuXG4gICAgICBpZiAoIWlzQm9vbGVhbihpbW11dGFibGVDaGVjaykpIHtcbiAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xuICAgICAgfVxuXG4gICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoaW1tdXRhYmxlT3B0aW9ucykpO1xuICAgICAgLyogUFJPRF9TVE9QX1JFTU9WRV9VTUQgKi9cbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXphYmxlQ2hlY2spIHtcbiAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XG5cbiAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xuICAgICAgICBzZXJpYWxpemFibGVPcHRpb25zID0gc2VyaWFsaXphYmxlQ2hlY2s7XG4gICAgICB9XG5cbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcbn1cblxudmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuLyoqXHJcbiAqIEEgZnJpZW5kbHkgYWJzdHJhY3Rpb24gb3ZlciB0aGUgc3RhbmRhcmQgUmVkdXggYGNyZWF0ZVN0b3JlKClgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gY29uZmlnIFRoZSBzdG9yZSBjb25maWd1cmF0aW9uLlxyXG4gKiBAcmV0dXJucyBBIGNvbmZpZ3VyZWQgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcbiAgdmFyIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSA9IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcblxuICB2YXIgX3JlZiA9IG9wdGlvbnMgfHwge30sXG4gICAgICBfcmVmJHJlZHVjZXIgPSBfcmVmLnJlZHVjZXIsXG4gICAgICByZWR1Y2VyID0gX3JlZiRyZWR1Y2VyID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJHJlZHVjZXIsXG4gICAgICBfcmVmJG1pZGRsZXdhcmUgPSBfcmVmLm1pZGRsZXdhcmUsXG4gICAgICBtaWRkbGV3YXJlID0gX3JlZiRtaWRkbGV3YXJlID09PSB2b2lkIDAgPyBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSA6IF9yZWYkbWlkZGxld2FyZSxcbiAgICAgIF9yZWYkZGV2VG9vbHMgPSBfcmVmLmRldlRvb2xzLFxuICAgICAgZGV2VG9vbHMgPSBfcmVmJGRldlRvb2xzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRkZXZUb29scyxcbiAgICAgIF9yZWYkcHJlbG9hZGVkU3RhdGUgPSBfcmVmLnByZWxvYWRlZFN0YXRlLFxuICAgICAgcHJlbG9hZGVkU3RhdGUgPSBfcmVmJHByZWxvYWRlZFN0YXRlID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJHByZWxvYWRlZFN0YXRlLFxuICAgICAgX3JlZiRlbmhhbmNlcnMgPSBfcmVmLmVuaGFuY2VycyxcbiAgICAgIGVuaGFuY2VycyA9IF9yZWYkZW5oYW5jZXJzID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJGVuaGFuY2VycztcblxuICB2YXIgcm9vdFJlZHVjZXI7XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocmVkdWNlcikpIHtcbiAgICByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XG4gIH1cblxuICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlLmFwcGx5KHZvaWQgMCwgdHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicgPyBtaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSkgOiBtaWRkbGV3YXJlKTtcbiAgdmFyIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2U7XG5cbiAgaWYgKGRldlRvb2xzKSB7XG4gICAgZmluYWxDb21wb3NlID0gY29tcG9zZVdpdGhEZXZUb29scyhfZXh0ZW5kcyh7XG4gICAgICAvLyBFbmFibGUgY2FwdHVyZSBvZiBzdGFjayB0cmFjZXMgZm9yIGRpc3BhdGNoZWQgUmVkdXggYWN0aW9uc1xuICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXG4gICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSAnb2JqZWN0JyAmJiBkZXZUb29scykpO1xuICB9XG5cbiAgdmFyIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlcl07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xuICAgIHN0b3JlRW5oYW5jZXJzID0gW21pZGRsZXdhcmVFbmhhbmNlcl0uY29uY2F0KGVuaGFuY2Vycyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuaGFuY2VycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKHN0b3JlRW5oYW5jZXJzKTtcbiAgfVxuXG4gIHZhciBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlLmFwcGx5KHZvaWQgMCwgc3RvcmVFbmhhbmNlcnMpO1xuICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcbiAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcbiAgICBpZiAocHJlcGFyZUFjdGlvbikge1xuICAgICAgdmFyIHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmICghcHJlcGFyZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXG4gICAgICB9LCAnbWV0YScgaW4gcHJlcGFyZWQgJiYge1xuICAgICAgICBtZXRhOiBwcmVwYXJlZC5tZXRhXG4gICAgICB9LCB7fSwgJ2Vycm9yJyBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgIGVycm9yOiBwcmVwYXJlZC5lcnJvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBwYXlsb2FkOiBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF1cbiAgICB9O1xuICB9XG5cbiAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJcIiArIHR5cGU7XG4gIH07XG5cbiAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcblxuICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24udHlwZSA9PT0gdHlwZTtcbiAgfTtcblxuICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcbn1cbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xuICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3N0cmluZycgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIFsndHlwZScsICdwYXlsb2FkJywgJ2Vycm9yJywgJ21ldGEnXS5pbmRleE9mKGtleSkgPiAtMTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gdHlwZSBvZiB0aGUgYWN0aW9ucyBjcmVhdGVkIGJ5IHRoZSBwYXNzZWRcclxuICogYGNyZWF0ZUFjdGlvbigpYC1nZW5lcmF0ZWQgYWN0aW9uIGNyZWF0b3IgKGFyYml0cmFyeSBhY3Rpb24gY3JlYXRvcnNcclxuICogYXJlIG5vdCBzdXBwb3J0ZWQpLlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gY3JlYXRvciB3aG9zZSBhY3Rpb24gdHlwZSB0byBnZXQuXHJcbiAqIEByZXR1cm5zIFRoZSBhY3Rpb24gdHlwZSB1c2VkIGJ5IHRoZSBhY3Rpb24gY3JlYXRvci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUeXBlKGFjdGlvbkNyZWF0b3IpIHtcbiAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcbiAgdmFyIGFjdGlvbnNNYXAgPSB7fTtcbiAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XG4gIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XG4gIHZhciBidWlsZGVyID0ge1xuICAgIGFkZENhc2U6IGZ1bmN0aW9uIGFkZENhc2UodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLypcclxuICAgICAgICAgdG8ga2VlcCB0aGUgZGVmaW5pdGlvbiBieSB0aGUgdXNlciBpbiBsaW5lIHdpdGggYWN0dWFsIGJlaGF2aW9yLFxyXG4gICAgICAgICB3ZSBlbmZvcmNlIGBhZGRDYXNlYCB0byBhbHdheXMgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBhZGRNYXRjaGVyYFxyXG4gICAgICAgICBhcyBtYXRjaGluZyBjYXNlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBtYXRjaGVyc1xyXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZE1hdGNoZXJgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gJ3N0cmluZycgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xuXG4gICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkQ2FzZSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZScpO1xuICAgICAgfVxuXG4gICAgICBhY3Rpb25zTWFwW3R5cGVdID0gcmVkdWNlcjtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH0sXG4gICAgYWRkTWF0Y2hlcjogZnVuY3Rpb24gYWRkTWF0Y2hlcihtYXRjaGVyLCByZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWN0aW9uTWF0Y2hlcnMucHVzaCh7XG4gICAgICAgIG1hdGNoZXI6IG1hdGNoZXIsXG4gICAgICAgIHJlZHVjZXI6IHJlZHVjZXJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGREZWZhdWx0Q2FzZTogZnVuY3Rpb24gYWRkRGVmYXVsdENhc2UocmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gcmVkdWNlcjtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH1cbiAgfTtcbiAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xuICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgaWYgKGFjdGlvbk1hdGNoZXJzID09PSB2b2lkIDApIHtcbiAgICBhY3Rpb25NYXRjaGVycyA9IFtdO1xuICB9XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhtYXBPckJ1aWxkZXJDYWxsYmFjaykgOiBbbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdLFxuICAgICAgYWN0aW9uc01hcCA9IF9yZWZbMF0sXG4gICAgICBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX3JlZlsxXSxcbiAgICAgIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX3JlZlsyXTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGNhc2VSZWR1Y2VycyA9IFthY3Rpb25zTWFwW2FjdGlvbi50eXBlXV0uY29uY2F0KGZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIG1hdGNoZXIgPSBfcmVmMi5tYXRjaGVyO1xuICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgcmVkdWNlciA9IF9yZWYzLnJlZHVjZXI7XG4gICAgICByZXR1cm4gcmVkdWNlcjtcbiAgICB9KSk7XG5cbiAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHtcbiAgICAgIHJldHVybiAhIWNyO1xuICAgIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FzZVJlZHVjZXJzID0gW2ZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcbiAgICAgIGlmIChjYXNlUmVkdWNlcikge1xuICAgICAgICBpZiAoaXNEcmFmdChwcmV2aW91c1N0YXRlKSkge1xuICAgICAgICAgIC8vIElmIGl0J3MgYWxyZWFkeSBhIGRyYWZ0LCB3ZSBtdXN0IGFscmVhZHkgYmUgaW5zaWRlIGEgYGNyZWF0ZU5leHRTdGF0ZWAgY2FsbCxcbiAgICAgICAgICAvLyBsaWtlbHkgYmVjYXVzZSB0aGlzIGlzIGJlaW5nIHdyYXBwZWQgaW4gYGNyZWF0ZVJlZHVjZXJgLCBgY3JlYXRlU2xpY2VgLCBvciBuZXN0ZWRcbiAgICAgICAgICAvLyBpbnNpZGUgYW4gZXhpc3RpbmcgZHJhZnQuIEl0J3Mgc2FmZSB0byBqdXN0IHBhc3MgdGhlIGRyYWZ0IHRvIHRoZSBtdXRhdG9yLlxuICAgICAgICAgIHZhciBkcmFmdCA9IHByZXZpb3VzU3RhdGU7IC8vIFdlIGNhbiBhc3N1bWUgdGhpcyBpcyBhbHJlYWR5IGEgZHJhZnRcblxuICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNEcmFmdGFibGUocHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgICAgICAvLyBJZiBzdGF0ZSBpcyBub3QgZHJhZnRhYmxlIChleDogYSBwcmltaXRpdmUsIHN1Y2ggYXMgMCksIHdlIHdhbnQgdG8gZGlyZWN0bHlcbiAgICAgICAgICAvLyByZXR1cm4gdGhlIGNhc2VSZWR1Y2VyIGZ1bmMgYW5kIG5vdCB3cmFwIGl0IHdpdGggcHJvZHVjZS5cbiAgICAgICAgICB2YXIgX3Jlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIF9yZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0EgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxuICAgICAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgICAgIC8vIHRoZXNlIHR3byB0eXBlcy5cbiAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgIH0sIHN0YXRlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZSQxKHNsaWNlLCBhY3Rpb25LZXkpIHtcbiAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XG59XG4vKipcclxuICogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYW4gaW5pdGlhbCBzdGF0ZSwgYW4gb2JqZWN0IGZ1bGwgb2YgcmVkdWNlclxyXG4gKiBmdW5jdGlvbnMsIGFuZCBhIFwic2xpY2UgbmFtZVwiLCBhbmQgYXV0b21hdGljYWxseSBnZW5lcmF0ZXNcclxuICogYWN0aW9uIGNyZWF0b3JzIGFuZCBhY3Rpb24gdHlwZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZVxyXG4gKiByZWR1Y2VycyBhbmQgc3RhdGUuXHJcbiAqXHJcbiAqIFRoZSBgcmVkdWNlcmAgYXJndW1lbnQgaXMgcGFzc2VkIHRvIGBjcmVhdGVSZWR1Y2VyKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcblxuICBpZiAoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2UnKTtcbiAgfVxuXG4gIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAndW5kZWZpbmVkJyA/IFtdIDogdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gJ2Z1bmN0aW9uJyA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXSxcbiAgICAgIF9yZWYkID0gX3JlZlswXSxcbiAgICAgIGV4dHJhUmVkdWNlcnMgPSBfcmVmJCA9PT0gdm9pZCAwID8ge30gOiBfcmVmJCxcbiAgICAgIF9yZWYkMiA9IF9yZWZbMV0sXG4gICAgICBhY3Rpb25NYXRjaGVycyA9IF9yZWYkMiA9PT0gdm9pZCAwID8gW10gOiBfcmVmJDIsXG4gICAgICBfcmVmJDMgPSBfcmVmWzJdLFxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gX3JlZiQzID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJDM7XG5cbiAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XG4gIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xuICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XG4gICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xuICAgIHZhciB0eXBlID0gZ2V0VHlwZSQxKG5hbWUsIHJlZHVjZXJOYW1lKTtcbiAgICB2YXIgY2FzZVJlZHVjZXI7XG4gICAgdmFyIHByZXBhcmVDYWxsYmFjaztcblxuICAgIGlmICgncmVkdWNlcicgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcbiAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XG4gICAgfVxuXG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcbiAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcbiAgfSk7XG5cbiAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX2V4dGVuZHMoe30sIGV4dHJhUmVkdWNlcnMsIHt9LCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XG5cbiAgdmFyIHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZmluYWxDYXNlUmVkdWNlcnMsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmVkdWNlcjogcmVkdWNlcixcbiAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyxcbiAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBpZHM6IFtdLFxuICAgIGVudGl0aWVzOiB7fVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xuICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgYWRkaXRpb25hbFN0YXRlID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCksIGFkZGl0aW9uYWxTdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSkge1xuICAgIHZhciBzZWxlY3RJZHMgPSBmdW5jdGlvbiBzZWxlY3RJZHMoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5pZHM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIHNlbGVjdEVudGl0aWVzKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUuZW50aXRpZXM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RBbGwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCBmdW5jdGlvbiAoaWRzLCBlbnRpdGllcykge1xuICAgICAgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBzZWxlY3RJZCA9IGZ1bmN0aW9uIHNlbGVjdElkKF8sIGlkKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gc2VsZWN0QnlJZChlbnRpdGllcywgaWQpIHtcbiAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykge1xuICAgICAgcmV0dXJuIGlkcy5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBpZiAoIXNlbGVjdFN0YXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RJZHM6IHNlbGVjdElkcyxcbiAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxuICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcbiAgICAgICAgc2VsZWN0VG90YWw6IHNlbGVjdFRvdGFsLFxuICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RJZHM6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RJZHMpLFxuICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcbiAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXG4gICAgICBzZWxlY3RUb3RhbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcbiAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0U2VsZWN0b3JzOiBnZXRTZWxlY3RvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHtcbiAgICByZXR1cm4gbXV0YXRvcihzdGF0ZSk7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB1bmRlZmluZWQpO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xuICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZykge1xuICAgICAgcmV0dXJuIGlzRlNBKGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bk11dGF0b3IgPSBmdW5jdGlvbiBydW5NdXRhdG9yKGRyYWZ0KSB7XG4gICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xuICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoaXNEcmFmdChzdGF0ZSkpIHtcbiAgICAgIC8vIHdlIG11c3QgYWxyZWFkeSBiZSBpbnNpZGUgYSBgY3JlYXRlTmV4dFN0YXRlYCBjYWxsLCBsaWtlbHkgYmVjYXVzZVxuICAgICAgLy8gdGhpcyBpcyBiZWluZyB3cmFwcGVkIGluIGBjcmVhdGVSZWR1Y2VyYCBvciBgY3JlYXRlU2xpY2VgLlxuICAgICAgLy8gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXG4gICAgICBydW5NdXRhdG9yKHN0YXRlKTsgLy8gc2luY2UgaXQncyBhIGRyYWZ0LCB3ZSdsbCBqdXN0IHJldHVybiBpdFxuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgY3JlYXRlTmV4dFN0YXRlKCkgcHJvZHVjZXMgYW4gSW1tdXRhYmxlPERyYWZ0PFM+PiByYXRoZXJcbiAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgLy8gdGhlc2UgdHdvIHR5cGVzLlxuICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZShzdGF0ZSwgcnVuTXV0YXRvcik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpIHtcbiAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1RoZSBlbnRpdHkgcGFzc2VkIHRvIHRoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uIHJldHVybmVkIHVuZGVmaW5lZC4nLCAnWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uJywgJ1RoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOicsIGVudGl0eSwgJ1RoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uOicsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpIHtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFsbE11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIGFkZE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XG4gICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xuICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGRpZE11dGF0ZSkge1xuICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsTXV0YWJseShzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHtcbiAgICAgIGlkczogW10sXG4gICAgICBlbnRpdGllczoge31cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIHZhciBvcmlnaW5hbCA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgdXBkYXRlLmNoYW5nZXMpO1xuICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICB2YXIgaGFzTmV3S2V5ID0gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG5cbiAgICBpZiAoaGFzTmV3S2V5KSB7XG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXk7XG4gICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllc1tuZXdLZXldID0gdXBkYXRlZDtcbiAgICByZXR1cm4gaGFzTmV3S2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIHZhciBuZXdLZXlzID0ge307XG4gICAgdmFyIHVwZGF0ZXNQZXJFbnRpdHkgPSB7fTtcbiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgLy8gT25seSBhcHBseSB1cGRhdGVzIHRvIGVudGl0aWVzIHRoYXQgY3VycmVudGx5IGV4aXN0XG4gICAgICBpZiAodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSB1cGRhdGVzIHRvIG9uZSBlbnRpdHksIG1lcmdlIHRoZW0gdG9nZXRoZXJcbiAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xuICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXG4gICAgICAgICAgLy8gU3ByZWFkcyBpZ25vcmUgZmFsc3kgdmFsdWVzLCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgdGhlcmUgaXNuJ3RcbiAgICAgICAgICAvLyBhbiBleGlzdGluZyB1cGRhdGUgYWxyZWFkeSBhdCB0aGlzIGtleVxuICAgICAgICAgIGNoYW5nZXM6IF9leHRlbmRzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwsIHt9LCB1cGRhdGUuY2hhbmdlcylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcbiAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcbiAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpO1xuICAgICAgfSkubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGRpZE11dGF0ZUlkcykge1xuICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gZW50aXRpZXMsIF9pc0FycmF5MiA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMiksIF9pMiA9IDAsIF9pdGVyYXRvcjIgPSBfaXNBcnJheTIgPyBfaXRlcmF0b3IyIDogX2l0ZXJhdG9yMltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoX2lzQXJyYXkyKSB7XG4gICAgICAgIGlmIChfaTIgPj0gX2l0ZXJhdG9yMi5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kyID0gX2l0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2kyLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjI7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXG4gICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xuICB2YXIgX2NyZWF0ZVVuc29ydGVkU3RhdGVBID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLFxuICAgICAgcmVtb3ZlT25lID0gX2NyZWF0ZVVuc29ydGVkU3RhdGVBLnJlbW92ZU9uZSxcbiAgICAgIHJlbW92ZU1hbnkgPSBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEucmVtb3ZlTWFueSxcbiAgICAgIHJlbW92ZUFsbCA9IF9jcmVhdGVVbnNvcnRlZFN0YXRlQS5yZW1vdmVBbGw7XG5cbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShuZXdNb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld01vZGVscykpIHtcbiAgICAgIG5ld01vZGVscyA9IE9iamVjdC52YWx1ZXMobmV3TW9kZWxzKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZWxzID0gbmV3TW9kZWxzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIHJldHVybiAhKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSBpbiBzdGF0ZS5lbnRpdGllcyk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShtb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGVscykpIHtcbiAgICAgIG1vZGVscyA9IE9iamVjdC52YWx1ZXMobW9kZWxzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIGFkZE1hbnlNdXRhYmx5KG1vZGVscywgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb3JpZ2luYWwgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwsIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XG4gICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgbW9kZWxzLnB1c2godXBkYXRlZCk7XG4gICAgcmV0dXJuIG5ld0tleSAhPT0gdXBkYXRlLmlkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICB2YXIgbW9kZWxzID0gW107XG4gICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgIHJldHVybiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlQXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoICYmIGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UobW9kZWxzLCBzdGF0ZSkge1xuICAgIG1vZGVscy5zb3J0KHNvcnQpOyAvLyBJbnNlcnQvb3ZlcndyaXRlIGFsbCBuZXcvdXBkYXRlZFxuXG4gICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1tzZWxlY3RJZChtb2RlbCldID0gbW9kZWw7XG4gICAgfSk7XG4gICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XG4gICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcbiAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcbiAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xuXG4gICAgaWYgKCFhcmVBcnJheXNFcXVhbChpZHMsIG5ld1NvcnRlZElkcykpIHtcbiAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxuICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXG4gICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXG4gICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXG4gIH07XG59XG5cbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbnRpdHlBZGFwdGVyKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfc29ydENvbXBhcmVyJHNlbGVjdEkgPSBfZXh0ZW5kcyh7XG4gICAgc29ydENvbXBhcmVyOiBmYWxzZSxcbiAgICBzZWxlY3RJZDogZnVuY3Rpb24gc2VsZWN0SWQoaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5pZDtcbiAgICB9XG4gIH0sIG9wdGlvbnMpLFxuICAgICAgc2VsZWN0SWQgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc2VsZWN0SWQsXG4gICAgICBzb3J0Q29tcGFyZXIgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc29ydENvbXBhcmVyO1xuXG4gIHZhciBzdGF0ZUZhY3RvcnkgPSBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCk7XG4gIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xuICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHNlbGVjdElkOiBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXI6IHNvcnRDb21wYXJlclxuICB9LCBzdGF0ZUZhY3RvcnksIHt9LCBzZWxlY3RvcnNGYWN0b3J5LCB7fSwgc3RhdGVBZGFwdGVyKTtcbn1cblxuLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG5cbmNvbnN0IF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkpIDogXCJAQGl0ZXJhdG9yXCI7XG5cbmNvbnN0IF9hc3luY0l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSkgOiBcIkBAYXN5bmNJdGVyYXRvclwiO1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvblxuZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWkvbmFub2lkL2Jsb2IvMy4wLjIvbm9uLXNlY3VyZS9pbmRleC5qc1xuLy8gVGhpcyBhbHBoYWJldCB1c2VzIGBBLVphLXowLTlfLWAgc3ltYm9scy4gQSBnZW5ldGljIGFsZ29yaXRobSBoZWxwZWRcbi8vIG9wdGltaXplIHRoZSBnemlwIGNvbXByZXNzaW9uIGZvciB0aGlzIGFscGhhYmV0LlxudmFyIHVybEFscGhhYmV0ID0gJ01vZHVsZVN5bWJoYXNPd25Qci0wMTIzNDU2Nzg5QUJDREVGR0hOUlZmZ2N0aVV2el9LcVlUSmtMeHBaWElqUVcnO1xuLyoqXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBuYW5vaWQgPSBmdW5jdGlvbiBuYW5vaWQoc2l6ZSkge1xuICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgc2l6ZSA9IDIxO1xuICB9XG5cbiAgdmFyIGlkID0gJyc7IC8vIEEgY29tcGFjdCBhbHRlcm5hdGl2ZSBmb3IgYGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKWAuXG5cbiAgdmFyIGkgPSBzaXplO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICAvLyBgfCAwYCBpcyBtb3JlIGNvbXBhY3QgYW5kIGZhc3RlciB0aGFuIGBNYXRoLmZsb29yKClgLlxuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG5cbiAgcmV0dXJuIGlkO1xufTtcblxudmFyIGNvbW1vblByb3BlcnRpZXMgPSBbJ25hbWUnLCAnbWVzc2FnZScsICdzdGFjaycsICdjb2RlJ107XG5cbnZhciBSZWplY3RXaXRoVmFsdWUgPSBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCkge1xuICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICB0aGlzLm5hbWUgPSAnUmVqZWN0V2l0aFZhbHVlJztcbiAgdGhpcy5tZXNzYWdlID0gJ1JlamVjdGVkJztcbn07IC8vIFJld29ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zZXJpYWxpemUtZXJyb3JcblxuXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gbWluaVNlcmlhbGl6ZUVycm9yKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgdmFyIHNpbXBsZUVycm9yID0ge307XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjb21tb25Qcm9wZXJ0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcGVydHkgPSBfcmVmO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW1wbGVFcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogU3RyaW5nKHZhbHVlKVxuICB9O1xufTtcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZVByZWZpeFxyXG4gKiBAcGFyYW0gcGF5bG9hZENyZWF0b3JcclxuICogQHBhcmFtIG9wdGlvbnNcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuayh0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xuICB2YXIgZnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL2Z1bGZpbGxlZCcsIGZ1bmN0aW9uIChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IHJlc3VsdCxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAnZnVsZmlsbGVkJ1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgcGVuZGluZyA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgJy9wZW5kaW5nJywgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IHVuZGVmaW5lZCxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAncGVuZGluZydcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL3JlamVjdGVkJywgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZykge1xuICAgIHZhciByZWplY3RlZFdpdGhWYWx1ZSA9IGVycm9yIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlO1xuICAgIHZhciBhYm9ydGVkID0gISFlcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcic7XG4gICAgdmFyIGNvbmRpdGlvbiA9ICEhZXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gJ0NvbmRpdGlvbkVycm9yJztcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogZXJyb3IgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUgPyBlcnJvci5wYXlsb2FkIDogdW5kZWZpbmVkLFxuICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCAnUmVqZWN0ZWQnKSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICByZWplY3RlZFdpdGhWYWx1ZTogcmVqZWN0ZWRXaXRoVmFsdWUsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdyZWplY3RlZCcsXG4gICAgICAgIGFib3J0ZWQ6IGFib3J0ZWQsXG4gICAgICAgIGNvbmRpdGlvbjogY29uZGl0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XG4gIHZhciBBQyA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09ICd1bmRlZmluZWQnID8gQWJvcnRDb250cm9sbGVyIDpcbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgICAgdGhpcy5zaWduYWwgPSB7XG4gICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiBvbmFib3J0KCkge30sXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5hYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XG4gICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XG4gICAgICB2YXIgcmVxdWVzdElkID0gbmFub2lkKCk7XG4gICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XG4gICAgICB2YXIgYWJvcnRSZWFzb247XG4gICAgICB2YXIgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICAgIHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiByZWplY3Qoe1xuICAgICAgICAgICAgbmFtZTogJ0Fib3J0RXJyb3InLFxuICAgICAgICAgICAgbWVzc2FnZTogYWJvcnRSZWFzb24gfHwgJ0Fib3J0ZWQnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgX3RlbXAzID0gZnVuY3Rpb24gX3RlbXAzKF9yZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChfZXhpdDIpIHJldHVybiBfcmVzdWx0O1xuICAgICAgICAgICAgLy8gV2UgZGlzcGF0Y2ggdGhlIHJlc3VsdCBhY3Rpb24gX2FmdGVyXyB0aGUgY2F0Y2gsIHRvIGF2b2lkIGhhdmluZyBhbnkgZXJyb3JzXG4gICAgICAgICAgICAvLyBoZXJlIGdldCBzd2FsbG93ZWQgYnkgdGhlIHRyeS9jYXRjaCBibG9jayxcbiAgICAgICAgICAgIC8vIHBlciBodHRwczovL3R3aXR0ZXIuY29tL2Rhbl9hYnJhbW92L3N0YXR1cy83NzA5MTQyMjE2Mzg5NDI3MjBcbiAgICAgICAgICAgIC8vIGFuZCBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3R1dG9yaWFscy9hZHZhbmNlZC10dXRvcmlhbCNhc3luYy1lcnJvci1oYW5kbGluZy1sb2dpYy1pbi10aHVua3NcbiAgICAgICAgICAgIHZhciBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcblxuICAgICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goZmluYWxBY3Rpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmluYWxBY3Rpb247XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBfZXhpdDIgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgZmluYWxBY3Rpb247XG5cbiAgICAgICAgICB2YXIgX3RlbXA0ID0gX2NhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29uZGl0aW9uICYmIG9wdGlvbnMuY29uZGl0aW9uKGFyZywge1xuICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhOiBleHRyYVxuICAgICAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gICAgICAgICAgICAgIHRocm93IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ29uZGl0aW9uRXJyb3InLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLidcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkaXNwYXRjaChwZW5kaW5nKHJlcXVlc3RJZCwgYXJnKSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFByb21pc2UucmFjZShbYWJvcnRlZFByb21pc2UsIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiByZWplY3RXaXRoVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgICB9KV0pKS50aGVuKGZ1bmN0aW9uIChfUHJvbWlzZSRyYWNlKSB7XG4gICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gX1Byb21pc2UkcmFjZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gcmVqZWN0ZWQoZXJyLCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90ZW1wNCAmJiBfdGVtcDQudGhlbiA/IF90ZW1wNC50aGVuKF90ZW1wMykgOiBfdGVtcDMoX3RlbXA0KSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0oKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSwge1xuICAgICAgICBhYm9ydDogYWJvcnQsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICBhcmc6IGFyZ1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGFjdGlvbkNyZWF0b3IsIHtcbiAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICB0eXBlUHJlZml4OiB0eXBlUHJlZml4XG4gIH0pO1xufVxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIHVud3JhcFJlc3VsdChhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XG4gICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XG4gIH1cblxuICBpZiAoYWN0aW9uLmVycm9yKSB7XG4gICAgdGhyb3cgYWN0aW9uLmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xufVxuXG52YXIgaGFzTWF0Y2hGdW5jdGlvbiA9IGZ1bmN0aW9uIGhhc01hdGNoRnVuY3Rpb24odikge1xuICByZXR1cm4gdiAmJiB0eXBlb2Ygdi5tYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pIHtcbiAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcbiAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XG4gIH1cbn07XG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBtYXRjaGVzIGFueSBvbmUgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBpc0FueU9mKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWF0Y2hlcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWF0Y2hlcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBtYXRjaGVycy5zb21lKGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pO1xuICAgIH0pO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gbWF0Y2hlcyBhbGwgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gaXNBbGxPZigpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBtYXRjaGVycyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIG1hdGNoZXJzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBtYXRjaGVycy5ldmVyeShmdW5jdGlvbiAobWF0Y2hlcikge1xuICAgICAgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTtcbiAgICB9KTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBAcGFyYW0gYWN0aW9uIEEgcmVkdXggYWN0aW9uXHJcbiAqIEBwYXJhbSB2YWxpZFN0YXR1cyBBbiBhcnJheSBvZiB2YWxpZCBtZXRhLnJlcXVlc3RTdGF0dXMgdmFsdWVzXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cblxuZnVuY3Rpb24gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCB2YWxpZFN0YXR1cykge1xuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpIHJldHVybiBmYWxzZTtcbiAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gJ3N0cmluZyc7XG4gIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XG4gIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XG59XG5cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSAnZnVuY3Rpb24nICYmICdwZW5kaW5nJyBpbiBhWzBdICYmICdmdWxmaWxsZWQnIGluIGFbMF0gJiYgJ3JlamVjdGVkJyBpbiBhWzBdO1xufVxuXG5mdW5jdGlvbiBpc1BlbmRpbmcoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3BlbmRpbmcnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUGVuZGluZygpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7XG4gICAgICByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3JlamVjdGVkJ10pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHtcbiAgICAgIHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiBoYXNGbGFnKGFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XG4gIH07XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbiAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXN5bmNUaHVua3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhc3luY1RodW5rc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ2Z1bGZpbGxlZCddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xuICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykge1xuICAgICAgcmV0dXJuIGFzeW5jVGh1bmsuZnVsZmlsbGVkO1xuICAgIH0pO1xuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncGVuZGluZycsICdmdWxmaWxsZWQnLCAncmVqZWN0ZWQnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhc3luY1RodW5rcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFzeW5jVGh1bmsgPSBfcmVmO1xuICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcbiAgICB9XG5cbiAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XG4gIH07XG59XG5cbi8vIHdlIGFzc3VtZSBSVEsgd2lsbCBiZSB1c2VkIHdpdGggUmVhY3QgTmF0aXZlIGFuZCBvdGhlciBQcm94eS1sZXNzXG4vLyBlbnZpcm9ubWVudHMuICBJbiBhZGRpdGlvbiwgdGhhdCdzIGhvdyBJbW1lciA0IGJlaGF2ZWQsIGFuZCBzaW5jZVxuLy8gd2Ugd2FudCB0byBzaGlwIHRoaXMgaW4gYW4gUlRLIG1pbm9yLCB3ZSBzaG91bGQga2VlcCB0aGUgc2FtZSBiZWhhdmlvci5cblxuZW5hYmxlRVM1KCk7XG5cbmV4cG9ydCB7IE1pZGRsZXdhcmVBcnJheSwgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlUmVkdWNlciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBnZXREZWZhdWx0TWlkZGxld2FyZSwgZ2V0VHlwZSwgaXNBbGxPZiwgaXNBbnlPZiwgaXNBc3luY1RodW5rQWN0aW9uLCBpc0Z1bGZpbGxlZCwgaXNJbW11dGFibGVEZWZhdWx0LCBpc1BlbmRpbmcsIGlzUGxhaW4sIGlzUGxhaW5PYmplY3QsIGlzUmVqZWN0ZWQsIGlzUmVqZWN0ZWRXaXRoVmFsdWUsIG5hbm9pZCwgdW53cmFwUmVzdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1eC10b29sa2l0LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7XHJcbiAgY3JlYXRlQWN0aW9uLFxyXG4gIGNyZWF0ZVJlZHVjZXIsXHJcbiAgY29uZmlndXJlU3RvcmUsXHJcbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XHJcbmltcG9ydCAgeyBpbml0aWFsU3RhdGUsIGVycm9yLCBsb2FkaW5nLCBzdW1tYXJ5TG9hZGVkLCBQZXJmb3JtYW5jZVN1bW1hcnkgfSBmcm9tICcuL3JlZHVjZXInO1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJztcclxuXHJcbmVudW0gQWN0aW9uVHlwZSB7XHJcbiAgRVJST1IgPSAnZXJyb3InLFxyXG4gIExPQURJTkcgPSAnbG9hZGluZycsXHJcbiAgTE9BREVEID0gJ3N1bW1hcnlMb2FkZWQnLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZXJyb3JBY3Rpb24gPSBjcmVhdGVBY3Rpb248c3RyaW5nPihBY3Rpb25UeXBlLkVSUk9SKTtcclxuZXhwb3J0IGNvbnN0IGxvYWRpbmdBY3Rpb24gPSBjcmVhdGVBY3Rpb248dm9pZD4oQWN0aW9uVHlwZS5MT0FESU5HKTtcclxuZXhwb3J0IGNvbnN0IHN1bW1hcnlMb2FkZWRBY3Rpb24gPSBjcmVhdGVBY3Rpb248UGVyZm9ybWFuY2VTdW1tYXJ5PihBY3Rpb25UeXBlLkxPQURFRCk7XHJcblxyXG5jb25zdCByZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIHtcclxuICBbQWN0aW9uVHlwZS5FUlJPUl06IGVycm9yLFxyXG4gIFtBY3Rpb25UeXBlLkxPQURJTkddOiBsb2FkaW5nLFxyXG4gIFtBY3Rpb25UeXBlLkxPQURFRF06IHN1bW1hcnlMb2FkZWQsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3JlJCA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICByZWR1Y2VyLFxyXG4gIG1pZGRsZXdhcmU6IFt0aHVua01pZGRsZXdhcmVdLFxyXG59KTtcclxuXHJcblxyXG4iLCIvLyBzZXR1cCBzdGF0ZVxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcclxuICBsb2FkaW5nOiBib29sZWFuLFxyXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsLFxyXG4gIHN1bW1hcnk6IFBlcmZvcm1hbmNlU3VtbWFyeVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlU3VtbWFyeSB7XHJcbiAgdG90YWxfdGFzazogbnVtYmVyLFxyXG4gIHRhc2tfZG9uZTogbnVtYmVyLFxyXG4gIHRhc2tfY2FuY2VsbGVkOiBudW1iZXIsXHJcbiAgdG90YWxfd29ya2VyOiBudW1iZXIsXHJcbn1cclxuXHJcbmludGVyZmFjZSBBY3Rpb25PYmplY3Qge1xyXG4gIHR5cGU6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQWN0aW9uT2JqZWN0RXJyb3IgZXh0ZW5kcyBBY3Rpb25PYmplY3Qge1xyXG4gIHBheWxvYWQ6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIEFjdGlvbk9iamVjdExvYWREYXRhIGV4dGVuZHMgQWN0aW9uT2JqZWN0IHtcclxuICBwYXlsb2FkOiBQZXJmb3JtYW5jZVN1bW1hcnk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBTdGF0ZSA9IHtcclxuICBsb2FkaW5nOiBmYWxzZSxcclxuICBlcnJvcjogbnVsbCxcclxuICBzdW1tYXJ5OiB7XHJcbiAgICB0b3RhbF90YXNrOiAwLFxyXG4gICAgdGFza19kb25lOiAwLFxyXG4gICAgdGFza19jYW5jZWxsZWQ6IDAsXHJcbiAgICB0b3RhbF93b3JrZXI6IDAsXHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkaW5nKHN0YXRlOiBTdGF0ZSk6IHZvaWR7XHJcbiAgc3RhdGUubG9hZGluZyA9IHRydWU7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXJyb3Ioc3RhdGU6IFN0YXRlLCBhY3Rpb246IEFjdGlvbk9iamVjdEVycm9yKTogdm9pZCB7XHJcbiAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xyXG4gIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdW1tYXJ5TG9hZGVkKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb25PYmplY3RMb2FkRGF0YSApOiBTdGF0ZSB7XHJcbiAgc3RhdGUuc3VtbWFyeSA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICBzdGF0ZS5lcnJvciA9IG51bGw7XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdE9wdGlvbiB7XHJcbiAgbWV0aG9kOiAnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ0RFTEVURSc7XHJcbiAgYm9keT86IGFueTtcclxuICBjdXN0b21Db25mPzogYW55O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjbGllbnQoZW5kcG9pbnQ6IHN0cmluZywgb3B0aW9uczogUmVxdWVzdE9wdGlvbiwganNvbj86IGFueSkge1xyXG4gIGxldCBoZWFkZXJzO1xyXG4gIGlmIChqc29uKSB7XHJcbiAgICBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb25maWcgPSB7XHJcbiAgICBtZXRob2Q6IG9wdGlvbnM/Lm1ldGhvZCA/PyAnR0VUJyAsXHJcbiAgICAuLi5vcHRpb25zPy5jdXN0b21Db25mLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAuLi5oZWFkZXJzLFxyXG4gICAgICAuLi5vcHRpb25zPy5jdXN0b21Db25mPy5oZWFkZXJzLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICBpZiAob3B0aW9ucz8uYm9keSkge1xyXG4gICAgaWYgKGpzb24pIHtcclxuICAgICAgY29uZmlnLmJvZHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zPy5ib2R5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBvcHRpb25zPy5ib2R5KSB7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIG9wdGlvbnM/LmJvZHlbbmFtZV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbmZpZy5ib2R5ID0gZm9ybURhdGE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsZXQgZGF0YTtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3aW5kb3cuZmV0Y2goZW5kcG9pbnQsIGNvbmZpZyk7XHJcbiAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5zdGF0dXNUZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIubWVzc2FnZSB8fCBkYXRhKTtcclxuICB9XHJcbn1cclxuXHJcbmNsaWVudC5nZXQgPSAoZW5kcG9pbnQ6IHN0cmluZywgY3VzdG9tQ29uZjogYW55ID0ge30pID0+IHtcclxuICByZXR1cm4gY2xpZW50KGVuZHBvaW50LHsgbWV0aG9kOiAnR0VUJywgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuXHJcbmNsaWVudC5wb3N0ID0gPFQ+KFxyXG4gIGVuZHBvaW50OiBzdHJpbmcsXHJcbiAgYm9keTogYW55LFxyXG4gIGN1c3RvbUNvbmY6IGFueSA9IHt9XHJcbik6IFByb21pc2U8VD4gPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHksIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5jbGllbnQucHV0ID0gKFxyXG4gIGVuZHBvaW50OiBzdHJpbmcsXHJcbiAgYm9keT86IGFueSxcclxuICBjdXN0b21Db25mOiBhbnkgPSB7fVxyXG4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIHsgbWV0aG9kOiAnUFVUJywgYm9keSwgLi4uY3VzdG9tQ29uZiB9KTtcclxufTtcclxuXHJcbmNsaWVudC5kZWwgPSAoXHJcbiAgZW5kcG9pbnQ6IHN0cmluZyxcclxuICBib2R5PzogYW55LFxyXG4gIGN1c3RvbUNvbmY6IGFueSA9IHt9XHJcbik6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudChlbmRwb2ludCwgeyBtZXRob2Q6ICdERUxFVEUnLCBib2R5LCAuLi5jdXN0b21Db25mIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IHsgY2xpZW50IGFzIGh0dHBDbGllbnQgfTtcclxuIiwiLyoqXG4gKiBTZXNzaW9uIFN0YXR1c1xuICovXG5leHBvcnQgdmFyIFNlc3Npb25TdGF0dXM7XG4oZnVuY3Rpb24gKFNlc3Npb25TdGF0dXMpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXNzaW9uU3RhdHVzW1wiT2tcIl0gPSBcIm9rXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIkV4aXRlZFwiXSA9IFwiZXhpdGVkXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIkNyYXNoZWRcIl0gPSBcImNyYXNoZWRcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXNzaW9uU3RhdHVzW1wiQWJub3JtYWxcIl0gPSBcImFibm9ybWFsXCI7XG59KShTZXNzaW9uU3RhdHVzIHx8IChTZXNzaW9uU3RhdHVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvdHlwZWRlZiAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgaXNUaGVuYWJsZSB9IGZyb20gJy4vaXMnO1xuLyoqIFN5bmNQcm9taXNlIGludGVybmFsIHN0YXRlcyAqL1xudmFyIFN0YXRlcztcbihmdW5jdGlvbiAoU3RhdGVzKSB7XG4gICAgLyoqIFBlbmRpbmcgKi9cbiAgICBTdGF0ZXNbXCJQRU5ESU5HXCJdID0gXCJQRU5ESU5HXCI7XG4gICAgLyoqIFJlc29sdmVkIC8gT0sgKi9cbiAgICBTdGF0ZXNbXCJSRVNPTFZFRFwiXSA9IFwiUkVTT0xWRURcIjtcbiAgICAvKiogUmVqZWN0ZWQgLyBFcnJvciAqL1xuICAgIFN0YXRlc1tcIlJFSkVDVEVEXCJdID0gXCJSRUpFQ1RFRFwiO1xufSkoU3RhdGVzIHx8IChTdGF0ZXMgPSB7fSkpO1xuLyoqXG4gKiBUaGVuYWJsZSBjbGFzcyB0aGF0IGJlaGF2ZXMgbGlrZSBhIFByb21pc2UgYW5kIGZvbGxvd3MgaXQncyBpbnRlcmZhY2VcbiAqIGJ1dCBpcyBub3QgYXN5bmMgaW50ZXJuYWxseVxuICovXG52YXIgU3luY1Byb21pc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3luY1Byb21pc2UoZXhlY3V0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBTdGF0ZXMuUEVORElORztcbiAgICAgICAgdGhpcy5faGFuZGxlcnMgPSBbXTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX3Jlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl9zZXRSZXN1bHQoU3RhdGVzLlJFU09MVkVELCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0UmVzdWx0KFN0YXRlcy5SRUpFQ1RFRCwgcmVhc29uKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX3NldFJlc3VsdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdGUgIT09IFN0YXRlcy5QRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUudGhlbihfdGhpcy5fcmVzb2x2ZSwgX3RoaXMuX3JlamVjdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICBfdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLl9leGVjdXRlSGFuZGxlcnMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogRklYTUVcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX2F0dGFjaEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZXJzID0gX3RoaXMuX2hhbmRsZXJzLmNvbmNhdChoYW5kbGVyKTtcbiAgICAgICAgICAgIF90aGlzLl9leGVjdXRlSGFuZGxlcnMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdGUgPT09IFN0YXRlcy5QRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhY2hlZEhhbmRsZXJzID0gX3RoaXMuX2hhbmRsZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgIGNhY2hlZEhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0ZSA9PT0gU3RhdGVzLlJFU09MVkVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLm9uZnVsZmlsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9uZnVsZmlsbGVkKF90aGlzLl92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0ZSA9PT0gU3RhdGVzLlJFSkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLm9ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25yZWplY3RlZChfdGhpcy5fdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZXIuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV4ZWN1dG9yKHRoaXMuX3Jlc29sdmUsIHRoaXMuX3JlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKFwiUHJvbWlzZS5hbGwgcmVxdWlyZXMgYW4gYXJyYXkgYXMgaW5wdXQuXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY291bnRlciA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHJlc29sdmVkQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIFN5bmNQcm9taXNlLnJlc29sdmUoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQ29sbGVjdGlvbltpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciAtPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRlciAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzb2x2ZWRDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5fYXR0YWNoSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgb25mdWxmaWxsZWQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbmZ1bGZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogwq9cXF8o44OEKV8vwq9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEZJWE1FXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25mdWxmaWxsZWQocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25yZWplY3RlZDogZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9ucmVqZWN0ZWQocmVhc29uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiAob25yZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbDsgfSwgb25yZWplY3RlZCk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uIChvbmZpbmFsbHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsO1xuICAgICAgICAgICAgdmFyIGlzUmVqZWN0ZWQ7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpc1JlamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG9uZmluYWxseSkge1xuICAgICAgICAgICAgICAgICAgICBvbmZpbmFsbHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgaXNSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFsID0gcmVhc29uO1xuICAgICAgICAgICAgICAgIGlmIChvbmZpbmFsbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25maW5hbGx5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgU3luY1Byb21pc2VdJztcbiAgICB9O1xuICAgIHJldHVybiBTeW5jUHJvbWlzZTtcbn0oKSk7XG5leHBvcnQgeyBTeW5jUHJvbWlzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3luY3Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGRhdGVUaW1lc3RhbXBJblNlY29uZHMsIGdldEdsb2JhbE9iamVjdCwgaXNQbGFpbk9iamVjdCwgaXNUaGVuYWJsZSwgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogSG9sZHMgYWRkaXRpb25hbCBldmVudCBpbmZvcm1hdGlvbi4ge0BsaW5rIFNjb3BlLmFwcGx5VG9FdmVudH0gd2lsbCBiZVxuICogY2FsbGVkIGJ5IHRoZSBjbGllbnQgYmVmb3JlIGFuIGV2ZW50IHdpbGwgYmUgc2VudC5cbiAqL1xudmFyIFNjb3BlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjb3BlKCkge1xuICAgICAgICAvKiogRmxhZyBpZiBub3RpZml5aW5nIGlzIGhhcHBlbmluZy4gKi9cbiAgICAgICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgICAgIC8qKiBDYWxsYmFjayBmb3IgY2xpZW50IHRvIHJlY2VpdmUgc2NvcGUgY2hhbmdlcy4gKi9cbiAgICAgICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgLyoqIENhbGxiYWNrIGxpc3QgdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciB7QGxpbmsgYXBwbHlUb0V2ZW50fS4gKi9cbiAgICAgICAgdGhpcy5fZXZlbnRQcm9jZXNzb3JzID0gW107XG4gICAgICAgIC8qKiBBcnJheSBvZiBicmVhZGNydW1icy4gKi9cbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPSBbXTtcbiAgICAgICAgLyoqIFVzZXIgKi9cbiAgICAgICAgdGhpcy5fdXNlciA9IHt9O1xuICAgICAgICAvKiogVGFncyAqL1xuICAgICAgICB0aGlzLl90YWdzID0ge307XG4gICAgICAgIC8qKiBFeHRyYSAqL1xuICAgICAgICB0aGlzLl9leHRyYSA9IHt9O1xuICAgICAgICAvKiogQ29udGV4dHMgKi9cbiAgICAgICAgdGhpcy5fY29udGV4dHMgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5oZXJpdCB2YWx1ZXMgZnJvbSB0aGUgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSBzY29wZSB0byBjbG9uZS5cbiAgICAgKi9cbiAgICBTY29wZS5jbG9uZSA9IGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICB2YXIgbmV3U2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdTY29wZS5fYnJlYWRjcnVtYnMgPSBfX3NwcmVhZChzY29wZS5fYnJlYWRjcnVtYnMpO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3RhZ3MgPSBfX2Fzc2lnbih7fSwgc2NvcGUuX3RhZ3MpO1xuICAgICAgICAgICAgbmV3U2NvcGUuX2V4dHJhID0gX19hc3NpZ24oe30sIHNjb3BlLl9leHRyYSk7XG4gICAgICAgICAgICBuZXdTY29wZS5fY29udGV4dHMgPSBfX2Fzc2lnbih7fSwgc2NvcGUuX2NvbnRleHRzKTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl91c2VyID0gc2NvcGUuX3VzZXI7XG4gICAgICAgICAgICBuZXdTY29wZS5fbGV2ZWwgPSBzY29wZS5fbGV2ZWw7XG4gICAgICAgICAgICBuZXdTY29wZS5fc3BhbiA9IHNjb3BlLl9zcGFuO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3Nlc3Npb24gPSBzY29wZS5fc2Vzc2lvbjtcbiAgICAgICAgICAgIG5ld1Njb3BlLl90cmFuc2FjdGlvbk5hbWUgPSBzY29wZS5fdHJhbnNhY3Rpb25OYW1lO1xuICAgICAgICAgICAgbmV3U2NvcGUuX2ZpbmdlcnByaW50ID0gc2NvcGUuX2ZpbmdlcnByaW50O1xuICAgICAgICAgICAgbmV3U2NvcGUuX2V2ZW50UHJvY2Vzc29ycyA9IF9fc3ByZWFkKHNjb3BlLl9ldmVudFByb2Nlc3NvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTY29wZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBpbnRlcm5hbCBvbiBjaGFuZ2UgbGlzdGVuZXIuIFVzZWQgZm9yIHN1YiBTREtzIHRoYXQgbmVlZCB0byBzdG9yZSB0aGUgc2NvcGUuXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5hZGRTY29wZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3Njb3BlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuYWRkRXZlbnRQcm9jZXNzb3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRQcm9jZXNzb3JzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aGlzLl91c2VyID0gdXNlciB8fCB7fTtcbiAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb24udXBkYXRlKHsgdXNlcjogdXNlciB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0VGFncyA9IGZ1bmN0aW9uICh0YWdzKSB7XG4gICAgICAgIHRoaXMuX3RhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdGFncyksIHRhZ3MpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFRhZyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fdGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl90YWdzKSwgKF9hID0ge30sIF9hW2tleV0gPSB2YWx1ZSwgX2EpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRFeHRyYXMgPSBmdW5jdGlvbiAoZXh0cmFzKSB7XG4gICAgICAgIHRoaXMuX2V4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhKSwgZXh0cmFzKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRFeHRyYSA9IGZ1bmN0aW9uIChrZXksIGV4dHJhKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEpLCAoX2EgPSB7fSwgX2Fba2V5XSA9IGV4dHJhLCBfYSkpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldEZpbmdlcnByaW50ID0gZnVuY3Rpb24gKGZpbmdlcnByaW50KSB7XG4gICAgICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gZmluZ2VycHJpbnQ7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUcmFuc2FjdGlvbk5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbk5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbiBiZSByZW1vdmVkIGluIG1ham9yIHZlcnNpb24uXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2Yge0BsaW5rIHRoaXMuc2V0VHJhbnNhY3Rpb25OYW1lfVxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFRyYW5zYWN0aW9uTmFtZShuYW1lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAoa2V5LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jb250ZXh0c1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fY29udGV4dHMpLCAoX2EgPSB7fSwgX2Fba2V5XSA9IGNvbnRleHQsIF9hKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRTcGFuID0gZnVuY3Rpb24gKHNwYW4pIHtcbiAgICAgICAgdGhpcy5fc3BhbiA9IHNwYW47XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuZ2V0U3BhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwYW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5nZXRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAvLyBvZnRlbiwgdGhpcyBzcGFuIHdpbGwgYmUgYSB0cmFuc2FjdGlvbiwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQgdG8gYmVcbiAgICAgICAgdmFyIHNwYW4gPSB0aGlzLmdldFNwYW4oKTtcbiAgICAgICAgLy8gdHJ5IGl0IHRoZSBuZXcgd2F5IGZpcnN0XG4gICAgICAgIGlmICgoX2EgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAoX2IgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHJhbnNhY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gdGhlIG9sZCB3YXkgKGtub3duIGJ1ZzogdGhpcyBvbmx5IGZpbmRzIHRyYW5zYWN0aW9ucyB3aXRoIHNhbXBsZWQgPSB0cnVlKVxuICAgICAgICBpZiAoKF9kID0gKF9jID0gc3BhbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnNwYW5SZWNvcmRlcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNwYW5zWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gc3Bhbi5zcGFuUmVjb3JkZXIuc3BhbnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmVpdGhlciB3YXkgZm91bmQgYSB0cmFuc2FjdGlvblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Nlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmdldFNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNhcHR1cmVDb250ZXh0KSB7XG4gICAgICAgIGlmICghY2FwdHVyZUNvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkU2NvcGUgPSBjYXB0dXJlQ29udGV4dCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVkU2NvcGUgaW5zdGFuY2VvZiBTY29wZSA/IHVwZGF0ZWRTY29wZSA6IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0IGluc3RhbmNlb2YgU2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdGFncyksIGNhcHR1cmVDb250ZXh0Ll90YWdzKTtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhKSwgY2FwdHVyZUNvbnRleHQuX2V4dHJhKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2NvbnRleHRzKSwgY2FwdHVyZUNvbnRleHQuX2NvbnRleHRzKTtcbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5fdXNlciAmJiBPYmplY3Qua2V5cyhjYXB0dXJlQ29udGV4dC5fdXNlcikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlciA9IGNhcHR1cmVDb250ZXh0Ll91c2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0Ll9sZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xldmVsID0gY2FwdHVyZUNvbnRleHQuX2xldmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0Ll9maW5nZXJwcmludCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gY2FwdHVyZUNvbnRleHQuX2ZpbmdlcnByaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoY2FwdHVyZUNvbnRleHQpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIGNhcHR1cmVDb250ZXh0ID0gY2FwdHVyZUNvbnRleHQ7XG4gICAgICAgICAgICB0aGlzLl90YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MpLCBjYXB0dXJlQ29udGV4dC50YWdzKTtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhKSwgY2FwdHVyZUNvbnRleHQuZXh0cmEpO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fY29udGV4dHMpLCBjYXB0dXJlQ29udGV4dC5jb250ZXh0cyk7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQudXNlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXIgPSBjYXB0dXJlQ29udGV4dC51c2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0LmxldmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGV2ZWwgPSBjYXB0dXJlQ29udGV4dC5sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5maW5nZXJwcmludCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gY2FwdHVyZUNvbnRleHQuZmluZ2VycHJpbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPSBbXTtcbiAgICAgICAgdGhpcy5fdGFncyA9IHt9O1xuICAgICAgICB0aGlzLl9leHRyYSA9IHt9O1xuICAgICAgICB0aGlzLl91c2VyID0ge307XG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgICAgIHRoaXMuX2xldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zcGFuID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFkZEJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoYnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpIHtcbiAgICAgICAgdmFyIG1lcmdlZEJyZWFkY3J1bWIgPSBfX2Fzc2lnbih7IHRpbWVzdGFtcDogZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpIH0sIGJyZWFkY3J1bWIpO1xuICAgICAgICB0aGlzLl9icmVhZGNydW1icyA9XG4gICAgICAgICAgICBtYXhCcmVhZGNydW1icyAhPT0gdW5kZWZpbmVkICYmIG1heEJyZWFkY3J1bWJzID49IDBcbiAgICAgICAgICAgICAgICA/IF9fc3ByZWFkKHRoaXMuX2JyZWFkY3J1bWJzLCBbbWVyZ2VkQnJlYWRjcnVtYl0pLnNsaWNlKC1tYXhCcmVhZGNydW1icylcbiAgICAgICAgICAgICAgICA6IF9fc3ByZWFkKHRoaXMuX2JyZWFkY3J1bWJzLCBbbWVyZ2VkQnJlYWRjcnVtYl0pO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmNsZWFyQnJlYWRjcnVtYnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBmaW5nZXJwcmludCB0byB0aGUgZXZlbnQuXG4gICAgICogTm90ZSB0aGF0IGJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgYnkgdGhlIGNsaWVudC5cbiAgICAgKiBBbHNvIGlmIHRoZSBldmVudCBoYXMgYWxyZWFkeSBicmVhZGNydW1icyBvbiBpdCwgd2UgZG8gbm90IG1lcmdlIHRoZW0uXG4gICAgICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gICAgICogQHBhcmFtIGhpbnQgTWF5IGNvbnRhaW4gYWRkaXRpb25hbCBpbmZvcm1hcnRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFwcGx5VG9FdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLl9leHRyYSAmJiBPYmplY3Qua2V5cyh0aGlzLl9leHRyYSkubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudC5leHRyYSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSksIGV2ZW50LmV4dHJhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGFncyAmJiBPYmplY3Qua2V5cyh0aGlzLl90YWdzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV2ZW50LnRhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdGFncyksIGV2ZW50LnRhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl91c2VyICYmIE9iamVjdC5rZXlzKHRoaXMuX3VzZXIpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQudXNlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl91c2VyKSwgZXZlbnQudXNlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRleHRzICYmIE9iamVjdC5rZXlzKHRoaXMuX2NvbnRleHRzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV2ZW50LmNvbnRleHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2NvbnRleHRzKSwgZXZlbnQuY29udGV4dHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9sZXZlbCkge1xuICAgICAgICAgICAgZXZlbnQubGV2ZWwgPSB0aGlzLl9sZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdHJhbnNhY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICBldmVudC50cmFuc2FjdGlvbiA9IHRoaXMuX3RyYW5zYWN0aW9uTmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIHNldCB0aGUgdHJhY2UgY29udGV4dCBmb3Igbm9ybWFsIGV2ZW50cyBvbmx5IGlmIHRoZXJlIGlzbid0IGFscmVhZHlcbiAgICAgICAgLy8gYSB0cmFjZSBjb250ZXh0IG9uIHRoZSBldmVudC4gVGhlcmUgaXMgYSBwcm9kdWN0IGZlYXR1cmUgaW4gcGxhY2Ugd2hlcmUgd2UgbGlua1xuICAgICAgICAvLyBlcnJvcnMgd2l0aCB0cmFuc2FjdGlvbiBhbmQgaXQgcmVseXMgb24gdGhhdC5cbiAgICAgICAgaWYgKHRoaXMuX3NwYW4pIHtcbiAgICAgICAgICAgIGV2ZW50LmNvbnRleHRzID0gX19hc3NpZ24oeyB0cmFjZTogdGhpcy5fc3Bhbi5nZXRUcmFjZUNvbnRleHQoKSB9LCBldmVudC5jb250ZXh0cyk7XG4gICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb25OYW1lID0gKF9hID0gdGhpcy5fc3Bhbi50cmFuc2FjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWU7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQudGFncyA9IF9fYXNzaWduKHsgdHJhbnNhY3Rpb246IHRyYW5zYWN0aW9uTmFtZSB9LCBldmVudC50YWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBseUZpbmdlcnByaW50KGV2ZW50KTtcbiAgICAgICAgZXZlbnQuYnJlYWRjcnVtYnMgPSBfX3NwcmVhZCgoZXZlbnQuYnJlYWRjcnVtYnMgfHwgW10pLCB0aGlzLl9icmVhZGNydW1icyk7XG4gICAgICAgIGV2ZW50LmJyZWFkY3J1bWJzID0gZXZlbnQuYnJlYWRjcnVtYnMubGVuZ3RoID4gMCA/IGV2ZW50LmJyZWFkY3J1bWJzIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKF9fc3ByZWFkKGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpLCB0aGlzLl9ldmVudFByb2Nlc3NvcnMpLCBldmVudCwgaGludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBhcHBseVRvRXZlbnR9IGlzIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzID0gZnVuY3Rpb24gKHByb2Nlc3NvcnMsIGV2ZW50LCBoaW50LCBpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc29yID0gcHJvY2Vzc29yc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHByb2Nlc3NvcihfX2Fzc2lnbih7fSwgZXZlbnQpLCBoaW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGZpbmFsKSB7IHJldHVybiBfdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKHByb2Nlc3NvcnMsIGZpbmFsLCBoaW50LCBpbmRleCArIDEpLnRoZW4ocmVzb2x2ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX25vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCByZXN1bHQsIGhpbnQsIGluZGV4ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IHNldCBjYWxsLlxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFdlIG5lZWQgdGhpcyBjaGVjayBmb3IgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzIHRvIGJlIGFibGUgdG8gd29yayBvbiBzY29wZSBkdXJpbmcgdXBkYXRlc1xuICAgICAgICAvLyBJZiB0aGlzIGNoZWNrIGlzIG5vdCBoZXJlIHdlJ2xsIHByb2R1Y2UgZW5kbGVzcyByZWN1cnNpb24gd2hlbiBzb21ldGhpbmcgaXMgZG9uZSB3aXRoIHRoZSBzY29wZVxuICAgICAgICAvLyBkdXJpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAgICBpZiAoIXRoaXMuX25vdGlmeWluZ0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Njb3BlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soX3RoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBmaW5nZXJwcmludCBmcm9tIHRoZSBzY29wZSB0byB0aGUgZXZlbnQgaWYgdGhlcmUncyBvbmUsXG4gICAgICogdXNlcyBtZXNzYWdlIGlmIHRoZXJlJ3Mgb25lIGluc3RlYWQgb3IgZ2V0IHJpZCBvZiBlbXB0eSBmaW5nZXJwcmludFxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5fYXBwbHlGaW5nZXJwcmludCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgaXQncyBhbiBhcnJheSBmaXJzdCBhbmQgd2UgYWN0dWFsbHkgaGF2ZSBzb21ldGhpbmcgaW4gcGxhY2VcbiAgICAgICAgZXZlbnQuZmluZ2VycHJpbnQgPSBldmVudC5maW5nZXJwcmludFxuICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KGV2ZW50LmZpbmdlcnByaW50KVxuICAgICAgICAgICAgICAgID8gZXZlbnQuZmluZ2VycHJpbnRcbiAgICAgICAgICAgICAgICA6IFtldmVudC5maW5nZXJwcmludF1cbiAgICAgICAgICAgIDogW107XG4gICAgICAgIC8vIElmIHdlIGhhdmUgc29tZXRoaW5nIG9uIHRoZSBzY29wZSwgdGhlbiBtZXJnZSBpdCB3aXRoIGV2ZW50XG4gICAgICAgIGlmICh0aGlzLl9maW5nZXJwcmludCkge1xuICAgICAgICAgICAgZXZlbnQuZmluZ2VycHJpbnQgPSBldmVudC5maW5nZXJwcmludC5jb25jYXQodGhpcy5fZmluZ2VycHJpbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm8gZGF0YSBhdCBhbGwsIHJlbW92ZSBlbXB0eSBhcnJheSBkZWZhdWx0XG4gICAgICAgIGlmIChldmVudC5maW5nZXJwcmludCAmJiAhZXZlbnQuZmluZ2VycHJpbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgZXZlbnQuZmluZ2VycHJpbnQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY29wZTtcbn0oKSk7XG5leHBvcnQgeyBTY29wZSB9O1xuLyoqXG4gKiBSZXRydW5zIHRoZSBnbG9iYWwgZXZlbnQgcHJvY2Vzc29ycy5cbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAgKi9cbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgZ2xvYmFsLl9fU0VOVFJZX18gPSBnbG9iYWwuX19TRU5UUllfXyB8fCB7fTtcbiAgICBnbG9iYWwuX19TRU5UUllfXy5nbG9iYWxFdmVudFByb2Nlc3NvcnMgPSBnbG9iYWwuX19TRU5UUllfXy5nbG9iYWxFdmVudFByb2Nlc3NvcnMgfHwgW107XG4gICAgcmV0dXJuIGdsb2JhbC5fX1NFTlRSWV9fLmdsb2JhbEV2ZW50UHJvY2Vzc29ycztcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xufVxuLyoqXG4gKiBBZGQgYSBFdmVudFByb2Nlc3NvciB0byBiZSBrZXB0IGdsb2JhbGx5LlxuICogQHBhcmFtIGNhbGxiYWNrIEV2ZW50UHJvY2Vzc29yIHRvIGFkZFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoY2FsbGJhY2spIHtcbiAgICBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKS5wdXNoKGNhbGxiYWNrKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjb3BlLmpzLm1hcCIsImltcG9ydCB7IFNlc3Npb25TdGF0dXMgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBAaW5oZXJpdGRvY1xuICovXG52YXIgU2Vzc2lvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXNzaW9uKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSAwO1xuICAgICAgICB0aGlzLnNpZCA9IHV1aWQ0KCk7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gU2Vzc2lvblN0YXR1cy5PaztcbiAgICAgICAgdGhpcy5pbml0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBKU0RvYyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgU2Vzc2lvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgaWYgKGNvbnRleHQudXNlcikge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQudXNlci5pcF9hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pcEFkZHJlc3MgPSBjb250ZXh0LnVzZXIuaXBfYWRkcmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29udGV4dC5kaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpZCA9IGNvbnRleHQudXNlci5pZCB8fCBjb250ZXh0LnVzZXIuZW1haWwgfHwgY29udGV4dC51c2VyLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gY29udGV4dC50aW1lc3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKGNvbnRleHQuc2lkKSB7XG4gICAgICAgICAgICAvLyBHb29kIGVub3VnaCB1dWlkIHZhbGlkYXRpb24uIOKAlCBLYW1pbFxuICAgICAgICAgICAgdGhpcy5zaWQgPSBjb250ZXh0LnNpZC5sZW5ndGggPT09IDMyID8gY29udGV4dC5zaWQgOiB1dWlkNCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5pbml0ID0gY29udGV4dC5pbml0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmRpZCkge1xuICAgICAgICAgICAgdGhpcy5kaWQgPSBcIlwiICsgY29udGV4dC5kaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnN0YXJ0ZWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBjb250ZXh0LnN0YXJ0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmR1cmF0aW9uID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGNvbnRleHQuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy50aW1lc3RhbXAgLSB0aGlzLnN0YXJ0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQucmVsZWFzZSkge1xuICAgICAgICAgICAgdGhpcy5yZWxlYXNlID0gY29udGV4dC5yZWxlYXNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVudmlyb25tZW50ID0gY29udGV4dC5lbnZpcm9ubWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5pcEFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuaXBBZGRyZXNzID0gY29udGV4dC5pcEFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQudXNlckFnZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJBZ2VudCA9IGNvbnRleHQudXNlckFnZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5lcnJvcnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHsgc3RhdHVzOiBzdGF0dXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0dXMgPT09IFNlc3Npb25TdGF0dXMuT2spIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHsgc3RhdHVzOiBTZXNzaW9uU3RhdHVzLkV4aXRlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNlc3Npb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgICAgIHNpZDogXCJcIiArIHRoaXMuc2lkLFxuICAgICAgICAgICAgaW5pdDogdGhpcy5pbml0LFxuICAgICAgICAgICAgc3RhcnRlZDogbmV3IERhdGUodGhpcy5zdGFydGVkKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSh0aGlzLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBlcnJvcnM6IHRoaXMuZXJyb3JzLFxuICAgICAgICAgICAgZGlkOiB0eXBlb2YgdGhpcy5kaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiB0aGlzLmRpZCA9PT0gJ3N0cmluZycgPyBcIlwiICsgdGhpcy5kaWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICAgIGF0dHJzOiBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgICAgICAgICAgcmVsZWFzZTogdGhpcy5yZWxlYXNlLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIGlwX2FkZHJlc3M6IHRoaXMuaXBBZGRyZXNzLFxuICAgICAgICAgICAgICAgIHVzZXJfYWdlbnQ6IHRoaXMudXNlckFnZW50LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNlc3Npb247XG59KCkpO1xuZXhwb3J0IHsgU2Vzc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG5pbXBvcnQgeyBTZXNzaW9uU3RhdHVzLCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgY29uc29sZVNhbmRib3gsIGRhdGVUaW1lc3RhbXBJblNlY29uZHMsIGdldEdsb2JhbE9iamVjdCwgaXNOb2RlRW52LCBsb2dnZXIsIHV1aWQ0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBTY29wZSB9IGZyb20gJy4vc2NvcGUnO1xuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gJy4vc2Vzc2lvbic7XG4vKipcbiAqIEFQSSBjb21wYXRpYmlsaXR5IHZlcnNpb24gb2YgdGhpcyBodWIuXG4gKlxuICogV0FSTklORzogVGhpcyBudW1iZXIgc2hvdWxkIG9ubHkgYmUgaW5jcmVhc2VkIHdoZW4gdGhlIGdsb2JhbCBpbnRlcmZhY2VcbiAqIGNoYW5nZXMgYW5kIG5ldyBtZXRob2RzIGFyZSBpbnRyb2R1Y2VkLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHZhciBBUElfVkVSU0lPTiA9IDM7XG4vKipcbiAqIERlZmF1bHQgbWF4aW11bSBudW1iZXIgb2YgYnJlYWRjcnVtYnMgYWRkZWQgdG8gYW4gZXZlbnQuIENhbiBiZSBvdmVyd3JpdHRlblxuICogd2l0aCB7QGxpbmsgT3B0aW9ucy5tYXhCcmVhZGNydW1ic30uXG4gKi9cbnZhciBERUZBVUxUX0JSRUFEQ1JVTUJTID0gMTAwO1xuLyoqXG4gKiBBYnNvbHV0ZSBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gVGhlXG4gKiBgbWF4QnJlYWRjcnVtYnNgIG9wdGlvbiBjYW5ub3QgYmUgaGlnaGVyIHRoYW4gdGhpcyB2YWx1ZS5cbiAqL1xudmFyIE1BWF9CUkVBRENSVU1CUyA9IDEwMDtcbi8qKlxuICogQGluaGVyaXREb2NcbiAqL1xudmFyIEh1YiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBodWIsIHdpbGwgcHVzaCBvbmUge0BsaW5rIExheWVyfSBpbnRvIHRoZVxuICAgICAqIGludGVybmFsIHN0YWNrIG9uIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsaWVudCBib3VuZCB0byB0aGUgaHViLlxuICAgICAqIEBwYXJhbSBzY29wZSBib3VuZCB0byB0aGUgaHViLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIG51bWJlciwgaGlnaGVyIG51bWJlciBtZWFucyBoaWdoZXIgcHJpb3JpdHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSHViKGNsaWVudCwgc2NvcGUsIF92ZXJzaW9uKSB7XG4gICAgICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gbmV3IFNjb3BlKCk7IH1cbiAgICAgICAgaWYgKF92ZXJzaW9uID09PSB2b2lkIDApIHsgX3ZlcnNpb24gPSBBUElfVkVSU0lPTjsgfVxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gX3ZlcnNpb247XG4gICAgICAgIC8qKiBJcyBhIHtAbGluayBMYXllcn1bXSBjb250YWluaW5nIHRoZSBjbGllbnQgYW5kIHNjb3BlICovXG4gICAgICAgIHRoaXMuX3N0YWNrID0gW3t9XTtcbiAgICAgICAgdGhpcy5nZXRTdGFja1RvcCgpLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuYmluZENsaWVudChjbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuaXNPbGRlclRoYW4gPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbiA8IHZlcnNpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYmluZENsaWVudCA9IGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgdG9wLmNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnQuc2V0dXBJbnRlZ3JhdGlvbnMpIHtcbiAgICAgICAgICAgIGNsaWVudC5zZXR1cEludGVncmF0aW9ucygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUucHVzaFNjb3BlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNsb25lIHRoZSBjb250ZW50IG9mIHByZXYgc2NvcGVcbiAgICAgICAgdmFyIHNjb3BlID0gU2NvcGUuY2xvbmUodGhpcy5nZXRTY29wZSgpKTtcbiAgICAgICAgdGhpcy5nZXRTdGFjaygpLnB1c2goe1xuICAgICAgICAgICAgY2xpZW50OiB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnBvcFNjb3BlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRTdGFjaygpLmxlbmd0aCA8PSAxKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gISF0aGlzLmdldFN0YWNrKCkucG9wKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUud2l0aFNjb3BlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMucHVzaFNjb3BlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnBvcFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuY2xpZW50O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIHNjb3BlIG9mIHRoZSB0b3Agc3RhY2suICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRTY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhY2tUb3AoKS5zY29wZTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBzY29wZSBzdGFjayBmb3IgZG9tYWlucyBvciB0aGUgcHJvY2Vzcy4gKi9cbiAgICBIdWIucHJvdG90eXBlLmdldFN0YWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhY2s7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgdG9wbW9zdCBzY29wZSBsYXllciBpbiB0aGUgb3JkZXIgZG9tYWluID4gbG9jYWwgPiBwcm9jZXNzLiAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0U3RhY2tUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHZhciBmaW5hbEhpbnQgPSBoaW50O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGhpbnQgcHJvdmlkZWQsIG1pbWljayB0aGUgc2FtZSB0aGluZyB0aGF0IHdvdWxkIGhhcHBlblxuICAgICAgICAvLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbiAgICAgICAgLy8gd291bGQgcHJldmVudCB1c2VyIGZyb20gaGF2aW5nIGZ1bGwgY29udHJvbCBvdmVyIGRpcmVjdCBjYWxscy5cbiAgICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbnRyeSBzeW50aGV0aWNFeGNlcHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbEhpbnQgPSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlRXhjZXB0aW9uJywgZXhjZXB0aW9uLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmluYWxIaW50KSwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsLCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHZhciBmaW5hbEhpbnQgPSBoaW50O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGhpbnQgcHJvdmlkZWQsIG1pbWljayB0aGUgc2FtZSB0aGluZyB0aGF0IHdvdWxkIGhhcHBlblxuICAgICAgICAvLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbiAgICAgICAgLy8gd291bGQgcHJldmVudCB1c2VyIGZyb20gaGF2aW5nIGZ1bGwgY29udHJvbCBvdmVyIGRpcmVjdCBjYWxscy5cbiAgICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxIaW50ID0ge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbjogc3ludGhldGljRXhjZXB0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnZva2VDbGllbnQoJ2NhcHR1cmVNZXNzYWdlJywgbWVzc2FnZSwgbGV2ZWwsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaW5hbEhpbnQpLCB7IGV2ZW50X2lkOiBldmVudElkIH0pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuY2FwdHVyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHRoaXMuX2ludm9rZUNsaWVudCgnY2FwdHVyZUV2ZW50JywgZXZlbnQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBoaW50KSwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmxhc3RFdmVudElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChicmVhZGNydW1iLCBoaW50KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICBpZiAoIXNjb3BlIHx8ICFjbGllbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgdmFyIF9iID0gKGNsaWVudC5nZXRPcHRpb25zICYmIGNsaWVudC5nZXRPcHRpb25zKCkpIHx8IHt9LCBfYyA9IF9iLmJlZm9yZUJyZWFkY3J1bWIsIGJlZm9yZUJyZWFkY3J1bWIgPSBfYyA9PT0gdm9pZCAwID8gbnVsbCA6IF9jLCBfZCA9IF9iLm1heEJyZWFkY3J1bWJzLCBtYXhCcmVhZGNydW1icyA9IF9kID09PSB2b2lkIDAgPyBERUZBVUxUX0JSRUFEQ1JVTUJTIDogX2Q7XG4gICAgICAgIGlmIChtYXhCcmVhZGNydW1icyA8PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdGltZXN0YW1wID0gZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpO1xuICAgICAgICB2YXIgbWVyZ2VkQnJlYWRjcnVtYiA9IF9fYXNzaWduKHsgdGltZXN0YW1wOiB0aW1lc3RhbXAgfSwgYnJlYWRjcnVtYik7XG4gICAgICAgIHZhciBmaW5hbEJyZWFkY3J1bWIgPSBiZWZvcmVCcmVhZGNydW1iXG4gICAgICAgICAgICA/IGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJlZm9yZUJyZWFkY3J1bWIobWVyZ2VkQnJlYWRjcnVtYiwgaGludCk7IH0pXG4gICAgICAgICAgICA6IG1lcmdlZEJyZWFkY3J1bWI7XG4gICAgICAgIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHNjb3BlLmFkZEJyZWFkY3J1bWIoZmluYWxCcmVhZGNydW1iLCBNYXRoLm1pbihtYXhCcmVhZGNydW1icywgTUFYX0JSRUFEQ1JVTUJTKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0VXNlcih1c2VyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRUYWdzID0gZnVuY3Rpb24gKHRhZ3MpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRUYWdzKHRhZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnNldEV4dHJhcyA9IGZ1bmN0aW9uIChleHRyYXMpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRFeHRyYXMoZXh0cmFzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgICAgIGlmIChzY29wZSlcbiAgICAgICAgICAgIHNjb3BlLnNldFRhZyhrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRFeHRyYSA9IGZ1bmN0aW9uIChrZXksIGV4dHJhKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmEoa2V5LCBleHRyYSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgSHViLnByb3RvdHlwZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNvbmZpZ3VyZVNjb3BlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICBpZiAoc2NvcGUgJiYgY2xpZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzY29wZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9sZEh1YiA9IG1ha2VNYWluKHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBtYWtlTWFpbihvbGRIdWIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb24gPSBmdW5jdGlvbiAoaW50ZWdyYXRpb24pIHtcbiAgICAgICAgdmFyIGNsaWVudCA9IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGlmICghY2xpZW50KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldEludGVncmF0aW9uKGludGVncmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkNhbm5vdCByZXRyaWV2ZSBpbnRlZ3JhdGlvbiBcIiArIGludGVncmF0aW9uLmlkICsgXCIgZnJvbSB0aGUgY3VycmVudCBIdWJcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWxsRXh0ZW5zaW9uTWV0aG9kKCdzdGFydFNwYW4nLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zdGFydFRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgnc3RhcnRUcmFuc2FjdGlvbicsIGNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUudHJhY2VIZWFkZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgndHJhY2VIZWFkZXJzJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuY2FwdHVyZVNlc3Npb24gPSBmdW5jdGlvbiAoZW5kU2Vzc2lvbikge1xuICAgICAgICBpZiAoZW5kU2Vzc2lvbiA9PT0gdm9pZCAwKSB7IGVuZFNlc3Npb24gPSBmYWxzZTsgfVxuICAgICAgICAvLyBib3RoIHNlbmQgdGhlIHVwZGF0ZSBhbmQgcHVsbCB0aGUgc2Vzc2lvbiBmcm9tIHRoZSBzY29wZVxuICAgICAgICBpZiAoZW5kU2Vzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5kU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9ubHkgc2VuZCB0aGUgdXBkYXRlXG4gICAgICAgIHRoaXMuX3NlbmRTZXNzaW9uVXBkYXRlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgKF9jID0gKF9iID0gKF9hID0gdGhpcy5nZXRTdGFja1RvcCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2NvcGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXRTZXNzaW9uKCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jbG9zZSgpO1xuICAgICAgICB0aGlzLl9zZW5kU2Vzc2lvblVwZGF0ZSgpO1xuICAgICAgICAvLyB0aGUgc2Vzc2lvbiBpcyBvdmVyOyB0YWtlIGl0IG9mZiBvZiB0aGUgc2NvcGVcbiAgICAgICAgKF9lID0gKF9kID0gdGhpcy5nZXRTdGFja1RvcCgpKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc2NvcGUpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5zZXRTZXNzaW9uKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc3RhcnRTZXNzaW9uID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5nZXRTdGFja1RvcCgpLCBzY29wZSA9IF9hLnNjb3BlLCBjbGllbnQgPSBfYS5jbGllbnQ7XG4gICAgICAgIHZhciBfYiA9IChjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKSkgfHwge30sIHJlbGVhc2UgPSBfYi5yZWxlYXNlLCBlbnZpcm9ubWVudCA9IF9iLmVudmlyb25tZW50O1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uKF9fYXNzaWduKF9fYXNzaWduKHsgcmVsZWFzZTogcmVsZWFzZSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCB9LCAoc2NvcGUgJiYgeyB1c2VyOiBzY29wZS5nZXRVc2VyKCkgfSkpLCBjb250ZXh0KSk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgLy8gRW5kIGV4aXN0aW5nIHNlc3Npb24gaWYgdGhlcmUncyBvbmVcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2Vzc2lvbiA9IHNjb3BlLmdldFNlc3Npb24gJiYgc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXNzaW9uICYmIGN1cnJlbnRTZXNzaW9uLnN0YXR1cyA9PT0gU2Vzc2lvblN0YXR1cy5Paykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZXNzaW9uLnVwZGF0ZSh7IHN0YXR1czogU2Vzc2lvblN0YXR1cy5FeGl0ZWQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVuZFNlc3Npb24oKTtcbiAgICAgICAgICAgIC8vIEFmdGVyd2FyZHMgd2Ugc2V0IHRoZSBuZXcgc2Vzc2lvbiBvbiB0aGUgc2NvcGVcbiAgICAgICAgICAgIHNjb3BlLnNldFNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kcyB0aGUgY3VycmVudCBTZXNzaW9uIG9uIHRoZSBzY29wZVxuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuX3NlbmRTZXNzaW9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFN0YWNrVG9wKCksIHNjb3BlID0gX2Euc2NvcGUsIGNsaWVudCA9IF9hLmNsaWVudDtcbiAgICAgICAgaWYgKCFzY29wZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHNlc3Npb24gPSBzY29wZS5nZXRTZXNzaW9uICYmIHNjb3BlLmdldFNlc3Npb24oKTtcbiAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChjbGllbnQgJiYgY2xpZW50LmNhcHR1cmVTZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LmNhcHR1cmVTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gdG8gY2FsbCBhIG1ldGhvZCBvbiB0aGUgdG9wIGNsaWVudCBpZiBpdCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWV0aG9kIFRoZSBtZXRob2QgdG8gY2FsbCBvbiB0aGUgY2xpZW50LlxuICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBjbGllbnQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBIdWIucHJvdG90eXBlLl9pbnZva2VDbGllbnQgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9iID0gdGhpcy5nZXRTdGFja1RvcCgpLCBzY29wZSA9IF9iLnNjb3BlLCBjbGllbnQgPSBfYi5jbGllbnQ7XG4gICAgICAgIGlmIChjbGllbnQgJiYgY2xpZW50W21ldGhvZF0pIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIChfYSA9IGNsaWVudClbbWV0aG9kXS5hcHBseShfYSwgX19zcHJlYWQoYXJncywgW3Njb3BlXSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxscyBnbG9iYWwgZXh0ZW5zaW9uIG1ldGhvZCBhbmQgYmluZGluZyBjdXJyZW50IGluc3RhbmNlIHRvIHRoZSBmdW5jdGlvbiBjYWxsXG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZSBGdW5jdGlvbiBsYWNrcyBlbmRpbmcgcmV0dXJuIHN0YXRlbWVudCBhbmQgcmV0dXJuIHR5cGUgZG9lcyBub3QgaW5jbHVkZSAndW5kZWZpbmVkJy4gdHMoMjM2NilcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEh1Yi5wcm90b3R5cGUuX2NhbGxFeHRlbnNpb25NZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXJyaWVyID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICAgICAgdmFyIHNlbnRyeSA9IGNhcnJpZXIuX19TRU5UUllfXztcbiAgICAgICAgaWYgKHNlbnRyeSAmJiBzZW50cnkuZXh0ZW5zaW9ucyAmJiB0eXBlb2Ygc2VudHJ5LmV4dGVuc2lvbnNbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHNlbnRyeS5leHRlbnNpb25zW21ldGhvZF0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLndhcm4oXCJFeHRlbnNpb24gbWV0aG9kIFwiICsgbWV0aG9kICsgXCIgY291bGRuJ3QgYmUgZm91bmQsIGRvaW5nIG5vdGhpbmcuXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIEh1Yjtcbn0oKSk7XG5leHBvcnQgeyBIdWIgfTtcbi8qKiBSZXR1cm5zIHRoZSBnbG9iYWwgc2hpbSByZWdpc3RyeS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYWluQ2FycmllcigpIHtcbiAgICB2YXIgY2FycmllciA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7XG4gICAgICAgIGV4dGVuc2lvbnM6IHt9LFxuICAgICAgICBodWI6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHJldHVybiBjYXJyaWVyO1xufVxuLyoqXG4gKiBSZXBsYWNlcyB0aGUgY3VycmVudCBtYWluIGh1YiB3aXRoIHRoZSBwYXNzZWQgb25lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XG4gKlxuICogQHJldHVybnMgVGhlIG9sZCByZXBsYWNlZCBodWJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNYWluKGh1Yikge1xuICAgIHZhciByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gICAgdmFyIG9sZEh1YiA9IGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgICBzZXRIdWJPbkNhcnJpZXIocmVnaXN0cnksIGh1Yik7XG4gICAgcmV0dXJuIG9sZEh1Yjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGVmYXVsdCBodWIgaW5zdGFuY2UuXG4gKlxuICogSWYgYSBodWIgaXMgYWxyZWFkeSByZWdpc3RlcmVkIGluIHRoZSBnbG9iYWwgY2FycmllciBidXQgdGhpcyBtb2R1bGVcbiAqIGNvbnRhaW5zIGEgbW9yZSByZWNlbnQgdmVyc2lvbiwgaXQgcmVwbGFjZXMgdGhlIHJlZ2lzdGVyZWQgdmVyc2lvbi5cbiAqIE90aGVyd2lzZSwgdGhlIGN1cnJlbnRseSByZWdpc3RlcmVkIGh1YiB3aWxsIGJlIHJldHVybmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudEh1YigpIHtcbiAgICAvLyBHZXQgbWFpbiBjYXJyaWVyIChnbG9iYWwgZm9yIGV2ZXJ5IGVudmlyb25tZW50KVxuICAgIHZhciByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gICAgLy8gSWYgdGhlcmUncyBubyBodWIsIG9yIGl0cyBhbiBvbGQgQVBJLCBhc3NpZ24gYSBuZXcgb25lXG4gICAgaWYgKCFoYXNIdWJPbkNhcnJpZXIocmVnaXN0cnkpIHx8IGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KS5pc09sZGVyVGhhbihBUElfVkVSU0lPTikpIHtcbiAgICAgICAgc2V0SHViT25DYXJyaWVyKHJlZ2lzdHJ5LCBuZXcgSHViKCkpO1xuICAgIH1cbiAgICAvLyBQcmVmZXIgZG9tYWlucyBvdmVyIGdsb2JhbCBpZiB0aGV5IGFyZSB0aGVyZSAoYXBwbGljYWJsZSBvbmx5IHRvIE5vZGUgZW52aXJvbm1lbnQpXG4gICAgaWYgKGlzTm9kZUVudigpKSB7XG4gICAgICAgIHJldHVybiBnZXRIdWJGcm9tQWN0aXZlRG9tYWluKHJlZ2lzdHJ5KTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSBkb21haW4sIGlmIG9uZSBleGlzdHNcbiAqIEBkZXByZWNhdGVkIE5vIGxvbmdlciB1c2VkOyByZW1vdmUgaW4gdjdcbiAqIEByZXR1cm5zIFRoZSBkb21haW4sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBubyBhY3RpdmUgZG9tYWluXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZURvbWFpbigpIHtcbiAgICBsb2dnZXIud2FybignRnVuY3Rpb24gYGdldEFjdGl2ZURvbWFpbmAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uJyk7XG4gICAgdmFyIHNlbnRyeSA9IGdldE1haW5DYXJyaWVyKCkuX19TRU5UUllfXztcbiAgICByZXR1cm4gc2VudHJ5ICYmIHNlbnRyeS5leHRlbnNpb25zICYmIHNlbnRyeS5leHRlbnNpb25zLmRvbWFpbiAmJiBzZW50cnkuZXh0ZW5zaW9ucy5kb21haW4uYWN0aXZlO1xufVxuLyoqXG4gKiBUcnkgdG8gcmVhZCB0aGUgaHViIGZyb20gYW4gYWN0aXZlIGRvbWFpbiwgYW5kIGZhbGxiYWNrIHRvIHRoZSByZWdpc3RyeSBpZiBvbmUgZG9lc24ndCBleGlzdFxuICogQHJldHVybnMgZGlzY292ZXJlZCBodWJcbiAqL1xuZnVuY3Rpb24gZ2V0SHViRnJvbUFjdGl2ZURvbWFpbihyZWdpc3RyeSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBhY3RpdmVEb21haW4gPSAoX2MgPSAoX2IgPSAoX2EgPSBnZXRNYWluQ2FycmllcigpLl9fU0VOVFJZX18pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZG9tYWluKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYWN0aXZlO1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGFjdGl2ZSBkb21haW4sIGp1c3QgcmV0dXJuIGdsb2JhbCBodWJcbiAgICAgICAgaWYgKCFhY3RpdmVEb21haW4pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBodWIgb24gY3VycmVudCBkb21haW4sIG9yIGl0J3MgYW4gb2xkIEFQSSwgYXNzaWduIGEgbmV3IG9uZVxuICAgICAgICBpZiAoIWhhc0h1Yk9uQ2FycmllcihhY3RpdmVEb21haW4pIHx8IGdldEh1YkZyb21DYXJyaWVyKGFjdGl2ZURvbWFpbikuaXNPbGRlclRoYW4oQVBJX1ZFUlNJT04pKSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnlIdWJUb3BTdGFjayA9IGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KS5nZXRTdGFja1RvcCgpO1xuICAgICAgICAgICAgc2V0SHViT25DYXJyaWVyKGFjdGl2ZURvbWFpbiwgbmV3IEh1YihyZWdpc3RyeUh1YlRvcFN0YWNrLmNsaWVudCwgU2NvcGUuY2xvbmUocmVnaXN0cnlIdWJUb3BTdGFjay5zY29wZSkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gaHViIHRoYXQgbGl2ZXMgb24gYSBkb21haW5cbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKGFjdGl2ZURvbWFpbik7XG4gICAgfVxuICAgIGNhdGNoIChfT28pIHtcbiAgICAgICAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICAgICAgICByZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyB3aWxsIHRlbGwgd2hldGhlciBhIGNhcnJpZXIgaGFzIGEgaHViIG9uIGl0IG9yIG5vdFxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGhhc0h1Yk9uQ2FycmllcihjYXJyaWVyKSB7XG4gICAgcmV0dXJuICEhKGNhcnJpZXIgJiYgY2Fycmllci5fX1NFTlRSWV9fICYmIGNhcnJpZXIuX19TRU5UUllfXy5odWIpO1xufVxuLyoqXG4gKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IHtAbGluayBIdWJ9IGFuZCBhZGQgdG8gdGhlIHBhc3NlZCBvYmplY3Qgb25cbiAqIF9fU0VOVFJZX18uaHViLlxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIdWJGcm9tQ2FycmllcihjYXJyaWVyKSB7XG4gICAgaWYgKGNhcnJpZXIgJiYgY2Fycmllci5fX1NFTlRSWV9fICYmIGNhcnJpZXIuX19TRU5UUllfXy5odWIpXG4gICAgICAgIHJldHVybiBjYXJyaWVyLl9fU0VOVFJZX18uaHViO1xuICAgIGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18uaHViID0gbmV3IEh1YigpO1xuICAgIHJldHVybiBjYXJyaWVyLl9fU0VOVFJZX18uaHViO1xufVxuLyoqXG4gKiBUaGlzIHdpbGwgc2V0IHBhc3NlZCB7QGxpbmsgSHVifSBvbiB0aGUgcGFzc2VkIG9iamVjdCdzIF9fU0VOVFJZX18uaHViIGF0dHJpYnV0ZVxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKiBAcGFyYW0gaHViIEh1YlxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgc3VjY2VzcyBvciBmYWlsdXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIdWJPbkNhcnJpZXIoY2FycmllciwgaHViKSB7XG4gICAgaWYgKCFjYXJyaWVyKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHt9O1xuICAgIGNhcnJpZXIuX19TRU5UUllfXy5odWIgPSBodWI7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odWIuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG4vKipcbiAqIFRoaXMgY2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgY3VycmVudCBodWIuXG4gKiBAcGFyYW0gbWV0aG9kIGZ1bmN0aW9uIHRvIGNhbGwgb24gaHViLlxuICogQHBhcmFtIGFyZ3MgdG8gcGFzcyB0byBmdW5jdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNhbGxPbkh1YihtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgaWYgKGh1YiAmJiBodWJbbWV0aG9kXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gaHViW21ldGhvZF0uYXBwbHkoaHViLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGh1YiBkZWZpbmVkIG9yIFwiICsgbWV0aG9kICsgXCIgd2FzIG5vdCBmb3VuZCBvbiB0aGUgaHViLCBwbGVhc2Ugb3BlbiBhIGJ1ZyByZXBvcnQuXCIpO1xufVxuLyoqXG4gKiBDYXB0dXJlcyBhbiBleGNlcHRpb24gZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gZXhjZXB0aW9uIEFuIGV4Y2VwdGlvbi1saWtlIG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgY2FwdHVyZUNvbnRleHQpIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VudHJ5IHN5bnRoZXRpY0V4Y2VwdGlvbicpO1xuICAgIH1cbiAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGxPbkh1YignY2FwdHVyZUV4Y2VwdGlvbicsIGV4Y2VwdGlvbiwge1xuICAgICAgICBjYXB0dXJlQ29udGV4dDogY2FwdHVyZUNvbnRleHQsXG4gICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBleGNlcHRpb24sXG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbjogc3ludGhldGljRXhjZXB0aW9uLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDYXB0dXJlcyBhIG1lc3NhZ2UgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEBwYXJhbSBsZXZlbCBEZWZpbmUgdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlLlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBldmVudElkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSwgY2FwdHVyZUNvbnRleHQpIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBzeW50aGV0aWNFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHByb3ZpZGUgZXhwbGljaXQgc2NvcGVzIHVwZ3JhZGUsIHdpdGhvdXQgY2hhbmdpbmcgdGhlIG9yaWdpbmFsXG4gICAgLy8gYXJpdHkgb2YgdGhlIGBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBsZXZlbClgIG1ldGhvZC5cbiAgICB2YXIgbGV2ZWwgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdzdHJpbmcnID8gY2FwdHVyZUNvbnRleHQgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGNvbnRleHQgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgIT09ICdzdHJpbmcnID8geyBjYXB0dXJlQ29udGV4dDogY2FwdHVyZUNvbnRleHQgfSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlTWVzc2FnZScsIG1lc3NhZ2UsIGxldmVsLCBfX2Fzc2lnbih7IG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbiB9LCBjb250ZXh0KSk7XG59XG4vKipcbiAqIENhcHR1cmVzIGEgbWFudWFsbHkgY3JlYXRlZCBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCB0byBTZW50cnkuXG4gKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXZlbnQnLCBldmVudCk7XG59XG4vKipcbiAqIENhbGxiYWNrIHRvIHNldCBjb250ZXh0IGluZm9ybWF0aW9uIG9udG8gdGhlIHNjb3BlLlxuICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTY29wZShjYWxsYmFjaykge1xuICAgIGNhbGxPbkh1YignY29uZmlndXJlU2NvcGUnLCBjYWxsYmFjayk7XG59XG4vKipcbiAqIFJlY29yZHMgYSBuZXcgYnJlYWRjcnVtYiB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIGZ1dHVyZSBldmVudHMuXG4gKlxuICogQnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCB0byBzdWJzZXF1ZW50IGV2ZW50cyB0byBwcm92aWRlIG1vcmUgY29udGV4dCBvblxuICogdXNlcidzIGFjdGlvbnMgcHJpb3IgdG8gYW4gZXJyb3Igb3IgY3Jhc2guXG4gKlxuICogQHBhcmFtIGJyZWFkY3J1bWIgVGhlIGJyZWFkY3J1bWIgdG8gcmVjb3JkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQnJlYWRjcnVtYihicmVhZGNydW1iKSB7XG4gICAgY2FsbE9uSHViKCdhZGRCcmVhZGNydW1iJywgYnJlYWRjcnVtYik7XG59XG4vKipcbiAqIFNldHMgY29udGV4dCBkYXRhIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gKiBAcGFyYW0gbmFtZSBvZiB0aGUgY29udGV4dFxuICogQHBhcmFtIGNvbnRleHQgQW55IGtpbmQgb2YgZGF0YS4gVGhpcyBkYXRhIHdpbGwgYmUgbm9ybWFsaXplZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpIHtcbiAgICBjYWxsT25IdWIoJ3NldENvbnRleHQnLCBuYW1lLCBjb250ZXh0KTtcbn1cbi8qKlxuICogU2V0IGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgbWVyZ2VkIHNlbnQgYXMgZXh0cmEgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSBleHRyYXMgRXh0cmFzIG9iamVjdCB0byBtZXJnZSBpbnRvIGN1cnJlbnQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEV4dHJhcyhleHRyYXMpIHtcbiAgICBjYWxsT25IdWIoJ3NldEV4dHJhcycsIGV4dHJhcyk7XG59XG4vKipcbiAqIFNldCBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIG1lcmdlZCBzZW50IGFzIHRhZ3MgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSB0YWdzIFRhZ3MgY29udGV4dCBvYmplY3QgdG8gbWVyZ2UgaW50byBjdXJyZW50IGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUYWdzKHRhZ3MpIHtcbiAgICBjYWxsT25IdWIoJ3NldFRhZ3MnLCB0YWdzKTtcbn1cbi8qKlxuICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyBleHRyYSBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGtleSBTdHJpbmcgb2YgZXh0cmFcbiAqIEBwYXJhbSBleHRyYSBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWxpemVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXh0cmEoa2V5LCBleHRyYSkge1xuICAgIGNhbGxPbkh1Yignc2V0RXh0cmEnLCBrZXksIGV4dHJhKTtcbn1cbi8qKlxuICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKlxuICogQ2FuIGFsc28gYmUgdXNlZCB0byB1bnNldCBhIHRhZywgYnkgcGFzc2luZyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcGFyYW0ga2V5IFN0cmluZyBrZXkgb2YgdGFnXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgb2YgdGFnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUYWcoa2V5LCB2YWx1ZSkge1xuICAgIGNhbGxPbkh1Yignc2V0VGFnJywga2V5LCB2YWx1ZSk7XG59XG4vKipcbiAqIFVwZGF0ZXMgdXNlciBjb250ZXh0IGluZm9ybWF0aW9uIGZvciBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB1c2VyIFVzZXIgY29udGV4dCBvYmplY3QgdG8gYmUgc2V0IGluIHRoZSBjdXJyZW50IGNvbnRleHQuIFBhc3MgYG51bGxgIHRvIHVuc2V0IHRoZSB1c2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VXNlcih1c2VyKSB7XG4gICAgY2FsbE9uSHViKCdzZXRVc2VyJywgdXNlcik7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc2NvcGUgd2l0aCBhbmQgZXhlY3V0ZXMgdGhlIGdpdmVuIG9wZXJhdGlvbiB3aXRoaW4uXG4gKiBUaGUgc2NvcGUgaXMgYXV0b21hdGljYWxseSByZW1vdmVkIG9uY2UgdGhlIG9wZXJhdGlvblxuICogZmluaXNoZXMgb3IgdGhyb3dzLlxuICpcbiAqIFRoaXMgaXMgZXNzZW50aWFsbHkgYSBjb252ZW5pZW5jZSBmdW5jdGlvbiBmb3I6XG4gKlxuICogICAgIHB1c2hTY29wZSgpO1xuICogICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgcG9wU2NvcGUoKTtcbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGVuY2xvc2VkIGludG8gcHVzaC9wb3BTY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTY29wZShjYWxsYmFjaykge1xuICAgIGNhbGxPbkh1Yignd2l0aFNjb3BlJywgY2FsbGJhY2spO1xufVxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIG9uIHRoZSBsYXRlc3QgY2xpZW50LiBVc2UgdGhpcyB3aXRoIGNhdXRpb24sIGl0J3MgbWVhbnQgYXNcbiAqIGluIFwiaW50ZXJuYWxcIiBoZWxwZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBleHBvc2UgZXZlcnkgcG9zc2libGUgZnVuY3Rpb24gaW5cbiAqIHRoZSBzaGltLiBJdCBpcyBub3QgZ3VhcmFudGVlZCB0aGF0IHRoZSBjbGllbnQgYWN0dWFsbHkgaW1wbGVtZW50cyB0aGVcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCB0byBjYWxsIG9uIHRoZSBjbGllbnQvY2xpZW50LlxuICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNsaWVudC9mb250ZW5kLlxuICogQGhpZGRlblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIF9jYWxsT25DbGllbnQobWV0aG9kKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBjYWxsT25IdWIuYXBwbHkodm9pZCAwLCBfX3NwcmVhZChbJ19pbnZva2VDbGllbnQnLCBtZXRob2RdLCBhcmdzKSk7XG59XG4vKipcbiAqIFN0YXJ0cyBhIG5ldyBgVHJhbnNhY3Rpb25gIGFuZCByZXR1cm5zIGl0LiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCB0byBtYW51YWwgdHJhY2luZyBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQSB0cmVlIHN0cnVjdHVyZSBjYW4gYmUgYnVpbHQgYnkgYWRkaW5nIGNoaWxkIHNwYW5zIHRvIHRoZSB0cmFuc2FjdGlvbiwgYW5kIGNoaWxkIHNwYW5zIHRvIG90aGVyIHNwYW5zLiBUbyBzdGFydCBhXG4gKiBuZXcgY2hpbGQgc3BhbiB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uIG9yIGFueSBzcGFuLCBjYWxsIHRoZSByZXNwZWN0aXZlIGAuc3RhcnRDaGlsZCgpYCBtZXRob2QuXG4gKlxuICogRXZlcnkgY2hpbGQgc3BhbiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQsIG90aGVyd2lzZSB0aGUgdW5maW5pc2hlZCBzcGFucyBhcmUgZGlzY2FyZGVkLlxuICpcbiAqIFRoZSB0cmFuc2FjdGlvbiBtdXN0IGJlIGZpbmlzaGVkIHdpdGggYSBjYWxsIHRvIGl0cyBgLmZpbmlzaCgpYCBtZXRob2QsIGF0IHdoaWNoIHBvaW50IHRoZSB0cmFuc2FjdGlvbiB3aXRoIGFsbCBpdHNcbiAqIGZpbmlzaGVkIGNoaWxkIHNwYW5zIHdpbGwgYmUgc2VudCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGNvbnRleHQgUHJvcGVydGllcyBvZiB0aGUgbmV3IGBUcmFuc2FjdGlvbmAuXG4gKiBAcGFyYW0gY3VzdG9tU2FtcGxpbmdDb250ZXh0IEluZm9ybWF0aW9uIGdpdmVuIHRvIHRoZSB0cmFuc2FjdGlvbiBzYW1wbGluZyBmdW5jdGlvbiAoYWxvbmcgd2l0aCBjb250ZXh0LWRlcGVuZGVudFxuICogZGVmYXVsdCB2YWx1ZXMpLiBTZWUge0BsaW5rIE9wdGlvbnMudHJhY2VzU2FtcGxlcn0uXG4gKlxuICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIHdoaWNoIHdhcyBqdXN0IHN0YXJ0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhbnNhY3Rpb24oY29udGV4dCwgY3VzdG9tU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgcmV0dXJuIGNhbGxPbkh1Yignc3RhcnRUcmFuc2FjdGlvbicsIF9fYXNzaWduKHt9LCBjb250ZXh0KSwgY3VzdG9tU2FtcGxpbmdDb250ZXh0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IGxvYWRpbmdBY3Rpb24sIGVycm9yQWN0aW9uLCBzdW1tYXJ5TG9hZGVkQWN0aW9uIH0gZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCAqIGFzIHBlcmZTdmMgZnJvbSAnLi9wZXJmb3JtYW5jZS5jbGllbnQnO1xyXG5pbXBvcnQge2NhcHR1cmVNZXNzYWdlfSBmcm9tICdAc2VudHJ5L3Z1ZSdcclxuXHJcbmV4cG9ydCBjb25zdCBzdW1tYXJ5ID0gYXN5bmMgKGRpc3BhdGNoKSA9PiB7XHJcbiAgZGlzcGF0Y2gobG9hZGluZ0FjdGlvbigpKTtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc3VtbWFyeSA9IGF3YWl0IHBlcmZTdmMuc3VtbWFyeSgpO1xyXG4gICAgZGlzcGF0Y2goc3VtbWFyeUxvYWRlZEFjdGlvbihzdW1tYXJ5KSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjYXB0dXJlTWVzc2FnZShlcnIpO1xyXG4gICAgZGlzcGF0Y2goZXJyb3JBY3Rpb24oJ2dhZ2FsIG1lbXVhdCBpbmZvcm1hc2kga2luZXJqYScpKTtcclxuICB9XHJcbn07XHJcbiIsImltcG9ydCB7IGh0dHBDbGllbnQgYXMgY2xpZW50IH0gZnJvbSAnLi4vbGliL2h0dHAtY2xpZW50JztcclxuXHJcbmltcG9ydCB7IFNFUlZJQ0VfQkFTRVVSTCB9IGZyb20gJy4vY29uZmlnJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdW1tYXJ5KCkge1xyXG4gIHJldHVybiBjbGllbnQuZ2V0KGAke1NFUlZJQ0VfQkFTRVVSTH0vc3VtbWFyeWApO1xyXG59XHJcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJleHBvcnQgdmFyIFNES19WRVJTSU9OID0gJzYuMS4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIiwidmFyIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZztcbi8qKiBQYXRjaCB0b1N0cmluZyBjYWxscyB0byByZXR1cm4gcHJvcGVyIG5hbWUgZm9yIHdyYXBwZWQgZnVuY3Rpb25zICovXG52YXIgRnVuY3Rpb25Ub1N0cmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGdW5jdGlvblRvU3RyaW5nKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEZ1bmN0aW9uVG9TdHJpbmcuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRnVuY3Rpb25Ub1N0cmluZy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9fc2VudHJ5X29yaWdpbmFsX18gfHwgdGhpcztcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZ1bmN0aW9uVG9TdHJpbmcuaWQgPSAnRnVuY3Rpb25Ub1N0cmluZyc7XG4gICAgcmV0dXJuIEZ1bmN0aW9uVG9TdHJpbmc7XG59KCkpO1xuZXhwb3J0IHsgRnVuY3Rpb25Ub1N0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb250b3N0cmluZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGdldEV2ZW50RGVzY3JpcHRpb24sIGlzTWF0Y2hpbmdQYXR0ZXJuLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8vIFwiU2NyaXB0IGVycm9yLlwiIGlzIGhhcmQgY29kZWQgaW50byBicm93c2VycyBmb3IgZXJyb3JzIHRoYXQgaXQgY2FuJ3QgcmVhZC5cbi8vIHRoaXMgaXMgdGhlIHJlc3VsdCBvZiBhIHNjcmlwdCBiZWluZyBwdWxsZWQgaW4gZnJvbSBhbiBleHRlcm5hbCBkb21haW4gYW5kIENPUlMuXG52YXIgREVGQVVMVF9JR05PUkVfRVJST1JTID0gWy9eU2NyaXB0IGVycm9yXFwuPyQvLCAvXkphdmFzY3JpcHQgZXJyb3I6IFNjcmlwdCBlcnJvclxcLj8gb24gbGluZSAwJC9dO1xuLyoqIEluYm91bmQgZmlsdGVycyBjb25maWd1cmFibGUgYnkgdGhlIHVzZXIgKi9cbnZhciBJbmJvdW5kRmlsdGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmJvdW5kRmlsdGVycyhfb3B0aW9ucykge1xuICAgICAgICBpZiAoX29wdGlvbnMgPT09IHZvaWQgMCkgeyBfb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBJbmJvdW5kRmlsdGVycy5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICAgICAgICBpZiAoIWh1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZWxmID0gaHViLmdldEludGVncmF0aW9uKEluYm91bmRGaWx0ZXJzKTtcbiAgICAgICAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudCA9IGh1Yi5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50T3B0aW9ucyA9IGNsaWVudCA/IGNsaWVudC5nZXRPcHRpb25zKCkgOiB7fTtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHNlbGYuX21lcmdlT3B0aW9ucyhjbGllbnRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fc2hvdWxkRHJvcEV2ZW50KGV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9zaG91bGREcm9wRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU2VudHJ5RXJyb3IoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIGludGVybmFsIFNlbnRyeSBFcnJvci5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNJZ25vcmVkRXJyb3IoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgYGlnbm9yZUVycm9yc2Agb3B0aW9uLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0RlbmllZFVybChldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBgZGVueVVybHNgIG9wdGlvbi5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSArIFwiLlxcblVybDogXCIgKyB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc0FsbG93ZWRVcmwoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIG5vdCBiZWluZyBtYXRjaGVkIGJ5IGBhbGxvd1VybHNgIG9wdGlvbi5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSArIFwiLlxcblVybDogXCIgKyB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc1NlbnRyeUVycm9yID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVJbnRlcm5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKChldmVudCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiZcbiAgICAgICAgICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlID09PSAnU2VudHJ5RXJyb3InKSB8fFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNJZ25vcmVkRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUVycm9ycyB8fCAhb3B0aW9ucy5pZ25vcmVFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyhldmVudCkuc29tZShmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gTm90IHN1cmUgd2h5IFR5cGVTY3JpcHQgY29tcGxhaW5zIGhlcmUuLi5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmlnbm9yZUVycm9ycy5zb21lKGZ1bmN0aW9uIChwYXR0ZXJuKSB7IHJldHVybiBpc01hdGNoaW5nUGF0dGVybihtZXNzYWdlLCBwYXR0ZXJuKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc0RlbmllZFVybCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGVueVVybHMgfHwgIW9wdGlvbnMuZGVueVVybHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuICF1cmwgPyBmYWxzZSA6IG9wdGlvbnMuZGVueVVybHMuc29tZShmdW5jdGlvbiAocGF0dGVybikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4odXJsLCBwYXR0ZXJuKTsgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzQWxsb3dlZFVybCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dVcmxzIHx8ICFvcHRpb25zLmFsbG93VXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCk7XG4gICAgICAgIHJldHVybiAhdXJsID8gdHJ1ZSA6IG9wdGlvbnMuYWxsb3dVcmxzLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHsgcmV0dXJuIGlzTWF0Y2hpbmdQYXR0ZXJuKHVybCwgcGF0dGVybik7IH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9tZXJnZU9wdGlvbnMgPSBmdW5jdGlvbiAoY2xpZW50T3B0aW9ucykge1xuICAgICAgICBpZiAoY2xpZW50T3B0aW9ucyA9PT0gdm9pZCAwKSB7IGNsaWVudE9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dVcmxzOiBfX3NwcmVhZCgodGhpcy5fb3B0aW9ucy53aGl0ZWxpc3RVcmxzIHx8IFtdKSwgKHRoaXMuX29wdGlvbnMuYWxsb3dVcmxzIHx8IFtdKSwgKGNsaWVudE9wdGlvbnMud2hpdGVsaXN0VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmFsbG93VXJscyB8fCBbXSkpLFxuICAgICAgICAgICAgZGVueVVybHM6IF9fc3ByZWFkKCh0aGlzLl9vcHRpb25zLmJsYWNrbGlzdFVybHMgfHwgW10pLCAodGhpcy5fb3B0aW9ucy5kZW55VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmJsYWNrbGlzdFVybHMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy5kZW55VXJscyB8fCBbXSkpLFxuICAgICAgICAgICAgaWdub3JlRXJyb3JzOiBfX3NwcmVhZCgodGhpcy5fb3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCBERUZBVUxUX0lHTk9SRV9FUlJPUlMpLFxuICAgICAgICAgICAgaWdub3JlSW50ZXJuYWw6IHR5cGVvZiB0aGlzLl9vcHRpb25zLmlnbm9yZUludGVybmFsICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuX29wdGlvbnMuaWdub3JlSW50ZXJuYWwgOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBbZXZlbnQubWVzc2FnZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB8fCB7fSwgX2IgPSBfYS50eXBlLCB0eXBlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2IsIF9jID0gX2EudmFsdWUsIHZhbHVlID0gX2MgPT09IHZvaWQgMCA/ICcnIDogX2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIlwiICsgdmFsdWUsIHR5cGUgKyBcIjogXCIgKyB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAob08pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDYW5ub3QgZXh0cmFjdCBtZXNzYWdlIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRFdmVudEZpbHRlclVybCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnN0YWNrdHJhY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVzXzEgPSBldmVudC5zdGFja3RyYWNlLmZyYW1lcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZyYW1lc18xICYmIGZyYW1lc18xW2ZyYW1lc18xLmxlbmd0aCAtIDFdLmZpbGVuYW1lKSB8fCBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZXNfMiA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmcmFtZXNfMiAmJiBmcmFtZXNfMltmcmFtZXNfMi5sZW5ndGggLSAxXS5maWxlbmFtZSkgfHwgbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChvTykge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiQ2Fubm90IGV4dHJhY3QgdXJsIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEluYm91bmRGaWx0ZXJzLmlkID0gJ0luYm91bmRGaWx0ZXJzJztcbiAgICByZXR1cm4gSW5ib3VuZEZpbHRlcnM7XG59KCkpO1xuZXhwb3J0IHsgSW5ib3VuZEZpbHRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluYm91bmRmaWx0ZXJzLmpzLm1hcCIsImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4vbWlzYyc7XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBFcnJvckV2ZW50IG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0Vycm9yRXZlbnR9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0Vycm9yRXZlbnQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IEVycm9yRXZlbnQoJycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIERPTUVycm9yIG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0RPTUVycm9yfS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNET01FcnJvcigpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBDaHJvbWU6IFZNODk6MSBVbmNhdWdodCBUeXBlRXJyb3I6IEZhaWxlZCB0byBjb25zdHJ1Y3QgJ0RPTUVycm9yJzpcbiAgICAgICAgLy8gMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlxuICAgICAgICAvLyBAdHMtaWdub3JlIEl0IHJlYWxseSBuZWVkcyAxIGFyZ3VtZW50LCBub3QgMC5cbiAgICAgICAgbmV3IERPTUVycm9yKCcnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBET01FeGNlcHRpb24gb2JqZWN0c1xuICoge0BsaW5rIHN1cHBvcnRzRE9NRXhjZXB0aW9ufS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNET01FeGNlcHRpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IERPTUV4Y2VwdGlvbignJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRmV0Y2ggQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNGZXRjaH0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRmV0Y2goKSB7XG4gICAgaWYgKCEoJ2ZldGNoJyBpbiBnZXRHbG9iYWxPYmplY3QoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBuZXcgSGVhZGVycygpO1xuICAgICAgICBuZXcgUmVxdWVzdCgnJyk7XG4gICAgICAgIG5ldyBSZXNwb25zZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogaXNOYXRpdmVGZXRjaCBjaGVja3MgaWYgdGhlIGdpdmVuIGZ1bmN0aW9uIGlzIGEgbmF0aXZlIGltcGxlbWVudGF0aW9uIG9mIGZldGNoKClcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIGlzTmF0aXZlRmV0Y2goZnVuYykge1xuICAgIHJldHVybiBmdW5jICYmIC9eZnVuY3Rpb24gZmV0Y2hcXChcXClcXHMrXFx7XFxzK1xcW25hdGl2ZSBjb2RlXFxdXFxzK1xcfSQvLnRlc3QoZnVuYy50b1N0cmluZygpKTtcbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEZldGNoIEFQSSBuYXRpdmVseVxuICoge0BsaW5rIHN1cHBvcnRzTmF0aXZlRmV0Y2h9LlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgYHdpbmRvdy5mZXRjaGAgaXMgbmF0aXZlbHkgaW1wbGVtZW50ZWQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNOYXRpdmVGZXRjaCgpIHtcbiAgICBpZiAoIXN1cHBvcnRzRmV0Y2goKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAvLyBGYXN0IHBhdGggdG8gYXZvaWQgRE9NIEkvT1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBpZiAoaXNOYXRpdmVGZXRjaChnbG9iYWwuZmV0Y2gpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyB3aW5kb3cuZmV0Y2ggaXMgaW1wbGVtZW50ZWQsIGJ1dCBpcyBwb2x5ZmlsbGVkIG9yIGFscmVhZHkgd3JhcHBlZCAoZS5nOiBieSBhIGNocm9tZSBleHRlbnNpb24pXG4gICAgLy8gc28gY3JlYXRlIGEgXCJwdXJlXCIgaWZyYW1lIHRvIHNlZSBpZiB0aGF0IGhhcyBuYXRpdmUgZmV0Y2hcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAoZG9jICYmIHR5cGVvZiBkb2MuY3JlYXRlRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc2FuZGJveCA9IGRvYy5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIHNhbmRib3guaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNhbmRib3gpO1xuICAgICAgICAgICAgaWYgKHNhbmRib3guY29udGVudFdpbmRvdyAmJiBzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNOYXRpdmVGZXRjaChzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQoc2FuZGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBjcmVhdGUgc2FuZGJveCBpZnJhbWUgZm9yIHB1cmUgZmV0Y2ggY2hlY2ssIGJhaWxpbmcgdG8gd2luZG93LmZldGNoOiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBSZXBvcnRpbmdPYnNlcnZlciBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlcG9ydGluZ09ic2VydmVyfS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlcigpIHtcbiAgICByZXR1cm4gJ1JlcG9ydGluZ09ic2VydmVyJyBpbiBnZXRHbG9iYWxPYmplY3QoKTtcbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIFJlZmVycmVyIFBvbGljeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlZmVycmVyUG9saWN5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZWZlcnJlclBvbGljeSgpIHtcbiAgICAvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbiAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXJlZmVycmVyLXBvbGljeVxuICAgIC8vIEl0IGRvZXNuJ3QuIEFuZCBpdCB0aHJvdyBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAgIC8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuICAgIGlmICghc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IFJlcXVlc3QoJ18nLCB7XG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogJ29yaWdpbicsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEhpc3RvcnkgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNIaXN0b3J5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICAgIC8vIE5PVEU6IGluIENocm9tZSBBcHAgZW52aXJvbm1lbnQsIHRvdWNoaW5nIGhpc3RvcnkucHVzaFN0YXRlLCAqZXZlbiBpbnNpZGVcbiAgICAvLyAgICAgICBhIHRyeS9jYXRjaCBibG9jayosIHdpbGwgY2F1c2UgQ2hyb21lIHRvIG91dHB1dCBhbiBlcnJvciB0byBjb25zb2xlLmVycm9yXG4gICAgLy8gYm9ycm93ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFyIGNocm9tZSA9IGdsb2JhbC5jaHJvbWU7XG4gICAgdmFyIGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWUgJiYgY2hyb21lLmFwcCAmJiBjaHJvbWUuYXBwLnJ1bnRpbWU7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICB2YXIgaGFzSGlzdG9yeUFwaSA9ICdoaXN0b3J5JyBpbiBnbG9iYWwgJiYgISFnbG9iYWwuaGlzdG9yeS5wdXNoU3RhdGUgJiYgISFnbG9iYWwuaGlzdG9yeS5yZXBsYWNlU3RhdGU7XG4gICAgcmV0dXJuICFpc0Nocm9tZVBhY2thZ2VkQXBwICYmIGhhc0hpc3RvcnlBcGk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwb3J0cy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzSW5zdGFuY2VPZiwgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4vbWlzYyc7XG5pbXBvcnQgeyBmaWxsIH0gZnJvbSAnLi9vYmplY3QnO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSAnLi9zdGFja3RyYWNlJztcbmltcG9ydCB7IHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNOYXRpdmVGZXRjaCB9IGZyb20gJy4vc3VwcG9ydHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqXG4gKiBJbnN0cnVtZW50IG5hdGl2ZSBBUElzIHRvIGNhbGwgaGFuZGxlcnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYnJlYWRjcnVtYnMsIEFQTSBzcGFucyBldGMuXG4gKiAgLSBDb25zb2xlIEFQSVxuICogIC0gRmV0Y2ggQVBJXG4gKiAgLSBYSFIgQVBJXG4gKiAgLSBIaXN0b3J5IEFQSVxuICogIC0gRE9NIEFQSSAoY2xpY2svdHlwaW5nKVxuICogIC0gRXJyb3IgQVBJXG4gKiAgLSBVbmhhbmRsZWRSZWplY3Rpb24gQVBJXG4gKi9cbnZhciBoYW5kbGVycyA9IHt9O1xudmFyIGluc3RydW1lbnRlZCA9IHt9O1xuLyoqIEluc3RydW1lbnRzIGdpdmVuIEFQSSAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudCh0eXBlKSB7XG4gICAgaWYgKGluc3RydW1lbnRlZFt0eXBlXSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGluc3RydW1lbnRlZFt0eXBlXSA9IHRydWU7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NvbnNvbGUnOlxuICAgICAgICAgICAgaW5zdHJ1bWVudENvbnNvbGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb20nOlxuICAgICAgICAgICAgaW5zdHJ1bWVudERPTSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3hocic6XG4gICAgICAgICAgICBpbnN0cnVtZW50WEhSKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmV0Y2gnOlxuICAgICAgICAgICAgaW5zdHJ1bWVudEZldGNoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICAgICAgICBpbnN0cnVtZW50SGlzdG9yeSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRFcnJvcigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VuaGFuZGxlZHJlamVjdGlvbic6XG4gICAgICAgICAgICBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCd1bmtub3duIGluc3RydW1lbnRhdGlvbiB0eXBlOicsIHR5cGUpO1xuICAgIH1cbn1cbi8qKlxuICogQWRkIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGdpdmVuIHR5cGUgb2YgaW5zdHJ1bWVudGF0aW9uIHRyaWdnZXJzLlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlciB8fCB0eXBlb2YgaGFuZGxlci50eXBlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgaGFuZGxlci5jYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGhhbmRsZXJzW2hhbmRsZXIudHlwZV0gPSBoYW5kbGVyc1toYW5kbGVyLnR5cGVdIHx8IFtdO1xuICAgIGhhbmRsZXJzW2hhbmRsZXIudHlwZV0ucHVzaChoYW5kbGVyLmNhbGxiYWNrKTtcbiAgICBpbnN0cnVtZW50KGhhbmRsZXIudHlwZSk7XG59XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gICAgdmFyIGVfMSwgX2E7XG4gICAgaWYgKCF0eXBlIHx8ICFoYW5kbGVyc1t0eXBlXSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoaGFuZGxlcnNbdHlwZV0gfHwgW10pLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciB3aGlsZSB0cmlnZ2VyaW5nIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyLlxcblR5cGU6IFwiICsgdHlwZSArIFwiXFxuTmFtZTogXCIgKyBnZXRGdW5jdGlvbk5hbWUoaGFuZGxlcikgKyBcIlxcbkVycm9yOiBcIiArIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgIH1cbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudENvbnNvbGUoKSB7XG4gICAgaWYgKCEoJ2NvbnNvbGUnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvcicsICdsb2cnLCAnYXNzZXJ0J10uZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKCEobGV2ZWwgaW4gZ2xvYmFsLmNvbnNvbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmlsbChnbG9iYWwuY29uc29sZSwgbGV2ZWwsIGZ1bmN0aW9uIChvcmlnaW5hbENvbnNvbGVMZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdjb25zb2xlJywgeyBhcmdzOiBhcmdzLCBsZXZlbDogbGV2ZWwgfSk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmYWlscyBmb3Igc29tZSBicm93c2Vycy4gOihcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb25zb2xlTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwob3JpZ2luYWxDb25zb2xlTGV2ZWwsIGdsb2JhbC5jb25zb2xlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudEZldGNoKCkge1xuICAgIGlmICghc3VwcG9ydHNOYXRpdmVGZXRjaCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmlsbChnbG9iYWwsICdmZXRjaCcsIGZ1bmN0aW9uIChvcmlnaW5hbEZldGNoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGFuZGxlckRhdGEgPSB7XG4gICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICBmZXRjaERhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBnZXRGZXRjaE1ldGhvZChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZXRGZXRjaFVybChhcmdzKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnZmV0Y2gnLCBfX2Fzc2lnbih7fSwgaGFuZGxlckRhdGEpKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZldGNoLmFwcGx5KGdsb2JhbCwgYXJncykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2ZldGNoJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhKSwgeyBlbmRUaW1lc3RhbXA6IERhdGUubm93KCksIHJlc3BvbnNlOiByZXNwb25zZSB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdmZXRjaCcsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBoYW5kbGVyRGF0YSksIHsgZW5kVGltZXN0YW1wOiBEYXRlLm5vdygpLCBlcnJvcjogZXJyb3IgfSkpO1xuICAgICAgICAgICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsXG4gICAgICAgICAgICAgICAgLy8gICAgICAgaXQgbWVhbnMgdGhlIHNlbnRyeS5qYXZhc2NyaXB0IFNESyBjYXVnaHQgYW4gZXJyb3IgaW52b2tpbmcgeW91ciBhcHBsaWNhdGlvbiBjb2RlLlxuICAgICAgICAgICAgICAgIC8vICAgICAgIFRoaXMgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyoqIEV4dHJhY3QgYG1ldGhvZGAgZnJvbSBmZXRjaCBjYWxsIGFyZ3VtZW50cyAqL1xuZnVuY3Rpb24gZ2V0RmV0Y2hNZXRob2QoZmV0Y2hBcmdzKSB7XG4gICAgaWYgKGZldGNoQXJncyA9PT0gdm9pZCAwKSB7IGZldGNoQXJncyA9IFtdOyB9XG4gICAgaWYgKCdSZXF1ZXN0JyBpbiBnbG9iYWwgJiYgaXNJbnN0YW5jZU9mKGZldGNoQXJnc1swXSwgUmVxdWVzdCkgJiYgZmV0Y2hBcmdzWzBdLm1ldGhvZCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGZldGNoQXJnc1swXS5tZXRob2QpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmIChmZXRjaEFyZ3NbMV0gJiYgZmV0Y2hBcmdzWzFdLm1ldGhvZCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGZldGNoQXJnc1sxXS5tZXRob2QpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiAnR0VUJztcbn1cbi8qKiBFeHRyYWN0IGB1cmxgIGZyb20gZmV0Y2ggY2FsbCBhcmd1bWVudHMgKi9cbmZ1bmN0aW9uIGdldEZldGNoVXJsKGZldGNoQXJncykge1xuICAgIGlmIChmZXRjaEFyZ3MgPT09IHZvaWQgMCkgeyBmZXRjaEFyZ3MgPSBbXTsgfVxuICAgIGlmICh0eXBlb2YgZmV0Y2hBcmdzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZmV0Y2hBcmdzWzBdO1xuICAgIH1cbiAgICBpZiAoJ1JlcXVlc3QnIGluIGdsb2JhbCAmJiBpc0luc3RhbmNlT2YoZmV0Y2hBcmdzWzBdLCBSZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gZmV0Y2hBcmdzWzBdLnVybDtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhmZXRjaEFyZ3NbMF0pO1xufVxuLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudFhIUigpIHtcbiAgICBpZiAoISgnWE1MSHR0cFJlcXVlc3QnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQb29yIG1hbidzIGltcGxlbWVudGF0aW9uIG9mIEVTNiBgTWFwYCwgdHJhY2tpbmcgYW5kIGtlZXBpbmcgaW4gc3luYyBrZXkgYW5kIHZhbHVlIHNlcGFyYXRlbHkuXG4gICAgdmFyIHJlcXVlc3RLZXlzID0gW107XG4gICAgdmFyIHJlcXVlc3RWYWx1ZXMgPSBbXTtcbiAgICB2YXIgeGhycHJvdG8gPSBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGU7XG4gICAgZmlsbCh4aHJwcm90bywgJ29wZW4nLCBmdW5jdGlvbiAob3JpZ2luYWxPcGVuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHVybCA9IGFyZ3NbMV07XG4gICAgICAgICAgICB4aHIuX19zZW50cnlfeGhyX18gPSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIG1ldGhvZDogaXNTdHJpbmcoYXJnc1swXSkgPyBhcmdzWzBdLnRvVXBwZXJDYXNlKCkgOiBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIHVybDogYXJnc1sxXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBpZiBTZW50cnkga2V5IGFwcGVhcnMgaW4gVVJMLCBkb24ndCBjYXB0dXJlIGl0IGFzIGEgcmVxdWVzdFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHVybCkgJiYgeGhyLl9fc2VudHJ5X3hocl9fLm1ldGhvZCA9PT0gJ1BPU1QnICYmIHVybC5tYXRjaCgvc2VudHJ5X2tleS8pKSB7XG4gICAgICAgICAgICAgICAgeGhyLl9fc2VudHJ5X293bl9yZXF1ZXN0X18gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b3VjaGluZyBzdGF0dXNDb2RlIGluIHNvbWUgcGxhdGZvcm1zIHRocm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gZXhjZXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLl9fc2VudHJ5X3hocl9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLl9fc2VudHJ5X3hocl9fLnN0YXR1c19jb2RlID0geGhyLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdFBvcyA9IHJlcXVlc3RLZXlzLmluZGV4T2YoeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0UG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0byBwb3AgYm90aCBrZXkgYW5kIHZhbHVlIHRvIGtlZXAgaXQgaW4gc3luYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0S2V5cy5zcGxpY2UocmVxdWVzdFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3NfMSA9IHJlcXVlc3RWYWx1ZXMuc3BsaWNlKHJlcXVlc3RQb3MpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuX19zZW50cnlfeGhyX18gJiYgYXJnc18xWzBdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLl9fc2VudHJ5X3hocl9fLmJvZHkgPSBhcmdzXzFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBkbyBub3RoaW5nICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCd4aHInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICgnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiB4aHIgJiYgdHlwZW9mIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBmaWxsKHhociwgJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWR5U3RhdGVBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5U3RhdGVBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbnJlYWR5c3RhdGVjaGFuZ2VIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkoeGhyLCByZWFkeVN0YXRlQXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIG9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsT3Blbi5hcHBseSh4aHIsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGZpbGwoeGhycHJvdG8sICdzZW5kJywgZnVuY3Rpb24gKG9yaWdpbmFsU2VuZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdEtleXMucHVzaCh0aGlzKTtcbiAgICAgICAgICAgIHJlcXVlc3RWYWx1ZXMucHVzaChhcmdzKTtcbiAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygneGhyJywge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgeGhyOiB0aGlzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxTZW5kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxudmFyIGxhc3RIcmVmO1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50SGlzdG9yeSgpIHtcbiAgICBpZiAoIXN1cHBvcnRzSGlzdG9yeSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG9sZE9uUG9wU3RhdGUgPSBnbG9iYWwub25wb3BzdGF0ZTtcbiAgICBnbG9iYWwub25wb3BzdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG8gPSBnbG9iYWwubG9jYXRpb24uaHJlZjtcbiAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBVUkwgc3RhdGUsIGFzIHdlIGFsd2F5cyByZWNlaXZlIG9ubHkgdGhlIHVwZGF0ZWQgc3RhdGVcbiAgICAgICAgdmFyIGZyb20gPSBsYXN0SHJlZjtcbiAgICAgICAgbGFzdEhyZWYgPSB0bztcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdoaXN0b3J5Jywge1xuICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvbGRPblBvcFN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2xkT25Qb3BTdGF0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBmdW5jdGlvbiBoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbihvcmlnaW5hbEhpc3RvcnlGdW5jdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVybCA9IGFyZ3MubGVuZ3RoID4gMiA/IGFyZ3NbMl0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgLy8gY29lcmNlIHRvIHN0cmluZyAodGhpcyBpcyB3aGF0IHB1c2hTdGF0ZSBkb2VzKVxuICAgICAgICAgICAgICAgIHZhciBmcm9tID0gbGFzdEhyZWY7XG4gICAgICAgICAgICAgICAgdmFyIHRvID0gU3RyaW5nKHVybCk7XG4gICAgICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBVUkwgc3RhdGUsIGFzIHdlIGFsd2F5cyByZWNlaXZlIG9ubHkgdGhlIHVwZGF0ZWQgc3RhdGVcbiAgICAgICAgICAgICAgICBsYXN0SHJlZiA9IHRvO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnaGlzdG9yeScsIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHRvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmaWxsKGdsb2JhbC5oaXN0b3J5LCAncHVzaFN0YXRlJywgaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24pO1xuICAgIGZpbGwoZ2xvYmFsLmhpc3RvcnksICdyZXBsYWNlU3RhdGUnLCBoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbik7XG59XG52YXIgZGVib3VuY2VEdXJhdGlvbiA9IDEwMDA7XG52YXIgZGVib3VuY2VUaW1lcklEO1xudmFyIGxhc3RDYXB0dXJlZEV2ZW50O1xuLyoqXG4gKiBEZWNpZGUgd2hldGhlciB0aGUgY3VycmVudCBldmVudCBzaG91bGQgZmluaXNoIHRoZSBkZWJvdW5jZSBvZiBwcmV2aW91c2x5IGNhcHR1cmVkIG9uZS5cbiAqIEBwYXJhbSBwcmV2aW91cyBwcmV2aW91c2x5IGNhcHR1cmVkIGV2ZW50XG4gKiBAcGFyYW0gY3VycmVudCBldmVudCB0byBiZSBjYXB0dXJlZFxuICovXG5mdW5jdGlvbiBzaG91bGRTaG9ydGNpcmN1aXRQcmV2aW91c0RlYm91bmNlKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgLy8gSWYgdGhlcmUgd2FzIG5vIHByZXZpb3VzIGV2ZW50LCBpdCBzaG91bGQgYWx3YXlzIGJlIHN3YXBwZWQgZm9yIHRoZSBuZXcgb25lLlxuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIElmIGJvdGggZXZlbnRzIGhhdmUgZGlmZmVyZW50IHR5cGUsIHRoZW4gdXNlciBkZWZpbml0ZWx5IHBlcmZvcm1lZCB0d28gc2VwYXJhdGUgYWN0aW9ucy4gZS5nLiBjbGljayArIGtleXByZXNzLlxuICAgIGlmIChwcmV2aW91cy50eXBlICE9PSBjdXJyZW50LnR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIElmIGJvdGggZXZlbnRzIGhhdmUgdGhlIHNhbWUgdHlwZSwgaXQncyBzdGlsbCBwb3NzaWJsZSB0aGF0IGFjdGlvbnMgd2VyZSBwZXJmb3JtZWQgb24gZGlmZmVyZW50IHRhcmdldHMuXG4gICAgICAgIC8vIGUuZy4gMiBjbGlja3Mgb24gZGlmZmVyZW50IGJ1dHRvbnMuXG4gICAgICAgIGlmIChwcmV2aW91cy50YXJnZXQgIT09IGN1cnJlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBqdXN0IGFjY2Vzc2luZyBgdGFyZ2V0YCBwcm9wZXJ0eSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgcmFyZSBjaXJjdW1zdGFuY2VzXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvODM4XG4gICAgfVxuICAgIC8vIElmIGJvdGggZXZlbnRzIGhhdmUgdGhlIHNhbWUgdHlwZSBfYW5kXyBzYW1lIGB0YXJnZXRgIChhbiBlbGVtZW50IHdoaWNoIHRyaWdnZXJlZCBhbiBldmVudCwgX25vdCBuZWNlc3NhcmlseV9cbiAgICAvLyB0byB3aGljaCBhbiBldmVudCBsaXN0ZW5lciB3YXMgYXR0YWNoZWQpLCB3ZSB0cmVhdCB0aGVtIGFzIHRoZSBzYW1lIGFjdGlvbiwgYXMgd2Ugd2FudCB0byBjYXB0dXJlXG4gICAgLy8gb25seSBvbmUgYnJlYWRjcnVtYi4gZS5nLiBtdWx0aXBsZSBjbGlja3Mgb24gdGhlIHNhbWUgYnV0dG9uLCBvciB0eXBpbmcgaW5zaWRlIGEgdXNlciBpbnB1dCBib3guXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciBhbiBldmVudCBzaG91bGQgYmUgY2FwdHVyZWQuXG4gKiBAcGFyYW0gZXZlbnQgZXZlbnQgdG8gYmUgY2FwdHVyZWRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkU2tpcERPTUV2ZW50KGV2ZW50KSB7XG4gICAgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBmaWx0ZXJpbmcgYGtleXByZXNzYCBldmVudHMgZm9yIG5vdy5cbiAgICBpZiAoZXZlbnQudHlwZSAhPT0gJ2tleXByZXNzJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQudGFnTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBjb25zaWRlciBrZXlwcmVzcyBldmVudHMgb24gYWN0dWFsIGlucHV0IGVsZW1lbnRzLiBUaGlzIHdpbGwgZGlzcmVnYXJkIGtleXByZXNzZXMgdGFyZ2V0aW5nIGJvZHlcbiAgICAgICAgLy8gZS5nLnRhYmJpbmcgdGhyb3VnaCBlbGVtZW50cywgaG90a2V5cywgZXRjLlxuICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgdGFyZ2V0LnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8ganVzdCBhY2Nlc3NpbmcgYHRhcmdldGAgcHJvcGVydHkgY2FuIHRocm93IGFuIGV4Y2VwdGlvbiBpbiBzb21lIHJhcmUgY2lyY3Vtc3RhbmNlc1xuICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzgzOFxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogV3JhcHMgYWRkRXZlbnRMaXN0ZW5lciB0byBjYXB0dXJlIFVJIGJyZWFkY3J1bWJzXG4gKiBAcGFyYW0gaGFuZGxlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXG4gKiBAcGFyYW0gZ2xvYmFsTGlzdGVuZXIgaW5kaWNhdGVzIHdoZXRoZXIgZXZlbnQgd2FzIGNhcHR1cmVkIGJ5IHRoZSBnbG9iYWwgZXZlbnQgbGlzdGVuZXJcbiAqIEByZXR1cm5zIHdyYXBwZWQgYnJlYWRjcnVtYiBldmVudHMgaGFuZGxlclxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBtYWtlRE9NRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGdsb2JhbExpc3RlbmVyKSB7XG4gICAgaWYgKGdsb2JhbExpc3RlbmVyID09PSB2b2lkIDApIHsgZ2xvYmFsTGlzdGVuZXIgPSBmYWxzZTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGlzIGhhbmRsZXIgbWlnaHQgdHJpZ2dlciBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlIHNhbWVcbiAgICAgICAgLy8gZXZlbnQgKGUuZy4gZXZlbnQgcHJvcGFnYXRpb24gdGhyb3VnaCBub2RlIGFuY2VzdG9ycykuXG4gICAgICAgIC8vIElnbm9yZSBpZiB3ZSd2ZSBhbHJlYWR5IGNhcHR1cmVkIHRoYXQgZXZlbnQuXG4gICAgICAgIGlmICghZXZlbnQgfHwgbGFzdENhcHR1cmVkRXZlbnQgPT09IGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgYWx3YXlzIHdhbnQgdG8gc2tpcCBfc29tZV8gZXZlbnRzLlxuICAgICAgICBpZiAoc2hvdWxkU2tpcERPTUV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJyA/ICdpbnB1dCcgOiBldmVudC50eXBlO1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBkZWJvdW5jZSB0aW1lciwgaXQgbWVhbnMgdGhhdCB3ZSBjYW4gc2FmZWx5IGNhcHR1cmUgdGhlIG5ldyBldmVudCBhbmQgc3RvcmUgaXQgZm9yIGZ1dHVyZSBjb21wYXJpc29ucy5cbiAgICAgICAgaWYgKGRlYm91bmNlVGltZXJJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBnbG9iYWw6IGdsb2JhbExpc3RlbmVyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsYXN0Q2FwdHVyZWRFdmVudCA9IGV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZGVib3VuY2UgYXdhaXRpbmcsIHNlZSBpZiB0aGUgbmV3IGV2ZW50IGlzIGRpZmZlcmVudCBlbm91Z2ggdG8gdHJlYXQgaXQgYXMgYSB1bmlxdWUgb25lLlxuICAgICAgICAvLyBJZiB0aGF0J3MgdGhlIGNhc2UsIGVtaXQgdGhlIHByZXZpb3VzIGV2ZW50IGFuZCBzdG9yZSBsb2NhbGx5IHRoZSBuZXdseS1jYXB0dXJlZCBET00gZXZlbnQuXG4gICAgICAgIGVsc2UgaWYgKHNob3VsZFNob3J0Y2lyY3VpdFByZXZpb3VzRGVib3VuY2UobGFzdENhcHR1cmVkRXZlbnQsIGV2ZW50KSkge1xuICAgICAgICAgICAgaGFuZGxlcih7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgZ2xvYmFsOiBnbG9iYWxMaXN0ZW5lcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGFzdENhcHR1cmVkRXZlbnQgPSBldmVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGFydCBhIG5ldyBkZWJvdW5jZSB0aW1lciB0aGF0IHdpbGwgcHJldmVudCB1cyBmcm9tIGNhcHR1cmluZyBtdWx0aXBsZSBldmVudHMgdGhhdCBzaG91bGQgYmUgZ3JvdXBlZCB0b2dldGhlci5cbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXJJRCk7XG4gICAgICAgIGRlYm91bmNlVGltZXJJRCA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlYm91bmNlVGltZXJJRCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSwgZGVib3VuY2VEdXJhdGlvbik7XG4gICAgfTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudERPTSgpIHtcbiAgICBpZiAoISgnZG9jdW1lbnQnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBNYWtlIGl0IHNvIHRoYXQgYW55IGNsaWNrIG9yIGtleXByZXNzIHRoYXQgaXMgdW5oYW5kbGVkIC8gYnViYmxlZCB1cCBhbGwgdGhlIHdheSB0byB0aGUgZG9jdW1lbnQgdHJpZ2dlcnMgb3VyIGRvbVxuICAgIC8vIGhhbmRsZXJzLiAoTm9ybWFsbHkgd2UgaGF2ZSBvbmx5IG9uZSwgd2hpY2ggY2FwdHVyZXMgYSBicmVhZGNydW1iIGZvciBlYWNoIGNsaWNrIG9yIGtleXByZXNzLikgRG8gdGhpcyBiZWZvcmVcbiAgICAvLyB3ZSBpbnN0cnVtZW50IGBhZGRFdmVudExpc3RlbmVyYCBzbyB0aGF0IHdlIGRvbid0IGVuZCB1cCBhdHRhY2hpbmcgdGhpcyBoYW5kbGVyIHR3aWNlLlxuICAgIHZhciB0cmlnZ2VyRE9NSGFuZGxlciA9IHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKTtcbiAgICB2YXIgZ2xvYmFsRE9NRXZlbnRIYW5kbGVyID0gbWFrZURPTUV2ZW50SGFuZGxlcih0cmlnZ2VyRE9NSGFuZGxlciwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZ2xvYmFsRE9NRXZlbnRIYW5kbGVyLCBmYWxzZSk7XG4gICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZ2xvYmFsRE9NRXZlbnRIYW5kbGVyLCBmYWxzZSk7XG4gICAgLy8gQWZ0ZXIgaG9va2luZyBpbnRvIGNsaWNrIGFuZCBrZXlwcmVzcyBldmVudHMgYnViYmxlZCB1cCB0byBgZG9jdW1lbnRgLCB3ZSBhbHNvIGhvb2sgaW50byB1c2VyLWhhbmRsZWRcbiAgICAvLyBjbGlja3MgJiBrZXlwcmVzc2VzLCBieSBhZGRpbmcgYW4gZXZlbnQgbGlzdGVuZXIgb2Ygb3VyIG93biB0byBhbnkgZWxlbWVudCB0byB3aGljaCB0aGV5IGFkZCBhIGxpc3RlbmVyLiBUaGF0XG4gICAgLy8gd2F5LCB3aGVuZXZlciBvbmUgb2YgdGhlaXIgaGFuZGxlcnMgaXMgdHJpZ2dlcmVkLCBvdXJzIHdpbGwgYmUsIHRvby4gKFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgdGhlaXIgaGFuZGxlclxuICAgIC8vIGNvdWxkIHBvdGVudGlhbGx5IHByZXZlbnQgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gb3VyIGdsb2JhbCBsaXN0ZW5lcnMuIFRoaXMgd2F5LCBvdXIgaGFuZGxlciBhcmUgc3RpbGxcbiAgICAvLyBndWFyYW50ZWVkIHRvIGZpcmUgYXQgbGVhc3Qgb25jZS4pXG4gICAgWydFdmVudFRhcmdldCcsICdOb2RlJ10uZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgdmFyIHByb3RvID0gZ2xvYmFsW3RhcmdldF0gJiYgZ2xvYmFsW3RhcmdldF0ucHJvdG90eXBlO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKCFwcm90byB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkgfHwgIXByb3RvLmhhc093blByb3BlcnR5KCdhZGRFdmVudExpc3RlbmVyJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmaWxsKHByb3RvLCAnYWRkRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnaW5hbEFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlcnNfMSA9IChlbC5fX3NlbnRyeV9pbnN0cnVtZW50YXRpb25faGFuZGxlcnNfXyA9IGVsLl9fc2VudHJ5X2luc3RydW1lbnRhdGlvbl9oYW5kbGVyc19fIHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyRm9yVHlwZSA9IChoYW5kbGVyc18xW3R5cGVdID0gaGFuZGxlcnNfMVt0eXBlXSB8fCB7IHJlZkNvdW50OiAwIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyRm9yVHlwZS5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBtYWtlRE9NRXZlbnRIYW5kbGVyKHRyaWdnZXJET01IYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyRm9yVHlwZS5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCB0eXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJGb3JUeXBlLnJlZkNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2Vzc2luZyBkb20gcHJvcGVydGllcyBpcyBhbHdheXMgZnJhZ2lsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsc28gYWxsb3dzIHVzIHRvIHNraXAgYGFkZEV2ZW50TGlzdGVucnNgIGNhbGxzIHdpdGggbm8gcHJvcGVyIGB0aGlzYCBjb250ZXh0LlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsbChwcm90bywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJzXzIgPSBlbC5fX3NlbnRyeV9pbnN0cnVtZW50YXRpb25faGFuZGxlcnNfXyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyRm9yVHlwZSA9IGhhbmRsZXJzXzJbdHlwZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlckZvclR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyRm9yVHlwZS5yZWZDb3VudCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBsb25nZXIgYW55IGN1c3RvbSBoYW5kbGVycyBvZiB0aGUgY3VycmVudCB0eXBlIG9uIHRoaXMgZWxlbWVudCwgd2UgY2FuIHJlbW92ZSBvdXJzLCB0b28uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJGb3JUeXBlLnJlZkNvdW50IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgaGFuZGxlckZvclR5cGUuaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJGb3JUeXBlLmhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc18yW3R5cGVdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gbG9uZ2VyIGFueSBjdXN0b20gaGFuZGxlcnMgb2YgYW55IHR5cGUgb24gdGhpcyBlbGVtZW50LCBjbGVhbnVwIGV2ZXJ5dGhpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGhhbmRsZXJzXzIpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZWwuX19zZW50cnlfaW5zdHJ1bWVudGF0aW9uX2hhbmRsZXJzX187XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY2Nlc3NpbmcgZG9tIHByb3BlcnRpZXMgaXMgYWx3YXlzIGZyYWdpbGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvIGFsbG93cyB1cyB0byBza2lwIGBhZGRFdmVudExpc3RlbnJzYCBjYWxscyB3aXRoIG5vIHByb3BlciBgdGhpc2AgY29udGV4dC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG52YXIgX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudEVycm9yKCkge1xuICAgIF9vbGRPbkVycm9ySGFuZGxlciA9IGdsb2JhbC5vbmVycm9yO1xuICAgIGdsb2JhbC5vbmVycm9yID0gZnVuY3Rpb24gKG1zZywgdXJsLCBsaW5lLCBjb2x1bW4sIGVycm9yKSB7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVycygnZXJyb3InLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICBtc2c6IG1zZyxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgcmV0dXJuIF9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxudmFyIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBudWxsO1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKCkge1xuICAgIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb247XG4gICAgZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBlKTtcbiAgICAgICAgaWYgKF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIHJldHVybiBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwIiwiZXhwb3J0IHZhciBzZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSA/IHNldFByb3RvT2YgOiBtaXhpblByb3BlcnRpZXMpO1xuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBfX3Byb3RvX19cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIHNldFByb3RvT2Yob2JqLCBwcm90bykge1xuICAgIC8vIEB0cy1pZ25vcmUgX19wcm90b19fIGRvZXMgbm90IGV4aXN0IG9uIG9ialxuICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBtaXhpblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZnVuY3Rpb24gbWl4aW5Qcm9wZXJ0aWVzKG9iaiwgcHJvdG8pIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHByb3RvKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdHlwZXNjcmlwdCBjb21wbGFpbnMgYWJvdXQgaW5kZXhpbmcgc28gd2UgcmVtb3ZlXG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBwcm90b1twcm9wXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9seWZpbGwuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBzZXRQcm90b3R5cGVPZiB9IGZyb20gJy4vcG9seWZpbGwnO1xuLyoqIEFuIGVycm9yIGVtaXR0ZWQgYnkgU2VudHJ5IFNES3MgYW5kIHJlbGF0ZWQgdXRpbGl0aWVzLiAqL1xudmFyIFNlbnRyeUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZW50cnlFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZW50cnlFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLm5hbWUgPSBfbmV3VGFyZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBzZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTZW50cnlFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFNlbnRyeUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG4vKiogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gcGFyc2UgYSBEc24uICovXG52YXIgRFNOX1JFR0VYID0gL14oPzooXFx3Kyk6KVxcL1xcLyg/OihcXHcrKSg/OjooXFx3KykpP0ApKFtcXHcuLV0rKSg/OjooXFxkKykpP1xcLyguKykvO1xuLyoqIEVycm9yIG1lc3NhZ2UgKi9cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0ludmFsaWQgRHNuJztcbi8qKiBUaGUgU2VudHJ5IERzbiwgaWRlbnRpZnlpbmcgYSBTZW50cnkgaW5zdGFuY2UgYW5kIHByb2plY3QuICovXG52YXIgRHNuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IERzbiBjb21wb25lbnQgKi9cbiAgICBmdW5jdGlvbiBEc24oZnJvbSkge1xuICAgICAgICBpZiAodHlwZW9mIGZyb20gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9mcm9tU3RyaW5nKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZnJvbUNvbXBvbmVudHMoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHNuLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gICAgICogY29tcG9uZW50LiBUbyBnZXQgdGhlIGRlcHJlY2F0ZWQgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiwgc2V0IGB3aXRoUGFzc3dvcmRgXG4gICAgICogdG8gdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB3aXRoUGFzc3dvcmQgV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHBhc3N3b3JkIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICovXG4gICAgRHNuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICh3aXRoUGFzc3dvcmQpIHtcbiAgICAgICAgaWYgKHdpdGhQYXNzd29yZCA9PT0gdm9pZCAwKSB7IHdpdGhQYXNzd29yZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhvc3QgPSBfYS5ob3N0LCBwYXRoID0gX2EucGF0aCwgcGFzcyA9IF9hLnBhc3MsIHBvcnQgPSBfYS5wb3J0LCBwcm9qZWN0SWQgPSBfYS5wcm9qZWN0SWQsIHByb3RvY29sID0gX2EucHJvdG9jb2wsIHB1YmxpY0tleSA9IF9hLnB1YmxpY0tleTtcbiAgICAgICAgcmV0dXJuIChwcm90b2NvbCArIFwiOi8vXCIgKyBwdWJsaWNLZXkgKyAod2l0aFBhc3N3b3JkICYmIHBhc3MgPyBcIjpcIiArIHBhc3MgOiAnJykgK1xuICAgICAgICAgICAgKFwiQFwiICsgaG9zdCArIChwb3J0ID8gXCI6XCIgKyBwb3J0IDogJycpICsgXCIvXCIgKyAocGF0aCA/IHBhdGggKyBcIi9cIiA6IHBhdGgpICsgcHJvamVjdElkKSk7XG4gICAgfTtcbiAgICAvKiogUGFyc2VzIGEgc3RyaW5nIGludG8gdGhpcyBEc24uICovXG4gICAgRHNuLnByb3RvdHlwZS5fZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gRFNOX1JFR0VYLmV4ZWMoc3RyKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IF9fcmVhZChtYXRjaC5zbGljZSgxKSwgNiksIHByb3RvY29sID0gX2FbMF0sIHB1YmxpY0tleSA9IF9hWzFdLCBfYiA9IF9hWzJdLCBwYXNzID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2IsIGhvc3QgPSBfYVszXSwgX2MgPSBfYVs0XSwgcG9ydCA9IF9jID09PSB2b2lkIDAgPyAnJyA6IF9jLCBsYXN0UGF0aCA9IF9hWzVdO1xuICAgICAgICB2YXIgcGF0aCA9ICcnO1xuICAgICAgICB2YXIgcHJvamVjdElkID0gbGFzdFBhdGg7XG4gICAgICAgIHZhciBzcGxpdCA9IHByb2plY3RJZC5zcGxpdCgnLycpO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcGF0aCA9IHNwbGl0LnNsaWNlKDAsIC0xKS5qb2luKCcvJyk7XG4gICAgICAgICAgICBwcm9qZWN0SWQgPSBzcGxpdC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvamVjdElkKSB7XG4gICAgICAgICAgICB2YXIgcHJvamVjdE1hdGNoID0gcHJvamVjdElkLm1hdGNoKC9eXFxkKy8pO1xuICAgICAgICAgICAgaWYgKHByb2plY3RNYXRjaCkge1xuICAgICAgICAgICAgICAgIHByb2plY3RJZCA9IHByb2plY3RNYXRjaFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mcm9tQ29tcG9uZW50cyh7IGhvc3Q6IGhvc3QsIHBhc3M6IHBhc3MsIHBhdGg6IHBhdGgsIHByb2plY3RJZDogcHJvamVjdElkLCBwb3J0OiBwb3J0LCBwcm90b2NvbDogcHJvdG9jb2wsIHB1YmxpY0tleTogcHVibGljS2V5IH0pO1xuICAgIH07XG4gICAgLyoqIE1hcHMgRHNuIGNvbXBvbmVudHMgaW50byB0aGlzIGluc3RhbmNlLiAqL1xuICAgIERzbi5wcm90b3R5cGUuX2Zyb21Db21wb25lbnRzID0gZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcbiAgICAgICAgLy8gVE9ETyB0aGlzIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgYW5kIGNhbiBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb25cbiAgICAgICAgaWYgKCd1c2VyJyBpbiBjb21wb25lbnRzICYmICEoJ3B1YmxpY0tleScgaW4gY29tcG9uZW50cykpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucHVibGljS2V5ID0gY29tcG9uZW50cy51c2VyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXNlciA9IGNvbXBvbmVudHMucHVibGljS2V5IHx8ICcnO1xuICAgICAgICB0aGlzLnByb3RvY29sID0gY29tcG9uZW50cy5wcm90b2NvbDtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBjb21wb25lbnRzLnB1YmxpY0tleSB8fCAnJztcbiAgICAgICAgdGhpcy5wYXNzID0gY29tcG9uZW50cy5wYXNzIHx8ICcnO1xuICAgICAgICB0aGlzLmhvc3QgPSBjb21wb25lbnRzLmhvc3Q7XG4gICAgICAgIHRoaXMucG9ydCA9IGNvbXBvbmVudHMucG9ydCB8fCAnJztcbiAgICAgICAgdGhpcy5wYXRoID0gY29tcG9uZW50cy5wYXRoIHx8ICcnO1xuICAgICAgICB0aGlzLnByb2plY3RJZCA9IGNvbXBvbmVudHMucHJvamVjdElkO1xuICAgIH07XG4gICAgLyoqIFZhbGlkYXRlcyB0aGlzIERzbiBhbmQgdGhyb3dzIG9uIGVycm9yLiAqL1xuICAgIERzbi5wcm90b3R5cGUuX3ZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBbJ3Byb3RvY29sJywgJ3B1YmxpY0tleScsICdob3N0JywgJ3Byb2plY3RJZCddLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UgKyBcIjogXCIgKyBjb21wb25lbnQgKyBcIiBtaXNzaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLnByb2plY3RJZC5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFICsgXCI6IEludmFsaWQgcHJvamVjdElkIFwiICsgdGhpcy5wcm9qZWN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3RvY29sICE9PSAnaHR0cCcgJiYgdGhpcy5wcm90b2NvbCAhPT0gJ2h0dHBzJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UgKyBcIjogSW52YWxpZCBwcm90b2NvbCBcIiArIHRoaXMucHJvdG9jb2wpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBvcnQgJiYgaXNOYU4ocGFyc2VJbnQodGhpcy5wb3J0LCAxMCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoRVJST1JfTUVTU0FHRSArIFwiOiBJbnZhbGlkIHBvcnQgXCIgKyB0aGlzLnBvcnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRHNuO1xufSgpKTtcbmV4cG9ydCB7IERzbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHNuLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5leHBvcnQgdmFyIGluc3RhbGxlZEludGVncmF0aW9ucyA9IFtdO1xuLyoqIEdldHMgaW50ZWdyYXRpb24gdG8gaW5zdGFsbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucykge1xuICAgIHZhciBkZWZhdWx0SW50ZWdyYXRpb25zID0gKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyAmJiBfX3NwcmVhZChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMpKSB8fCBbXTtcbiAgICB2YXIgdXNlckludGVncmF0aW9ucyA9IG9wdGlvbnMuaW50ZWdyYXRpb25zO1xuICAgIHZhciBpbnRlZ3JhdGlvbnMgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh1c2VySW50ZWdyYXRpb25zKSkge1xuICAgICAgICB2YXIgdXNlckludGVncmF0aW9uc05hbWVzXzEgPSB1c2VySW50ZWdyYXRpb25zLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5uYW1lOyB9KTtcbiAgICAgICAgdmFyIHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEgPSBbXTtcbiAgICAgICAgLy8gTGVhdmUgb25seSB1bmlxdWUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMsIHRoYXQgd2VyZSBub3Qgb3ZlcnJpZGRlbiB3aXRoIHByb3ZpZGVkIHVzZXIgaW50ZWdyYXRpb25zXG4gICAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmYXVsdEludGVncmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodXNlckludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZihkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSkgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5pbmRleE9mKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvbnMucHVzaChkZWZhdWx0SW50ZWdyYXRpb24pO1xuICAgICAgICAgICAgICAgIHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEucHVzaChkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEb24ndCBhZGQgc2FtZSB1c2VyIGludGVncmF0aW9uIHR3aWNlXG4gICAgICAgIHVzZXJJbnRlZ3JhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodXNlckludGVncmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAocGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5pbmRleE9mKHVzZXJJbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvbnMucHVzaCh1c2VySW50ZWdyYXRpb24pO1xuICAgICAgICAgICAgICAgIHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEucHVzaCh1c2VySW50ZWdyYXRpb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdXNlckludGVncmF0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnRlZ3JhdGlvbnMgPSB1c2VySW50ZWdyYXRpb25zKGRlZmF1bHRJbnRlZ3JhdGlvbnMpO1xuICAgICAgICBpbnRlZ3JhdGlvbnMgPSBBcnJheS5pc0FycmF5KGludGVncmF0aW9ucykgPyBpbnRlZ3JhdGlvbnMgOiBbaW50ZWdyYXRpb25zXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGludGVncmF0aW9ucyA9IF9fc3ByZWFkKGRlZmF1bHRJbnRlZ3JhdGlvbnMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCBpZiBwcmVzZW50LCBgRGVidWdgIGludGVncmF0aW9uIHdpbGwgYWx3YXlzIHJ1biBsYXN0XG4gICAgdmFyIGludGVncmF0aW9uc05hbWVzID0gaW50ZWdyYXRpb25zLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5uYW1lOyB9KTtcbiAgICB2YXIgYWx3YXlzTGFzdFRvUnVuID0gJ0RlYnVnJztcbiAgICBpZiAoaW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZihhbHdheXNMYXN0VG9SdW4pICE9PSAtMSkge1xuICAgICAgICBpbnRlZ3JhdGlvbnMucHVzaC5hcHBseShpbnRlZ3JhdGlvbnMsIF9fc3ByZWFkKGludGVncmF0aW9ucy5zcGxpY2UoaW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZihhbHdheXNMYXN0VG9SdW4pLCAxKSkpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZWdyYXRpb25zO1xufVxuLyoqIFNldHVwIGdpdmVuIGludGVncmF0aW9uICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbikge1xuICAgIGlmIChpbnN0YWxsZWRJbnRlZ3JhdGlvbnMuaW5kZXhPZihpbnRlZ3JhdGlvbi5uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnRlZ3JhdGlvbi5zZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIpO1xuICAgIGluc3RhbGxlZEludGVncmF0aW9ucy5wdXNoKGludGVncmF0aW9uLm5hbWUpO1xuICAgIGxvZ2dlci5sb2coXCJJbnRlZ3JhdGlvbiBpbnN0YWxsZWQ6IFwiICsgaW50ZWdyYXRpb24ubmFtZSk7XG59XG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBpbnRlZ3JhdGlvbiBpbnN0YW5jZXMgdGhpcyBpbnN0YWxscyB0aGVtIGFsbC4gV2hlbiBgd2l0aERlZmF1bHRzYCBpcyBzZXQgdG8gYHRydWVgIHRoZW4gYWxsIGRlZmF1bHRcbiAqIGludGVncmF0aW9ucyBhcmUgYWRkZWQgdW5sZXNzIHRoZXkgd2VyZSBhbHJlYWR5IHByb3ZpZGVkIGJlZm9yZS5cbiAqIEBwYXJhbSBpbnRlZ3JhdGlvbnMgYXJyYXkgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzXG4gKiBAcGFyYW0gd2l0aERlZmF1bHQgc2hvdWxkIGVuYWJsZSBkZWZhdWx0IGludGVncmF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBpbnRlZ3JhdGlvbnMgPSB7fTtcbiAgICBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGludGVncmF0aW9uKSB7XG4gICAgICAgIGludGVncmF0aW9uc1tpbnRlZ3JhdGlvbi5uYW1lXSA9IGludGVncmF0aW9uO1xuICAgICAgICBzZXR1cEludGVncmF0aW9uKGludGVncmF0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW50ZWdyYXRpb25zO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZWdyYXRpb24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGluZXMgKi9cbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgU2Vzc2lvblN0YXR1cywgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGRhdGVUaW1lc3RhbXBJblNlY29uZHMsIERzbiwgaXNQcmltaXRpdmUsIGlzVGhlbmFibGUsIGxvZ2dlciwgbm9ybWFsaXplLCBTZW50cnlFcnJvciwgU3luY1Byb21pc2UsIHRydW5jYXRlLCB1dWlkNCwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHNldHVwSW50ZWdyYXRpb25zIH0gZnJvbSAnLi9pbnRlZ3JhdGlvbic7XG4vKipcbiAqIEJhc2UgaW1wbGVtZW50YXRpb24gZm9yIGFsbCBKYXZhU2NyaXB0IFNESyBjbGllbnRzLlxuICpcbiAqIENhbGwgdGhlIGNvbnN0cnVjdG9yIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgYmFja2VuZCBjb25zdHJ1Y3RvciBhbmQgb3B0aW9uc1xuICogc3BlY2lmaWMgdG8gdGhlIGNsaWVudCBzdWJjbGFzcy4gVG8gYWNjZXNzIHRoZXNlIG9wdGlvbnMgbGF0ZXIsIHVzZVxuICoge0BsaW5rIENsaWVudC5nZXRPcHRpb25zfS4gQWxzbywgdGhlIEJhY2tlbmQgaW5zdGFuY2UgaXMgYXZhaWxhYmxlIHZpYVxuICoge0BsaW5rIENsaWVudC5nZXRCYWNrZW5kfS5cbiAqXG4gKiBJZiBhIERzbiBpcyBzcGVjaWZpZWQgaW4gdGhlIG9wdGlvbnMsIGl0IHdpbGwgYmUgcGFyc2VkIGFuZCBzdG9yZWQuIFVzZVxuICoge0BsaW5rIENsaWVudC5nZXREc259IHRvIHJldHJpZXZlIHRoZSBEc24gYXQgYW55IG1vbWVudC4gSW4gY2FzZSB0aGUgRHNuIGlzXG4gKiBpbnZhbGlkLCB0aGUgY29uc3RydWN0b3Igd2lsbCB0aHJvdyBhIHtAbGluayBTZW50cnlFeGNlcHRpb259LiBOb3RlIHRoYXRcbiAqIHdpdGhvdXQgYSB2YWxpZCBEc24sIHRoZSBTREsgd2lsbCBub3Qgc2VuZCBhbnkgZXZlbnRzIHRvIFNlbnRyeS5cbiAqXG4gKiBCZWZvcmUgc2VuZGluZyBhbiBldmVudCB2aWEgdGhlIGJhY2tlbmQsIGl0IGlzIHBhc3NlZCB0aHJvdWdoXG4gKiB7QGxpbmsgQmFzZUNsaWVudC5fcHJlcGFyZUV2ZW50fSB0byBhZGQgU0RLIGluZm9ybWF0aW9uIGFuZCBzY29wZSBkYXRhXG4gKiAoYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQpLiBUbyBhZGQgbW9yZSBjdXN0b20gaW5mb3JtYXRpb24sIG92ZXJyaWRlIHRoaXNcbiAqIG1ldGhvZCBhbmQgZXh0ZW5kIHRoZSByZXN1bHRpbmcgcHJlcGFyZWQgZXZlbnQuXG4gKlxuICogVG8gaXNzdWUgYXV0b21hdGljYWxseSBjcmVhdGVkIGV2ZW50cyAoZS5nLiB2aWEgaW5zdHJ1bWVudGF0aW9uKSwgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmNhcHR1cmVFdmVudH0uIEl0IHdpbGwgcHJlcGFyZSB0aGUgZXZlbnQgYW5kIHBhc3MgaXQgdGhyb3VnaFxuICogdGhlIGNhbGxiYWNrIGxpZmVjeWNsZS4gVG8gaXNzdWUgYXV0by1icmVhZGNydW1icywgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmFkZEJyZWFkY3J1bWJ9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBOb2RlQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudDxOb2RlQmFja2VuZCwgTm9kZU9wdGlvbnM+IHtcbiAqICAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE5vZGVPcHRpb25zKSB7XG4gKiAgICAgc3VwZXIoTm9kZUJhY2tlbmQsIG9wdGlvbnMpO1xuICogICB9XG4gKlxuICogICAvLyAuLi5cbiAqIH1cbiAqL1xudmFyIEJhc2VDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhpcyBjbGllbnQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmFja2VuZENsYXNzIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBiYWNrZW5kLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQmFzZUNsaWVudChiYWNrZW5kQ2xhc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIEFycmF5IG9mIHVzZWQgaW50ZWdyYXRpb25zLiAqL1xuICAgICAgICB0aGlzLl9pbnRlZ3JhdGlvbnMgPSB7fTtcbiAgICAgICAgLyoqIE51bWJlciBvZiBjYWxsIGJlaW5nIHByb2Nlc3NlZCAqL1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gMDtcbiAgICAgICAgdGhpcy5fYmFja2VuZCA9IG5ldyBiYWNrZW5kQ2xhc3Mob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RzbiA9IG5ldyBEc24ob3B0aW9ucy5kc24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGV2ZW50SWQgPSBoaW50ICYmIGhpbnQuZXZlbnRfaWQ7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3ModGhpcy5fZ2V0QmFja2VuZCgpXG4gICAgICAgICAgICAuZXZlbnRGcm9tRXhjZXB0aW9uKGV4Y2VwdGlvbiwgaGludClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuX2NhcHR1cmVFdmVudChldmVudCwgaGludCwgc2NvcGUpOyB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgZXZlbnRJZCA9IHJlc3VsdDtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgbGV2ZWwsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB2YXIgcHJvbWlzZWRFdmVudCA9IGlzUHJpbWl0aXZlKG1lc3NhZ2UpXG4gICAgICAgICAgICA/IHRoaXMuX2dldEJhY2tlbmQoKS5ldmVudEZyb21NZXNzYWdlKFN0cmluZyhtZXNzYWdlKSwgbGV2ZWwsIGhpbnQpXG4gICAgICAgICAgICA6IHRoaXMuX2dldEJhY2tlbmQoKS5ldmVudEZyb21FeGNlcHRpb24obWVzc2FnZSwgaGludCk7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3MocHJvbWlzZWRFdmVudFxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5fY2FwdHVyZUV2ZW50KGV2ZW50LCBoaW50LCBzY29wZSk7IH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBldmVudElkID0gcmVzdWx0O1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB0aGlzLl9wcm9jZXNzKHRoaXMuX2NhcHR1cmVFdmVudChldmVudCwgaGludCwgc2NvcGUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgZXZlbnRJZCA9IHJlc3VsdDtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZVNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBpZiAoIXNlc3Npb24ucmVsZWFzZSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0Rpc2NhcmRlZCBzZXNzaW9uIGJlY2F1c2Ugb2YgbWlzc2luZyByZWxlYXNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgIC8vIEFmdGVyIHNlbmRpbmcsIHdlIHNldCBpbml0IGZhbHNlIHRvIGluaWRjYXRlIGl0J3Mgbm90IHRoZSBmaXJzdCBvY2N1cmVuY2VcbiAgICAgICAgICAgIHNlc3Npb24udXBkYXRlKHsgaW5pdDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuZ2V0RHNuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHNuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5faXNDbGllbnRQcm9jZXNzaW5nKHRpbWVvdXQpLnRoZW4oZnVuY3Rpb24gKHJlYWR5KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2dldEJhY2tlbmQoKVxuICAgICAgICAgICAgICAgIC5nZXRUcmFuc3BvcnQoKVxuICAgICAgICAgICAgICAgIC5jbG9zZSh0aW1lb3V0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFuc3BvcnRGbHVzaGVkKSB7IHJldHVybiByZWFkeSAmJiB0cmFuc3BvcnRGbHVzaGVkOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZmx1c2godGltZW91dCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBfdGhpcy5nZXRPcHRpb25zKCkuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSBpbnRlZ3JhdGlvbnNcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5zZXR1cEludGVncmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlZ3JhdGlvbnMgPSBzZXR1cEludGVncmF0aW9ucyh0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5nZXRJbnRlZ3JhdGlvbiA9IGZ1bmN0aW9uIChpbnRlZ3JhdGlvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVncmF0aW9uc1tpbnRlZ3JhdGlvbi5pZF0gfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkNhbm5vdCByZXRyaWV2ZSBpbnRlZ3JhdGlvbiBcIiArIGludGVncmF0aW9uLmlkICsgXCIgZnJvbSB0aGUgY3VycmVudCBDbGllbnRcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIFVwZGF0ZXMgZXhpc3Rpbmcgc2Vzc2lvbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZXZlbnQgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fdXBkYXRlU2Vzc2lvbkZyb21FdmVudCA9IGZ1bmN0aW9uIChzZXNzaW9uLCBldmVudCkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdmFyIGNyYXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHVzZXJBZ2VudDtcbiAgICAgICAgdmFyIGV4Y2VwdGlvbnMgPSBldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcztcbiAgICAgICAgaWYgKGV4Y2VwdGlvbnMpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBleGNlcHRpb25zXzEgPSBfX3ZhbHVlcyhleGNlcHRpb25zKSwgZXhjZXB0aW9uc18xXzEgPSBleGNlcHRpb25zXzEubmV4dCgpOyAhZXhjZXB0aW9uc18xXzEuZG9uZTsgZXhjZXB0aW9uc18xXzEgPSBleGNlcHRpb25zXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleCA9IGV4Y2VwdGlvbnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVjaGFuaXNtID0gZXgubWVjaGFuaXNtO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVjaGFuaXNtICYmIG1lY2hhbmlzbS5oYW5kbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jhc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhjZXB0aW9uc18xXzEgJiYgIWV4Y2VwdGlvbnNfMV8xLmRvbmUgJiYgKF9hID0gZXhjZXB0aW9uc18xLnJldHVybikpIF9hLmNhbGwoZXhjZXB0aW9uc18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB1c2VyID0gZXZlbnQudXNlcjtcbiAgICAgICAgaWYgKCFzZXNzaW9uLnVzZXJBZ2VudCkge1xuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBldmVudC5yZXF1ZXN0ID8gZXZlbnQucmVxdWVzdC5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3VzZXItYWdlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJBZ2VudCA9IGhlYWRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlc3Npb24udXBkYXRlKF9fYXNzaWduKF9fYXNzaWduKHt9LCAoY3Jhc2hlZCAmJiB7IHN0YXR1czogU2Vzc2lvblN0YXR1cy5DcmFzaGVkIH0pKSwgeyB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgdXNlckFnZW50OiB1c2VyQWdlbnQsIGVycm9yczogc2Vzc2lvbi5lcnJvcnMgKyBOdW1iZXIoZXJyb3JlZCB8fCBjcmFzaGVkKSB9KSk7XG4gICAgICAgIHRoaXMuY2FwdHVyZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgfTtcbiAgICAvKiogRGVsaXZlciBjYXB0dXJlZCBzZXNzaW9uIHRvIFNlbnRyeSAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9zZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuX2dldEJhY2tlbmQoKS5zZW5kU2Vzc2lvbihzZXNzaW9uKTtcbiAgICB9O1xuICAgIC8qKiBXYWl0cyBmb3IgdGhlIGNsaWVudCB0byBiZSBkb25lIHdpdGggcHJvY2Vzc2luZy4gKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5faXNDbGllbnRQcm9jZXNzaW5nID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIHRpY2tlZCA9IDA7XG4gICAgICAgICAgICB2YXIgdGljayA9IDE7XG4gICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9wcm9jZXNzaW5nID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aWNrZWQgKz0gdGljaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgJiYgdGlja2VkID49IHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aWNrKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgY3VycmVudCBiYWNrZW5kLiAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9nZXRCYWNrZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2VuZDtcbiAgICB9O1xuICAgIC8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBTREsgaXMgZW5hYmxlZCBhbmQgYSB2YWxpZCBEc24gaXMgcHJlc2VudC4gKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5faXNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKCkuZW5hYmxlZCAhPT0gZmFsc2UgJiYgdGhpcy5fZHNuICE9PSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGNvbW1vbiBpbmZvcm1hdGlvbiB0byBldmVudHMuXG4gICAgICpcbiAgICAgKiBUaGUgaW5mb3JtYXRpb24gaW5jbHVkZXMgcmVsZWFzZSBhbmQgZW52aXJvbm1lbnQgZnJvbSBgb3B0aW9uc2AsXG4gICAgICogYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgKGV4dHJhLCB0YWdzIGFuZCB1c2VyKSBmcm9tIHRoZSBzY29wZS5cbiAgICAgKlxuICAgICAqIEluZm9ybWF0aW9uIHRoYXQgaXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBldmVudCBpcyBuZXZlciBvdmVyd3JpdHRlbi4gRm9yXG4gICAgICogbmVzdGVkIG9iamVjdHMsIHN1Y2ggYXMgdGhlIGNvbnRleHQsIGtleXMgYXJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICogQHBhcmFtIGhpbnQgTWF5IGNvbnRhaW4gYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSBzY29wZSBBIHNjb3BlIGNvbnRhaW5pbmcgZXZlbnQgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMgQSBuZXcgZXZlbnQgd2l0aCBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9wcmVwYXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIHNjb3BlLCBoaW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0T3B0aW9ucygpLm5vcm1hbGl6ZURlcHRoLCBub3JtYWxpemVEZXB0aCA9IF9hID09PSB2b2lkIDAgPyAzIDogX2E7XG4gICAgICAgIHZhciBwcmVwYXJlZCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudCksIHsgZXZlbnRfaWQ6IGV2ZW50LmV2ZW50X2lkIHx8IChoaW50ICYmIGhpbnQuZXZlbnRfaWQgPyBoaW50LmV2ZW50X2lkIDogdXVpZDQoKSksIHRpbWVzdGFtcDogZXZlbnQudGltZXN0YW1wIHx8IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSB9KTtcbiAgICAgICAgdGhpcy5fYXBwbHlDbGllbnRPcHRpb25zKHByZXBhcmVkKTtcbiAgICAgICAgdGhpcy5fYXBwbHlJbnRlZ3JhdGlvbnNNZXRhZGF0YShwcmVwYXJlZCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgc2NvcGUgZ2l2ZW4gdG8gdXMsIHVzZSBpdCBhcyB0aGUgYmFzZSBmb3IgZnVydGhlciBtb2RpZmljYXRpb25zLlxuICAgICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IGNvcHlpbmcgb2YgZGF0YSBpZiBgY2FwdHVyZUNvbnRleHRgIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgICAgdmFyIGZpbmFsU2NvcGUgPSBzY29wZTtcbiAgICAgICAgaWYgKGhpbnQgJiYgaGludC5jYXB0dXJlQ29udGV4dCkge1xuICAgICAgICAgICAgZmluYWxTY29wZSA9IFNjb3BlLmNsb25lKGZpbmFsU2NvcGUpLnVwZGF0ZShoaW50LmNhcHR1cmVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBwcmVwYXJlIHRoZSByZXN1bHQgaGVyZSB3aXRoIGEgcmVzb2x2ZWQgRXZlbnQuXG4gICAgICAgIHZhciByZXN1bHQgPSBTeW5jUHJvbWlzZS5yZXNvbHZlKHByZXBhcmVkKTtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIGxhc3QgdGhpbmcgY2FsbGVkLCBzaW5jZSB3ZSB3YW50IHRoYXRcbiAgICAgICAgLy8ge0BsaW5rIEh1Yi5hZGRFdmVudFByb2Nlc3Nvcn0gZ2V0cyB0aGUgZmluaXNoZWQgcHJlcGFyZWQgZXZlbnQuXG4gICAgICAgIGlmIChmaW5hbFNjb3BlKSB7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIHdlIGhhdmUgYSBodWIgd2UgcmVhc3NpZ24gaXQuXG4gICAgICAgICAgICByZXN1bHQgPSBmaW5hbFNjb3BlLmFwcGx5VG9FdmVudChwcmVwYXJlZCwgaGludCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9ybWFsaXplRGVwdGggPT09ICdudW1iZXInICYmIG5vcm1hbGl6ZURlcHRoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fbm9ybWFsaXplRXZlbnQoZXZ0LCBub3JtYWxpemVEZXB0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYG5vcm1hbGl6ZWAgZnVuY3Rpb24gb24gbmVjZXNzYXJ5IGBFdmVudGAgYXR0cmlidXRlcyB0byBtYWtlIHRoZW0gc2FmZSBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgKiBOb3JtYWxpemVkIGtleXM6XG4gICAgICogLSBgYnJlYWRjcnVtYnMuZGF0YWBcbiAgICAgKiAtIGB1c2VyYFxuICAgICAqIC0gYGNvbnRleHRzYFxuICAgICAqIC0gYGV4dHJhYFxuICAgICAqIEBwYXJhbSBldmVudCBFdmVudFxuICAgICAqIEByZXR1cm5zIE5vcm1hbGl6ZWQgZXZlbnRcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fbm9ybWFsaXplRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGRlcHRoKSB7XG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub3JtYWxpemVkID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50KSwgKGV2ZW50LmJyZWFkY3J1bWJzICYmIHtcbiAgICAgICAgICAgIGJyZWFkY3J1bWJzOiBldmVudC5icmVhZGNydW1icy5tYXAoZnVuY3Rpb24gKGIpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYiksIChiLmRhdGEgJiYge1xuICAgICAgICAgICAgICAgIGRhdGE6IG5vcm1hbGl6ZShiLmRhdGEsIGRlcHRoKSxcbiAgICAgICAgICAgIH0pKSk7IH0pLFxuICAgICAgICB9KSksIChldmVudC51c2VyICYmIHtcbiAgICAgICAgICAgIHVzZXI6IG5vcm1hbGl6ZShldmVudC51c2VyLCBkZXB0aCksXG4gICAgICAgIH0pKSwgKGV2ZW50LmNvbnRleHRzICYmIHtcbiAgICAgICAgICAgIGNvbnRleHRzOiBub3JtYWxpemUoZXZlbnQuY29udGV4dHMsIGRlcHRoKSxcbiAgICAgICAgfSkpLCAoZXZlbnQuZXh0cmEgJiYge1xuICAgICAgICAgICAgZXh0cmE6IG5vcm1hbGl6ZShldmVudC5leHRyYSwgZGVwdGgpLFxuICAgICAgICB9KSk7XG4gICAgICAgIC8vIGV2ZW50LmNvbnRleHRzLnRyYWNlIHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCBhIFRyYW5zYWN0aW9uLiBTaW1pbGFybHksXG4gICAgICAgIC8vIGV2ZW50LnNwYW5zW10gc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IGNoaWxkIFNwYW5zLiBHaXZlbiB0aGF0IGFcbiAgICAgICAgLy8gVHJhbnNhY3Rpb24gaXMgY29uY2VwdHVhbGx5IGEgU3Bhbiwgbm9ybWFsaXphdGlvbiBzaG91bGQgYXBwbHkgdG8gYm90aFxuICAgICAgICAvLyBUcmFuc2FjdGlvbnMgYW5kIFNwYW5zIGNvbnNpc3RlbnRseS5cbiAgICAgICAgLy8gRm9yIG5vdyB0aGUgZGVjaXNpb24gaXMgdG8gc2tpcCBub3JtYWxpemF0aW9uIG9mIFRyYW5zYWN0aW9ucyBhbmQgU3BhbnMsXG4gICAgICAgIC8vIHNvIHRoaXMgYmxvY2sgb3ZlcndyaXRlcyB0aGUgbm9ybWFsaXplZCBldmVudCB0byBhZGQgYmFjayB0aGUgb3JpZ2luYWxcbiAgICAgICAgLy8gVHJhbnNhY3Rpb24gaW5mb3JtYXRpb24gcHJpb3IgdG8gbm9ybWFsaXphdGlvbi5cbiAgICAgICAgaWYgKGV2ZW50LmNvbnRleHRzICYmIGV2ZW50LmNvbnRleHRzLnRyYWNlKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICBub3JtYWxpemVkLmNvbnRleHRzLnRyYWNlID0gZXZlbnQuY29udGV4dHMudHJhY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiAgRW5oYW5jZXMgZXZlbnQgdXNpbmcgdGhlIGNsaWVudCBjb25maWd1cmF0aW9uLlxuICAgICAqICBJdCB0YWtlcyBjYXJlIG9mIGFsbCBcInN0YXRpY1wiIHZhbHVlcyBsaWtlIGVudmlyb25tZW50LCByZWxlYXNlIGFuZCBgZGlzdGAsXG4gICAgICogIGFzIHdlbGwgYXMgdHJ1bmNhdGluZyBvdmVybHkgbG9uZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGV2ZW50IGV2ZW50IGluc3RhbmNlIHRvIGJlIGVuaGFuY2VkXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2FwcGx5Q2xpZW50T3B0aW9ucyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICB2YXIgZW52aXJvbm1lbnQgPSBvcHRpb25zLmVudmlyb25tZW50LCByZWxlYXNlID0gb3B0aW9ucy5yZWxlYXNlLCBkaXN0ID0gb3B0aW9ucy5kaXN0LCBfYSA9IG9wdGlvbnMubWF4VmFsdWVMZW5ndGgsIG1heFZhbHVlTGVuZ3RoID0gX2EgPT09IHZvaWQgMCA/IDI1MCA6IF9hO1xuICAgICAgICBpZiAoISgnZW52aXJvbm1lbnQnIGluIGV2ZW50KSkge1xuICAgICAgICAgICAgZXZlbnQuZW52aXJvbm1lbnQgPSAnZW52aXJvbm1lbnQnIGluIG9wdGlvbnMgPyBlbnZpcm9ubWVudCA6ICdwcm9kdWN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQucmVsZWFzZSA9PT0gdW5kZWZpbmVkICYmIHJlbGVhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnQucmVsZWFzZSA9IHJlbGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmRpc3QgPT09IHVuZGVmaW5lZCAmJiBkaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV2ZW50LmRpc3QgPSBkaXN0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlKSB7XG4gICAgICAgICAgICBldmVudC5tZXNzYWdlID0gdHJ1bmNhdGUoZXZlbnQubWVzc2FnZSwgbWF4VmFsdWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uICYmIGV4Y2VwdGlvbi52YWx1ZSkge1xuICAgICAgICAgICAgZXhjZXB0aW9uLnZhbHVlID0gdHJ1bmNhdGUoZXhjZXB0aW9uLnZhbHVlLCBtYXhWYWx1ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcXVlc3QgPSBldmVudC5yZXF1ZXN0O1xuICAgICAgICBpZiAocmVxdWVzdCAmJiByZXF1ZXN0LnVybCkge1xuICAgICAgICAgICAgcmVxdWVzdC51cmwgPSB0cnVuY2F0ZShyZXF1ZXN0LnVybCwgbWF4VmFsdWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgYWxsIHVzZWQgaW50ZWdyYXRpb25zIHRvIHRoZSBTREsgaW5mbyBpbiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0aGF0IHdpbGwgYmUgZmlsbGVkIHdpdGggYWxsIGludGVncmF0aW9ucy5cbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fYXBwbHlJbnRlZ3JhdGlvbnNNZXRhZGF0YSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgc2RrSW5mbyA9IGV2ZW50LnNkaztcbiAgICAgICAgdmFyIGludGVncmF0aW9uc0FycmF5ID0gT2JqZWN0LmtleXModGhpcy5faW50ZWdyYXRpb25zKTtcbiAgICAgICAgaWYgKHNka0luZm8gJiYgaW50ZWdyYXRpb25zQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2RrSW5mby5pbnRlZ3JhdGlvbnMgPSBpbnRlZ3JhdGlvbnNBcnJheTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGVsbHMgdGhlIGJhY2tlbmQgdG8gc2VuZCB0aGlzIGV2ZW50XG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBTZW50cnkgZXZlbnQgdG8gc2VuZFxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRFdmVudChldmVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIGV2ZW50IGFuZCBsb2dzIGFuIGVycm9yIGluIGNhc2Ugb2YgcmVqZWN0aW9uXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGhpbnRcbiAgICAgKiBAcGFyYW0gc2NvcGVcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fY2FwdHVyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBzY29wZSkudGhlbihmdW5jdGlvbiAoZmluYWxFdmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsRXZlbnQuZXZlbnRfaWQ7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYW4gZXZlbnQgKGVpdGhlciBlcnJvciBvciBtZXNzYWdlKSBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICAgICAqXG4gICAgICogVGhpcyBhbHNvIGFkZHMgYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgaW5mb3JtYXRpb24gdG8gdGhlIGV2ZW50LiBIb3dldmVyLFxuICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIG1ldGEgZGF0YSAoc3VjaCBhcyB0aGUgVXNlcidzIElQIGFkZHJlc3MpIG11c3QgYmUgYWRkZWRcbiAgICAgKiBieSB0aGUgU0RLIGltcGxlbWVudG9yLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHNlbmQgdG8gU2VudHJ5LlxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgKiBAcGFyYW0gc2NvcGUgQSBzY29wZSBjb250YWluaW5nIGV2ZW50IG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIEEgU3luY1Byb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBldmVudCBvciByZWplY3RzIGluIGNhc2UgZXZlbnQgd2FzL3dpbGwgbm90IGJlIHNlbmQuXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3Byb2Nlc3NFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldE9wdGlvbnMoKSwgYmVmb3JlU2VuZCA9IF9hLmJlZm9yZVNlbmQsIHNhbXBsZVJhdGUgPSBfYS5zYW1wbGVSYXRlO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KG5ldyBTZW50cnlFcnJvcignU0RLIG5vdCBlbmFibGVkLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNUcmFuc2FjdGlvbiA9IGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbic7XG4gICAgICAgIC8vIDEuMCA9PT0gMTAwJSBldmVudHMgYXJlIHNlbnRcbiAgICAgICAgLy8gMC4wID09PSAwJSBldmVudHMgYXJlIHNlbnRcbiAgICAgICAgLy8gU2FtcGxpbmcgZm9yIHRyYW5zYWN0aW9uIGhhcHBlbnMgc29tZXdoZXJlIGVsc2VcbiAgICAgICAgaWYgKCFpc1RyYW5zYWN0aW9uICYmIHR5cGVvZiBzYW1wbGVSYXRlID09PSAnbnVtYmVyJyAmJiBNYXRoLnJhbmRvbSgpID4gc2FtcGxlUmF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoXCJEaXNjYXJkaW5nIGV2ZW50IGJlY2F1c2UgaXQncyBub3QgaW5jbHVkZWQgaW4gdGhlIHJhbmRvbSBzYW1wbGUgKHNhbXBsaW5nIHJhdGUgPSBcIiArIHNhbXBsZVJhdGUgKyBcIilcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlRXZlbnQoZXZlbnQsIHNjb3BlLCBoaW50KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHByZXBhcmVkKSB7XG4gICAgICAgICAgICBpZiAocHJlcGFyZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ0FuIGV2ZW50IHByb2Nlc3NvciByZXR1cm5lZCBudWxsLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlzSW50ZXJuYWxFeGNlcHRpb24gPSBoaW50ICYmIGhpbnQuZGF0YSAmJiBoaW50LmRhdGEuX19zZW50cnlfXyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpc0ludGVybmFsRXhjZXB0aW9uIHx8IGlzVHJhbnNhY3Rpb24gfHwgIWJlZm9yZVNlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlcGFyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmVmb3JlU2VuZFJlc3VsdCA9IGJlZm9yZVNlbmQocHJlcGFyZWQsIGhpbnQpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWZvcmVTZW5kUmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignYGJlZm9yZVNlbmRgIG1ldGhvZCBoYXMgdG8gcmV0dXJuIGBudWxsYCBvciBhIHZhbGlkIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNUaGVuYWJsZShiZWZvcmVTZW5kUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiZWZvcmVTZW5kUmVzdWx0LnRoZW4oZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudDsgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKFwiYmVmb3JlU2VuZCByZWplY3RlZCB3aXRoIFwiICsgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmVmb3JlU2VuZFJlc3VsdDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwcm9jZXNzZWRFdmVudCkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3NlZEV2ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdgYmVmb3JlU2VuZGAgcmV0dXJuZWQgYG51bGxgLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBzY29wZSAmJiBzY29wZS5nZXRTZXNzaW9uICYmIHNjb3BlLmdldFNlc3Npb24oKTtcbiAgICAgICAgICAgIGlmICghaXNUcmFuc2FjdGlvbiAmJiBzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQoc2Vzc2lvbiwgcHJvY2Vzc2VkRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3NlbmRFdmVudChwcm9jZXNzZWRFdmVudCk7XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VkRXZlbnQ7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgU2VudHJ5RXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgX19zZW50cnlfXzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiByZWFzb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihcIkV2ZW50IHByb2Nlc3NpbmcgcGlwZWxpbmUgdGhyZXcgYW4gZXJyb3IsIG9yaWdpbmFsIGV2ZW50IHdpbGwgbm90IGJlIHNlbnQuIERldGFpbHMgaGF2ZSBiZWVuIHNlbnQgYXMgYSBuZXcgZXZlbnQuXFxuUmVhc29uOiBcIiArIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2NjdXBpZXMgdGhlIGNsaWVudCB3aXRoIHByb2Nlc3NpbmcgYW5kIGV2ZW50XG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nICs9IDE7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl9wcm9jZXNzaW5nIC09IDE7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9wcm9jZXNzaW5nIC09IDE7XG4gICAgICAgICAgICByZXR1cm4gcmVhc29uO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlQ2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IEJhc2VDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2VjbGllbnQuanMubWFwIiwiLyoqIFRoZSBzdGF0dXMgb2YgYW4gZXZlbnQuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IHZhciBTdGF0dXM7XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKiBUaGUgc3RhdHVzIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLiAqL1xuICAgIFN0YXR1c1tcIlVua25vd25cIl0gPSBcInVua25vd25cIjtcbiAgICAvKiogVGhlIGV2ZW50IHdhcyBza2lwcGVkIGR1ZSB0byBjb25maWd1cmF0aW9uIG9yIGNhbGxiYWNrcy4gKi9cbiAgICBTdGF0dXNbXCJTa2lwcGVkXCJdID0gXCJza2lwcGVkXCI7XG4gICAgLyoqIFRoZSBldmVudCB3YXMgc2VudCB0byBTZW50cnkgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIFN0YXR1c1tcIlN1Y2Nlc3NcIl0gPSBcInN1Y2Nlc3NcIjtcbiAgICAvKiogVGhlIGNsaWVudCBpcyBjdXJyZW50bHkgcmF0ZSBsaW1pdGVkIGFuZCB3aWxsIHRyeSBhZ2FpbiBsYXRlci4gKi9cbiAgICBTdGF0dXNbXCJSYXRlTGltaXRcIl0gPSBcInJhdGVfbGltaXRcIjtcbiAgICAvKiogVGhlIGV2ZW50IGNvdWxkIG5vdCBiZSBwcm9jZXNzZWQuICovXG4gICAgU3RhdHVzW1wiSW52YWxpZFwiXSA9IFwiaW52YWxpZFwiO1xuICAgIC8qKiBBIHNlcnZlci1zaWRlIGVycm9yIG9jdXJyZWQgZHVyaW5nIHN1Ym1pc3Npb24uICovXG4gICAgU3RhdHVzW1wiRmFpbGVkXCJdID0gXCJmYWlsZWRcIjtcbn0pKFN0YXR1cyB8fCAoU3RhdHVzID0ge30pKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlLCBpbXBvcnQvZXhwb3J0XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEge0BsaW5rIFN0YXR1c30uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2VuZCBzdGF0dXMgb3Ige0BsaW5rIFN0YXR1cy5Vbmtub3dufS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tSHR0cENvZGUoY29kZSkge1xuICAgICAgICBpZiAoY29kZSA+PSAyMDAgJiYgY29kZSA8IDMwMCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5TdWNjZXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID09PSA0MjkpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuUmF0ZUxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID49IDQwMCAmJiBjb2RlIDwgNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkludmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPj0gNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkZhaWxlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RhdHVzLlVua25vd247XG4gICAgfVxuICAgIFN0YXR1cy5mcm9tSHR0cENvZGUgPSBmcm9tSHR0cENvZGU7XG59KShTdGF0dXMgfHwgKFN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIiwiaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqIE5vb3AgdHJhbnNwb3J0ICovXG52YXIgTm9vcFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wVHJhbnNwb3J0KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE5vb3BUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHJlYXNvbjogXCJOb29wVHJhbnNwb3J0OiBFdmVudCBoYXMgYmVlbiBza2lwcGVkIGJlY2F1c2Ugbm8gRHNuIGlzIGNvbmZpZ3VyZWQuXCIsXG4gICAgICAgICAgICBzdGF0dXM6IFN0YXR1cy5Ta2lwcGVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTm9vcFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCB7IE5vb3BUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiLyoqIEpTRG9jICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IHZhciBTZXZlcml0eTtcbihmdW5jdGlvbiAoU2V2ZXJpdHkpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkZhdGFsXCJdID0gXCJmYXRhbFwiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRXJyb3JcIl0gPSBcImVycm9yXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJXYXJuaW5nXCJdID0gXCJ3YXJuaW5nXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJMb2dcIl0gPSBcImxvZ1wiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiSW5mb1wiXSA9IFwiaW5mb1wiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRGVidWdcIl0gPSBcImRlYnVnXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJDcml0aWNhbFwiXSA9IFwiY3JpdGljYWxcIjtcbn0pKFNldmVyaXR5IHx8IChTZXZlcml0eSA9IHt9KSk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZSwgaW1wb3J0L2V4cG9ydFxuKGZ1bmN0aW9uIChTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgc3RyaW5nLWJhc2VkIGxldmVsIGludG8gYSB7QGxpbmsgU2V2ZXJpdHl9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGxldmVsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBTZXZlcml0eVxuICAgICAqIEByZXR1cm5zIFNldmVyaXR5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyhsZXZlbCkge1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlICdkZWJ1Zyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkRlYnVnO1xuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkluZm87XG4gICAgICAgICAgICBjYXNlICd3YXJuJzpcbiAgICAgICAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgICAgIGNhc2UgJ2ZhdGFsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuRmF0YWw7XG4gICAgICAgICAgICBjYXNlICdjcml0aWNhbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkNyaXRpY2FsO1xuICAgICAgICAgICAgY2FzZSAnbG9nJzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkxvZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBTZXZlcml0eS5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcbn0pKFNldmVyaXR5IHx8IChTZXZlcml0eSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXZlcml0eS5qcy5tYXAiLCJpbXBvcnQgeyBsb2dnZXIsIFNlbnRyeUVycm9yIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBOb29wVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnRzL25vb3AnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGltcGxlbWVudGlvbiBvZiBhIEJhY2tlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBCYXNlQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGluc3RhbmNlLiAqL1xuICAgIGZ1bmN0aW9uIEJhc2VCYWNrZW5kKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdObyBEU04gcHJvdmlkZWQsIGJhY2tlbmQgd2lsbCBub3QgZG8gYW55dGhpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gdGhpcy5fc2V0dXBUcmFuc3BvcnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21FeGNlcHRpb24gPSBmdW5jdGlvbiAoX2V4Y2VwdGlvbiwgX2hpbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdCYWNrZW5kIGhhcyB0byBpbXBsZW1lbnQgYGV2ZW50RnJvbUV4Y2VwdGlvbmAgbWV0aG9kJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21NZXNzYWdlID0gZnVuY3Rpb24gKF9tZXNzYWdlLCBfbGV2ZWwsIF9oaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21NZXNzYWdlYCBtZXRob2QnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZEV2ZW50KGV2ZW50KS50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHdoaWxlIHNlbmRpbmcgZXZlbnQ6IFwiICsgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5zZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0LnNlbmRTZXNzaW9uKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkRyb3BwaW5nIHNlc3Npb24gYmVjYXVzZSBjdXN0b20gdHJhbnNwb3J0IGRvZXNuJ3QgaW1wbGVtZW50IHNlbmRTZXNzaW9uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zZW5kU2Vzc2lvbihzZXNzaW9uKS50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHdoaWxlIHNlbmRpbmcgc2Vzc2lvbjogXCIgKyByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIHRyYW5zcG9ydCBzbyBpdCBjYW4gYmUgdXNlZCBsYXRlciB0byBzZW5kIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9vcFRyYW5zcG9ydCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VCYWNrZW5kO1xufSgpKTtcbmV4cG9ydCB7IEJhc2VCYWNrZW5kIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlYmFja2VuZC5qcy5tYXAiLCIvKipcbiAqIFRoaXMgd2FzIG9yaWdpbmFsbHkgZm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL29jYy9UcmFjZUtpdCwgYnV0IGhhcyBzaW5jZSBiZWVuXG4gKiBsYXJnZWx5IG1vZGlmaWVkIGFuZCBpcyBub3cgbWFpbnRhaW5lZCBhcyBwYXJ0IG9mIFNlbnRyeSBKUyBTREsuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vLyBnbG9iYWwgcmVmZXJlbmNlIHRvIHNsaWNlXG52YXIgVU5LTk9XTl9GVU5DVElPTiA9ICc/Jztcbi8vIENocm9taXVtIGJhc2VkIGJyb3dzZXJzOiBDaHJvbWUsIEJyYXZlLCBuZXcgT3BlcmEsIG5ldyBFZGdlXG52YXIgY2hyb21lID0gL15cXHMqYXQgKD86KC4qPykgP1xcKCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lLWV4dGVuc2lvbnxhZGRyZXNzfG5hdGl2ZXxldmFsfHdlYnBhY2t8PGFub255bW91cz58Wy1hLXpdKzp8LipidW5kbGV8XFwvKS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbi8vIGdlY2tvIHJlZ2V4OiBgKD86YnVuZGxlfFxcZCtcXC5qcylgOiBgYnVuZGxlYCBpcyBmb3IgcmVhY3QgbmF0aXZlLCBgXFxkK1xcLmpzYCBhbHNvIGJ1dCBzcGVjaWZpY2FsbHkgZm9yIHJhbSBidW5kbGVzIGJlY2F1c2UgaXRcbi8vIGdlbmVyYXRlcyBmaWxlbmFtZXMgd2l0aG91dCBhIHByZWZpeCBsaWtlIGBmaWxlOi8vYCB0aGUgZmlsZW5hbWVzIGluIHRoZSBzdGFja3RyYWNlIGFyZSBqdXN0IDQyLmpzXG4vLyBXZSBuZWVkIHRoaXMgc3BlY2lmaWMgY2FzZSBmb3Igbm93IGJlY2F1c2Ugd2Ugd2FudCBubyBvdGhlciByZWdleCB0byBtYXRjaC5cbnZhciBnZWNrbyA9IC9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHdlYnBhY2t8cmVzb3VyY2V8bW96LWV4dGVuc2lvbnxjYXBhY2l0b3IpLio/OlxcLy4qP3xcXFtuYXRpdmUgY29kZVxcXXxbXkBdKig/OmJ1bmRsZXxcXGQrXFwuanMpfFxcL1tcXHdcXC0uIC89XSspKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaTtcbnZhciB3aW5qcyA9IC9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT8uKykgKT9cXCg/KCg/OmZpbGV8bXMtYXBweHxodHRwcz98d2VicGFja3xibG9iKTouKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO1xudmFyIGdlY2tvRXZhbCA9IC8oXFxTKykgbGluZSAoXFxkKykoPzogPiBldmFsIGxpbmUgXFxkKykqID4gZXZhbC9pO1xudmFyIGNocm9tZUV2YWwgPSAvXFwoKFxcUyopKD86OihcXGQrKSkoPzo6KFxcZCspKVxcKS87XG4vLyBCYXNlZCBvbiBvdXIgb3duIG1hcHBpbmcgcGF0dGVybiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5L2Jsb2IvOWYwODMwNWUwOTg2NmM4YmQ2ZDBjMjRmNWIwYWFiZGQ3ZGQ2YzU5Yy9zcmMvc2VudHJ5L2xhbmcvamF2YXNjcmlwdC9lcnJvcm1hcHBpbmcucHkjTDgzLUwxMDhcbnZhciByZWFjdE1pbmlmaWVkUmVnZXhwID0gL01pbmlmaWVkIFJlYWN0IGVycm9yICNcXGQrOy9pO1xuLyoqIEpTRG9jICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlKGV4KSB7XG4gICAgdmFyIHN0YWNrID0gbnVsbDtcbiAgICB2YXIgcG9wU2l6ZSA9IDA7XG4gICAgaWYgKGV4KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXguZnJhbWVzVG9Qb3AgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBwb3BTaXplID0gZXguZnJhbWVzVG9Qb3A7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVhY3RNaW5pZmllZFJlZ2V4cC50ZXN0KGV4Lm1lc3NhZ2UpKSB7XG4gICAgICAgICAgICBwb3BTaXplID0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIG11c3QgYmUgdHJpZWQgZmlyc3QgYmVjYXVzZSBPcGVyYSAxMCAqZGVzdHJveXMqXG4gICAgICAgIC8vIGl0cyBzdGFja3RyYWNlIHByb3BlcnR5IGlmIHlvdSB0cnkgdG8gYWNjZXNzIHRoZSBzdGFja1xuICAgICAgICAvLyBwcm9wZXJ0eSBmaXJzdCEhXG4gICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AoZXgpO1xuICAgICAgICBpZiAoc3RhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBwb3BGcmFtZXMoc3RhY2ssIHBvcFNpemUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wKGV4KTtcbiAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9wRnJhbWVzKHN0YWNrLCBwb3BTaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiBleHRyYWN0TWVzc2FnZShleCksXG4gICAgICAgIG5hbWU6IGV4ICYmIGV4Lm5hbWUsXG4gICAgICAgIHN0YWNrOiBbXSxcbiAgICAgICAgZmFpbGVkOiB0cnVlLFxuICAgIH07XG59XG4vKiogSlNEb2MgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBjb21wbGV4aXR5XG5mdW5jdGlvbiBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AoZXgpIHtcbiAgICBpZiAoIWV4IHx8ICFleC5zdGFjaykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIGxpbmVzID0gZXguc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgIHZhciBpc0V2YWw7XG4gICAgdmFyIHN1Ym1hdGNoO1xuICAgIHZhciBwYXJ0cztcbiAgICB2YXIgZWxlbWVudDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICgocGFydHMgPSBjaHJvbWUuZXhlYyhsaW5lc1tpXSkpKSB7XG4gICAgICAgICAgICB2YXIgaXNOYXRpdmUgPSBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCduYXRpdmUnKSA9PT0gMDsgLy8gc3RhcnQgb2YgbGluZVxuICAgICAgICAgICAgaXNFdmFsID0gcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignZXZhbCcpID09PSAwOyAvLyBzdGFydCBvZiBsaW5lXG4gICAgICAgICAgICBpZiAoaXNFdmFsICYmIChzdWJtYXRjaCA9IGNocm9tZUV2YWwuZXhlYyhwYXJ0c1syXSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lL2NvbHVtbiBudW1iZXJcbiAgICAgICAgICAgICAgICBwYXJ0c1syXSA9IHN1Ym1hdGNoWzFdOyAvLyB1cmxcbiAgICAgICAgICAgICAgICBwYXJ0c1szXSA9IHN1Ym1hdGNoWzJdOyAvLyBsaW5lXG4gICAgICAgICAgICAgICAgcGFydHNbNF0gPSBzdWJtYXRjaFszXTsgLy8gY29sdW1uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIC8vIHdvcmtpbmcgd2l0aCB0aGUgcmVnZXhwIGFib3ZlIGlzIHN1cGVyIHBhaW5mdWwuIGl0IGlzIHF1aXRlIGEgaGFjaywgYnV0IGp1c3Qgc3RyaXBwaW5nIHRoZSBgYWRkcmVzcyBhdCBgXG4gICAgICAgICAgICAgICAgLy8gcHJlZml4IGhlcmUgc2VlbXMgbGlrZSB0aGUgcXVpY2tlc3Qgc29sdXRpb24gZm9yIG5vdy5cbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ2FkZHJlc3MgYXQgJykgPT09IDAgPyBwYXJ0c1syXS5zdWJzdHIoJ2FkZHJlc3MgYXQgJy5sZW5ndGgpIDogcGFydHNbMl0sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgICAgICAgICBhcmdzOiBpc05hdGl2ZSA/IFtwYXJ0c1syXV0gOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiBwYXJ0c1szXSA/ICtwYXJ0c1szXSA6IG51bGwsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwYXJ0cyA9IHdpbmpzLmV4ZWMobGluZXNbaV0pKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgYXJnczogW10sXG4gICAgICAgICAgICAgICAgbGluZTogK3BhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocGFydHMgPSBnZWNrby5leGVjKGxpbmVzW2ldKSkpIHtcbiAgICAgICAgICAgIGlzRXZhbCA9IHBhcnRzWzNdICYmIHBhcnRzWzNdLmluZGV4T2YoJyA+IGV2YWwnKSA+IC0xO1xuICAgICAgICAgICAgaWYgKGlzRXZhbCAmJiAoc3VibWF0Y2ggPSBnZWNrb0V2YWwuZXhlYyhwYXJ0c1szXSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lIG51bWJlclxuICAgICAgICAgICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0gfHwgXCJldmFsXCI7XG4gICAgICAgICAgICAgICAgcGFydHNbM10gPSBzdWJtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICBwYXJ0c1s0XSA9IHN1Ym1hdGNoWzJdO1xuICAgICAgICAgICAgICAgIHBhcnRzWzVdID0gJyc7IC8vIG5vIGNvbHVtbiB3aGVuIGV2YWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDAgJiYgIXBhcnRzWzVdICYmIGV4LmNvbHVtbk51bWJlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlyZUZveCB1c2VzIHRoaXMgYXdlc29tZSBjb2x1bW5OdW1iZXIgcHJvcGVydHkgZm9yIGl0cyB0b3AgZnJhbWVcbiAgICAgICAgICAgICAgICAvLyBBbHNvIG5vdGUsIEZpcmVmb3gncyBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQgYW5kIGV2ZXJ5dGhpbmcgZWxzZSBleHBlY3RzIDEtYmFzZWQsXG4gICAgICAgICAgICAgICAgLy8gc28gYWRkaW5nIDFcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGhhY2sgZG9lc24ndCB3b3JrIGlmIHRvcC1tb3N0IGZyYW1lIGlzIGV2YWxcbiAgICAgICAgICAgICAgICBzdGFja1swXS5jb2x1bW4gPSBleC5jb2x1bW5OdW1iZXIgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgYXJnczogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnLCcpIDogW10sXG4gICAgICAgICAgICAgICAgbGluZTogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogcGFydHNbNV0gPyArcGFydHNbNV0gOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZWxlbWVudC5mdW5jICYmIGVsZW1lbnQubGluZSkge1xuICAgICAgICAgICAgZWxlbWVudC5mdW5jID0gVU5LTk9XTl9GVU5DVElPTjtcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXh0cmFjdE1lc3NhZ2UoZXgpLFxuICAgICAgICBuYW1lOiBleC5uYW1lLFxuICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgfTtcbn1cbi8qKiBKU0RvYyAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrdHJhY2VQcm9wKGV4KSB7XG4gICAgaWYgKCFleCB8fCAhZXguc3RhY2t0cmFjZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gQWNjZXNzIGFuZCBzdG9yZSB0aGUgc3RhY2t0cmFjZSBwcm9wZXJ0eSBiZWZvcmUgZG9pbmcgQU5ZVEhJTkdcbiAgICAvLyBlbHNlIHRvIGl0IGJlY2F1c2UgT3BlcmEgaXMgbm90IHZlcnkgZ29vZCBhdCBwcm92aWRpbmcgaXRcbiAgICAvLyByZWxpYWJseSBpbiBvdGhlciBjaXJjdW1zdGFuY2VzLlxuICAgIHZhciBzdGFja3RyYWNlID0gZXguc3RhY2t0cmFjZTtcbiAgICB2YXIgb3BlcmExMFJlZ2V4ID0gLyBsaW5lIChcXGQrKS4qc2NyaXB0ICg/OmluICk/KFxcUyspKD86OiBpbiBmdW5jdGlvbiAoXFxTKykpPyQvaTtcbiAgICB2YXIgb3BlcmExMVJlZ2V4ID0gLyBsaW5lIChcXGQrKSwgY29sdW1uIChcXGQrKVxccyooPzppbiAoPzo8YW5vbnltb3VzIGZ1bmN0aW9uOiAoW14+XSspPnwoW14pXSspKVxcKCguKilcXCkpPyBpbiAoLiopOlxccyokL2k7XG4gICAgdmFyIGxpbmVzID0gc3RhY2t0cmFjZS5zcGxpdCgnXFxuJyk7XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIHBhcnRzO1xuICAgIGZvciAodmFyIGxpbmUgPSAwOyBsaW5lIDwgbGluZXMubGVuZ3RoOyBsaW5lICs9IDIpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuICAgICAgICBpZiAoKHBhcnRzID0gb3BlcmExMFJlZ2V4LmV4ZWMobGluZXNbbGluZV0pKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6ICtwYXJ0c1sxXSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwYXJ0cyA9IG9wZXJhMTFSZWdleC5leGVjKGxpbmVzW2xpbmVdKSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1s2XSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1szXSB8fCBwYXJ0c1s0XSxcbiAgICAgICAgICAgICAgICBhcmdzOiBwYXJ0c1s1XSA/IHBhcnRzWzVdLnNwbGl0KCcsJykgOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiArcGFydHNbMV0sXG4gICAgICAgICAgICAgICAgY29sdW1uOiArcGFydHNbMl0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuZnVuYyAmJiBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXh0cmFjdE1lc3NhZ2UoZXgpLFxuICAgICAgICBuYW1lOiBleC5uYW1lLFxuICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgfTtcbn1cbi8qKiBSZW1vdmUgTiBudW1iZXIgb2YgZnJhbWVzIGZyb20gdGhlIHN0YWNrICovXG5mdW5jdGlvbiBwb3BGcmFtZXMoc3RhY2t0cmFjZSwgcG9wU2l6ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhY2t0cmFjZSksIHsgc3RhY2s6IHN0YWNrdHJhY2Uuc3RhY2suc2xpY2UocG9wU2l6ZSkgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdGFja3RyYWNlO1xuICAgIH1cbn1cbi8qKlxuICogVGhlcmUgYXJlIGNhc2VzIHdoZXJlIHN0YWNrdHJhY2UubWVzc2FnZSBpcyBhbiBFdmVudCBvYmplY3RcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzE5NDlcbiAqIEluIHRoaXMgc3BlY2lmaWMgY2FzZSB3ZSB0cnkgdG8gZXh0cmFjdCBzdGFja3RyYWNlLm1lc3NhZ2UuZXJyb3IubWVzc2FnZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZXh0cmFjdE1lc3NhZ2UoZXgpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGV4ICYmIGV4Lm1lc3NhZ2U7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiAnTm8gZXJyb3IgbWVzc2FnZSc7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmVycm9yICYmIHR5cGVvZiBtZXNzYWdlLmVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLmVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VraXQuanMubWFwIiwiaW1wb3J0IHsgZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlLCBpc0V2ZW50LCBub3JtYWxpemVUb1NpemUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGNvbXB1dGVTdGFja1RyYWNlIH0gZnJvbSAnLi90cmFjZWtpdCc7XG52YXIgU1RBQ0tUUkFDRV9MSU1JVCA9IDUwO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gZXhjZXB0aW9uIGZyb20gYW4gVHJhY2VLaXRTdGFja1RyYWNlXG4gKiBAcGFyYW0gc3RhY2t0cmFjZSBUcmFjZUtpdFN0YWNrVHJhY2UgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhbiBleGNlcHRpb25cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpIHtcbiAgICB2YXIgZnJhbWVzID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgIHZhciBleGNlcHRpb24gPSB7XG4gICAgICAgIHR5cGU6IHN0YWNrdHJhY2UubmFtZSxcbiAgICAgICAgdmFsdWU6IHN0YWNrdHJhY2UubWVzc2FnZSxcbiAgICB9O1xuICAgIGlmIChmcmFtZXMgJiYgZnJhbWVzLmxlbmd0aCkge1xuICAgICAgICBleGNlcHRpb24uc3RhY2t0cmFjZSA9IHsgZnJhbWVzOiBmcmFtZXMgfTtcbiAgICB9XG4gICAgaWYgKGV4Y2VwdGlvbi50eXBlID09PSB1bmRlZmluZWQgJiYgZXhjZXB0aW9uLnZhbHVlID09PSAnJykge1xuICAgICAgICBleGNlcHRpb24udmFsdWUgPSAnVW5yZWNvdmVyYWJsZSBlcnJvciBjYXVnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gZXhjZXB0aW9uO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21QbGFpbk9iamVjdChleGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgcmVqZWN0aW9uKSB7XG4gICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAgIHZhbHVlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXNFdmVudChleGNlcHRpb24pID8gZXhjZXB0aW9uLmNvbnN0cnVjdG9yLm5hbWUgOiByZWplY3Rpb24gPyAnVW5oYW5kbGVkUmVqZWN0aW9uJyA6ICdFcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vbi1FcnJvciBcIiArIChyZWplY3Rpb24gPyAncHJvbWlzZSByZWplY3Rpb24nIDogJ2V4Y2VwdGlvbicpICsgXCIgY2FwdHVyZWQgd2l0aCBrZXlzOiBcIiArIGV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZShleGNlcHRpb24pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgX19zZXJpYWxpemVkX186IG5vcm1hbGl6ZVRvU2l6ZShleGNlcHRpb24pLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKHN5bnRoZXRpY0V4Y2VwdGlvbikge1xuICAgICAgICB2YXIgc3RhY2t0cmFjZSA9IGNvbXB1dGVTdGFja1RyYWNlKHN5bnRoZXRpY0V4Y2VwdGlvbik7XG4gICAgICAgIHZhciBmcmFtZXNfMSA9IHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtcbiAgICAgICAgZXZlbnQuc3RhY2t0cmFjZSA9IHtcbiAgICAgICAgICAgIGZyYW1lczogZnJhbWVzXzEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tU3RhY2t0cmFjZShzdGFja3RyYWNlKSB7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgdmFsdWVzOiBbZXhjZXB0aW9uXSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2spIHtcbiAgICBpZiAoIXN0YWNrIHx8ICFzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICB2YXIgbG9jYWxTdGFjayA9IHN0YWNrO1xuICAgIHZhciBmaXJzdEZyYW1lRnVuY3Rpb24gPSBsb2NhbFN0YWNrWzBdLmZ1bmMgfHwgJyc7XG4gICAgdmFyIGxhc3RGcmFtZUZ1bmN0aW9uID0gbG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aCAtIDFdLmZ1bmMgfHwgJyc7XG4gICAgLy8gSWYgc3RhY2sgc3RhcnRzIHdpdGggb25lIG9mIG91ciBBUEkgY2FsbHMsIHJlbW92ZSBpdCAoc3RhcnRzLCBtZWFuaW5nIGl0J3MgdGhlIHRvcCBvZiB0aGUgc3RhY2sgLSBha2EgbGFzdCBjYWxsKVxuICAgIGlmIChmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZU1lc3NhZ2UnKSAhPT0gLTEgfHwgZmlyc3RGcmFtZUZ1bmN0aW9uLmluZGV4T2YoJ2NhcHR1cmVFeGNlcHRpb24nKSAhPT0gLTEpIHtcbiAgICAgICAgbG9jYWxTdGFjayA9IGxvY2FsU3RhY2suc2xpY2UoMSk7XG4gICAgfVxuICAgIC8vIElmIHN0YWNrIGVuZHMgd2l0aCBvbmUgb2Ygb3VyIGludGVybmFsIEFQSSBjYWxscywgcmVtb3ZlIGl0IChlbmRzLCBtZWFuaW5nIGl0J3MgdGhlIGJvdHRvbSBvZiB0aGUgc3RhY2sgLSBha2EgdG9wLW1vc3QgY2FsbClcbiAgICBpZiAobGFzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignc2VudHJ5V3JhcHBlZCcpICE9PSAtMSkge1xuICAgICAgICBsb2NhbFN0YWNrID0gbG9jYWxTdGFjay5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIC8vIFRoZSBmcmFtZSB3aGVyZSB0aGUgY3Jhc2ggaGFwcGVuZWQsIHNob3VsZCBiZSB0aGUgbGFzdCBlbnRyeSBpbiB0aGUgYXJyYXlcbiAgICByZXR1cm4gbG9jYWxTdGFja1xuICAgICAgICAuc2xpY2UoMCwgU1RBQ0tUUkFDRV9MSU1JVClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoZnJhbWUpIHsgcmV0dXJuICh7XG4gICAgICAgIGNvbG5vOiBmcmFtZS5jb2x1bW4gPT09IG51bGwgPyB1bmRlZmluZWQgOiBmcmFtZS5jb2x1bW4sXG4gICAgICAgIGZpbGVuYW1lOiBmcmFtZS51cmwgfHwgbG9jYWxTdGFja1swXS51cmwsXG4gICAgICAgIGZ1bmN0aW9uOiBmcmFtZS5mdW5jIHx8ICc/JyxcbiAgICAgICAgaW5fYXBwOiB0cnVlLFxuICAgICAgICBsaW5lbm86IGZyYW1lLmxpbmUgPT09IG51bGwgPyB1bmRlZmluZWQgOiBmcmFtZS5saW5lLFxuICAgIH0pOyB9KVxuICAgICAgICAucmV2ZXJzZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2Vycy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkRXhjZXB0aW9uVHlwZVZhbHVlLCBpc0RPTUVycm9yLCBpc0RPTUV4Y2VwdGlvbiwgaXNFcnJvciwgaXNFcnJvckV2ZW50LCBpc0V2ZW50LCBpc1BsYWluT2JqZWN0LCBTeW5jUHJvbWlzZSwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGV2ZW50RnJvbVBsYWluT2JqZWN0LCBldmVudEZyb21TdGFja3RyYWNlLCBwcmVwYXJlRnJhbWVzRm9yRXZlbnQgfSBmcm9tICcuL3BhcnNlcnMnO1xuaW1wb3J0IHsgY29tcHV0ZVN0YWNrVHJhY2UgfSBmcm9tICcuL3RyYWNla2l0Jztcbi8qKlxuICogQnVpbGRzIGFuZCBFdmVudCBmcm9tIGEgRXhjZXB0aW9uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21FeGNlcHRpb24ob3B0aW9ucywgZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IChoaW50ICYmIGhpbnQuc3ludGhldGljRXhjZXB0aW9uKSB8fCB1bmRlZmluZWQ7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRGcm9tVW5rbm93bklucHV0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCB7XG4gICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IG9wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSxcbiAgICB9KTtcbiAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogJ2dlbmVyaWMnLFxuICAgIH0pO1xuICAgIGV2ZW50LmxldmVsID0gU2V2ZXJpdHkuRXJyb3I7XG4gICAgaWYgKGhpbnQgJiYgaGludC5ldmVudF9pZCkge1xuICAgICAgICBldmVudC5ldmVudF9pZCA9IGhpbnQuZXZlbnRfaWQ7XG4gICAgfVxuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKGV2ZW50KTtcbn1cbi8qKlxuICogQnVpbGRzIGFuZCBFdmVudCBmcm9tIGEgTWVzc2FnZVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tTWVzc2FnZShvcHRpb25zLCBtZXNzYWdlLCBsZXZlbCwgaGludCkge1xuICAgIGlmIChsZXZlbCA9PT0gdm9pZCAwKSB7IGxldmVsID0gU2V2ZXJpdHkuSW5mbzsgfVxuICAgIHZhciBzeW50aGV0aWNFeGNlcHRpb24gPSAoaGludCAmJiBoaW50LnN5bnRoZXRpY0V4Y2VwdGlvbikgfHwgdW5kZWZpbmVkO1xuICAgIHZhciBldmVudCA9IGV2ZW50RnJvbVN0cmluZyhtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb24sIHtcbiAgICAgICAgYXR0YWNoU3RhY2t0cmFjZTogb3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlLFxuICAgIH0pO1xuICAgIGV2ZW50LmxldmVsID0gbGV2ZWw7XG4gICAgaWYgKGhpbnQgJiYgaGludC5ldmVudF9pZCkge1xuICAgICAgICBldmVudC5ldmVudF9pZCA9IGhpbnQuZXZlbnRfaWQ7XG4gICAgfVxuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKGV2ZW50KTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tVW5rbm93bklucHV0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgZXZlbnQ7XG4gICAgaWYgKGlzRXJyb3JFdmVudChleGNlcHRpb24pICYmIGV4Y2VwdGlvbi5lcnJvcikge1xuICAgICAgICAvLyBJZiBpdCBpcyBhbiBFcnJvckV2ZW50IHdpdGggYGVycm9yYCBwcm9wZXJ0eSwgZXh0cmFjdCBpdCB0byBnZXQgYWN0dWFsIEVycm9yXG4gICAgICAgIHZhciBlcnJvckV2ZW50ID0gZXhjZXB0aW9uO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgZXhjZXB0aW9uID0gZXJyb3JFdmVudC5lcnJvcjtcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21TdGFja3RyYWNlKGNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbikpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGlmIChpc0RPTUVycm9yKGV4Y2VwdGlvbikgfHwgaXNET01FeGNlcHRpb24oZXhjZXB0aW9uKSkge1xuICAgICAgICAvLyBJZiBpdCBpcyBhIERPTUVycm9yIG9yIERPTUV4Y2VwdGlvbiAod2hpY2ggYXJlIGxlZ2FjeSBBUElzLCBidXQgc3RpbGwgc3VwcG9ydGVkIGluIHNvbWUgYnJvd3NlcnMpXG4gICAgICAgIC8vIHRoZW4gd2UganVzdCBleHRyYWN0IHRoZSBuYW1lLCBjb2RlLCBhbmQgbWVzc2FnZSwgYXMgdGhleSBkb24ndCBwcm92aWRlIGFueXRoaW5nIGVsc2VcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUVycm9yXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01FeGNlcHRpb25cbiAgICAgICAgdmFyIGRvbUV4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgdmFyIG5hbWVfMSA9IGRvbUV4Y2VwdGlvbi5uYW1lIHx8IChpc0RPTUVycm9yKGRvbUV4Y2VwdGlvbikgPyAnRE9NRXJyb3InIDogJ0RPTUV4Y2VwdGlvbicpO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IGRvbUV4Y2VwdGlvbi5tZXNzYWdlID8gbmFtZV8xICsgXCI6IFwiICsgZG9tRXhjZXB0aW9uLm1lc3NhZ2UgOiBuYW1lXzE7XG4gICAgICAgIGV2ZW50ID0gZXZlbnRGcm9tU3RyaW5nKG1lc3NhZ2UsIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgbWVzc2FnZSk7XG4gICAgICAgIGlmICgnY29kZScgaW4gZG9tRXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBldmVudC50YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50LnRhZ3MpLCB7ICdET01FeGNlcHRpb24uY29kZSc6IFwiXCIgKyBkb21FeGNlcHRpb24uY29kZSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKGV4Y2VwdGlvbikpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlYWwgRXJyb3Igb2JqZWN0LCBkbyBub3RoaW5nXG4gICAgICAgIGV2ZW50ID0gZXZlbnRGcm9tU3RhY2t0cmFjZShjb21wdXRlU3RhY2tUcmFjZShleGNlcHRpb24pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBpZiAoaXNQbGFpbk9iamVjdChleGNlcHRpb24pIHx8IGlzRXZlbnQoZXhjZXB0aW9uKSkge1xuICAgICAgICAvLyBJZiBpdCBpcyBwbGFpbiBPYmplY3Qgb3IgRXZlbnQsIHNlcmlhbGl6ZSBpdCBtYW51YWxseSBhbmQgZXh0cmFjdCBvcHRpb25zXG4gICAgICAgIC8vIFRoaXMgd2lsbCBhbGxvdyB1cyB0byBncm91cCBldmVudHMgYmFzZWQgb24gdG9wLWxldmVsIGtleXNcbiAgICAgICAgLy8gd2hpY2ggaXMgbXVjaCBiZXR0ZXIgdGhhbiBjcmVhdGluZyBuZXcgZ3JvdXAgd2hlbiBhbnkga2V5L3ZhbHVlIGNoYW5nZVxuICAgICAgICB2YXIgb2JqZWN0RXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICBldmVudCA9IGV2ZW50RnJvbVBsYWluT2JqZWN0KG9iamVjdEV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zLnJlamVjdGlvbik7XG4gICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgc3ludGhldGljOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICAvLyBJZiBub25lIG9mIHByZXZpb3VzIGNoZWNrcyB3ZXJlIHZhbGlkLCB0aGVuIGl0IG1lYW5zIHRoYXQgaXQncyBub3Q6XG4gICAgLy8gLSBhbiBpbnN0YW5jZSBvZiBET01FcnJvclxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRE9NRXhjZXB0aW9uXG4gICAgLy8gLSBhbiBpbnN0YW5jZSBvZiBFdmVudFxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRXJyb3JcbiAgICAvLyAtIGEgdmFsaWQgRXJyb3JFdmVudCAob25lIHdpdGggYW4gZXJyb3IgcHJvcGVydHkpXG4gICAgLy8gLSBhIHBsYWluIE9iamVjdFxuICAgIC8vXG4gICAgLy8gU28gYmFpbCBvdXQgYW5kIGNhcHR1cmUgaXQgYXMgYSBzaW1wbGUgbWVzc2FnZTpcbiAgICBldmVudCA9IGV2ZW50RnJvbVN0cmluZyhleGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucyk7XG4gICAgYWRkRXhjZXB0aW9uVHlwZVZhbHVlKGV2ZW50LCBcIlwiICsgZXhjZXB0aW9uLCB1bmRlZmluZWQpO1xuICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICBzeW50aGV0aWM6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21TdHJpbmcoaW5wdXQsIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICBtZXNzYWdlOiBpbnB1dCxcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UgJiYgc3ludGhldGljRXhjZXB0aW9uKSB7XG4gICAgICAgIHZhciBzdGFja3RyYWNlID0gY29tcHV0ZVN0YWNrVHJhY2Uoc3ludGhldGljRXhjZXB0aW9uKTtcbiAgICAgICAgdmFyIGZyYW1lc18xID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgICAgICBldmVudC5zdGFja3RyYWNlID0ge1xuICAgICAgICAgICAgZnJhbWVzOiBmcmFtZXNfMSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRidWlsZGVyLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3JlYWQsIF9fcmVzdCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbi8qKiBFeHRyYWN0IHNkayBpbmZvIGZyb20gZnJvbSB0aGUgQVBJIG1ldGFkYXRhICovXG5mdW5jdGlvbiBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyKGFwaSkge1xuICAgIGlmICghYXBpLm1ldGFkYXRhIHx8ICFhcGkubWV0YWRhdGEuc2RrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIF9hID0gYXBpLm1ldGFkYXRhLnNkaywgbmFtZSA9IF9hLm5hbWUsIHZlcnNpb24gPSBfYS52ZXJzaW9uO1xuICAgIHJldHVybiB7IG5hbWU6IG5hbWUsIHZlcnNpb246IHZlcnNpb24gfTtcbn1cbi8qKlxuICogQXBwbHkgU2RrSW5mbyAobmFtZSwgdmVyc2lvbiwgcGFja2FnZXMsIGludGVncmF0aW9ucykgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnQga2V5LlxuICogTWVyZ2Ugd2l0aCBleGlzdGluZyBkYXRhIGlmIGFueS5cbiAqKi9cbmZ1bmN0aW9uIGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBzZGtJbmZvKSB7XG4gICAgaWYgKCFzZGtJbmZvKSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgZXZlbnQuc2RrID0gZXZlbnQuc2RrIHx8IHtcbiAgICAgICAgbmFtZTogc2RrSW5mby5uYW1lLFxuICAgICAgICB2ZXJzaW9uOiBzZGtJbmZvLnZlcnNpb24sXG4gICAgfTtcbiAgICBldmVudC5zZGsubmFtZSA9IGV2ZW50LnNkay5uYW1lIHx8IHNka0luZm8ubmFtZTtcbiAgICBldmVudC5zZGsudmVyc2lvbiA9IGV2ZW50LnNkay52ZXJzaW9uIHx8IHNka0luZm8udmVyc2lvbjtcbiAgICBldmVudC5zZGsuaW50ZWdyYXRpb25zID0gX19zcHJlYWQoKGV2ZW50LnNkay5pbnRlZ3JhdGlvbnMgfHwgW10pLCAoc2RrSW5mby5pbnRlZ3JhdGlvbnMgfHwgW10pKTtcbiAgICBldmVudC5zZGsucGFja2FnZXMgPSBfX3NwcmVhZCgoZXZlbnQuc2RrLnBhY2thZ2VzIHx8IFtdKSwgKHNka0luZm8ucGFja2FnZXMgfHwgW10pKTtcbiAgICByZXR1cm4gZXZlbnQ7XG59XG4vKiogQ3JlYXRlcyBhIFNlbnRyeVJlcXVlc3QgZnJvbSBhbiBldmVudC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXNzaW9uVG9TZW50cnlSZXF1ZXN0KHNlc3Npb24sIGFwaSkge1xuICAgIHZhciBzZGtJbmZvID0gZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlcihhcGkpO1xuICAgIHZhciBlbnZlbG9wZUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeShfX2Fzc2lnbih7IHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9LCAoc2RrSW5mbyAmJiB7IHNkazogc2RrSW5mbyB9KSkpO1xuICAgIHZhciBpdGVtSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvZHk6IGVudmVsb3BlSGVhZGVycyArIFwiXFxuXCIgKyBpdGVtSGVhZGVycyArIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSxcbiAgICAgICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgICAgICB1cmw6IGFwaS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCksXG4gICAgfTtcbn1cbi8qKiBDcmVhdGVzIGEgU2VudHJ5UmVxdWVzdCBmcm9tIGFuIGV2ZW50LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50VG9TZW50cnlSZXF1ZXN0KGV2ZW50LCBhcGkpIHtcbiAgICB2YXIgc2RrSW5mbyA9IGdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIoYXBpKTtcbiAgICB2YXIgZXZlbnRUeXBlID0gZXZlbnQudHlwZSB8fCAnZXZlbnQnO1xuICAgIHZhciB1c2VFbnZlbG9wZSA9IGV2ZW50VHlwZSA9PT0gJ3RyYW5zYWN0aW9uJztcbiAgICB2YXIgX2EgPSBldmVudC5kZWJ1Z19tZXRhIHx8IHt9LCB0cmFuc2FjdGlvblNhbXBsaW5nID0gX2EudHJhbnNhY3Rpb25TYW1wbGluZywgbWV0YWRhdGEgPSBfX3Jlc3QoX2EsIFtcInRyYW5zYWN0aW9uU2FtcGxpbmdcIl0pO1xuICAgIHZhciBfYiA9IHRyYW5zYWN0aW9uU2FtcGxpbmcgfHwge30sIHNhbXBsaW5nTWV0aG9kID0gX2IubWV0aG9kLCBzYW1wbGVSYXRlID0gX2IucmF0ZTtcbiAgICBpZiAoT2JqZWN0LmtleXMobWV0YWRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgZXZlbnQuZGVidWdfbWV0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50LmRlYnVnX21ldGEgPSBtZXRhZGF0YTtcbiAgICB9XG4gICAgdmFyIHJlcSA9IHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2RrSW5mbyA/IGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBhcGkubWV0YWRhdGEuc2RrKSA6IGV2ZW50KSxcbiAgICAgICAgdHlwZTogZXZlbnRUeXBlLFxuICAgICAgICB1cmw6IHVzZUVudmVsb3BlID8gYXBpLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKSA6IGFwaS5nZXRTdG9yZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCksXG4gICAgfTtcbiAgICAvLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZW52ZWxvcGVzL1xuICAgIC8vIFNpbmNlIHdlIGRvbid0IG5lZWQgdG8gbWFuaXB1bGF0ZSBlbnZlbG9wZXMgbm9yIHN0b3JlIHRoZW0sIHRoZXJlIGlzIG5vXG4gICAgLy8gZXhwb3J0ZWQgY29uY2VwdCBvZiBhbiBFbnZlbG9wZSB3aXRoIG9wZXJhdGlvbnMgaW5jbHVkaW5nIHNlcmlhbGl6YXRpb24gYW5kXG4gICAgLy8gZGVzZXJpYWxpemF0aW9uLiBJbnN0ZWFkLCB3ZSBvbmx5IGltcGxlbWVudCBhIG1pbmltYWwgc3Vic2V0IG9mIHRoZSBzcGVjIHRvXG4gICAgLy8gc2VyaWFsaXplIGV2ZW50cyBpbmxpbmUgaGVyZS5cbiAgICBpZiAodXNlRW52ZWxvcGUpIHtcbiAgICAgICAgdmFyIGVudmVsb3BlSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KF9fYXNzaWduKHsgZXZlbnRfaWQ6IGV2ZW50LmV2ZW50X2lkLCBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSwgKHNka0luZm8gJiYgeyBzZGs6IHNka0luZm8gfSkpKTtcbiAgICAgICAgdmFyIGl0ZW1IZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdHlwZTogZXZlbnQudHlwZSxcbiAgICAgICAgICAgIC8vIFRPRE86IFJpZ2h0IG5vdywgc2FtcGxlUmF0ZSBtYXkgb3IgbWF5IG5vdCBiZSBkZWZpbmVkIChpdCB3b24ndCBiZSBpbiB0aGUgY2FzZXMgb2YgaW5oZXJpdGFuY2UgYW5kXG4gICAgICAgICAgICAvLyBleHBsaWNpdGx5LXNldCBzYW1wbGluZyBkZWNpc2lvbnMpLiBBcmUgd2UgZ29vZCB3aXRoIHRoYXQ/XG4gICAgICAgICAgICBzYW1wbGVfcmF0ZXM6IFt7IGlkOiBzYW1wbGluZ01ldGhvZCwgcmF0ZTogc2FtcGxlUmF0ZSB9XSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRoZSB0cmFpbGluZyBuZXdsaW5lIGlzIG9wdGlvbmFsLiBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHNlbmQgaXQgdG8gYXZvaWRcbiAgICAgICAgLy8gc2VuZGluZyB1bm5lY2Vzc2FyeSBieXRlcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29uc3QgZW52ZWxvcGUgPSBgJHtlbnZlbG9wZUhlYWRlcnN9XFxuJHtpdGVtSGVhZGVyc31cXG4ke3JlcS5ib2R5fVxcbmA7XG4gICAgICAgIHZhciBlbnZlbG9wZSA9IGVudmVsb3BlSGVhZGVycyArIFwiXFxuXCIgKyBpdGVtSGVhZGVycyArIFwiXFxuXCIgKyByZXEuYm9keTtcbiAgICAgICAgcmVxLmJvZHkgPSBlbnZlbG9wZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QuanMubWFwIiwiaW1wb3J0IHsgRHNuLCB1cmxFbmNvZGUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbnZhciBTRU5UUllfQVBJX1ZFUlNJT04gPSAnNyc7XG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBwcm92aWRlIHVybHMsIGhlYWRlcnMgYW5kIG1ldGFkYXRhIHRoYXQgY2FuIGJlIHVzZWQgdG8gZm9ybVxuICogZGlmZmVyZW50IHR5cGVzIG9mIHJlcXVlc3RzIHRvIFNlbnRyeSBlbmRwb2ludHMuXG4gKiBTdXBwb3J0cyBib3RoIGVudmVsb3BlcyBhbmQgcmVndWxhciBldmVudCByZXF1ZXN0cy5cbiAqKi9cbnZhciBBUEkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBUEkgKi9cbiAgICBmdW5jdGlvbiBBUEkoZHNuLCBtZXRhZGF0YSkge1xuICAgICAgICBpZiAobWV0YWRhdGEgPT09IHZvaWQgMCkgeyBtZXRhZGF0YSA9IHt9OyB9XG4gICAgICAgIHRoaXMuZHNuID0gZHNuO1xuICAgICAgICB0aGlzLl9kc25PYmplY3QgPSBuZXcgRHNuKGRzbik7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIERzbiBvYmplY3QuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXREc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kc25PYmplY3Q7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgcHJlZml4IHRvIGNvbnN0cnVjdCBTZW50cnkgaW5nZXN0aW9uIEFQSSBlbmRwb2ludHMuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRCYXNlQXBpRW5kcG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBwcm90b2NvbCA9IGRzbi5wcm90b2NvbCA/IGRzbi5wcm90b2NvbCArIFwiOlwiIDogJyc7XG4gICAgICAgIHZhciBwb3J0ID0gZHNuLnBvcnQgPyBcIjpcIiArIGRzbi5wb3J0IDogJyc7XG4gICAgICAgIHJldHVybiBwcm90b2NvbCArIFwiLy9cIiArIGRzbi5ob3N0ICsgcG9ydCArIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCI7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluZ2VzdEVuZHBvaW50KCdzdG9yZScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RvcmVFbmRwb2ludCgpICsgXCI/XCIgKyB0aGlzLl9lbmNvZGVkQXV0aCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudmVsb3BlRW5kcG9pbnQoKSArIFwiP1wiICsgdGhpcy5fZW5jb2RlZEF1dGgoKTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIG9ubHkgdGhlIHBhdGggY29tcG9uZW50IGZvciB0aGUgc3RvcmUgZW5kcG9pbnQuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50UGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgcmV0dXJuIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCIgKyBkc24ucHJvamVjdElkICsgXCIvc3RvcmUvXCI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGluIHJlcXVlc3QgaGVhZGVycy5cbiAgICAgKiBUaGlzIGlzIG5lZWRlZCBmb3Igbm9kZSBhbmQgdGhlIG9sZCAvc3RvcmUgZW5kcG9pbnQgaW4gc2VudHJ5XG4gICAgICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRSZXF1ZXN0SGVhZGVycyA9IGZ1bmN0aW9uIChjbGllbnROYW1lLCBjbGllbnRWZXJzaW9uKSB7XG4gICAgICAgIC8vIENIQU5HRSBUSElTIHRvIHVzZSBtZXRhZGF0YSBidXQga2VlcCBjbGllbnROYW1lIGFuZCBjbGllbnRWZXJzaW9uIGNvbXBhdGlibGVcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGhlYWRlciA9IFtcIlNlbnRyeSBzZW50cnlfdmVyc2lvbj1cIiArIFNFTlRSWV9BUElfVkVSU0lPTl07XG4gICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X2NsaWVudD1cIiArIGNsaWVudE5hbWUgKyBcIi9cIiArIGNsaWVudFZlcnNpb24pO1xuICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9rZXk9XCIgKyBkc24ucHVibGljS2V5KTtcbiAgICAgICAgaWYgKGRzbi5wYXNzKSB7XG4gICAgICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9zZWNyZXQ9XCIgKyBkc24ucGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnWC1TZW50cnktQXV0aCc6IGhlYWRlci5qb2luKCcsICcpLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIHVybCB0byB0aGUgcmVwb3J0IGRpYWxvZyBlbmRwb2ludC4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50ID0gZnVuY3Rpb24gKGRpYWxvZ09wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRpYWxvZ09wdGlvbnMgPT09IHZvaWQgMCkgeyBkaWFsb2dPcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGVuZHBvaW50ID0gdGhpcy5nZXRCYXNlQXBpRW5kcG9pbnQoKSArIFwiZW1iZWQvZXJyb3ItcGFnZS9cIjtcbiAgICAgICAgdmFyIGVuY29kZWRPcHRpb25zID0gW107XG4gICAgICAgIGVuY29kZWRPcHRpb25zLnB1c2goXCJkc249XCIgKyBkc24udG9TdHJpbmcoKSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkaWFsb2dPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnZHNuJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaWFsb2dPcHRpb25zLnVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaWFsb2dPcHRpb25zLnVzZXIubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKFwibmFtZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zLnVzZXIubmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucy51c2VyLmVtYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWRPcHRpb25zLnB1c2goXCJlbWFpbD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zLnVzZXIuZW1haWwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY29kZWRPcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50ICsgXCI/XCIgKyBlbmNvZGVkT3B0aW9ucy5qb2luKCcmJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZHBvaW50O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTC4gKi9cbiAgICBBUEkucHJvdG90eXBlLl9nZXRFbnZlbG9wZUVuZHBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5nZXN0RW5kcG9pbnQoJ2VudmVsb3BlJyk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgaW5nZXN0IEFQSSBlbmRwb2ludCBmb3IgdGFyZ2V0LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuX2dldEluZ2VzdEVuZHBvaW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgYmFzZSA9IHRoaXMuZ2V0QmFzZUFwaUVuZHBvaW50KCk7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHJldHVybiBcIlwiICsgYmFzZSArIGRzbi5wcm9qZWN0SWQgKyBcIi9cIiArIHRhcmdldCArIFwiL1wiO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBVUkwtZW5jb2RlZCBzdHJpbmcgd2l0aCBhdXRoIGNvbmZpZyBzdWl0YWJsZSBmb3IgYSBxdWVyeSBzdHJpbmcuICovXG4gICAgQVBJLnByb3RvdHlwZS5fZW5jb2RlZEF1dGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBhdXRoID0ge1xuICAgICAgICAgICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTcyLlxuICAgICAgICAgICAgc2VudHJ5X2tleTogZHNuLnB1YmxpY0tleSxcbiAgICAgICAgICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB1cmxFbmNvZGUoYXV0aCk7XG4gICAgfTtcbiAgICByZXR1cm4gQVBJO1xufSgpKTtcbmV4cG9ydCB7IEFQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCIsImltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBTeW5jUHJvbWlzZSB9IGZyb20gJy4vc3luY3Byb21pc2UnO1xuLyoqIEEgc2ltcGxlIHF1ZXVlIHRoYXQgaG9sZHMgcHJvbWlzZXMuICovXG52YXIgUHJvbWlzZUJ1ZmZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9taXNlQnVmZmVyKF9saW1pdCkge1xuICAgICAgICB0aGlzLl9saW1pdCA9IF9saW1pdDtcbiAgICAgICAgLyoqIEludGVybmFsIHNldCBvZiBxdWV1ZWQgUHJvbWlzZXMgKi9cbiAgICAgICAgdGhpcy5fYnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNheXMgaWYgdGhlIGJ1ZmZlciBpcyByZWFkeSB0byB0YWtlIG1vcmUgcmVxdWVzdHNcbiAgICAgKi9cbiAgICBQcm9taXNlQnVmZmVyLnByb3RvdHlwZS5pc1JlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGltaXQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmxlbmd0aCgpIDwgdGhpcy5fbGltaXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgYSBwcm9taXNlIHRvIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBQcm9taXNlQnVmZmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNSZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KG5ldyBTZW50cnlFcnJvcignTm90IGFkZGluZyBQcm9taXNlIGR1ZSB0byBidWZmZXIgbGltaXQgcmVhY2hlZC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlci5pbmRleE9mKHRhc2spID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnB1c2godGFzayk7XG4gICAgICAgIH1cbiAgICAgICAgdGFza1xuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlKHRhc2spOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZSh0YXNrKS50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGFkZCB0aGlzIGNhdGNoIGhlcmUgb3RoZXJ3aXNlIHdlIGhhdmUgYW4gdW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvblxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQncyBhIG5ldyBQcm9taXNlIGNoYWluLlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFzaztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByb21pc2UgdG8gdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhc2sgQ2FuIGJlIGFueSBQcm9taXNlTGlrZTxUPlxuICAgICAqIEByZXR1cm5zIFJlbW92ZWQgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBQcm9taXNlQnVmZmVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICB2YXIgcmVtb3ZlZFRhc2sgPSB0aGlzLl9idWZmZXIuc3BsaWNlKHRoaXMuX2J1ZmZlci5pbmRleE9mKHRhc2spLCAxKVswXTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZWRUYXNrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBudW1iZXIgb2YgdW5yZXNvbHZlZCBwcm9taXNlcyBpbiB0aGUgcXVldWUuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmxlbmd0aDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBkcmFpbiB0aGUgd2hvbGUgcXVldWUsIHJldHVybnMgdHJ1ZSBpZiBxdWV1ZSBpcyBlbXB0eSBvciBkcmFpbmVkLlxuICAgICAqIElmIHRpbWVvdXQgaXMgcHJvdmlkZWQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4sIHRoZSBwcm9taXNlIHN0aWxsIHJlc29sdmVzIGJ1dCB3aXRoIGZhbHNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRpbWVvdXQgTnVtYmVyIGluIG1zIHRvIHdhaXQgdW50aWwgaXQgcmVzb2x2ZXMgd2l0aCBmYWxzZS5cbiAgICAgKi9cbiAgICBQcm9taXNlQnVmZmVyLnByb3RvdHlwZS5kcmFpbiA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHZhciBjYXB0dXJlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCAmJiB0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIFN5bmNQcm9taXNlLmFsbChfdGhpcy5fYnVmZmVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FwdHVyZWRTZXRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBQcm9taXNlQnVmZmVyO1xufSgpKTtcbmV4cG9ydCB7IFByb21pc2VCdWZmZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2VidWZmZXIuanMubWFwIiwiaW1wb3J0IHsgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFQSSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBTdGF0dXMsIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIsIHBhcnNlUmV0cnlBZnRlckhlYWRlciwgUHJvbWlzZUJ1ZmZlciwgU2VudHJ5RXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKiBCYXNlIFRyYW5zcG9ydCBjbGFzcyBpbXBsZW1lbnRhdGlvbiAqL1xudmFyIEJhc2VUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFzZVRyYW5zcG9ydChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIC8qKiBBIHNpbXBsZSBidWZmZXIgaG9sZGluZyBhbGwgcmVxdWVzdHMuICovXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBQcm9taXNlQnVmZmVyKDMwKTtcbiAgICAgICAgLyoqIExvY2tzIHRyYW5zcG9ydCBhZnRlciByZWNlaXZpbmcgcmF0ZSBsaW1pdHMgaW4gYSByZXNwb25zZSAqL1xuICAgICAgICB0aGlzLl9yYXRlTGltaXRzID0ge307XG4gICAgICAgIHRoaXMuX2FwaSA9IG5ldyBBUEkob3B0aW9ucy5kc24sIG9wdGlvbnMuX21ldGFkYXRhKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5fYXBpLmdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ1RyYW5zcG9ydCBDbGFzcyBoYXMgdG8gaW1wbGVtZW50IGBzZW5kRXZlbnRgIG1ldGhvZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuZHJhaW4odGltZW91dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgU2VudHJ5IHJlcHNvbnNlIGZvciBwcm9taXNlLWJhc2VkIHRyYW5zcG9ydHMuXG4gICAgICovXG4gICAgQmFzZVRyYW5zcG9ydC5wcm90b3R5cGUuX2hhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciByZXF1ZXN0VHlwZSA9IF9hLnJlcXVlc3RUeXBlLCByZXNwb25zZSA9IF9hLnJlc3BvbnNlLCBoZWFkZXJzID0gX2EuaGVhZGVycywgcmVzb2x2ZSA9IF9hLnJlc29sdmUsIHJlamVjdCA9IF9hLnJlamVjdDtcbiAgICAgICAgdmFyIHN0YXR1cyA9IFN0YXR1cy5mcm9tSHR0cENvZGUocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFwiVGhlIG5hbWUgaXMgY2FzZS1pbnNlbnNpdGl2ZS5cIlxuICAgICAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycy9nZXRcbiAgICAgICAgICovXG4gICAgICAgIHZhciBsaW1pdGVkID0gdGhpcy5faGFuZGxlUmF0ZUxpbWl0KGhlYWRlcnMpO1xuICAgICAgICBpZiAobGltaXRlZClcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVG9vIG1hbnkgcmVxdWVzdHMsIGJhY2tpbmcgb2ZmIHVudGlsOiBcIiArIHRoaXMuX2Rpc2FibGVkVW50aWwocmVxdWVzdFR5cGUpKTtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gU3RhdHVzLlN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IHN0YXR1cyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QocmVzcG9uc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZSB0aGF0IGdpdmVuIGNhdGVnb3J5IGlzIGRpc2FibGVkIHVudGlsIGZvciByYXRlIGxpbWl0aW5nXG4gICAgICovXG4gICAgQmFzZVRyYW5zcG9ydC5wcm90b3R5cGUuX2Rpc2FibGVkVW50aWwgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGVMaW1pdHNbY2F0ZWdvcnldIHx8IHRoaXMuX3JhdGVMaW1pdHMuYWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgY2F0ZWdvcnkgaXMgcmF0ZSBsaW1pdGVkXG4gICAgICovXG4gICAgQmFzZVRyYW5zcG9ydC5wcm90b3R5cGUuX2lzUmF0ZUxpbWl0ZWQgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkVW50aWwoY2F0ZWdvcnkpID4gbmV3IERhdGUoRGF0ZS5ub3coKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIGludGVybmFsIF9yYXRlTGltaXRzIGZyb20gaW5jb21pbmcgaGVhZGVycy4gUmV0dXJucyB0cnVlIGlmIGhlYWRlcnMgY29udGFpbnMgYSBub24tZW1wdHkgcmF0ZSBsaW1pdGluZyBoZWFkZXIuXG4gICAgICovXG4gICAgQmFzZVRyYW5zcG9ydC5wcm90b3R5cGUuX2hhbmRsZVJhdGVMaW1pdCA9IGZ1bmN0aW9uIChoZWFkZXJzKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHJsSGVhZGVyID0gaGVhZGVyc1sneC1zZW50cnktcmF0ZS1saW1pdHMnXTtcbiAgICAgICAgdmFyIHJhSGVhZGVyID0gaGVhZGVyc1sncmV0cnktYWZ0ZXInXTtcbiAgICAgICAgaWYgKHJsSGVhZGVyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIHJhdGUgbGltaXQgaGVhZGVycyBhcmUgb2YgdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAvLyAgICAgPGhlYWRlcj4sPGhlYWRlcj4sLi5cbiAgICAgICAgICAgICAgICAvLyB3aGVyZSBlYWNoIDxoZWFkZXI+IGlzIG9mIHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgLy8gICAgIDxyZXRyeV9hZnRlcj46IDxjYXRlZ29yaWVzPjogPHNjb3BlPjogPHJlYXNvbl9jb2RlPlxuICAgICAgICAgICAgICAgIC8vIHdoZXJlXG4gICAgICAgICAgICAgICAgLy8gICAgIDxyZXRyeV9hZnRlcj4gaXMgYSBkZWxheSBpbiBtc1xuICAgICAgICAgICAgICAgIC8vICAgICA8Y2F0ZWdvcmllcz4gaXMgdGhlIGV2ZW50IHR5cGUocykgKGVycm9yLCB0cmFuc2FjdGlvbiwgZXRjKSBiZWluZyByYXRlIGxpbWl0ZWQgYW5kIGlzIG9mIHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICA8Y2F0ZWdvcnk+OzxjYXRlZ29yeT47Li4uXG4gICAgICAgICAgICAgICAgLy8gICAgIDxzY29wZT4gaXMgd2hhdCdzIGJlaW5nIGxpbWl0ZWQgKG9yZywgcHJvamVjdCwgb3Iga2V5KSAtIGlnbm9yZWQgYnkgU0RLXG4gICAgICAgICAgICAgICAgLy8gICAgIDxyZWFzb25fY29kZT4gaXMgYW4gYXJiaXRyYXJ5IHN0cmluZyBsaWtlIFwib3JnX3F1b3RhXCIgLSBpZ25vcmVkIGJ5IFNES1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXMocmxIZWFkZXIudHJpbSgpLnNwbGl0KCcsJykpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW1pdCA9IF9kLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IGxpbWl0LnNwbGl0KCc6JywgMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJEZWxheSA9IHBhcnNlSW50KHBhcmFtZXRlcnNbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gKCFpc05hTihoZWFkZXJEZWxheSkgPyBoZWFkZXJEZWxheSA6IDYwKSAqIDEwMDA7IC8vIDYwc2VjIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lID0gKGVfMiA9IHZvaWQgMCwgX192YWx1ZXMocGFyYW1ldGVyc1sxXS5zcGxpdCgnOycpKSksIF9mID0gX2UubmV4dCgpOyAhX2YuZG9uZTsgX2YgPSBfZS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXRlTGltaXRzW2NhdGVnb3J5IHx8ICdhbGwnXSA9IG5ldyBEYXRlKG5vdyArIGRlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9mICYmICFfZi5kb25lICYmIChfYiA9IF9lLnJldHVybikpIF9iLmNhbGwoX2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZCAmJiAhX2QuZG9uZSAmJiAoX2EgPSBfYy5yZXR1cm4pKSBfYS5jYWxsKF9jKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmFIZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhdGVMaW1pdHMuYWxsID0gbmV3IERhdGUobm93ICsgcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdywgcmFIZWFkZXIpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCB7IEJhc2VUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBldmVudFRvU2VudHJ5UmVxdWVzdCwgc2Vzc2lvblRvU2VudHJ5UmVxdWVzdCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QsIHN1cHBvcnRzUmVmZXJyZXJQb2xpY3ksIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNwb3J0IH0gZnJvbSAnLi9iYXNlJztcbnZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbi8qKiBgZmV0Y2hgIGJhc2VkIHRyYW5zcG9ydCAqL1xudmFyIEZldGNoVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGZXRjaFRyYW5zcG9ydCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGZXRjaFRyYW5zcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZldGNoVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KGV2ZW50VG9TZW50cnlSZXF1ZXN0KGV2ZW50LCB0aGlzLl9hcGkpLCBldmVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZldGNoVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChzZXNzaW9uVG9TZW50cnlSZXF1ZXN0KHNlc3Npb24sIHRoaXMuX2FwaSksIHNlc3Npb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlbnRyeVJlcXVlc3QgUHJlcGFyZWQgU2VudHJ5UmVxdWVzdCB0byBiZSBkZWxpdmVyZWRcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxQYXlsb2FkIE9yaWdpbmFsIHBheWxvYWQgdXNlZCB0byBjcmVhdGUgU2VudHJ5UmVxdWVzdFxuICAgICAqL1xuICAgIEZldGNoVHJhbnNwb3J0LnByb3RvdHlwZS5fc2VuZFJlcXVlc3QgPSBmdW5jdGlvbiAoc2VudHJ5UmVxdWVzdCwgb3JpZ2luYWxQYXlsb2FkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1JhdGVMaW1pdGVkKHNlbnRyeVJlcXVlc3QudHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IG9yaWdpbmFsUGF5bG9hZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBzZW50cnlSZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcIlRyYW5zcG9ydCBsb2NrZWQgdGlsbCBcIiArIHRoaXMuX2Rpc2FibGVkVW50aWwoc2VudHJ5UmVxdWVzdC50eXBlKSArIFwiIGR1ZSB0byB0b28gbWFueSByZXF1ZXN0cy5cIixcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgYm9keTogc2VudHJ5UmVxdWVzdC5ib2R5LFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9cmVmZXJyZXItcG9saWN5XG4gICAgICAgICAgICAvLyBJdCBkb2Vzbid0LiBBbmQgaXQgdGhyb3cgZXhjZXB0aW9uIGluc3RlYWQgb2YgaWdub3JpbmcgdGhpcyBwYXJhbWV0ZXIuLi5cbiAgICAgICAgICAgIC8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6IChzdXBwb3J0c1JlZmVycmVyUG9saWN5KCkgPyAnb3JpZ2luJyA6ICcnKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mZXRjaFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMuZmV0Y2hQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0gdGhpcy5vcHRpb25zLmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5hZGQobmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGdsb2JhbFxuICAgICAgICAgICAgICAgIC5mZXRjaChzZW50cnlSZXF1ZXN0LnVybCwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1gtU2VudHJ5LVJhdGUtTGltaXRzJyksXG4gICAgICAgICAgICAgICAgICAgICdyZXRyeS1hZnRlcic6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdSZXRyeS1BZnRlcicpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBGZXRjaFRyYW5zcG9ydDtcbn0oQmFzZVRyYW5zcG9ydCkpO1xuZXhwb3J0IHsgRmV0Y2hUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZXZlbnRUb1NlbnRyeVJlcXVlc3QsIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3QgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xuLyoqIGBYSFJgIGJhc2VkIHRyYW5zcG9ydCAqL1xudmFyIFhIUlRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoWEhSVHJhbnNwb3J0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFhIUlRyYW5zcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFhIUlRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChldmVudFRvU2VudHJ5UmVxdWVzdChldmVudCwgdGhpcy5fYXBpKSwgZXZlbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBYSFJUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRTZXNzaW9uID0gZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KHNlc3Npb25Ub1NlbnRyeVJlcXVlc3Qoc2Vzc2lvbiwgdGhpcy5fYXBpKSwgc2Vzc2lvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2VudHJ5UmVxdWVzdCBQcmVwYXJlZCBTZW50cnlSZXF1ZXN0IHRvIGJlIGRlbGl2ZXJlZFxuICAgICAqIEBwYXJhbSBvcmlnaW5hbFBheWxvYWQgT3JpZ2luYWwgcGF5bG9hZCB1c2VkIHRvIGNyZWF0ZSBTZW50cnlSZXF1ZXN0XG4gICAgICovXG4gICAgWEhSVHJhbnNwb3J0LnByb3RvdHlwZS5fc2VuZFJlcXVlc3QgPSBmdW5jdGlvbiAoc2VudHJ5UmVxdWVzdCwgb3JpZ2luYWxQYXlsb2FkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1JhdGVMaW1pdGVkKHNlbnRyeVJlcXVlc3QudHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IG9yaWdpbmFsUGF5bG9hZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBzZW50cnlSZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcIlRyYW5zcG9ydCBsb2NrZWQgdGlsbCBcIiArIHRoaXMuX2Rpc2FibGVkVW50aWwoc2VudHJ5UmVxdWVzdC50eXBlKSArIFwiIGR1ZSB0byB0b28gbWFueSByZXF1ZXN0cy5cIixcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuYWRkKG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd4LXNlbnRyeS1yYXRlLWxpbWl0cyc6IHJlcXVlc3QuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtU2VudHJ5LVJhdGUtTGltaXRzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAncmV0cnktYWZ0ZXInOiByZXF1ZXN0LmdldFJlc3BvbnNlSGVhZGVyKCdSZXRyeS1BZnRlcicpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUmVzcG9uc2UoeyByZXF1ZXN0VHlwZTogc2VudHJ5UmVxdWVzdC50eXBlLCByZXNwb25zZTogcmVxdWVzdCwgaGVhZGVyczogaGVhZGVycywgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbignUE9TVCcsIHNlbnRyeVJlcXVlc3QudXJsKTtcbiAgICAgICAgICAgIGZvciAodmFyIGhlYWRlciBpbiBfdGhpcy5vcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5oZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgX3RoaXMub3B0aW9ucy5oZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZChzZW50cnlSZXF1ZXN0LmJvZHkpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gWEhSVHJhbnNwb3J0O1xufShCYXNlVHJhbnNwb3J0KSk7XG5leHBvcnQgeyBYSFJUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXhoci5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBCYXNlQmFja2VuZCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgc3VwcG9ydHNGZXRjaCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tRXhjZXB0aW9uLCBldmVudEZyb21NZXNzYWdlIH0gZnJvbSAnLi9ldmVudGJ1aWxkZXInO1xuaW1wb3J0IHsgRmV0Y2hUcmFuc3BvcnQsIFhIUlRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0cyc7XG4vKipcbiAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQmFja2VuZC5cbiAqIEBoaWRkZW5cbiAqL1xudmFyIEJyb3dzZXJCYWNrZW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCcm93c2VyQmFja2VuZCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCcm93c2VyQmFja2VuZCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21FeGNlcHRpb24gPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgICAgIHJldHVybiBldmVudEZyb21FeGNlcHRpb24odGhpcy5fb3B0aW9ucywgZXhjZXB0aW9uLCBoaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgbGV2ZWwsIGhpbnQpIHtcbiAgICAgICAgaWYgKGxldmVsID09PSB2b2lkIDApIHsgbGV2ZWwgPSBTZXZlcml0eS5JbmZvOyB9XG4gICAgICAgIHJldHVybiBldmVudEZyb21NZXNzYWdlKHRoaXMuX29wdGlvbnMsIG1lc3NhZ2UsIGxldmVsLCBoaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckJhY2tlbmQucHJvdG90eXBlLl9zZXR1cFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9vcHRpb25zLmRzbikge1xuICAgICAgICAgICAgLy8gV2UgcmV0dXJuIHRoZSBub29wIHRyYW5zcG9ydCBoZXJlIGluIGNhc2UgdGhlcmUgaXMgbm8gRHNuLlxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3NldHVwVHJhbnNwb3J0LmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYW5zcG9ydE9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zKSwgeyBkc246IHRoaXMuX29wdGlvbnMuZHNuLCBfbWV0YWRhdGE6IHRoaXMuX29wdGlvbnMuX21ldGFkYXRhIH0pO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5fb3B0aW9ucy50cmFuc3BvcnQodHJhbnNwb3J0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1cHBvcnRzRmV0Y2goKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGZXRjaFRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFhIUlRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICB9O1xuICAgIHJldHVybiBCcm93c2VyQmFja2VuZDtcbn0oQmFzZUJhY2tlbmQpKTtcbmV4cG9ydCB7IEJyb3dzZXJCYWNrZW5kIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrZW5kLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBUEksIGNhcHR1cmVFeGNlcHRpb24sIHdpdGhTY29wZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZSwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG52YXIgaWdub3JlT25FcnJvciA9IDA7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZElnbm9yZU9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIGlnbm9yZU9uRXJyb3IgPiAwO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVOZXh0T25FcnJvcigpIHtcbiAgICAvLyBvbmVycm9yIHNob3VsZCB0cmlnZ2VyIGJlZm9yZSBzZXRUaW1lb3V0XG4gICAgaWdub3JlT25FcnJvciArPSAxO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZ25vcmVPbkVycm9yIC09IDE7XG4gICAgfSk7XG59XG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBnaXZlbiBmdW5jdGlvbiBhbmQgc2VuZHMgYW4gZXZlbnQgdG8gU2VudHJ5IGV2ZXJ5IHRpbWUgdGhlXG4gKiBmdW5jdGlvbiB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwYXJhbSBmbiBBIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBmdW5jdGlvbi5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZm4sIG9wdGlvbnMsIGJlZm9yZSkge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbm5hIHdyYXAgaXQgdHdpY2VcbiAgICAgICAgaWYgKGZuLl9fc2VudHJ5X18pIHtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGlzIGhhcyBhbHJlYWR5IGJlZW4gd3JhcHBlZCBpbiB0aGUgcGFzdCwgcmV0dXJuIHRoYXQgd3JhcHBlZCBmdW5jdGlvblxuICAgICAgICBpZiAoZm4uX19zZW50cnlfd3JhcHBlZF9fKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uX19zZW50cnlfd3JhcHBlZF9fO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAvLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbiAgICAgICAgLy8gQmFpbCBvbiB3cmFwcGluZyBhbmQgcmV0dXJuIHRoZSBmdW5jdGlvbiBhcy1pcyAoZGVmZXJzIHRvIHdpbmRvdy5vbmVycm9yKS5cbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciBzZW50cnlXcmFwcGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoYmVmb3JlICYmIHR5cGVvZiBiZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHZhciB3cmFwcGVkQXJndW1lbnRzID0gYXJncy5tYXAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gd3JhcChhcmcsIG9wdGlvbnMpOyB9KTtcbiAgICAgICAgICAgIGlmIChmbi5oYW5kbGVFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gaW52b2tlIHVzZXItbGFuZCBmdW5jdGlvblxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAgICAgICAgICAgLy8gICAgICAgbWVhbnMgdGhlIHNlbnRyeS5qYXZhc2NyaXB0IFNESyBjYXVnaHQgYW4gZXJyb3IgaW52b2tpbmcgeW91ciBhcHBsaWNhdGlvbiBjb2RlLiBUaGlzXG4gICAgICAgICAgICAgICAgLy8gICAgICAgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5oYW5kbGVFdmVudC5hcHBseSh0aGlzLCB3cmFwcGVkQXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gaW52b2tlIHVzZXItbGFuZCBmdW5jdGlvblxuICAgICAgICAgICAgLy8gTk9URTogSWYgeW91IGFyZSBhIFNlbnRyeSB1c2VyLCBhbmQgeW91IGFyZSBzZWVpbmcgdGhpcyBzdGFjayBmcmFtZSwgaXRcbiAgICAgICAgICAgIC8vICAgICAgIG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS4gVGhpc1xuICAgICAgICAgICAgLy8gICAgICAgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgd3JhcHBlZEFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBpZ25vcmVOZXh0T25FcnJvcigpO1xuICAgICAgICAgICAgd2l0aFNjb3BlKGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkRXZlbnQgPSBfX2Fzc2lnbih7fSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tZWNoYW5pc20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShwcm9jZXNzZWRFdmVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKHByb2Nlc3NlZEV2ZW50LCBvcHRpb25zLm1lY2hhbmlzbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkRXZlbnQuZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvY2Vzc2VkRXZlbnQuZXh0cmEpLCB7IGFyZ3VtZW50czogYXJncyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEV2ZW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAvLyBBY2Nlc3Npbmcgc29tZSBvYmplY3RzIG1heSB0aHJvd1xuICAgIC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMTE2OFxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGZuKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZuLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBzZW50cnlXcmFwcGVkW3Byb3BlcnR5XSA9IGZuW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgIGZuLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZSB8fCB7fTtcbiAgICBzZW50cnlXcmFwcGVkLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdfX3NlbnRyeV93cmFwcGVkX18nLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2VudHJ5V3JhcHBlZCxcbiAgICB9KTtcbiAgICAvLyBTaWduYWwgdGhhdCB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIHdyYXBwZWQvZmlsbGVkIGFscmVhZHlcbiAgICAvLyBmb3IgYm90aCBkZWJ1Z2dpbmcgYW5kIHRvIHByZXZlbnQgaXQgdG8gYmVpbmcgd3JhcHBlZC9maWxsZWQgdHdpY2VcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZW50cnlXcmFwcGVkLCB7XG4gICAgICAgIF9fc2VudHJ5X186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIF9fc2VudHJ5X29yaWdpbmFsX186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgZnVuY3Rpb24gbmFtZSAobm90IGFsbCBicm93c2VycyBhbGxvdyB0aGF0KVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzZW50cnlXcmFwcGVkLCAnbmFtZScpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZW50cnlXcmFwcGVkLCAnbmFtZScsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLm5hbWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7IH1cbiAgICByZXR1cm4gc2VudHJ5V3JhcHBlZDtcbn1cbi8qKlxuICogSW5qZWN0cyB0aGUgUmVwb3J0IERpYWxvZyBzY3JpcHRcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJlcG9ydERpYWxvZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICBpZiAoIW9wdGlvbnMuZXZlbnRJZCkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJNaXNzaW5nIGV2ZW50SWQgb3B0aW9uIGluIHNob3dSZXBvcnREaWFsb2cgY2FsbFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZHNuKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIk1pc3NpbmcgZHNuIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGxcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgc2NyaXB0LnNyYyA9IG5ldyBBUEkob3B0aW9ucy5kc24pLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50KG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLm9uTG9hZCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBvcHRpb25zLm9uTG9hZDtcbiAgICB9XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyLCBnZXRFdmVudERlc2NyaXB0aW9uLCBnZXRHbG9iYWxPYmplY3QsIGh0bWxUcmVlQXNTdHJpbmcsIHBhcnNlVXJsLCBzYWZlSm9pbiwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogRGVmYXVsdCBCcmVhZGNydW1icyBpbnN0cnVtZW50YXRpb25zXG4gKiBUT0RPOiBEZXByZWNhdGVkIC0gd2l0aCB2NiwgdGhpcyB3aWxsIGJlIHJlbmFtZWQgdG8gYEluc3RydW1lbnRgXG4gKi9cbnZhciBCcmVhZGNydW1icyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyZWFkY3J1bWJzKG9wdGlvbnMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBCcmVhZGNydW1icy5pZDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9fYXNzaWduKHsgY29uc29sZTogdHJ1ZSwgZG9tOiB0cnVlLCBmZXRjaDogdHJ1ZSwgaGlzdG9yeTogdHJ1ZSwgc2VudHJ5OiB0cnVlLCB4aHI6IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGJyZWFkY3J1bWIgb2YgYHNlbnRyeWAgZnJvbSB0aGUgZXZlbnRzIHRoZW1zZWx2ZXNcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuYWRkU2VudHJ5QnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuc2VudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VudHJ5LlwiICsgKGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbicgPyAndHJhbnNhY3Rpb24nIDogJ2V2ZW50JyksXG4gICAgICAgICAgICBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQsXG4gICAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwsXG4gICAgICAgICAgICBtZXNzYWdlOiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluc3RydW1lbnQgYnJvd3NlciBidWlsdC1pbnMgdy8gYnJlYWRjcnVtYiBjYXB0dXJpbmdcbiAgICAgKiAgLSBDb25zb2xlIEFQSVxuICAgICAqICAtIERPTSBBUEkgKGNsaWNrL3R5cGluZylcbiAgICAgKiAgLSBYTUxIdHRwUmVxdWVzdCBBUElcbiAgICAgKiAgLSBGZXRjaCBBUElcbiAgICAgKiAgLSBIaXN0b3J5IEFQSVxuICAgICAqL1xuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NvbnNvbGVCcmVhZGNydW1iLmFwcGx5KF90aGlzLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29uc29sZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5kb20pIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RvbUJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkb20nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMueGhyKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl94aHJCcmVhZGNydW1iLmFwcGx5KF90aGlzLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAneGhyJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmZldGNoKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9mZXRjaEJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdmZXRjaCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oaXN0b3J5KSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9oaXN0b3J5QnJlYWRjcnVtYi5hcHBseShfdGhpcywgX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2hpc3RvcnknLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBjb25zb2xlIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9jb25zb2xlQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICB2YXIgYnJlYWRjcnVtYiA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxldmVsOiBTZXZlcml0eS5mcm9tU3RyaW5nKGhhbmRsZXJEYXRhLmxldmVsKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHNhZmVKb2luKGhhbmRsZXJEYXRhLmFyZ3MsICcgJyksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5sZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyRGF0YS5hcmdzWzBdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIubWVzc2FnZSA9IFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyAoc2FmZUpvaW4oaGFuZGxlckRhdGEuYXJncy5zbGljZSgxKSwgJyAnKSB8fCAnY29uc29sZS5hc3NlcnQnKTtcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iLmRhdGEuYXJndW1lbnRzID0gaGFuZGxlckRhdGEuYXJncy5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGNhcHR1cmUgYSBicmVhZGNydW1iIGZvciBwYXNzZWQgYXNzZXJ0aW9uc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYihicmVhZGNydW1iLCB7XG4gICAgICAgICAgICBpbnB1dDogaGFuZGxlckRhdGEuYXJncyxcbiAgICAgICAgICAgIGxldmVsOiBoYW5kbGVyRGF0YS5sZXZlbCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gRE9NIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9kb21CcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIC8vIEFjY2Vzc2luZyBldmVudC50YXJnZXQgY2FuIHRocm93IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldCA9IGhhbmRsZXJEYXRhLmV2ZW50LnRhcmdldFxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhoYW5kbGVyRGF0YS5ldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBodG1sVHJlZUFzU3RyaW5nKGhhbmRsZXJEYXRhLmV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gJzx1bmtub3duPic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ1aS5cIiArIGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0YXJnZXQsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVyRGF0YS5ldmVudCxcbiAgICAgICAgICAgIG5hbWU6IGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICBnbG9iYWw6IGhhbmRsZXJEYXRhLmdsb2JhbCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gWEhSIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl94aHJCcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FwdHVyZSBjb21wbGV0ZSwgbm9uLXNlbnRyeSByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gaGFuZGxlckRhdGEueGhyLl9fc2VudHJ5X3hocl9fIHx8IHt9LCBtZXRob2QgPSBfYS5tZXRob2QsIHVybCA9IF9hLnVybCwgc3RhdHVzX2NvZGUgPSBfYS5zdGF0dXNfY29kZSwgYm9keSA9IF9hLmJvZHk7XG4gICAgICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICd4aHInLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfY29kZTogc3RhdHVzX2NvZGUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgeGhyOiBoYW5kbGVyRGF0YS54aHIsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGJvZHksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBicmVhZGNydW1icyBmcm9tIGZldGNoIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9mZXRjaEJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgLy8gV2Ugb25seSBjYXB0dXJlIGNvbXBsZXRlIGZldGNoIHJlcXVlc3RzXG4gICAgICAgIGlmICghaGFuZGxlckRhdGEuZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXJEYXRhLmZldGNoRGF0YS51cmwubWF0Y2goL3NlbnRyeV9rZXkvKSAmJiBoYW5kbGVyRGF0YS5mZXRjaERhdGEubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgbm90IGNyZWF0ZSBicmVhZGNydW1icyBmb3IgZmV0Y2ggcmVxdWVzdHMgdGhhdCBjb250YWluIGBzZW50cnlfa2V5YCAoaW50ZXJuYWwgc2VudHJ5IHJlcXVlc3RzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5lcnJvcikge1xuICAgICAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnZmV0Y2gnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLmZldGNoRGF0YSxcbiAgICAgICAgICAgICAgICBsZXZlbDogU2V2ZXJpdHkuRXJyb3IsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLmVycm9yLFxuICAgICAgICAgICAgICAgIGlucHV0OiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdmZXRjaCcsXG4gICAgICAgICAgICAgICAgZGF0YTogX19hc3NpZ24oX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhLmZldGNoRGF0YSksIHsgc3RhdHVzX2NvZGU6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLnN0YXR1cyB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBoaXN0b3J5IEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9oaXN0b3J5QnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgICAgIHZhciBmcm9tID0gaGFuZGxlckRhdGEuZnJvbTtcbiAgICAgICAgdmFyIHRvID0gaGFuZGxlckRhdGEudG87XG4gICAgICAgIHZhciBwYXJzZWRMb2MgPSBwYXJzZVVybChnbG9iYWwubG9jYXRpb24uaHJlZik7XG4gICAgICAgIHZhciBwYXJzZWRGcm9tID0gcGFyc2VVcmwoZnJvbSk7XG4gICAgICAgIHZhciBwYXJzZWRUbyA9IHBhcnNlVXJsKHRvKTtcbiAgICAgICAgLy8gSW5pdGlhbCBwdXNoU3RhdGUgZG9lc24ndCBwcm92aWRlIGBmcm9tYCBpbmZvcm1hdGlvblxuICAgICAgICBpZiAoIXBhcnNlZEZyb20ucGF0aCkge1xuICAgICAgICAgICAgcGFyc2VkRnJvbSA9IHBhcnNlZExvYztcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2Ugb25seSB0aGUgcGF0aCBjb21wb25lbnQgb2YgdGhlIFVSTCBpZiB0aGUgVVJMIG1hdGNoZXMgdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gZG9jdW1lbnQgKGFsbW9zdCBhbGwgdGhlIHRpbWUgd2hlbiB1c2luZyBwdXNoU3RhdGUpXG4gICAgICAgIGlmIChwYXJzZWRMb2MucHJvdG9jb2wgPT09IHBhcnNlZFRvLnByb3RvY29sICYmIHBhcnNlZExvYy5ob3N0ID09PSBwYXJzZWRUby5ob3N0KSB7XG4gICAgICAgICAgICB0byA9IHBhcnNlZFRvLnJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWRMb2MucHJvdG9jb2wgPT09IHBhcnNlZEZyb20ucHJvdG9jb2wgJiYgcGFyc2VkTG9jLmhvc3QgPT09IHBhcnNlZEZyb20uaG9zdCkge1xuICAgICAgICAgICAgZnJvbSA9IHBhcnNlZEZyb20ucmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICduYXZpZ2F0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5pZCA9ICdCcmVhZGNydW1icyc7XG4gICAgcmV0dXJuIEJyZWFkY3J1bWJzO1xufSgpKTtcbmV4cG9ydCB7IEJyZWFkY3J1bWJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1icy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBCYXNlQ2xpZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCcm93c2VyQmFja2VuZCB9IGZyb20gJy4vYmFja2VuZCc7XG5pbXBvcnQgeyBpbmplY3RSZXBvcnREaWFsb2cgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYnMgfSBmcm9tICcuL2ludGVncmF0aW9ucyc7XG4vKipcbiAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICpcbiAqIEBzZWUgQnJvd3Nlck9wdGlvbnMgZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICogQHNlZSBTZW50cnlDbGllbnQgZm9yIHVzYWdlIGRvY3VtZW50YXRpb24uXG4gKi9cbnZhciBCcm93c2VyQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCcm93c2VyQ2xpZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQnJvd3NlciBTREsgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoaXMgU0RLLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJDbGllbnQob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgQnJvd3NlckJhY2tlbmQsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3cgYSByZXBvcnQgZGlhbG9nIHRvIHRoZSB1c2VyIHRvIHNlbmQgZmVlZGJhY2sgdG8gYSBzcGVjaWZpYyBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFNldCBpbmRpdmlkdWFsIG9wdGlvbnMgZm9yIHRoZSBkaWFsb2dcbiAgICAgKi9cbiAgICBCcm93c2VyQ2xpZW50LnByb3RvdHlwZS5zaG93UmVwb3J0RGlhbG9nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLy8gZG9lc24ndCB3b3JrIHdpdGhvdXQgYSBkb2N1bWVudCAoUmVhY3QgTmF0aXZlKVxuICAgICAgICB2YXIgZG9jdW1lbnQgPSBnZXRHbG9iYWxPYmplY3QoKS5kb2N1bWVudDtcbiAgICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignVHJ5aW5nIHRvIGNhbGwgc2hvd1JlcG9ydERpYWxvZyB3aXRoIFNlbnRyeSBDbGllbnQgZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbmplY3RSZXBvcnREaWFsb2coX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGRzbjogb3B0aW9ucy5kc24gfHwgdGhpcy5nZXREc24oKSB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJDbGllbnQucHJvdG90eXBlLl9wcmVwYXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIHNjb3BlLCBoaW50KSB7XG4gICAgICAgIGV2ZW50LnBsYXRmb3JtID0gZXZlbnQucGxhdGZvcm0gfHwgJ2phdmFzY3JpcHQnO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50LmNhbGwodGhpcywgZXZlbnQsIHNjb3BlLCBoaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuX3NlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaW50ZWdyYXRpb24gPSB0aGlzLmdldEludGVncmF0aW9uKEJyZWFkY3J1bWJzKTtcbiAgICAgICAgaWYgKGludGVncmF0aW9uKSB7XG4gICAgICAgICAgICBpbnRlZ3JhdGlvbi5hZGRTZW50cnlCcmVhZGNydW1iKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9zZW5kRXZlbnQuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckNsaWVudDtcbn0oQmFzZUNsaWVudCkpO1xuZXhwb3J0IHsgQnJvd3NlckNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBmaWxsLCBnZXRGdW5jdGlvbk5hbWUsIGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL2hlbHBlcnMnO1xudmFyIERFRkFVTFRfRVZFTlRfVEFSR0VUID0gW1xuICAgICdFdmVudFRhcmdldCcsXG4gICAgJ1dpbmRvdycsXG4gICAgJ05vZGUnLFxuICAgICdBcHBsaWNhdGlvbkNhY2hlJyxcbiAgICAnQXVkaW9UcmFja0xpc3QnLFxuICAgICdDaGFubmVsTWVyZ2VyTm9kZScsXG4gICAgJ0NyeXB0b09wZXJhdGlvbicsXG4gICAgJ0V2ZW50U291cmNlJyxcbiAgICAnRmlsZVJlYWRlcicsXG4gICAgJ0hUTUxVbmtub3duRWxlbWVudCcsXG4gICAgJ0lEQkRhdGFiYXNlJyxcbiAgICAnSURCUmVxdWVzdCcsXG4gICAgJ0lEQlRyYW5zYWN0aW9uJyxcbiAgICAnS2V5T3BlcmF0aW9uJyxcbiAgICAnTWVkaWFDb250cm9sbGVyJyxcbiAgICAnTWVzc2FnZVBvcnQnLFxuICAgICdNb2RhbFdpbmRvdycsXG4gICAgJ05vdGlmaWNhdGlvbicsXG4gICAgJ1NWR0VsZW1lbnRJbnN0YW5jZScsXG4gICAgJ1NjcmVlbicsXG4gICAgJ1RleHRUcmFjaycsXG4gICAgJ1RleHRUcmFja0N1ZScsXG4gICAgJ1RleHRUcmFja0xpc3QnLFxuICAgICdXZWJTb2NrZXQnLFxuICAgICdXZWJTb2NrZXRXb3JrZXInLFxuICAgICdXb3JrZXInLFxuICAgICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgJ1hNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQnLFxuICAgICdYTUxIdHRwUmVxdWVzdFVwbG9hZCcsXG5dO1xuLyoqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9ycyBhbmQgcHJvdmlkZSBiZXR0ZXIgbWV0YSBkYXRhICovXG52YXIgVHJ5Q2F0Y2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBUcnlDYXRjaChvcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gVHJ5Q2F0Y2guaWQ7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfX2Fzc2lnbih7IFhNTEh0dHBSZXF1ZXN0OiB0cnVlLCBldmVudFRhcmdldDogdHJ1ZSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiB0cnVlLCBzZXRJbnRlcnZhbDogdHJ1ZSwgc2V0VGltZW91dDogdHJ1ZSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JhcCB0aW1lciBmdW5jdGlvbnMgYW5kIGV2ZW50IHRhcmdldHMgdG8gY2F0Y2ggZXJyb3JzXG4gICAgICogYW5kIHByb3ZpZGUgYmV0dGVyIG1ldGFkYXRhLlxuICAgICAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgZmlsbChnbG9iYWwsICdzZXRUaW1lb3V0JywgdGhpcy5fd3JhcFRpbWVGdW5jdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zZXRJbnRlcnZhbCkge1xuICAgICAgICAgICAgZmlsbChnbG9iYWwsICdzZXRJbnRlcnZhbCcsIHRoaXMuX3dyYXBUaW1lRnVuY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICBmaWxsKGdsb2JhbCwgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsIHRoaXMuX3dyYXBSQUYuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuWE1MSHR0cFJlcXVlc3QgJiYgJ1hNTEh0dHBSZXF1ZXN0JyBpbiBnbG9iYWwpIHtcbiAgICAgICAgICAgIGZpbGwoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLCAnc2VuZCcsIHRoaXMuX3dyYXBYSFIuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5ldmVudFRhcmdldCkgPyB0aGlzLl9vcHRpb25zLmV2ZW50VGFyZ2V0IDogREVGQVVMVF9FVkVOVF9UQVJHRVQ7XG4gICAgICAgICAgICBldmVudFRhcmdldC5mb3JFYWNoKHRoaXMuX3dyYXBFdmVudFRhcmdldC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwVGltZUZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxDYWxsYmFjayA9IGFyZ3NbMF07XG4gICAgICAgICAgICBhcmdzWzBdID0gd3JhcChvcmlnaW5hbENhbGxiYWNrLCB7XG4gICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZnVuY3Rpb246IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCkgfSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwUkFGID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIHdyYXAoY2FsbGJhY2ssIHtcbiAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKG9yaWdpbmFsKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuX3dyYXBFdmVudFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIHZhciBwcm90byA9IGdsb2JhbFt0YXJnZXRdICYmIGdsb2JhbFt0YXJnZXRdLnByb3RvdHlwZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBpZiAoIXByb3RvIHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpbGwocHJvdG8sICdhZGRFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuLmhhbmRsZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5oYW5kbGVFdmVudCA9IHdyYXAoZm4uaGFuZGxlRXZlbnQuYmluZChmbiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdoYW5kbGVFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBnZXRGdW5jdGlvbk5hbWUoZm4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gc29tZXRpbWVzIGdldCAnUGVybWlzc2lvbiBkZW5pZWQgdG8gYWNjZXNzIHByb3BlcnR5IFwiaGFuZGxlIEV2ZW50J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudE5hbWUsIFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgd3JhcChmbiwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbjogJ2FkZEV2ZW50TGlzdGVuZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGdldEZ1bmN0aW9uTmFtZShmbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsbChwcm90bywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlcmUgYXJlIDIgcG9zc2libGUgc2NlbmFyaW9zIGhlcmU6XG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiAxLiBTb21lb25lIHBhc3NlcyBhIGNhbGxiYWNrLCB3aGljaCB3YXMgYXR0YWNoZWQgcHJpb3IgdG8gU2VudHJ5IGluaXRpYWxpemF0aW9uLCBvciBieSB1c2luZyB1bm1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICogbWV0aG9kLCBlZy4gYGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIuY2FsbChlbCwgbmFtZSwgaGFuZGxlcikuIEluIHRoaXMgY2FzZSwgd2UgdHJlYXQgdGhpcyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAqIGFzIGEgcGFzcy10aHJvdWdoLCBhbmQgY2FsbCBvcmlnaW5hbCBgcmVtb3ZlRXZlbnRMaXN0ZW5lcmAgd2l0aCBpdC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIDIuIFNvbWVvbmUgcGFzc2VzIGEgY2FsbGJhY2ssIHdoaWNoIHdhcyBhdHRhY2hlZCBhZnRlciBTZW50cnkgd2FzIGluaXRpYWxpemVkLCB3aGljaCBtZWFucyB0aGF0IGl0IHdhcyB1c2luZ1xuICAgICAgICAgICAgICAgICAqIG91ciB3cmFwcGVkIHZlcnNpb24gb2YgYGFkZEV2ZW50TGlzdGVuZXJgLCB3aGljaCBpbnRlcm5hbGx5IGNhbGxzIGB3cmFwYCBoZWxwZXIuXG4gICAgICAgICAgICAgICAgICogVGhpcyBoZWxwZXIgXCJ3cmFwc1wiIHdob2xlIGNhbGxiYWNrIGluc2lkZSBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQsIGFuZCBhdHRhY2hlZCBhcHByb3ByaWF0ZSBtZXRhZGF0YSB0byBpdCxcbiAgICAgICAgICAgICAgICAgKiBpbiBvcmRlciBmb3IgdXMgdG8gbWFrZSBhIGRpc3RpbmN0aW9uIGJldHdlZW4gd3JhcHBlZC9ub24td3JhcHBlZCBmdW5jdGlvbnMgcG9zc2libGUuXG4gICAgICAgICAgICAgICAgICogSWYgYSBmdW5jdGlvbiB3YXMgd3JhcHBlZCwgaXQgaGFzIGFkZGl0aW9uYWwgcHJvcGVydHkgb2YgYF9fc2VudHJ5X3dyYXBwZWRfX2AsIGhvbGRpbmcgdGhlIGhhbmRsZXIuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBXaGVuIHNvbWVvbmUgYWRkcyBhIGhhbmRsZXIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb24sIGFuZCB0aGVuIGRvIGl0IGFnYWluLCBidXQgYWZ0ZXIsXG4gICAgICAgICAgICAgICAgICogdGhlbiB3ZSBoYXZlIHRvIGRldGFjaCBib3RoIG9mIHRoZW0uIE90aGVyd2lzZSwgaWYgd2UnZCBkZXRhY2ggb25seSB3cmFwcGVkIG9uZSwgaXQnZCBiZSBpbXBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICogdG8gZ2V0IHJpZCBvZiB0aGUgaW5pdGlhbCBoYW5kbGVyIGFuZCBpdCdkIHN0aWNrIHRoZXJlIGZvcmV2ZXIuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRFdmVudEhhbmRsZXIgPSBmbjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxFdmVudEhhbmRsZXIgPSAoX2EgPSB3cmFwcGVkRXZlbnRIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX19zZW50cnlfd3JhcHBlZF9fO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxFdmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgb3JpZ2luYWxFdmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSwgYWNjZXNzaW5nIF9fc2VudHJ5X3dyYXBwZWRfXyB3aWxsIHRocm93IGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIHdyYXBwZWRFdmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuX3dyYXBYSFIgPSBmdW5jdGlvbiAob3JpZ2luYWxTZW5kKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHhtbEh0dHBSZXF1ZXN0UHJvcHMgPSBbJ29ubG9hZCcsICdvbmVycm9yJywgJ29ucHJvZ3Jlc3MnLCAnb25yZWFkeXN0YXRlY2hhbmdlJ107XG4gICAgICAgICAgICB4bWxIdHRwUmVxdWVzdFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCBpbiB4aHIgJiYgdHlwZW9mIHhocltwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICBmaWxsKHhociwgcHJvcCwgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKG9yaWdpbmFsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgSW5zdHJ1bWVudCBpbnRlZ3JhdGlvbiBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlIFRyeUNhdGNoLCBnZXQgdGhlIG5hbWUgb2Ygb3JpZ2luYWwgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbC5fX3NlbnRyeV9vcmlnaW5hbF9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcE9wdGlvbnMubWVjaGFuaXNtLmRhdGEuaGFuZGxlciA9IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbC5fX3NlbnRyeV9vcmlnaW5hbF9fKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB3cmFwIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcChvcmlnaW5hbCwgd3JhcE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFNlbmQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFRyeUNhdGNoLmlkID0gJ1RyeUNhdGNoJztcbiAgICByZXR1cm4gVHJ5Q2F0Y2g7XG59KCkpO1xuZXhwb3J0IHsgVHJ5Q2F0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyeWNhdGNoLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgZ2V0TG9jYXRpb25IcmVmLCBpc0Vycm9yRXZlbnQsIGlzUHJpbWl0aXZlLCBpc1N0cmluZywgbG9nZ2VyLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tVW5rbm93bklucHV0IH0gZnJvbSAnLi4vZXZlbnRidWlsZGVyJztcbmltcG9ydCB7IHNob3VsZElnbm9yZU9uRXJyb3IgfSBmcm9tICcuLi9oZWxwZXJzJztcbi8qKiBHbG9iYWwgaGFuZGxlcnMgKi9cbnZhciBHbG9iYWxIYW5kbGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBmdW5jdGlvbiBHbG9iYWxIYW5kbGVycyhvcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gR2xvYmFsSGFuZGxlcnMuaWQ7XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCA9IGZhbHNlO1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfX2Fzc2lnbih7IG9uZXJyb3I6IHRydWUsIG9udW5oYW5kbGVkcmVqZWN0aW9uOiB0cnVlIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDUwO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5vbmVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdHbG9iYWwgSGFuZGxlciBhdHRhY2hlZDogb25lcnJvcicpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFsbEdsb2JhbE9uRXJyb3JIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ0dsb2JhbCBIYW5kbGVyIGF0dGFjaGVkOiBvbnVuaGFuZGxlZHJlamVjdGlvbicpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFsbEdsb2JhbE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzSW50ZWdyYXRpb24gPSBjdXJyZW50SHViLmdldEludGVncmF0aW9uKEdsb2JhbEhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNGYWlsZWRPd25EZWxpdmVyeSA9IGVycm9yICYmIGVycm9yLl9fc2VudHJ5X293bl9yZXF1ZXN0X18gPT09IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNJbnRlZ3JhdGlvbiB8fCBzaG91bGRJZ25vcmVPbkVycm9yKCkgfHwgaXNGYWlsZWRPd25EZWxpdmVyeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGllbnQgPSBjdXJyZW50SHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGlzUHJpbWl0aXZlKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLl9ldmVudEZyb21JbmNvbXBsZXRlT25FcnJvcihkYXRhLm1zZywgZGF0YS51cmwsIGRhdGEubGluZSwgZGF0YS5jb2x1bW4pXG4gICAgICAgICAgICAgICAgICAgIDogX3RoaXMuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUoZXZlbnRGcm9tVW5rbm93bklucHV0KGVycm9yLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KSwgZGF0YS51cmwsIGRhdGEubGluZSwgZGF0YS5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29uZXJyb3InLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRIdWIuY2FwdHVyZUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25FcnJvckhhbmRsZXJJbnN0YWxsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9pbnN0YWxsR2xvYmFsT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZTtcbiAgICAgICAgICAgICAgICAvLyBkaWcgdGhlIG9iamVjdCBvZiB0aGUgcmVqZWN0aW9uIG91dCBvZiBrbm93biBldmVudCB0eXBlc1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByb21pc2VSZWplY3Rpb25FdmVudHMgc3RvcmUgdGhlIG9iamVjdCBvZiB0aGUgcmVqZWN0aW9uIHVuZGVyICdyZWFzb24nXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUHJvbWlzZVJlamVjdGlvbkV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICgncmVhc29uJyBpbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGUucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbWV0aGluZywgc29tZXdoZXJlLCAobGlrZWx5IGEgYnJvd3NlciBleHRlbnNpb24pIGVmZmVjdGl2ZWx5IGNhc3RzIFByb21pc2VSZWplY3Rpb25FdmVudHNcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gQ3VzdG9tRXZlbnRzLCBtb3ZpbmcgdGhlIGBwcm9taXNlYCBhbmQgYHJlYXNvbmAgYXR0cmlidXRlcyBvZiB0aGUgUFJFIGludG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIEN1c3RvbUV2ZW50J3MgYGRldGFpbGAgYXR0cmlidXRlLCBzaW5jZSB0aGV5J3JlIG5vdCBwYXJ0IG9mIEN1c3RvbUV2ZW50J3Mgc3BlY1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50IGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yMzgwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdkZXRhaWwnIGluIGUgJiYgJ3JlYXNvbicgaW4gZS5kZXRhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZS5kZXRhaWwucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0ludGVncmF0aW9uID0gY3VycmVudEh1Yi5nZXRJbnRlZ3JhdGlvbihHbG9iYWxIYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRmFpbGVkT3duRGVsaXZlcnkgPSBlcnJvciAmJiBlcnJvci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzSW50ZWdyYXRpb24gfHwgc2hvdWxkSWdub3JlT25FcnJvcigpIHx8IGlzRmFpbGVkT3duRGVsaXZlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGllbnQgPSBjdXJyZW50SHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGlzUHJpbWl0aXZlKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLl9ldmVudEZyb21SZWplY3Rpb25XaXRoUHJpbWl0aXZlKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IGV2ZW50RnJvbVVua25vd25JbnB1dChlcnJvciwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS5hdHRhY2hTdGFja3RyYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBldmVudC5sZXZlbCA9IFNldmVyaXR5LkVycm9yO1xuICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29udW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50SHViLmNhcHR1cmVFdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXJyb3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6ICd1bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIHN0YWNrIGZyb20gYW4gb2xkLCBlcnJvci1sZXNzIG9uZXJyb3IgaGFuZGxlci5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5fZXZlbnRGcm9tSW5jb21wbGV0ZU9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCB1cmwsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICB2YXIgRVJST1JfVFlQRVNfUkUgPSAvXig/OltVdV1uY2F1Z2h0ICg/OmV4Y2VwdGlvbjogKT8pPyg/OigoPzpFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkl8KUVycm9yKTogKT8oLiopJC9pO1xuICAgICAgICAvLyBJZiAnbWVzc2FnZScgaXMgRXJyb3JFdmVudCwgZ2V0IHJlYWwgbWVzc2FnZSBmcm9tIGluc2lkZVxuICAgICAgICB2YXIgbWVzc2FnZSA9IGlzRXJyb3JFdmVudChtc2cpID8gbXNnLm1lc3NhZ2UgOiBtc2c7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICBpZiAoaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHZhciBncm91cHMgPSBtZXNzYWdlLm1hdGNoKEVSUk9SX1RZUEVTX1JFKTtcbiAgICAgICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gZ3JvdXBzWzFdO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBncm91cHNbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5hbWUgfHwgJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5oYW5jZUV2ZW50V2l0aEluaXRpYWxGcmFtZShldmVudCwgdXJsLCBsaW5lLCBjb2x1bW4pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGV2ZW50IGZyb20gYSBwcm9taXNlIHJlamVjdGlvbiB3aGVyZSB0aGUgYHJlYXNvbmAgaXMgYSBwcmltaXRpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhc29uOiBUaGUgYHJlYXNvbmAgcHJvcGVydHkgb2YgdGhlIHByb21pc2UgcmVqZWN0aW9uXG4gICAgICogQHJldHVybnMgQW4gRXZlbnQgb2JqZWN0IHdpdGggYW4gYXBwcm9wcmlhdGUgYGV4Y2VwdGlvbmAgdmFsdWVcbiAgICAgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2V2ZW50RnJvbVJlamVjdGlvbldpdGhQcmltaXRpdmUgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1VuaGFuZGxlZFJlamVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdHJpbmcoKSBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgUHJpbWl0aXZlIHR5cGUgaW5jbHVkZXMgc3ltYm9scyAod2hpY2ggY2FuJ3QgYmUgYXV0b21hdGljYWxseSBzdHJpbmdpZmllZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vbi1FcnJvciBwcm9taXNlIHJlamVjdGlvbiBjYXB0dXJlZCB3aXRoIHZhbHVlOiBcIiArIFN0cmluZyhyZWFzb24pLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUgPSBmdW5jdGlvbiAoZXZlbnQsIHVybCwgbGluZSwgY29sdW1uKSB7XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiB8fCB7fTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgfHwgW107XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgfHwge307XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzIHx8IFtdO1xuICAgICAgICB2YXIgY29sbm8gPSBpc05hTihwYXJzZUludChjb2x1bW4sIDEwKSkgPyB1bmRlZmluZWQgOiBjb2x1bW47XG4gICAgICAgIHZhciBsaW5lbm8gPSBpc05hTihwYXJzZUludChsaW5lLCAxMCkpID8gdW5kZWZpbmVkIDogbGluZTtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gaXNTdHJpbmcodXJsKSAmJiB1cmwubGVuZ3RoID4gMCA/IHVybCA6IGdldExvY2F0aW9uSHJlZigpO1xuICAgICAgICBpZiAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sbm86IGNvbG5vLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogJz8nLFxuICAgICAgICAgICAgICAgIGluX2FwcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsaW5lbm86IGxpbmVubyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgR2xvYmFsSGFuZGxlcnMuaWQgPSAnR2xvYmFsSGFuZGxlcnMnO1xuICAgIHJldHVybiBHbG9iYWxIYW5kbGVycztcbn0oKSk7XG5leHBvcnQgeyBHbG9iYWxIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsaGFuZGxlcnMuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBleGNlcHRpb25Gcm9tU3RhY2t0cmFjZSB9IGZyb20gJy4uL3BhcnNlcnMnO1xuaW1wb3J0IHsgY29tcHV0ZVN0YWNrVHJhY2UgfSBmcm9tICcuLi90cmFjZWtpdCc7XG52YXIgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xudmFyIERFRkFVTFRfTElNSVQgPSA1O1xuLyoqIEFkZHMgU0RLIGluZm8gdG8gYW4gZXZlbnQuICovXG52YXIgTGlua2VkRXJyb3JzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlua2VkRXJyb3JzKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBMaW5rZWRFcnJvcnMuaWQ7XG4gICAgICAgIHRoaXMuX2tleSA9IG9wdGlvbnMua2V5IHx8IERFRkFVTFRfS0VZO1xuICAgICAgICB0aGlzLl9saW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihMaW5rZWRFcnJvcnMpO1xuICAgICAgICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5faGFuZGxlcihldmVudCwgaGludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLl9oYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIGlmICghZXZlbnQuZXhjZXB0aW9uIHx8ICFldmVudC5leGNlcHRpb24udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmtlZEVycm9ycyA9IHRoaXMuX3dhbGtFcnJvclRyZWUoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgdGhpcy5fa2V5KTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IF9fc3ByZWFkKGxpbmtlZEVycm9ycywgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLnByb3RvdHlwZS5fd2Fsa0Vycm9yVHJlZSA9IGZ1bmN0aW9uIChlcnJvciwga2V5LCBzdGFjaykge1xuICAgICAgICBpZiAoc3RhY2sgPT09IHZvaWQgMCkgeyBzdGFjayA9IFtdOyB9XG4gICAgICAgIGlmICghaXNJbnN0YW5jZU9mKGVycm9yW2tleV0sIEVycm9yKSB8fCBzdGFjay5sZW5ndGggKyAxID49IHRoaXMuX2xpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YWNrdHJhY2UgPSBjb21wdXRlU3RhY2tUcmFjZShlcnJvcltrZXldKTtcbiAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Fsa0Vycm9yVHJlZShlcnJvcltrZXldLCBrZXksIF9fc3ByZWFkKFtleGNlcHRpb25dLCBzdGFjaykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMuaWQgPSAnTGlua2VkRXJyb3JzJztcbiAgICByZXR1cm4gTGlua2VkRXJyb3JzO1xufSgpKTtcbmV4cG9ydCB7IExpbmtlZEVycm9ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua2VkZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbnZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbi8qKiBVc2VyQWdlbnQgKi9cbnZhciBVc2VyQWdlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXNlckFnZW50KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IFVzZXJBZ2VudC5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBVc2VyQWdlbnQucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oVXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vbmUgb2YgdGhlIGluZm9ybWF0aW9uIHdlIHdhbnQgZXhpc3RzLCBkb24ndCBib3RoZXJcbiAgICAgICAgICAgICAgICBpZiAoIWdsb2JhbC5uYXZpZ2F0b3IgJiYgIWdsb2JhbC5sb2NhdGlvbiAmJiAhZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZ3JhYiBhcyBtdWNoIGluZm8gYXMgZXhpc3RzIGFuZCBhZGQgaXQgdG8gdGhlIGV2ZW50XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICgoX2EgPSBldmVudC5yZXF1ZXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXJsKSB8fCAoKF9iID0gZ2xvYmFsLmxvY2F0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaHJlZik7XG4gICAgICAgICAgICAgICAgdmFyIHJlZmVycmVyID0gKGdsb2JhbC5kb2N1bWVudCB8fCB7fSkucmVmZXJyZXI7XG4gICAgICAgICAgICAgICAgdmFyIHVzZXJBZ2VudCA9IChnbG9iYWwubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKF9jID0gZXZlbnQucmVxdWVzdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmhlYWRlcnMpLCAocmVmZXJyZXIgJiYgeyBSZWZlcmVyOiByZWZlcnJlciB9KSksICh1c2VyQWdlbnQgJiYgeyAnVXNlci1BZ2VudCc6IHVzZXJBZ2VudCB9KSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHVybCAmJiB7IHVybDogdXJsIH0pKSwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnQpLCB7IHJlcXVlc3Q6IHJlcXVlc3QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBVc2VyQWdlbnQuaWQgPSAnVXNlckFnZW50JztcbiAgICByZXR1cm4gVXNlckFnZW50O1xufSgpKTtcbmV4cG9ydCB7IFVzZXJBZ2VudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlcmFnZW50LmpzLm1hcCIsImltcG9ydCB7IGdldEN1cnJlbnRIdWIsIGluaXRBbmRCaW5kLCBJbnRlZ3JhdGlvbnMgYXMgQ29yZUludGVncmF0aW9ucywgU0RLX1ZFUlNJT04gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgZ2V0R2xvYmFsT2JqZWN0LCBsb2dnZXIsIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCcm93c2VyQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQnO1xuaW1wb3J0IHsgd3JhcCBhcyBpbnRlcm5hbFdyYXAgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYnMsIEdsb2JhbEhhbmRsZXJzLCBMaW5rZWRFcnJvcnMsIFRyeUNhdGNoLCBVc2VyQWdlbnQgfSBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5leHBvcnQgdmFyIGRlZmF1bHRJbnRlZ3JhdGlvbnMgPSBbXG4gICAgbmV3IENvcmVJbnRlZ3JhdGlvbnMuSW5ib3VuZEZpbHRlcnMoKSxcbiAgICBuZXcgQ29yZUludGVncmF0aW9ucy5GdW5jdGlvblRvU3RyaW5nKCksXG4gICAgbmV3IFRyeUNhdGNoKCksXG4gICAgbmV3IEJyZWFkY3J1bWJzKCksXG4gICAgbmV3IEdsb2JhbEhhbmRsZXJzKCksXG4gICAgbmV3IExpbmtlZEVycm9ycygpLFxuICAgIG5ldyBVc2VyQWdlbnQoKSxcbl07XG4vKipcbiAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICpcbiAqIFRvIHVzZSB0aGlzIFNESywgY2FsbCB0aGUge0BsaW5rIGluaXR9IGZ1bmN0aW9uIGFzIGVhcmx5IGFzIHBvc3NpYmxlIHdoZW5cbiAqIGxvYWRpbmcgdGhlIHdlYiBwYWdlLiBUbyBzZXQgY29udGV4dCBpbmZvcm1hdGlvbiBvciBzZW5kIG1hbnVhbCBldmVudHMsIHVzZVxuICogdGhlIHByb3ZpZGVkIG1ldGhvZHMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgeyBpbml0IH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqXG4gKiBpbml0KHtcbiAqICAgZHNuOiAnX19EU05fXycsXG4gKiAgIC8vIC4uLlxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogaW1wb3J0IHsgY29uZmlndXJlU2NvcGUgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICogY29uZmlndXJlU2NvcGUoKHNjb3BlOiBTY29wZSkgPT4ge1xuICogICBzY29wZS5zZXRFeHRyYSh7IGJhdHRlcnk6IDAuNyB9KTtcbiAqICAgc2NvcGUuc2V0VGFnKHsgdXNlcl9tb2RlOiAnYWRtaW4nIH0pO1xuICogICBzY29wZS5zZXRVc2VyKHsgaWQ6ICc0NzExJyB9KTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICpcbiAqIGltcG9ydCB7IGFkZEJyZWFkY3J1bWIgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICogYWRkQnJlYWRjcnVtYih7XG4gKiAgIG1lc3NhZ2U6ICdNeSBCcmVhZGNydW1iJyxcbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKlxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBTZW50cnkuY2FwdHVyZU1lc3NhZ2UoJ0hlbGxvLCB3b3JsZCEnKTtcbiAqIFNlbnRyeS5jYXB0dXJlRXhjZXB0aW9uKG5ldyBFcnJvcignR29vZCBieWUnKSk7XG4gKiBTZW50cnkuY2FwdHVyZUV2ZW50KHtcbiAqICAgbWVzc2FnZTogJ01hbnVhbCcsXG4gKiAgIHN0YWNrdHJhY2U6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgQnJvd3Nlck9wdGlvbnN9IGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9IGRlZmF1bHRJbnRlZ3JhdGlvbnM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnJlbGVhc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgd2luZG93XzEgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgLy8gVGhpcyBzdXBwb3J0cyB0aGUgdmFyaWFibGUgdGhhdCBzZW50cnktd2VicGFjay1wbHVnaW4gaW5qZWN0c1xuICAgICAgICBpZiAod2luZG93XzEuU0VOVFJZX1JFTEVBU0UgJiYgd2luZG93XzEuU0VOVFJZX1JFTEVBU0UuaWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVsZWFzZSA9IHdpbmRvd18xLlNFTlRSWV9SRUxFQVNFLmlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBvcHRpb25zLl9tZXRhZGF0YSA9IG9wdGlvbnMuX21ldGFkYXRhIHx8IHt9O1xuICAgIG9wdGlvbnMuX21ldGFkYXRhLnNkayA9IHtcbiAgICAgICAgbmFtZTogJ3NlbnRyeS5qYXZhc2NyaXB0LmJyb3dzZXInLFxuICAgICAgICBwYWNrYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICducG06QHNlbnRyeS9icm93c2VyJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHZlcnNpb246IFNES19WRVJTSU9OLFxuICAgIH07XG4gICAgaW5pdEFuZEJpbmQoQnJvd3NlckNsaWVudCwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZykge1xuICAgICAgICBzdGFydFNlc3Npb25UcmFja2luZygpO1xuICAgIH1cbn1cbi8qKlxuICogUHJlc2VudCB0aGUgdXNlciB3aXRoIGEgcmVwb3J0IGRpYWxvZy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBFdmVyeXRoaW5nIGlzIG9wdGlvbmFsLCB3ZSB0cnkgdG8gZmV0Y2ggYWxsIGluZm8gbmVlZCBmcm9tIHRoZSBnbG9iYWwgc2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93UmVwb3J0RGlhbG9nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICghb3B0aW9ucy5ldmVudElkKSB7XG4gICAgICAgIG9wdGlvbnMuZXZlbnRJZCA9IGdldEN1cnJlbnRIdWIoKS5sYXN0RXZlbnRJZCgpO1xuICAgIH1cbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgY2xpZW50LnNob3dSZXBvcnREaWFsb2cob3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBnZXR0ZXIgZm9yIGxhc3RFdmVudElkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIGEgY2FwdHVyZWQgZXZlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXN0RXZlbnRJZCgpIHtcbiAgICByZXR1cm4gZ2V0Q3VycmVudEh1YigpLmxhc3RFdmVudElkKCk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JjZUxvYWQoKSB7XG4gICAgLy8gTm9vcFxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGhlcmUgdG8gYmUgQVBJIGNvbXBhdGlibGUgd2l0aCB0aGUgbG9hZGVyLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soKTtcbn1cbi8qKlxuICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudCBldmVudHMgaGF2ZSBiZWVuIHNlbnQuXG4gKiBJZiB5b3UgcHJvdmlkZSBhIHRpbWVvdXQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4gdGhlIHByb21pc2UgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQpIHtcbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5mbHVzaCh0aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChmYWxzZSk7XG59XG4vKipcbiAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnQgZXZlbnRzIGhhdmUgYmVlbiBzZW50LlxuICogSWYgeW91IHByb3ZpZGUgYSB0aW1lb3V0IGFuZCB0aGUgcXVldWUgdGFrZXMgbG9uZ2VyIHRvIGRyYWluIHRoZSBwcm9taXNlIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSBjbGllbnQgc2hvdWxkIHdhaXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZSh0aW1lb3V0KSB7XG4gICAgdmFyIGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQoKTtcbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuY2xvc2UodGltZW91dCk7XG4gICAgfVxuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QoZmFsc2UpO1xufVxuLyoqXG4gKiBXcmFwIGNvZGUgd2l0aGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNvIHRoZSBTREsgaXMgYWJsZSB0byBjYXB0dXJlIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICpcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygd3JhcHBlZCBmdW5jdGlvbiBjYWxsLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICByZXR1cm4gaW50ZXJuYWxXcmFwKGZuKSgpO1xufVxuLyoqXG4gKiBFbmFibGUgYXV0b21hdGljIFNlc3Npb24gVHJhY2tpbmcgZm9yIHRoZSBpbml0aWFsIHBhZ2UgbG9hZC5cbiAqL1xuZnVuY3Rpb24gc3RhcnRTZXNzaW9uVHJhY2tpbmcoKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2dnZXIud2FybignU2Vzc2lvbiB0cmFja2luZyBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudCB3aXRoIEBzZW50cnkvYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgaHViLnN0YXJ0U2Vzc2lvbigpO1xuICAgIGh1Yi5jYXB0dXJlU2Vzc2lvbigpO1xuICAgIC8vIFdlIHdhbnQgdG8gY3JlYXRlIGEgc2Vzc2lvbiBmb3IgZXZlcnkgbmF2aWdhdGlvbiBhcyB3ZWxsXG4gICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBodWIuc3RhcnRTZXNzaW9uKCk7XG4gICAgICAgICAgICBodWIuY2FwdHVyZVNlc3Npb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogJ2hpc3RvcnknLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsIi8vIFNsaWdodGx5IG1vZGlmaWVkIChubyBJRTggc3VwcG9ydCwgRVM2KSBhbmQgdHJhbnNjcmliZWQgdG8gVHlwZVNjcmlwdFxuLy8gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NhbHZpbm1ldGNhbGYvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL21hc3Rlci9zcmMvZXM2L3BhdGguanNcbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gICAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgICB2YXIgdXAgPSAwO1xuICAgIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgICAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgICAgICB1cCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVwKSB7XG4gICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICAgICAgICAgIHVwLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICAgICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID0gL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteL10rP3wpKFxcLlteLi9dKnwpKSg/OlsvXSopJC87XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIHNwbGl0UGF0aChmaWxlbmFtZSkge1xuICAgIHZhciBwYXJ0cyA9IHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpO1xuICAgIHJldHVybiBwYXJ0cyA/IHBhcnRzLnNsaWNlKDEpIDogW107XG59XG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG4vKiogSlNEb2MgKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzb2x2ZWRQYXRoID0gJyc7XG4gICAgdmFyIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gYXJncy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICAgICAgdmFyIHBhdGggPSBpID49IDAgPyBhcmdzW2ldIDogJy8nO1xuICAgICAgICAvLyBTa2lwIGVtcHR5IGVudHJpZXNcbiAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgXCIvXCIgKyByZXNvbHZlZFBhdGg7XG4gICAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJykuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiAhIXA7IH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuICAgIHJldHVybiAocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCB8fCAnLic7XG59XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgICAgaWYgKGFycltlbmRdICE9PSAnJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbn1cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG4vKiogSlNEb2MgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWxhdGl2ZShmcm9tLCB0bykge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgZnJvbSA9IHJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICAgIHRvID0gcmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICAgIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICAgIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICAgICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICAgIH1cbiAgICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuICAgIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59XG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoKSB7XG4gICAgdmFyIGlzUGF0aEFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKTtcbiAgICB2YXIgdHJhaWxpbmdTbGFzaCA9IHBhdGguc3Vic3RyKC0xKSA9PT0gJy8nO1xuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgIHZhciBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuICEhcDsgfSksICFpc1BhdGhBYnNvbHV0ZSkuam9pbignLycpO1xuICAgIGlmICghbm9ybWFsaXplZFBhdGggJiYgIWlzUGF0aEFic29sdXRlKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRQYXRoID0gJy4nO1xuICAgIH1cbiAgICBpZiAobm9ybWFsaXplZFBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgICAgICBub3JtYWxpemVkUGF0aCArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiAoaXNQYXRoQWJzb2x1dGUgPyAnLycgOiAnJykgKyBub3JtYWxpemVkUGF0aDtcbn1cbi8vIHBvc2l4IHZlcnNpb25cbi8qKiBKU0RvYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xuICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuLy8gcG9zaXggdmVyc2lvblxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gam9pbigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgoYXJncy5qb2luKCcvJykpO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKTtcbiAgICB2YXIgcm9vdCA9IHJlc3VsdFswXTtcbiAgICB2YXIgZGlyID0gcmVzdWx0WzFdO1xuICAgIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgICAgICByZXR1cm4gJy4nO1xuICAgIH1cbiAgICBpZiAoZGlyKSB7XG4gICAgICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdCArIGRpcjtcbn1cbi8qKiBKU0RvYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgsIGV4dCkge1xuICAgIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAgIGlmIChleHQgJiYgZi5zdWJzdHIoZXh0Lmxlbmd0aCAqIC0xKSA9PT0gZXh0KSB7XG4gICAgICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gZjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGguanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiwgaW5pdCBhcyBicm93c2VySW5pdCwgU0RLX1ZFUlNJT04gfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuaW1wb3J0IHsgYmFzZW5hbWUsIGdldEdsb2JhbE9iamVjdCwgbG9nZ2VyLCB0aW1lc3RhbXBXaXRoTXMgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8vIE1hcHBpbmdzIGZyb20gb3BlcmF0aW9uIHRvIGNvcnJlc3BvbmRpbmcgbGlmZWN5Y2xlIGhvb2suXG52YXIgSE9PS1MgPSB7XG4gICAgYWN0aXZhdGU6IFsnYWN0aXZhdGVkJywgJ2RlYWN0aXZhdGVkJ10sXG4gICAgY3JlYXRlOiBbJ2JlZm9yZUNyZWF0ZScsICdjcmVhdGVkJ10sXG4gICAgZGVzdHJveTogWydiZWZvcmVEZXN0cm95JywgJ2Rlc3Ryb3llZCddLFxuICAgIG1vdW50OiBbJ2JlZm9yZU1vdW50JywgJ21vdW50ZWQnXSxcbiAgICB1cGRhdGU6IFsnYmVmb3JlVXBkYXRlJywgJ3VwZGF0ZWQnXSxcbn07XG52YXIgQ09NUE9ORU5UX05BTUVfUkVHRVhQID0gLyg/Ol58Wy1fL10pKFxcdykvZztcbnZhciBST09UX0NPTVBPTkVOVF9OQU1FID0gJ3Jvb3QnO1xudmFyIEFOT05ZTU9VU19DT01QT05FTlRfTkFNRSA9ICdhbm9ueW1vdXMgY29tcG9uZW50Jztcbi8qKlxuICogSW5pdHMgdGhlIFZ1ZSBTREtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGZpbmFsT3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHsgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgVnVlOiBnZXRHbG9iYWxPYmplY3QoKS5WdWUsIGF0dGFjaFByb3BzOiB0cnVlLCBsb2dFcnJvcnM6IGZhbHNlLCB0cmFjaW5nOiBmYWxzZSB9LCBvcHRpb25zKSwgeyB0cmFjaW5nT3B0aW9uczogX19hc3NpZ24oeyBob29rczogWydhY3RpdmF0ZScsICdtb3VudCcsICd1cGRhdGUnXSwgdGltZW91dDogMjAwMCwgdHJhY2tDb21wb25lbnRzOiBmYWxzZSB9LCBvcHRpb25zLnRyYWNpbmdPcHRpb25zKSB9KTtcbiAgICBmaW5hbE9wdGlvbnMuX21ldGFkYXRhID0gZmluYWxPcHRpb25zLl9tZXRhZGF0YSB8fCB7fTtcbiAgICBmaW5hbE9wdGlvbnMuX21ldGFkYXRhLnNkayA9IHtcbiAgICAgICAgbmFtZTogJ3NlbnRyeS5qYXZhc2NyaXB0LnZ1ZScsXG4gICAgICAgIHBhY2thZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ25wbTpAc2VudHJ5L3Z1ZScsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICB9O1xuICAgIGJyb3dzZXJJbml0KGZpbmFsT3B0aW9ucyk7XG4gICAgaWYgKGZpbmFsT3B0aW9ucy5WdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2dnZXIud2FybignTm8gVnVlIGluc3RhbmNlIHdhcyBwcm92aWRlZC4gQWxzbyB0aGVyZSBpcyBubyBWdWUgaW5zdGFuY2Ugb24gdGhlIGB3aW5kb3dgIG9iamVjdC4nKTtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1dlIHdpbGwgb25seSBjYXB0dXJlIGdsb2JhbCB1bmhhbmRsZWQgZXJyb3JzLicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHZ1ZUhlbHBlciA9IG5ldyBWdWVIZWxwZXIoZmluYWxPcHRpb25zKTtcbiAgICAgICAgdnVlSGVscGVyLnNldHVwKCk7XG4gICAgfVxufVxuLyoqIEpTRG9jICovXG52YXIgVnVlSGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gVnVlSGVscGVyKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlIGhvbGRpbmcgYWxyZWFkeSBwcm9jZXNzZWQgY29tcG9uZW50IG5hbWVzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jb21wb25lbnRzQ2FjaGUgPSB7fTtcbiAgICAgICAgLyoqIEtlZXAgaXQgYXMgYXR0cmlidXRlIGZ1bmN0aW9uLCB0byBrZWVwIGNvcnJlY3QgYHRoaXNgIGJpbmRpbmcgaW5zaWRlIHRoZSBob29rcyBjYWxsYmFja3MgICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdHlwZWRlZlxuICAgICAgICB0aGlzLl9hcHBseVRyYWNpbmdIb29rcyA9IGZ1bmN0aW9uICh2bSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgYXR0YWNoIHR3aWNlLCBqdXN0IGluIGNhc2VcbiAgICAgICAgICAgIGlmICh2bS4kb3B0aW9ucy4kX3NlbnRyeVBlcmZIb29rKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdm0uJG9wdGlvbnMuJF9zZW50cnlQZXJmSG9vayA9IHRydWU7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF90aGlzLl9nZXRDb21wb25lbnROYW1lKHZtKTtcbiAgICAgICAgICAgIHZhciByb290TW91bnQgPSBuYW1lID09PSBST09UX0NPTVBPTkVOVF9OQU1FO1xuICAgICAgICAgICAgdmFyIHNwYW5zID0ge307XG4gICAgICAgICAgICAvLyBSZW5kZXIgaG9vayBzdGFydHMgYWZ0ZXIgb25jZSBldmVudCBpcyBlbWl0dGVkLFxuICAgICAgICAgICAgLy8gYnV0IGl0IGVuZHMgYmVmb3JlIHRoZSBzZWNvbmQgZXZlbnQgb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBCZWNhdXNlIG9mIHRoaXMsIHdlIHN0YXJ0IG1lYXN1cmluZyBpbnNpZGUgdGhlIGZpcnN0IGV2ZW50LFxuICAgICAgICAgICAgLy8gYnV0IGZpbmlzaCBpdCBiZWZvcmUgaXQgdHJpZ2dlcnMsIHRvIHNraXAgdGhlIGV2ZW50IGVtaXR0ZXIgdGltaW5nIGl0c2VsZi5cbiAgICAgICAgICAgIHZhciByb290SGFuZGxlciA9IGZ1bmN0aW9uIChob29rKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdyA9IHRpbWVzdGFtcFdpdGhNcygpO1xuICAgICAgICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBoYW5kbGVyIGNhbGwgKGJlZm9yZSksIGl0J2xsIGJlIHVuZGVmaW5lZCwgYXMgYCRvbmNlYCB3aWxsIGFkZCBpdCBpbiB0aGUgZnV0dXJlLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIG9uIHRoZSBzZWNvbmQgY2FsbCAoYWZ0ZXIpLCBpdCdsbCBiZSBhbHJlYWR5IGluIHBsYWNlLlxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZpbmlzaFJvb3RTcGFuKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2bS4kb25jZShcImhvb2s6XCIgKyBob29rLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYW4gYWN0aXZpdHkgb24gdGhlIGZpcnN0IGV2ZW50IGNhbGwuIFRoZXJlJ2xsIGJlIG5vIHNlY29uZCBjYWxsLCBhcyByb290U3BhbiB3aWxsIGJlIGluIHBsYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGh1cyBuZXcgZXZlbnQgaGFuZGxlciB3b24ndCBiZSBhdHRhY2hlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUcmFuc2FjdGlvbiA9IGdldEFjdGl2ZVRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcm9vdFNwYW4gPSBhY3RpdmVUcmFuc2FjdGlvbi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBcHBsaWNhdGlvbiBSZW5kZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogJ1Z1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY2hpbGRIYW5kbGVyID0gZnVuY3Rpb24gKGhvb2ssIG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIFNraXAgY29tcG9uZW50cyB0aGF0IHdlIGRvbid0IHdhbnQgdG8gdHJhY2sgdG8gbWluaW1pemUgdGhlIG5vaXNlIGFuZCBnaXZlIGEgbW9yZSBncmFudWxhciBjb250cm9sIHRvIHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZFRyYWNrID0gQXJyYXkuaXNBcnJheShfdGhpcy5fb3B0aW9ucy50cmFjaW5nT3B0aW9ucy50cmFja0NvbXBvbmVudHMpXG4gICAgICAgICAgICAgICAgICAgID8gX3RoaXMuX29wdGlvbnMudHJhY2luZ09wdGlvbnMudHJhY2tDb21wb25lbnRzLmluZGV4T2YobmFtZSkgPiAtMVxuICAgICAgICAgICAgICAgICAgICA6IF90aGlzLl9vcHRpb25zLnRyYWNpbmdPcHRpb25zLnRyYWNrQ29tcG9uZW50cztcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRPZiA9IF90aGlzLl9yb290U3BhbiB8fCBnZXRBY3RpdmVUcmFuc2FjdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmICghY2hpbGRPZiB8fCAhc2hvdWxkVHJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gdGltZXN0YW1wV2l0aE1zKCk7XG4gICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBzcGFuc1tvcGVyYXRpb25dO1xuICAgICAgICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBoYW5kbGVyIGNhbGwgKGJlZm9yZSksIGl0J2xsIGJlIHVuZGVmaW5lZCwgYXMgYCRvbmNlYCB3aWxsIGFkZCBpdCBpbiB0aGUgZnV0dXJlLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIG9uIHRoZSBzZWNvbmQgY2FsbCAoYWZ0ZXIpLCBpdCdsbCBiZSBhbHJlYWR5IGluIHBsYWNlLlxuICAgICAgICAgICAgICAgIGlmIChzcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9maW5pc2hSb290U3Bhbihub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uJG9uY2UoXCJob29rOlwiICsgaG9vaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkT2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuc1tvcGVyYXRpb25dID0gY2hpbGRPZi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVnVlIDxcIiArIG5hbWUgKyBcIj5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3A6IG9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEVhY2ggY29tcG9uZW50IGhhcyBpdCdzIG93biBzY29wZSwgc28gYWxsIGFjdGl2aXRpZXMgYXJlIG9ubHkgcmVsYXRlZCB0byBvbmUgb2YgdGhlbVxuICAgICAgICAgICAgX3RoaXMuX29wdGlvbnMudHJhY2luZ09wdGlvbnMuaG9va3MuZm9yRWFjaChmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0cmlldmUgY29ycmVzcG9uZGluZyBob29rcyBmcm9tIFZ1ZSBsaWZlY3ljbGUuXG4gICAgICAgICAgICAgICAgLy8gZWcuIG1vdW50ID0+IFsnYmVmb3JlTW91bnQnLCAnbW91bnRlZCddXG4gICAgICAgICAgICAgICAgdmFyIGludGVybmFsSG9va3MgPSBIT09LU1tvcGVyYXRpb25dO1xuICAgICAgICAgICAgICAgIGlmICghaW50ZXJuYWxIb29rcykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIlVua25vd24gaG9vazogXCIgKyBvcGVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGludGVybmFsSG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJuYWxIb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gcm9vdE1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJvb3RIYW5kbGVyLmJpbmQoX3RoaXMsIGludGVybmFsSG9vaylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY2hpbGRIYW5kbGVyLmJpbmQoX3RoaXMsIGludGVybmFsSG9vaywgb3BlcmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHZtLiRvcHRpb25zW2ludGVybmFsSG9va107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLiRvcHRpb25zW2ludGVybmFsSG9va10gPSBfX3NwcmVhZChbaGFuZGxlcl0sIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0uJG9wdGlvbnNbaW50ZXJuYWxIb29rXSA9IFtoYW5kbGVyLCBjdXJyZW50VmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0uJG9wdGlvbnNbaW50ZXJuYWxIb29rXSA9IFtoYW5kbGVyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyB0aGUgZXJyb3IgaGFuZGxlciBhbmQgc3RhcnRzIHRyYWNpbmdcbiAgICAgKi9cbiAgICBWdWVIZWxwZXIucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hdHRhY2hFcnJvckhhbmRsZXIoKTtcbiAgICAgICAgaWYgKCd0cmFjZXNTYW1wbGVSYXRlJyBpbiB0aGlzLl9vcHRpb25zIHx8ICd0cmFjZXNTYW1wbGVyJyBpbiB0aGlzLl9vcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydFRyYWNpbmcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBjb21wb25lbnQgbmFtZSBmcm9tIHRoZSBWaWV3TW9kZWxcbiAgICAgKi9cbiAgICBWdWVIZWxwZXIucHJvdG90eXBlLl9nZXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgICAgIC8vIFN1Y2ggbGV2ZWwgb2YgZ3JhbnVsYXJpdHkgaXMgbW9zdCBsaWtlbHkgbm90IG5lY2Vzc2FyeSwgYnV0IGJldHRlciBzYWZlIHRoYW4gc29ycnkuIOKAlCBLYW1pbFxuICAgICAgICBpZiAoIXZtKSB7XG4gICAgICAgICAgICByZXR1cm4gQU5PTllNT1VTX0NPTVBPTkVOVF9OQU1FO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgICAgICAgIHJldHVybiBST09UX0NPTVBPTkVOVF9OQU1FO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdm0uJG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBBTk9OWU1PVVNfQ09NUE9ORU5UX05BTUU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2bS4kb3B0aW9ucy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gdm0uJG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmplY3RlZCBieSB2dWUtbG9hZGVyXG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5fX2ZpbGUpIHtcbiAgICAgICAgICAgIHZhciB1bmlmaWVkRmlsZSA9IHZtLiRvcHRpb25zLl9fZmlsZS5yZXBsYWNlKC9eW2EtekEtWl06LywgJycpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IGJhc2VuYW1lKHVuaWZpZWRGaWxlLCAnLnZ1ZScpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9jb21wb25lbnRzQ2FjaGVbZmlsZW5hbWVdIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX2NvbXBvbmVudHNDYWNoZVtmaWxlbmFtZV0gPSBmaWxlbmFtZS5yZXBsYWNlKENPTVBPTkVOVF9OQU1FX1JFR0VYUCwgZnVuY3Rpb24gKF8sIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBTk9OWU1PVVNfQ09NUE9ORU5UX05BTUU7XG4gICAgfTtcbiAgICAvKiogRmluaXNoIHRvcC1sZXZlbCBzcGFuIGFuZCBhY3Rpdml0eSB3aXRoIGEgZGVib3VuY2UgY29uZmlndXJlZCB1c2luZyBgdGltZW91dGAgb3B0aW9uICovXG4gICAgVnVlSGVscGVyLnByb3RvdHlwZS5fZmluaXNoUm9vdFNwYW4gPSBmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9yb290U3BhblRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcm9vdFNwYW5UaW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm9vdFNwYW5UaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIGFsd2F5cyBmaW5pc2ggdGhlIHNwYW4sIG9ubHkgc2hvdWxkIHBvcCBhY3Rpdml0eSBpZiB1c2luZyBAc2VudHJ5L2FwbVxuICAgICAgICAgICAgaWYgKF90aGlzLl9yb290U3Bhbikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9yb290U3Bhbi5maW5pc2godGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcm9vdFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuX29wdGlvbnMudHJhY2luZ09wdGlvbnMudGltZW91dCk7XG4gICAgfTtcbiAgICAvKiogSW5qZWN0IGNvbmZpZ3VyZWQgdHJhY2luZyBob29rcyBpbnRvIFZ1ZSdzIGNvbXBvbmVudCBsaWZlY3ljbGVzICovXG4gICAgVnVlSGVscGVyLnByb3RvdHlwZS5fc3RhcnRUcmFjaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXBwbHlUcmFjaW5nSG9va3MgPSB0aGlzLl9hcHBseVRyYWNpbmdIb29rcztcbiAgICAgICAgdmFyIGFwcGxpZWRUcmFjaW5nSG9va3MgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRGlkbid0IGFwcGx5IHRyYWNpbmcgaG9va3MsIG1ha2Ugc3VyZSB5b3UgY2FsbCBTZW50cnkuaW5pdCBiZWZvcmUgaW5pdGlhbHppbmcgVnVlIVwiKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5WdWUubWl4aW4oe1xuICAgICAgICAgICAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFwcGxpZWRUcmFjaW5nSG9va3MpO1xuICAgICAgICAgICAgICAgIGFwcGx5VHJhY2luZ0hvb2tzKHRoaXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSW5qZWN0IFNlbnRyeSdzIGhhbmRsZXIgaW50byBvd25zIFZ1ZSdzIGVycm9yIGhhbmRsZXIgICovXG4gICAgVnVlSGVscGVyLnByb3RvdHlwZS5fYXR0YWNoRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHZhciBjdXJyZW50RXJyb3JIYW5kbGVyID0gdGhpcy5fb3B0aW9ucy5WdWUuY29uZmlnLmVycm9ySGFuZGxlcjtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5WdWUuY29uZmlnLmVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChlcnJvciwgdm0sIGluZm8pIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgaWYgKHZtKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEuY29tcG9uZW50TmFtZSA9IF90aGlzLl9nZXRDb21wb25lbnROYW1lKHZtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vcHRpb25zLmF0dGFjaFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YS5wcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybignVW5hYmxlIHRvIGV4dHJhY3QgbWV0YWRhdGEgZnJvbSBWdWUgY29tcG9uZW50LicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEubGlmZWN5Y2xlSG9vayA9IGluZm87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDYXB0dXJlIGV4Y2VwdGlvbiBpbiB0aGUgbmV4dCBldmVudCBsb29wLCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgYnJlYWRjcnVtYnMgYXJlIHJlY29yZGVkIGluIHRpbWUuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBnZXRDdXJyZW50SHViKCkud2l0aFNjb3BlKGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5zZXRDb250ZXh0KCd2dWUnLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50RXJyb3JIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEVycm9ySGFuZGxlci5jYWxsKF90aGlzLl9vcHRpb25zLlZ1ZSwgZXJyb3IsIHZtLCBpbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5fb3B0aW9ucy5sb2dFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX29wdGlvbnMuVnVlLnV0aWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29wdGlvbnMuVnVlLnV0aWwud2FybihcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyb3IgJiYgZXJyb3IudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiwgdm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFZ1ZUhlbHBlcjtcbn0oKSk7XG4vKiogR3JhYnMgYWN0aXZlIHRyYW5zYWN0aW9uIG9mZiBzY29wZSwgaWYgYW55ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlVHJhbnNhY3Rpb24oKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBnZXRDdXJyZW50SHViKClcbiAgICAgICAgLmdldFNjb3BlKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRUcmFuc2FjdGlvbigpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsImV4cG9ydCB2YXIgVHJhbnNhY3Rpb25TYW1wbGluZ01ldGhvZDtcbihmdW5jdGlvbiAoVHJhbnNhY3Rpb25TYW1wbGluZ01ldGhvZCkge1xuICAgIFRyYW5zYWN0aW9uU2FtcGxpbmdNZXRob2RbXCJFeHBsaWNpdFwiXSA9IFwiZXhwbGljaXRseV9zZXRcIjtcbiAgICBUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kW1wiU2FtcGxlclwiXSA9IFwiY2xpZW50X3NhbXBsZXJcIjtcbiAgICBUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kW1wiUmF0ZVwiXSA9IFwiY2xpZW50X3JhdGVcIjtcbiAgICBUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kW1wiSW5oZXJpdGFuY2VcIl0gPSBcImluaGVyaXRhbmNlXCI7XG59KShUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kIHx8IChUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcCIsIi8qKiBUaGUgc3RhdHVzIG9mIGFuIFNwYW4uICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IHZhciBTcGFuU3RhdHVzO1xuKGZ1bmN0aW9uIChTcGFuU3RhdHVzKSB7XG4gICAgLyoqIFRoZSBvcGVyYXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBTcGFuU3RhdHVzW1wiT2tcIl0gPSBcIm9rXCI7XG4gICAgLyoqIERlYWRsaW5lIGV4cGlyZWQgYmVmb3JlIG9wZXJhdGlvbiBjb3VsZCBjb21wbGV0ZS4gKi9cbiAgICBTcGFuU3RhdHVzW1wiRGVhZGxpbmVFeGNlZWRlZFwiXSA9IFwiZGVhZGxpbmVfZXhjZWVkZWRcIjtcbiAgICAvKiogNDAxIFVuYXV0aG9yaXplZCAoYWN0dWFsbHkgZG9lcyBtZWFuIHVuYXV0aGVudGljYXRlZCBhY2NvcmRpbmcgdG8gUkZDIDcyMzUpICovXG4gICAgU3BhblN0YXR1c1tcIlVuYXV0aGVudGljYXRlZFwiXSA9IFwidW5hdXRoZW50aWNhdGVkXCI7XG4gICAgLyoqIDQwMyBGb3JiaWRkZW4gKi9cbiAgICBTcGFuU3RhdHVzW1wiUGVybWlzc2lvbkRlbmllZFwiXSA9IFwicGVybWlzc2lvbl9kZW5pZWRcIjtcbiAgICAvKiogNDA0IE5vdCBGb3VuZC4gU29tZSByZXF1ZXN0ZWQgZW50aXR5IChmaWxlIG9yIGRpcmVjdG9yeSkgd2FzIG5vdCBmb3VuZC4gKi9cbiAgICBTcGFuU3RhdHVzW1wiTm90Rm91bmRcIl0gPSBcIm5vdF9mb3VuZFwiO1xuICAgIC8qKiA0MjkgVG9vIE1hbnkgUmVxdWVzdHMgKi9cbiAgICBTcGFuU3RhdHVzW1wiUmVzb3VyY2VFeGhhdXN0ZWRcIl0gPSBcInJlc291cmNlX2V4aGF1c3RlZFwiO1xuICAgIC8qKiBDbGllbnQgc3BlY2lmaWVkIGFuIGludmFsaWQgYXJndW1lbnQuIDR4eC4gKi9cbiAgICBTcGFuU3RhdHVzW1wiSW52YWxpZEFyZ3VtZW50XCJdID0gXCJpbnZhbGlkX2FyZ3VtZW50XCI7XG4gICAgLyoqIDUwMSBOb3QgSW1wbGVtZW50ZWQgKi9cbiAgICBTcGFuU3RhdHVzW1wiVW5pbXBsZW1lbnRlZFwiXSA9IFwidW5pbXBsZW1lbnRlZFwiO1xuICAgIC8qKiA1MDMgU2VydmljZSBVbmF2YWlsYWJsZSAqL1xuICAgIFNwYW5TdGF0dXNbXCJVbmF2YWlsYWJsZVwiXSA9IFwidW5hdmFpbGFibGVcIjtcbiAgICAvKiogT3RoZXIvZ2VuZXJpYyA1eHguICovXG4gICAgU3BhblN0YXR1c1tcIkludGVybmFsRXJyb3JcIl0gPSBcImludGVybmFsX2Vycm9yXCI7XG4gICAgLyoqIFVua25vd24uIEFueSBub24tc3RhbmRhcmQgSFRUUCBzdGF0dXMgY29kZS4gKi9cbiAgICBTcGFuU3RhdHVzW1wiVW5rbm93bkVycm9yXCJdID0gXCJ1bmtub3duX2Vycm9yXCI7XG4gICAgLyoqIFRoZSBvcGVyYXRpb24gd2FzIGNhbmNlbGxlZCAodHlwaWNhbGx5IGJ5IHRoZSB1c2VyKS4gKi9cbiAgICBTcGFuU3RhdHVzW1wiQ2FuY2VsbGVkXCJdID0gXCJjYW5jZWxsZWRcIjtcbiAgICAvKiogQWxyZWFkeSBleGlzdHMgKDQwOSkgKi9cbiAgICBTcGFuU3RhdHVzW1wiQWxyZWFkeUV4aXN0c1wiXSA9IFwiYWxyZWFkeV9leGlzdHNcIjtcbiAgICAvKiogT3BlcmF0aW9uIHdhcyByZWplY3RlZCBiZWNhdXNlIHRoZSBzeXN0ZW0gaXMgbm90IGluIGEgc3RhdGUgcmVxdWlyZWQgZm9yIHRoZSBvcGVyYXRpb24ncyAqL1xuICAgIFNwYW5TdGF0dXNbXCJGYWlsZWRQcmVjb25kaXRpb25cIl0gPSBcImZhaWxlZF9wcmVjb25kaXRpb25cIjtcbiAgICAvKiogVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZCwgdHlwaWNhbGx5IGR1ZSB0byBhIGNvbmN1cnJlbmN5IGlzc3VlLiAqL1xuICAgIFNwYW5TdGF0dXNbXCJBYm9ydGVkXCJdID0gXCJhYm9ydGVkXCI7XG4gICAgLyoqIE9wZXJhdGlvbiB3YXMgYXR0ZW1wdGVkIHBhc3QgdGhlIHZhbGlkIHJhbmdlLiAqL1xuICAgIFNwYW5TdGF0dXNbXCJPdXRPZlJhbmdlXCJdID0gXCJvdXRfb2ZfcmFuZ2VcIjtcbiAgICAvKiogVW5yZWNvdmVyYWJsZSBkYXRhIGxvc3Mgb3IgY29ycnVwdGlvbiAqL1xuICAgIFNwYW5TdGF0dXNbXCJEYXRhTG9zc1wiXSA9IFwiZGF0YV9sb3NzXCI7XG59KShTcGFuU3RhdHVzIHx8IChTcGFuU3RhdHVzID0ge30pKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlLCBpbXBvcnQvZXhwb3J0XG4oZnVuY3Rpb24gKFNwYW5TdGF0dXMpIHtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIEhUVFAgc3RhdHVzIGNvZGUgaW50byBhIHtAbGluayBTcGFuU3RhdHVzfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodHRwU3RhdHVzIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgICAqIEByZXR1cm5zIFRoZSBzcGFuIHN0YXR1cyBvciB7QGxpbmsgU3BhblN0YXR1cy5Vbmtub3duRXJyb3J9LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21IdHRwQ29kZShodHRwU3RhdHVzKSB7XG4gICAgICAgIGlmIChodHRwU3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3BhblN0YXR1cy5PaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cFN0YXR1cyA+PSA0MDAgJiYgaHR0cFN0YXR1cyA8IDUwMCkge1xuICAgICAgICAgICAgc3dpdGNoIChodHRwU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTcGFuU3RhdHVzLlVuYXV0aGVudGljYXRlZDtcbiAgICAgICAgICAgICAgICBjYXNlIDQwMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuUGVybWlzc2lvbkRlbmllZDtcbiAgICAgICAgICAgICAgICBjYXNlIDQwNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuTm90Rm91bmQ7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTcGFuU3RhdHVzLkFscmVhZHlFeGlzdHM7XG4gICAgICAgICAgICAgICAgY2FzZSA0MTM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTcGFuU3RhdHVzLkZhaWxlZFByZWNvbmRpdGlvbjtcbiAgICAgICAgICAgICAgICBjYXNlIDQyOTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuUmVzb3VyY2VFeGhhdXN0ZWQ7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuSW52YWxpZEFyZ3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwU3RhdHVzID49IDUwMCAmJiBodHRwU3RhdHVzIDwgNjAwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGh0dHBTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDUwMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuVW5pbXBsZW1lbnRlZDtcbiAgICAgICAgICAgICAgICBjYXNlIDUwMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuVW5hdmFpbGFibGU7XG4gICAgICAgICAgICAgICAgY2FzZSA1MDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTcGFuU3RhdHVzLkRlYWRsaW5lRXhjZWVkZWQ7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNwYW5TdGF0dXMuSW50ZXJuYWxFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3BhblN0YXR1cy5Vbmtub3duRXJyb3I7XG4gICAgfVxuICAgIFNwYW5TdGF0dXMuZnJvbUh0dHBDb2RlID0gZnJvbUh0dHBDb2RlO1xufSkoU3BhblN0YXR1cyB8fCAoU3BhblN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuc3RhdHVzLmpzLm1hcCIsImltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5leHBvcnQgdmFyIFRSQUNFUEFSRU5UX1JFR0VYUCA9IG5ldyBSZWdFeHAoJ15bIFxcXFx0XSonICsgLy8gd2hpdGVzcGFjZVxuICAgICcoWzAtOWEtZl17MzJ9KT8nICsgLy8gdHJhY2VfaWRcbiAgICAnLT8oWzAtOWEtZl17MTZ9KT8nICsgLy8gc3Bhbl9pZFxuICAgICctPyhbMDFdKT8nICsgLy8gc2FtcGxlZFxuICAgICdbIFxcXFx0XSokJyk7XG4vKipcbiAqIERldGVybWluZXMgaWYgdHJhY2luZyBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAqXG4gKiBUcmFjaW5nIGlzIGVuYWJsZWQgd2hlbiBhdCBsZWFzdCBvbmUgb2YgYHRyYWNlc1NhbXBsZVJhdGVgIGFuZCBgdHJhY2VzU2FtcGxlcmAgaXMgZGVmaW5lZCBpbiB0aGUgU0RLIGNvbmZpZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1RyYWNpbmdFbmFibGVkKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJ3RyYWNlc1NhbXBsZVJhdGUnIGluIG9wdGlvbnMgfHwgJ3RyYWNlc1NhbXBsZXInIGluIG9wdGlvbnM7XG59XG4vKipcbiAqIEV4dHJhY3QgdHJhbnNhY3Rpb24gY29udGV4dCBkYXRhIGZyb20gYSBgc2VudHJ5LXRyYWNlYCBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHRyYWNlcGFyZW50IFRyYWNlcGFyZW50IHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIGRhdGEgZnJvbSB0aGUgaGVhZGVyLCBvciB1bmRlZmluZWQgaWYgdHJhY2VwYXJlbnQgc3RyaW5nIGlzIG1hbGZvcm1lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFRyYWNlcGFyZW50RGF0YSh0cmFjZXBhcmVudCkge1xuICAgIHZhciBtYXRjaGVzID0gdHJhY2VwYXJlbnQubWF0Y2goVFJBQ0VQQVJFTlRfUkVHRVhQKTtcbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICB2YXIgcGFyZW50U2FtcGxlZCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKG1hdGNoZXNbM10gPT09ICcxJykge1xuICAgICAgICAgICAgcGFyZW50U2FtcGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF0Y2hlc1szXSA9PT0gJzAnKSB7XG4gICAgICAgICAgICBwYXJlbnRTYW1wbGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYWNlSWQ6IG1hdGNoZXNbMV0sXG4gICAgICAgICAgICBwYXJlbnRTYW1wbGVkOiBwYXJlbnRTYW1wbGVkLFxuICAgICAgICAgICAgcGFyZW50U3BhbklkOiBtYXRjaGVzWzJdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqIEdyYWJzIGFjdGl2ZSB0cmFuc2FjdGlvbiBvZmYgc2NvcGUsIGlmIGFueSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zYWN0aW9uKGh1Yikge1xuICAgIGlmIChodWIgPT09IHZvaWQgMCkgeyBodWIgPSBnZXRDdXJyZW50SHViKCk7IH1cbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBodWIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRTY29wZSgpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0VHJhbnNhY3Rpb24oKTtcbn1cbi8qKlxuICogQ29udmVydHMgZnJvbSBtaWxsaXNlY29uZHMgdG8gc2Vjb25kc1xuICogQHBhcmFtIHRpbWUgdGltZSBpbiBtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXNUb1NlYyh0aW1lKSB7XG4gICAgcmV0dXJuIHRpbWUgLyAxMDAwO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gKiBAcGFyYW0gdGltZSB0aW1lIGluIHNlY29uZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlY1RvTXModGltZSkge1xuICAgIHJldHVybiB0aW1lICogMTAwMDtcbn1cbi8vIHNvIGl0IGNhbiBiZSB1c2VkIGluIG1hbnVhbCBpbnN0cnVtZW50YXRpb24gd2l0aG91dCBuZWNlc3NpdGF0aW5nIGEgaGFyZCBkZXBlbmRlbmN5IG9uIEBzZW50cnkvdXRpbHNcbmV4cG9ydCB7IHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBTcGFuU3RhdHVzIH0gZnJvbSAnLi9zcGFuc3RhdHVzJztcbmltcG9ydCB7IGdldEFjdGl2ZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi91dGlscyc7XG4vKipcbiAqIENvbmZpZ3VyZXMgZ2xvYmFsIGVycm9yIGxpc3RlbmVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFcnJvckluc3RydW1lbnRhdGlvbigpIHtcbiAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgY2FsbGJhY2s6IGVycm9yQ2FsbGJhY2ssXG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgfSk7XG4gICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgIGNhbGxiYWNrOiBlcnJvckNhbGxiYWNrLFxuICAgICAgICB0eXBlOiAndW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICB9KTtcbn1cbi8qKlxuICogSWYgYW4gZXJyb3Igb3IgdW5oYW5kbGVkIHByb21pc2Ugb2NjdXJzLCB3ZSBtYXJrIHRoZSBhY3RpdmUgdHJhbnNhY3Rpb24gYXMgZmFpbGVkXG4gKi9cbmZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soKSB7XG4gICAgdmFyIGFjdGl2ZVRyYW5zYWN0aW9uID0gZ2V0QWN0aXZlVHJhbnNhY3Rpb24oKTtcbiAgICBpZiAoYWN0aXZlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBUcmFuc2FjdGlvbjogXCIgKyBTcGFuU3RhdHVzLkludGVybmFsRXJyb3IgKyBcIiAtPiBHbG9iYWwgZXJyb3Igb2NjdXJlZFwiKTtcbiAgICAgICAgYWN0aXZlVHJhbnNhY3Rpb24uc2V0U3RhdHVzKFNwYW5TdGF0dXMuSW50ZXJuYWxFcnJvcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBkcm9wVW5kZWZpbmVkS2V5cywgdGltZXN0YW1wV2l0aE1zLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgU3BhblN0YXR1cyB9IGZyb20gJy4vc3BhbnN0YXR1cyc7XG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIGZpbmlzaGVkIHNwYW5zIGZvciBhIGdpdmVuIHRyYW5zYWN0aW9uXG4gKiBAaW50ZXJuYWxcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqIEBoaWRkZW5cbiAqL1xudmFyIFNwYW5SZWNvcmRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTcGFuUmVjb3JkZXIobWF4bGVuKSB7XG4gICAgICAgIGlmIChtYXhsZW4gPT09IHZvaWQgMCkgeyBtYXhsZW4gPSAxMDAwOyB9XG4gICAgICAgIHRoaXMuc3BhbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWF4bGVuID0gbWF4bGVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGp1c3Qgc28gdGhhdCB3ZSBkb24ndCBydW4gb3V0IG9mIG1lbW9yeSB3aGlsZSByZWNvcmRpbmcgYSBsb3RcbiAgICAgKiBvZiBzcGFucy4gQXQgc29tZSBwb2ludCB3ZSBqdXN0IHN0b3AgYW5kIGZsdXNoIG91dCB0aGUgc3RhcnQgb2YgdGhlXG4gICAgICogdHJhY2UgdHJlZSAoaS5lLnRoZSBmaXJzdCBuIHNwYW5zIHdpdGggdGhlIHNtYWxsZXN0XG4gICAgICogc3RhcnRfdGltZXN0YW1wKS5cbiAgICAgKi9cbiAgICBTcGFuUmVjb3JkZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgIGlmICh0aGlzLnNwYW5zLmxlbmd0aCA+IHRoaXMuX21heGxlbikge1xuICAgICAgICAgICAgc3Bhbi5zcGFuUmVjb3JkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNwYW5zLnB1c2goc3Bhbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTcGFuUmVjb3JkZXI7XG59KCkpO1xuZXhwb3J0IHsgU3BhblJlY29yZGVyIH07XG4vKipcbiAqIFNwYW4gY29udGFpbnMgYWxsIGRhdGEgYWJvdXQgYSBzcGFuXG4gKi9cbnZhciBTcGFuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIFlvdSBzaG91bGQgbmV2ZXIgY2FsbCB0aGUgY29uc3RydWN0b3IgbWFudWFsbHksIGFsd2F5cyB1c2UgYFNlbnRyeS5zdGFydFRyYW5zYWN0aW9uKClgXG4gICAgICogb3IgY2FsbCBgc3RhcnRDaGlsZCgpYCBvbiBhbiBleGlzdGluZyBzcGFuLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BhbihzcGFuQ29udGV4dCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJhY2VJZCA9IHV1aWQ0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zcGFuSWQgPSB1dWlkNCgpLnN1YnN0cmluZygxNik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaW1lc3RhbXAgaW4gc2Vjb25kcyB3aGVuIHRoZSBzcGFuIHdhcyBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFydFRpbWVzdGFtcCA9IHRpbWVzdGFtcFdpdGhNcygpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFncyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICBpZiAoIXNwYW5Db250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BhbkNvbnRleHQudHJhY2VJZCkge1xuICAgICAgICAgICAgdGhpcy50cmFjZUlkID0gc3BhbkNvbnRleHQudHJhY2VJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BhbkNvbnRleHQuc3BhbklkKSB7XG4gICAgICAgICAgICB0aGlzLnNwYW5JZCA9IHNwYW5Db250ZXh0LnNwYW5JZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BhbkNvbnRleHQucGFyZW50U3BhbklkKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNwYW5JZCA9IHNwYW5Db250ZXh0LnBhcmVudFNwYW5JZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIGluY2x1ZGUgYm9vbGVhbnMgYXMgd2VsbCBoZXJlXG4gICAgICAgIGlmICgnc2FtcGxlZCcgaW4gc3BhbkNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuc2FtcGxlZCA9IHNwYW5Db250ZXh0LnNhbXBsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0Lm9wKSB7XG4gICAgICAgICAgICB0aGlzLm9wID0gc3BhbkNvbnRleHQub3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gc3BhbkNvbnRleHQuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHNwYW5Db250ZXh0LmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LnRhZ3MpIHtcbiAgICAgICAgICAgIHRoaXMudGFncyA9IHNwYW5Db250ZXh0LnRhZ3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBzcGFuQ29udGV4dC5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LnN0YXJ0VGltZXN0YW1wKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZXN0YW1wID0gc3BhbkNvbnRleHQuc3RhcnRUaW1lc3RhbXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYW5Db250ZXh0LmVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSBzcGFuQ29udGV4dC5lbmRUaW1lc3RhbXA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFNwYW4ucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24gKHNwYW5Db250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0Q2hpbGQoc3BhbkNvbnRleHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTcGFuLnByb3RvdHlwZS5zdGFydENoaWxkID0gZnVuY3Rpb24gKHNwYW5Db250ZXh0KSB7XG4gICAgICAgIHZhciBjaGlsZFNwYW4gPSBuZXcgU3BhbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3BhbkNvbnRleHQpLCB7IHBhcmVudFNwYW5JZDogdGhpcy5zcGFuSWQsIHNhbXBsZWQ6IHRoaXMuc2FtcGxlZCwgdHJhY2VJZDogdGhpcy50cmFjZUlkIH0pKTtcbiAgICAgICAgY2hpbGRTcGFuLnNwYW5SZWNvcmRlciA9IHRoaXMuc3BhblJlY29yZGVyO1xuICAgICAgICBpZiAoY2hpbGRTcGFuLnNwYW5SZWNvcmRlcikge1xuICAgICAgICAgICAgY2hpbGRTcGFuLnNwYW5SZWNvcmRlci5hZGQoY2hpbGRTcGFuKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFNwYW4udHJhbnNhY3Rpb24gPSB0aGlzLnRyYW5zYWN0aW9uO1xuICAgICAgICByZXR1cm4gY2hpbGRTcGFuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTcGFuLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMudGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnRhZ3MpLCAoX2EgPSB7fSwgX2Fba2V5XSA9IHZhbHVlLCBfYSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBTcGFuLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmRhdGEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5kYXRhKSwgKF9hID0ge30sIF9hW2tleV0gPSB2YWx1ZSwgX2EpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNwYW4ucHJvdG90eXBlLnNldFN0YXR1cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU3Bhbi5wcm90b3R5cGUuc2V0SHR0cFN0YXR1cyA9IGZ1bmN0aW9uIChodHRwU3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc2V0VGFnKCdodHRwLnN0YXR1c19jb2RlJywgU3RyaW5nKGh0dHBTdGF0dXMpKTtcbiAgICAgICAgdmFyIHNwYW5TdGF0dXMgPSBTcGFuU3RhdHVzLmZyb21IdHRwQ29kZShodHRwU3RhdHVzKTtcbiAgICAgICAgaWYgKHNwYW5TdGF0dXMgIT09IFNwYW5TdGF0dXMuVW5rbm93bkVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXR1cyhzcGFuU3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU3Bhbi5wcm90b3R5cGUuaXNTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFNwYW5TdGF0dXMuT2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNwYW4ucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uIChlbmRUaW1lc3RhbXApIHtcbiAgICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSB0eXBlb2YgZW5kVGltZXN0YW1wID09PSAnbnVtYmVyJyA/IGVuZFRpbWVzdGFtcCA6IHRpbWVzdGFtcFdpdGhNcygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTcGFuLnByb3RvdHlwZS50b1RyYWNlcGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2FtcGxlZFN0cmluZyA9ICcnO1xuICAgICAgICBpZiAodGhpcy5zYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNhbXBsZWRTdHJpbmcgPSB0aGlzLnNhbXBsZWQgPyAnLTEnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50cmFjZUlkICsgXCItXCIgKyB0aGlzLnNwYW5JZCArIHNhbXBsZWRTdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNwYW4ucHJvdG90eXBlLnRvQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aGlzLmVuZFRpbWVzdGFtcCxcbiAgICAgICAgICAgIG9wOiB0aGlzLm9wLFxuICAgICAgICAgICAgcGFyZW50U3BhbklkOiB0aGlzLnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgIHNhbXBsZWQ6IHRoaXMuc2FtcGxlZCxcbiAgICAgICAgICAgIHNwYW5JZDogdGhpcy5zcGFuSWQsXG4gICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogdGhpcy5zdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICB0YWdzOiB0aGlzLnRhZ3MsXG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTcGFuLnByb3RvdHlwZS51cGRhdGVXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIChzcGFuQ29udGV4dCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICB0aGlzLmRhdGEgPSAoX2EgPSBzcGFuQ29udGV4dC5kYXRhLCAoX2EgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHNwYW5Db250ZXh0LmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmVuZFRpbWVzdGFtcCA9IHNwYW5Db250ZXh0LmVuZFRpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5vcCA9IHNwYW5Db250ZXh0Lm9wO1xuICAgICAgICB0aGlzLnBhcmVudFNwYW5JZCA9IHNwYW5Db250ZXh0LnBhcmVudFNwYW5JZDtcbiAgICAgICAgdGhpcy5zYW1wbGVkID0gc3BhbkNvbnRleHQuc2FtcGxlZDtcbiAgICAgICAgdGhpcy5zcGFuSWQgPSAoX2IgPSBzcGFuQ29udGV4dC5zcGFuSWQsIChfYiAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0aGlzLnNwYW5JZCkpO1xuICAgICAgICB0aGlzLnN0YXJ0VGltZXN0YW1wID0gKF9jID0gc3BhbkNvbnRleHQuc3RhcnRUaW1lc3RhbXAsIChfYyAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0aGlzLnN0YXJ0VGltZXN0YW1wKSk7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3BhbkNvbnRleHQuc3RhdHVzO1xuICAgICAgICB0aGlzLnRhZ3MgPSAoX2QgPSBzcGFuQ29udGV4dC50YWdzLCAoX2QgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDoge30pKTtcbiAgICAgICAgdGhpcy50cmFjZUlkID0gKF9lID0gc3BhbkNvbnRleHQudHJhY2VJZCwgKF9lICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IHRoaXMudHJhY2VJZCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU3Bhbi5wcm90b3R5cGUuZ2V0VHJhY2VDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgICAgICAgICAgZGF0YTogT2JqZWN0LmtleXModGhpcy5kYXRhKS5sZW5ndGggPiAwID8gdGhpcy5kYXRhIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBvcDogdGhpcy5vcCxcbiAgICAgICAgICAgIHBhcmVudF9zcGFuX2lkOiB0aGlzLnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgIHNwYW5faWQ6IHRoaXMuc3BhbklkLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIHRhZ3M6IE9iamVjdC5rZXlzKHRoaXMudGFncykubGVuZ3RoID4gMCA/IHRoaXMudGFncyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRyYWNlX2lkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTcGFuLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgICAgICBkYXRhOiBPYmplY3Qua2V5cyh0aGlzLmRhdGEpLmxlbmd0aCA+IDAgPyB0aGlzLmRhdGEgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG9wOiB0aGlzLm9wLFxuICAgICAgICAgICAgcGFyZW50X3NwYW5faWQ6IHRoaXMucGFyZW50U3BhbklkLFxuICAgICAgICAgICAgc3Bhbl9pZDogdGhpcy5zcGFuSWQsXG4gICAgICAgICAgICBzdGFydF90aW1lc3RhbXA6IHRoaXMuc3RhcnRUaW1lc3RhbXAsXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgdGFnczogT2JqZWN0LmtleXModGhpcy50YWdzKS5sZW5ndGggPiAwID8gdGhpcy50YWdzIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0aGlzLmVuZFRpbWVzdGFtcCxcbiAgICAgICAgICAgIHRyYWNlX2lkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNwYW47XG59KCkpO1xuZXhwb3J0IHsgU3BhbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViLCBIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBkcm9wVW5kZWZpbmVkS2V5cywgaXNJbnN0YW5jZU9mLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IFNwYW4gYXMgU3BhbkNsYXNzLCBTcGFuUmVjb3JkZXIgfSBmcm9tICcuL3NwYW4nO1xuLyoqIEpTRG9jICovXG52YXIgVHJhbnNhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zYWN0aW9uLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIFRoaXMgY29uc3RydWN0b3Igc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCBtYW51YWxseS4gVGhvc2UgaW5zdHJ1bWVudGluZyB0cmFjaW5nIHNob3VsZCB1c2VcbiAgICAgKiBgU2VudHJ5LnN0YXJ0VHJhbnNhY3Rpb24oKWAsIGFuZCBpbnRlcm5hbCBtZXRob2RzIHNob3VsZCB1c2UgYGh1Yi5zdGFydFRyYW5zYWN0aW9uKClgLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25Db250ZXh0LCBodWIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHJhbnNhY3Rpb25Db250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fbWV0YWRhdGEgPSB7fTtcbiAgICAgICAgX3RoaXMuX21lYXN1cmVtZW50cyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBodWIuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5faHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgICAgICBpZiAoaXNJbnN0YW5jZU9mKGh1YiwgSHViKSkge1xuICAgICAgICAgICAgX3RoaXMuX2h1YiA9IGh1YjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5uYW1lID0gdHJhbnNhY3Rpb25Db250ZXh0Lm5hbWUgfHwgJyc7XG4gICAgICAgIF90aGlzLl90cmltRW5kID0gdHJhbnNhY3Rpb25Db250ZXh0LnRyaW1FbmQ7XG4gICAgICAgIC8vIHRoaXMgaXMgYmVjYXVzZSB0cmFuc2FjdGlvbnMgYXJlIGFsc28gc3BhbnMsIGFuZCBzcGFucyBoYXZlIGEgdHJhbnNhY3Rpb24gcG9pbnRlclxuICAgICAgICBfdGhpcy50cmFuc2FjdGlvbiA9IF90aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEpTRG9jXG4gICAgICovXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnNldE5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgU3BhblJlY29yZGVyIHRvIHRoZSBzcGFuIGl0c2VsZlxuICAgICAqIEBwYXJhbSBtYXhsZW4gbWF4aW11bSBudW1iZXIgb2Ygc3BhbnMgdGhhdCBjYW4gYmUgcmVjb3JkZWRcbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuaW5pdFNwYW5SZWNvcmRlciA9IGZ1bmN0aW9uIChtYXhsZW4pIHtcbiAgICAgICAgaWYgKG1heGxlbiA9PT0gdm9pZCAwKSB7IG1heGxlbiA9IDEwMDA7IH1cbiAgICAgICAgaWYgKCF0aGlzLnNwYW5SZWNvcmRlcikge1xuICAgICAgICAgICAgdGhpcy5zcGFuUmVjb3JkZXIgPSBuZXcgU3BhblJlY29yZGVyKG1heGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGFuUmVjb3JkZXIuYWRkKHRoaXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IG9ic2VydmVkIG1lYXN1cmVtZW50cyBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnNldE1lYXN1cmVtZW50cyA9IGZ1bmN0aW9uIChtZWFzdXJlbWVudHMpIHtcbiAgICAgICAgdGhpcy5fbWVhc3VyZW1lbnRzID0gX19hc3NpZ24oe30sIG1lYXN1cmVtZW50cyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgbWV0YWRhdGEgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5zZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChuZXdNZXRhZGF0YSkge1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9tZXRhZGF0YSksIG5ld01ldGFkYXRhKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uIChlbmRUaW1lc3RhbXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBhbHJlYWR5IGZpbmlzaGVkLCBzbyB3ZSBzaG91bGQgbm90IGZsdXNoIGl0IGFnYWluLlxuICAgICAgICBpZiAodGhpcy5lbmRUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMubmFtZSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RyYW5zYWN0aW9uIGhhcyBubyBuYW1lLCBmYWxsaW5nIGJhY2sgdG8gYDx1bmxhYmVsZWQgdHJhbnNhY3Rpb24+YC4nKTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9ICc8dW5sYWJlbGVkIHRyYW5zYWN0aW9uPic7XG4gICAgICAgIH1cbiAgICAgICAgLy8ganVzdCBzZXRzIHRoZSBlbmQgdGltZXN0YW1wXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZmluaXNoLmNhbGwodGhpcywgZW5kVGltZXN0YW1wKTtcbiAgICAgICAgaWYgKHRoaXMuc2FtcGxlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCBpZiBgc2FtcGxlZCAhPT0gdHJ1ZWAgd2Ugd2FudCB0byBkaXNjYXJkIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tUcmFjaW5nXSBEaXNjYXJkaW5nIHRyYW5zYWN0aW9uIGJlY2F1c2UgaXRzIHRyYWNlIHdhcyBub3QgY2hvc2VuIHRvIGJlIHNhbXBsZWQuJyk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaW5pc2hlZFNwYW5zID0gdGhpcy5zcGFuUmVjb3JkZXIgPyB0aGlzLnNwYW5SZWNvcmRlci5zcGFucy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09IF90aGlzICYmIHMuZW5kVGltZXN0YW1wOyB9KSA6IFtdO1xuICAgICAgICBpZiAodGhpcy5fdHJpbUVuZCAmJiBmaW5pc2hlZFNwYW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZXN0YW1wID0gZmluaXNoZWRTcGFucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldi5lbmRUaW1lc3RhbXAgJiYgY3VycmVudC5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXYuZW5kVGltZXN0YW1wID4gY3VycmVudC5lbmRUaW1lc3RhbXAgPyBwcmV2IDogY3VycmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9KS5lbmRUaW1lc3RhbXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0ge1xuICAgICAgICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgICAgICAgICB0cmFjZTogdGhpcy5nZXRUcmFjZUNvbnRleHQoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzcGFuczogZmluaXNoZWRTcGFucyxcbiAgICAgICAgICAgIHN0YXJ0X3RpbWVzdGFtcDogdGhpcy5zdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgIHRhZ3M6IHRoaXMudGFncyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGhpcy5lbmRUaW1lc3RhbXAsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdGhpcy5uYW1lLFxuICAgICAgICAgICAgdHlwZTogJ3RyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgIGRlYnVnX21ldGE6IHRoaXMuX21ldGFkYXRhLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgaGFzTWVhc3VyZW1lbnRzID0gT2JqZWN0LmtleXModGhpcy5fbWVhc3VyZW1lbnRzKS5sZW5ndGggPiAwO1xuICAgICAgICBpZiAoaGFzTWVhc3VyZW1lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdbTWVhc3VyZW1lbnRzXSBBZGRpbmcgbWVhc3VyZW1lbnRzIHRvIHRyYW5zYWN0aW9uJywgSlNPTi5zdHJpbmdpZnkodGhpcy5fbWVhc3VyZW1lbnRzLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLm1lYXN1cmVtZW50cyA9IHRoaXMuX21lYXN1cmVtZW50cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faHViLmNhcHR1cmVFdmVudCh0cmFuc2FjdGlvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS50b0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzcGFuQ29udGV4dCA9IF9zdXBlci5wcm90b3R5cGUudG9Db250ZXh0LmNhbGwodGhpcyk7XG4gICAgICAgIHJldHVybiBkcm9wVW5kZWZpbmVkS2V5cyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3BhbkNvbnRleHQpLCB7IG5hbWU6IHRoaXMubmFtZSwgdHJpbUVuZDogdGhpcy5fdHJpbUVuZCB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS51cGRhdGVXaXRoQ29udGV4dCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbkNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZVdpdGhDb250ZXh0LmNhbGwodGhpcywgdHJhbnNhY3Rpb25Db250ZXh0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gKF9hID0gdHJhbnNhY3Rpb25Db250ZXh0Lm5hbWUsIChfYSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykpO1xuICAgICAgICB0aGlzLl90cmltRW5kID0gdHJhbnNhY3Rpb25Db250ZXh0LnRyaW1FbmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uO1xufShTcGFuQ2xhc3MpKTtcbmV4cG9ydCB7IFRyYW5zYWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBsb2dnZXIsIHRpbWVzdGFtcFdpdGhNcyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgU3BhblJlY29yZGVyIH0gZnJvbSAnLi9zcGFuJztcbmltcG9ydCB7IFNwYW5TdGF0dXMgfSBmcm9tICcuL3NwYW5zdGF0dXMnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmV4cG9ydCB2YXIgREVGQVVMVF9JRExFX1RJTUVPVVQgPSAxMDAwO1xuLyoqXG4gKiBAaW5oZXJpdERvY1xuICovXG52YXIgSWRsZVRyYW5zYWN0aW9uU3BhblJlY29yZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJZGxlVHJhbnNhY3Rpb25TcGFuUmVjb3JkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSWRsZVRyYW5zYWN0aW9uU3BhblJlY29yZGVyKF9wdXNoQWN0aXZpdHksIF9wb3BBY3Rpdml0eSwgdHJhbnNhY3Rpb25TcGFuSWQsIG1heGxlbikge1xuICAgICAgICBpZiAodHJhbnNhY3Rpb25TcGFuSWQgPT09IHZvaWQgMCkgeyB0cmFuc2FjdGlvblNwYW5JZCA9ICcnOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1heGxlbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3B1c2hBY3Rpdml0eSA9IF9wdXNoQWN0aXZpdHk7XG4gICAgICAgIF90aGlzLl9wb3BBY3Rpdml0eSA9IF9wb3BBY3Rpdml0eTtcbiAgICAgICAgX3RoaXMudHJhbnNhY3Rpb25TcGFuSWQgPSB0cmFuc2FjdGlvblNwYW5JZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIElkbGVUcmFuc2FjdGlvblNwYW5SZWNvcmRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHNwYW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG1ha2Ugc3VyZSB3ZSBkbyBub3QgcHVzaCBhbmQgcG9wIGFjdGl2aXRpZXMgZm9yXG4gICAgICAgIC8vIHRoZSB0cmFuc2FjdGlvbiB0aGF0IHRoaXMgc3BhbiByZWNvcmRlciBiZWxvbmdzIHRvLlxuICAgICAgICBpZiAoc3Bhbi5zcGFuSWQgIT09IHRoaXMudHJhbnNhY3Rpb25TcGFuSWQpIHtcbiAgICAgICAgICAgIC8vIFdlIHBhdGNoIHNwYW4uZmluaXNoKCkgdG8gcG9wIGFuIGFjdGl2aXR5IGFmdGVyIHNldHRpbmcgYW4gZW5kVGltZXN0YW1wLlxuICAgICAgICAgICAgc3Bhbi5maW5pc2ggPSBmdW5jdGlvbiAoZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5lbmRUaW1lc3RhbXAgPSB0eXBlb2YgZW5kVGltZXN0YW1wID09PSAnbnVtYmVyJyA/IGVuZFRpbWVzdGFtcCA6IHRpbWVzdGFtcFdpdGhNcygpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9wb3BBY3Rpdml0eShzcGFuLnNwYW5JZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIG9ubHkgcHVzaCBuZXcgYWN0aXZpdGllcyBpZiB0aGUgc3BhbiBkb2VzIG5vdCBoYXZlIGFuIGVuZCB0aW1lc3RhbXAuXG4gICAgICAgICAgICBpZiAoc3Bhbi5lbmRUaW1lc3RhbXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3B1c2hBY3Rpdml0eShzcGFuLnNwYW5JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBzcGFuKTtcbiAgICB9O1xuICAgIHJldHVybiBJZGxlVHJhbnNhY3Rpb25TcGFuUmVjb3JkZXI7XG59KFNwYW5SZWNvcmRlcikpO1xuZXhwb3J0IHsgSWRsZVRyYW5zYWN0aW9uU3BhblJlY29yZGVyIH07XG4vKipcbiAqIEFuIElkbGVUcmFuc2FjdGlvbiBpcyBhIHRyYW5zYWN0aW9uIHRoYXQgYXV0b21hdGljYWxseSBmaW5pc2hlcy4gSXQgZG9lcyB0aGlzIGJ5IHRyYWNraW5nIGNoaWxkIHNwYW5zIGFzIGFjdGl2aXRpZXMuXG4gKiBZb3UgY2FuIGhhdmUgbXVsdGlwbGUgSWRsZVRyYW5zYWN0aW9ucyBhY3RpdmUsIGJ1dCBpZiB0aGUgYG9uU2NvcGVgIG9wdGlvbiBpcyBzcGVjaWZpZWQsIHRoZSBpZGxlIHRyYW5zYWN0aW9uIHdpbGxcbiAqIHB1dCBpdHNlbGYgb24gdGhlIHNjb3BlIG9uIGNyZWF0aW9uLlxuICovXG52YXIgSWRsZVRyYW5zYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJZGxlVHJhbnNhY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSWRsZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uQ29udGV4dCwgX2lkbGVIdWIsIFxuICAgIC8vIFRoZSB0aW1lIHRvIHdhaXQgaW4gbXMgdW50aWwgdGhlIGlkbGUgdHJhbnNhY3Rpb24gd2lsbCBiZSBmaW5pc2hlZC4gRGVmYXVsdDogMTAwMFxuICAgIF9pZGxlVGltZW91dCwgXG4gICAgLy8gSWYgYW4gaWRsZSB0cmFuc2FjdGlvbiBzaG91bGQgYmUgcHV0IGl0c2VsZiBvbiBhbmQgb2ZmIHRoZSBzY29wZSBhdXRvbWF0aWNhbGx5LlxuICAgIF9vblNjb3BlKSB7XG4gICAgICAgIGlmIChfaWRsZVRpbWVvdXQgPT09IHZvaWQgMCkgeyBfaWRsZVRpbWVvdXQgPSBERUZBVUxUX0lETEVfVElNRU9VVDsgfVxuICAgICAgICBpZiAoX29uU2NvcGUgPT09IHZvaWQgMCkgeyBfb25TY29wZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHRyYW5zYWN0aW9uQ29udGV4dCwgX2lkbGVIdWIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9pZGxlSHViID0gX2lkbGVIdWI7XG4gICAgICAgIF90aGlzLl9pZGxlVGltZW91dCA9IF9pZGxlVGltZW91dDtcbiAgICAgICAgX3RoaXMuX29uU2NvcGUgPSBfb25TY29wZTtcbiAgICAgICAgLy8gQWN0aXZpdGllcyBzdG9yZSBhIGxpc3Qgb2YgYWN0aXZlIHNwYW5zXG4gICAgICAgIF90aGlzLmFjdGl2aXRpZXMgPSB7fTtcbiAgICAgICAgLy8gU3RvcmVzIHJlZmVyZW5jZSB0byB0aGUgdGltZW91dCB0aGF0IGNhbGxzIF9iZWF0KCkuXG4gICAgICAgIF90aGlzLl9oZWFydGJlYXRUaW1lciA9IDA7XG4gICAgICAgIC8vIEFtb3VudCBvZiB0aW1lcyBoZWFydGJlYXQgaGFzIGNvdW50ZWQuIFdpbGwgY2F1c2UgdHJhbnNhY3Rpb24gdG8gZmluaXNoIGFmdGVyIDMgYmVhdHMuXG4gICAgICAgIF90aGlzLl9oZWFydGJlYXRDb3VudGVyID0gMDtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCB1c2UgaGVhcnRiZWF0IGlmIHdlIGZpbmlzaGVkIGEgdHJhbnNhY3Rpb25cbiAgICAgICAgX3RoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9iZWZvcmVGaW5pc2hDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgaWYgKF9pZGxlSHViICYmIF9vblNjb3BlKSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBzaG91bGQgb25seSBiZSBvbmUgYWN0aXZlIHRyYW5zYWN0aW9uIG9uIHRoZSBzY29wZVxuICAgICAgICAgICAgY2xlYXJBY3RpdmVUcmFuc2FjdGlvbihfaWRsZUh1Yik7XG4gICAgICAgICAgICAvLyBXZSBzZXQgdGhlIHRyYW5zYWN0aW9uIGhlcmUgb24gdGhlIHNjb3BlIHNvIGVycm9yIGV2ZW50cyBwaWNrIHVwIHRoZSB0cmFjZVxuICAgICAgICAgICAgLy8gY29udGV4dCBhbmQgYXR0YWNoIGl0IHRvIHRoZSBlcnJvci5cbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJTZXR0aW5nIGlkbGUgdHJhbnNhY3Rpb24gb24gc2NvcGUuIFNwYW4gSUQ6IFwiICsgX3RoaXMuc3BhbklkKTtcbiAgICAgICAgICAgIF9pZGxlSHViLmNvbmZpZ3VyZVNjb3BlKGZ1bmN0aW9uIChzY29wZSkgeyByZXR1cm4gc2NvcGUuc2V0U3BhbihfdGhpcyk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9pbml0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgX3RoaXMuX2lkbGVUaW1lb3V0KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKioge0Bpbmhlcml0RG9jfSAqL1xuICAgIElkbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKGVuZFRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGVuZFRpbWVzdGFtcCA9PT0gdm9pZCAwKSB7IGVuZFRpbWVzdGFtcCA9IHRpbWVzdGFtcFdpdGhNcygpOyB9XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hY3Rpdml0aWVzID0ge307XG4gICAgICAgIGlmICh0aGlzLnNwYW5SZWNvcmRlcikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygnW1RyYWNpbmddIGZpbmlzaGluZyBJZGxlVHJhbnNhY3Rpb24nLCBuZXcgRGF0ZShlbmRUaW1lc3RhbXAgKiAxMDAwKS50b0lTT1N0cmluZygpLCB0aGlzLm9wKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9iZWZvcmVGaW5pc2hDYWxsYmFja3MpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLCBlbmRUaW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3BhblJlY29yZGVyLnNwYW5zID0gdGhpcy5zcGFuUmVjb3JkZXIuc3BhbnMuZmlsdGVyKGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgdHJhbnNhY3Rpb24gaXRzZWxmLCB3ZSBqdXN0IHJldHVybiBpdFxuICAgICAgICAgICAgICAgIGlmIChzcGFuLnNwYW5JZCA9PT0gX3RoaXMuc3BhbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXZSBjYW5jZWwgYWxsIHBlbmRpbmcgc3BhbnMgd2l0aCBzdGF0dXMgXCJjYW5jZWxsZWRcIiB0byBpbmRpY2F0ZSB0aGUgaWRsZSB0cmFuc2FjdGlvbiB3YXMgZmluaXNoZWQgZWFybHlcbiAgICAgICAgICAgICAgICBpZiAoIXNwYW4uZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kVGltZXN0YW1wID0gZW5kVGltZXN0YW1wO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyhTcGFuU3RhdHVzLkNhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tUcmFjaW5nXSBjYW5jZWxsaW5nIHNwYW4gc2luY2UgdHJhbnNhY3Rpb24gZW5kZWQgZWFybHknLCBKU09OLnN0cmluZ2lmeShzcGFuLCB1bmRlZmluZWQsIDIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGtlZXBTcGFuID0gc3Bhbi5zdGFydFRpbWVzdGFtcCA8IGVuZFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tUcmFjaW5nXSBkaXNjYXJkaW5nIFNwYW4gc2luY2UgaXQgaGFwcGVuZWQgYWZ0ZXIgVHJhbnNhY3Rpb24gd2FzIGZpbmlzaGVkJywgSlNPTi5zdHJpbmdpZnkoc3BhbiwgdW5kZWZpbmVkLCAyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBrZWVwU3BhbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygnW1RyYWNpbmddIGZsdXNoaW5nIElkbGVUcmFuc2FjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygnW1RyYWNpbmddIE5vIGFjdGl2ZSBJZGxlVHJhbnNhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLl9vblNjb3BlIGlzIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIHdhcyBwcmV2aW91c2x5IG9uIHRoZSBzY29wZS5cbiAgICAgICAgaWYgKHRoaXMuX29uU2NvcGUpIHtcbiAgICAgICAgICAgIGNsZWFyQWN0aXZlVHJhbnNhY3Rpb24odGhpcy5faWRsZUh1Yik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZmluaXNoLmNhbGwodGhpcywgZW5kVGltZXN0YW1wKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBnZXRzIGV4Y2VjdXRlZCBiZWZvcmUgdGhlIHRyYW5zYWN0aW9uIGZpbmlzaGVzLlxuICAgICAqIFVzZWZ1bCBmb3IgY2xlYW51cCBvciBpZiB5b3Ugd2FudCB0byBhZGQgYW55IGFkZGl0aW9uYWwgc3BhbnMgYmFzZWQgb24gY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogVGhpcyBpcyBleHBvc2VkIGJlY2F1c2UgdXNlcnMgaGF2ZSBubyBvdGhlciB3YXkgb2YgcnVubmluZyBzb21ldGhpbmcgYmVmb3JlIGFuIGlkbGUgdHJhbnNhY3Rpb25cbiAgICAgKiBmaW5pc2hlcy5cbiAgICAgKi9cbiAgICBJZGxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLnJlZ2lzdGVyQmVmb3JlRmluaXNoQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fYmVmb3JlRmluaXNoQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBJZGxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLmluaXRTcGFuUmVjb3JkZXIgPSBmdW5jdGlvbiAobWF4bGVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5zcGFuUmVjb3JkZXIpIHtcbiAgICAgICAgICAgIHZhciBwdXNoQWN0aXZpdHkgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuX3B1c2hBY3Rpdml0eShpZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHBvcEFjdGl2aXR5ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9wb3BBY3Rpdml0eShpZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zcGFuUmVjb3JkZXIgPSBuZXcgSWRsZVRyYW5zYWN0aW9uU3BhblJlY29yZGVyKHB1c2hBY3Rpdml0eSwgcG9wQWN0aXZpdHksIHRoaXMuc3BhbklkLCBtYXhsZW4pO1xuICAgICAgICAgICAgLy8gU3RhcnQgaGVhcnRiZWF0IHNvIHRoYXQgdHJhbnNhY3Rpb25zIGRvIG5vdCBydW4gZm9yZXZlci5cbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ1N0YXJ0aW5nIGhlYXJ0YmVhdCcpO1xuICAgICAgICAgICAgdGhpcy5fcGluZ0hlYXJ0YmVhdCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BhblJlY29yZGVyLmFkZCh0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRyYWNraW5nIGEgc3BlY2lmaWMgYWN0aXZpdHkuXG4gICAgICogQHBhcmFtIHNwYW5JZCBUaGUgc3BhbiBpZCB0aGF0IHJlcHJlc2VudHMgdGhlIGFjdGl2aXR5XG4gICAgICovXG4gICAgSWRsZVRyYW5zYWN0aW9uLnByb3RvdHlwZS5fcHVzaEFjdGl2aXR5ID0gZnVuY3Rpb24gKHNwYW5JZCkge1xuICAgICAgICBpZiAodGhpcy5faW5pdFRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9pbml0VGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0VGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIubG9nKFwiW1RyYWNpbmddIHB1c2hBY3Rpdml0eTogXCIgKyBzcGFuSWQpO1xuICAgICAgICB0aGlzLmFjdGl2aXRpZXNbc3BhbklkXSA9IHRydWU7XG4gICAgICAgIGxvZ2dlci5sb2coJ1tUcmFjaW5nXSBuZXcgYWN0aXZpdGllcyBjb3VudCcsIE9iamVjdC5rZXlzKHRoaXMuYWN0aXZpdGllcykubGVuZ3RoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBhY3Rpdml0eSBmcm9tIHVzYWdlXG4gICAgICogQHBhcmFtIHNwYW5JZCBUaGUgc3BhbiBpZCB0aGF0IHJlcHJlc2VudHMgdGhlIGFjdGl2aXR5XG4gICAgICovXG4gICAgSWRsZVRyYW5zYWN0aW9uLnByb3RvdHlwZS5fcG9wQWN0aXZpdHkgPSBmdW5jdGlvbiAoc3BhbklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2aXRpZXNbc3BhbklkXSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBwb3BBY3Rpdml0eSBcIiArIHNwYW5JZCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hY3Rpdml0aWVzW3NwYW5JZF07XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdbVHJhY2luZ10gbmV3IGFjdGl2aXRpZXMgY291bnQnLCBPYmplY3Qua2V5cyh0aGlzLmFjdGl2aXRpZXMpLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuYWN0aXZpdGllcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IHRoaXMuX2lkbGVUaW1lb3V0O1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhZGQgdGhlIHRpbWVvdXQgaGVyZSB0byBoYXZlIHRoZSByZWFsIGVuZHRpbWVzdGFtcCBvZiB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRpbWVzdGFtcFdpdGhNcyBpcyBpbiBzZWNvbmRzLCB0aW1lb3V0IGlzIGluIG1zXG4gICAgICAgICAgICB2YXIgZW5kXzEgPSB0aW1lc3RhbXBXaXRoTXMoKSArIHRpbWVvdXQgLyAxMDAwO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmluaXNoKGVuZF8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZW4gZW50cmllcyBvZiB0aGlzLmFjdGl2aXRpZXMgYXJlIG5vdCBjaGFuZ2luZyBmb3IgMyBiZWF0cy5cbiAgICAgKiBJZiB0aGlzIG9jY3VycyB3ZSBmaW5pc2ggdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIElkbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUuX2JlYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9oZWFydGJlYXRUaW1lcik7XG4gICAgICAgIC8vIFdlIHNob3VsZCBub3QgYmUgcnVubmluZyBoZWFydGJlYXQgaWYgdGhlIGlkbGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQuXG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5hY3Rpdml0aWVzKTtcbiAgICAgICAgdmFyIGhlYXJ0YmVhdFN0cmluZyA9IGtleXMubGVuZ3RoID8ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnJlbnQpIHsgcmV0dXJuIHByZXYgKyBjdXJyZW50OyB9KSA6ICcnO1xuICAgICAgICBpZiAoaGVhcnRiZWF0U3RyaW5nID09PSB0aGlzLl9wcmV2SGVhcnRiZWF0U3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRDb3VudGVyICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRDb3VudGVyID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2SGVhcnRiZWF0U3RyaW5nID0gaGVhcnRiZWF0U3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0Q291bnRlciA+PSAzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiW1RyYWNpbmddIFRyYW5zYWN0aW9uIGZpbmlzaGVkIGJlY2F1c2Ugb2Ygbm8gY2hhbmdlIGZvciAzIGhlYXJ0IGJlYXRzXCIpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoU3BhblN0YXR1cy5EZWFkbGluZUV4Y2VlZGVkKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGFnKCdoZWFydGJlYXQnLCAnZmFpbGVkJyk7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGluZ0hlYXJ0YmVhdCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQaW5ncyB0aGUgaGVhcnRiZWF0XG4gICAgICovXG4gICAgSWRsZVRyYW5zYWN0aW9uLnByb3RvdHlwZS5fcGluZ0hlYXJ0YmVhdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbG9nZ2VyLmxvZyhcInBpbmdpbmcgSGVhcnRiZWF0IC0+IGN1cnJlbnQgY291bnRlcjogXCIgKyB0aGlzLl9oZWFydGJlYXRDb3VudGVyKTtcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9iZWF0KCk7XG4gICAgICAgIH0sIDUwMDApO1xuICAgIH07XG4gICAgcmV0dXJuIElkbGVUcmFuc2FjdGlvbjtcbn0oVHJhbnNhY3Rpb24pKTtcbmV4cG9ydCB7IElkbGVUcmFuc2FjdGlvbiB9O1xuLyoqXG4gKiBSZXNldCBhY3RpdmUgdHJhbnNhY3Rpb24gb24gc2NvcGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJBY3RpdmVUcmFuc2FjdGlvbihodWIpIHtcbiAgICBpZiAoaHViKSB7XG4gICAgICAgIHZhciBzY29wZSA9IGh1Yi5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IHNjb3BlLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZXRTcGFuKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGxldHJhbnNhY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldE1haW5DYXJyaWVyIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25TYW1wbGluZ01ldGhvZCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyByZWdpc3RlckVycm9ySW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgSWRsZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi9pZGxldHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IGhhc1RyYWNpbmdFbmFibGVkIH0gZnJvbSAnLi91dGlscyc7XG4vKiogUmV0dXJucyBhbGwgdHJhY2UgaGVhZGVycyB0aGF0IGFyZSBjdXJyZW50bHkgb24gdGhlIHRvcCBzY29wZS4gKi9cbmZ1bmN0aW9uIHRyYWNlSGVhZGVycygpIHtcbiAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgaWYgKHNjb3BlKSB7XG4gICAgICAgIHZhciBzcGFuID0gc2NvcGUuZ2V0U3BhbigpO1xuICAgICAgICBpZiAoc3Bhbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnc2VudHJ5LXRyYWNlJzogc3Bhbi50b1RyYWNlcGFyZW50KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbi8qKlxuICogTWFrZXMgYSBzYW1wbGluZyBkZWNpc2lvbiBmb3IgdGhlIGdpdmVuIHRyYW5zYWN0aW9uIGFuZCBzdG9yZXMgaXQgb24gdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIENhbGxlZCBldmVyeSB0aW1lIGEgdHJhbnNhY3Rpb24gaXMgY3JlYXRlZC4gT25seSB0cmFuc2FjdGlvbnMgd2hpY2ggZW1lcmdlIHdpdGggYSBgc2FtcGxlZGAgdmFsdWUgb2YgYHRydWVgIHdpbGwgYmVcbiAqIHNlbnQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBodWI6IFRoZSBodWIgb2ZmIG9mIHdoaWNoIHRvIHJlYWQgY29uZmlnIG9wdGlvbnNcbiAqIEBwYXJhbSB0cmFuc2FjdGlvbjogVGhlIHRyYW5zYWN0aW9uIG5lZWRpbmcgYSBzYW1wbGluZyBkZWNpc2lvblxuICogQHBhcmFtIHNhbXBsaW5nQ29udGV4dDogRGVmYXVsdCBhbmQgdXNlci1wcm92aWRlZCBkYXRhIHdoaWNoIG1heSBiZSB1c2VkIHRvIGhlbHAgbWFrZSB0aGUgZGVjaXNpb25cbiAqXG4gKiBAcmV0dXJucyBUaGUgZ2l2ZW4gdHJhbnNhY3Rpb24gd2l0aCBpdHMgYHNhbXBsZWRgIHZhbHVlIHNldFxuICovXG5mdW5jdGlvbiBzYW1wbGUoaHViLCB0cmFuc2FjdGlvbiwgc2FtcGxpbmdDb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBjbGllbnQgPSBodWIuZ2V0Q2xpZW50KCk7XG4gICAgdmFyIG9wdGlvbnMgPSAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkpIHx8IHt9O1xuICAgIC8vIG5vdGhpbmcgdG8gZG8gaWYgdGhlcmUncyBubyBjbGllbnQgb3IgaWYgdHJhY2luZyBpcyBkaXNhYmxlZFxuICAgIGlmICghY2xpZW50IHx8ICFoYXNUcmFjaW5nRW5hYmxlZChvcHRpb25zKSkge1xuICAgICAgICB0cmFuc2FjdGlvbi5zYW1wbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHVzZXIgaGFzIGZvcmNlZCBhIHNhbXBsaW5nIGRlY2lzaW9uIGJ5IHBhc3NpbmcgYSBgc2FtcGxlZGAgdmFsdWUgaW4gdGhlaXIgdHJhbnNhY3Rpb24gY29udGV4dCwgZ28gd2l0aCB0aGF0XG4gICAgaWYgKHRyYW5zYWN0aW9uLnNhbXBsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cmFuc2FjdGlvbi5zZXRNZXRhZGF0YSh7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblNhbXBsaW5nOiB7IG1ldGhvZDogVHJhbnNhY3Rpb25TYW1wbGluZ01ldGhvZC5FeHBsaWNpdCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgIH1cbiAgICAvLyB3ZSB3b3VsZCBoYXZlIGJhaWxlZCBhbHJlYWR5IGlmIG5laXRoZXIgYHRyYWNlc1NhbXBsZXJgIG5vciBgdHJhY2VzU2FtcGxlUmF0ZWAgd2VyZSBkZWZpbmVkLCBzbyBvbmUgb2YgdGhlc2Ugc2hvdWxkXG4gICAgLy8gd29yazsgcHJlZmVyIHRoZSBob29rIGlmIHNvXG4gICAgdmFyIHNhbXBsZVJhdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYWNlc1NhbXBsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2FtcGxlUmF0ZSA9IG9wdGlvbnMudHJhY2VzU2FtcGxlcihzYW1wbGluZ0NvbnRleHQpO1xuICAgICAgICB0cmFuc2FjdGlvbi5zZXRNZXRhZGF0YSh7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblNhbXBsaW5nOiB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kLlNhbXBsZXIsXG4gICAgICAgICAgICAgICAgLy8gY2FzdCB0byBudW1iZXIgaW4gY2FzZSBpdCdzIGEgYm9vbGVhblxuICAgICAgICAgICAgICAgIHJhdGU6IE51bWJlcihzYW1wbGVSYXRlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzYW1wbGluZ0NvbnRleHQucGFyZW50U2FtcGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNhbXBsZVJhdGUgPSBzYW1wbGluZ0NvbnRleHQucGFyZW50U2FtcGxlZDtcbiAgICAgICAgdHJhbnNhY3Rpb24uc2V0TWV0YWRhdGEoe1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TYW1wbGluZzogeyBtZXRob2Q6IFRyYW5zYWN0aW9uU2FtcGxpbmdNZXRob2QuSW5oZXJpdGFuY2UgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzYW1wbGVSYXRlID0gb3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlO1xuICAgICAgICB0cmFuc2FjdGlvbi5zZXRNZXRhZGF0YSh7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblNhbXBsaW5nOiB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBUcmFuc2FjdGlvblNhbXBsaW5nTWV0aG9kLlJhdGUsXG4gICAgICAgICAgICAgICAgLy8gY2FzdCB0byBudW1iZXIgaW4gY2FzZSBpdCdzIGEgYm9vbGVhblxuICAgICAgICAgICAgICAgIHJhdGU6IE51bWJlcihzYW1wbGVSYXRlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBTaW5jZSB0aGlzIGlzIGNvbWluZyBmcm9tIHRoZSB1c2VyIChvciBmcm9tIGEgZnVuY3Rpb24gcHJvdmlkZWQgYnkgdGhlIHVzZXIpLCB3aG8ga25vd3Mgd2hhdCB3ZSBtaWdodCBnZXQuIChUaGVcbiAgICAvLyBvbmx5IHZhbGlkIHZhbHVlcyBhcmUgYm9vbGVhbnMgb3IgbnVtYmVycyBiZXR3ZWVuIDAgYW5kIDEuKVxuICAgIGlmICghaXNWYWxpZFNhbXBsZVJhdGUoc2FtcGxlUmF0ZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJbVHJhY2luZ10gRGlzY2FyZGluZyB0cmFuc2FjdGlvbiBiZWNhdXNlIG9mIGludmFsaWQgc2FtcGxlIHJhdGUuXCIpO1xuICAgICAgICB0cmFuc2FjdGlvbi5zYW1wbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICB9XG4gICAgLy8gaWYgdGhlIGZ1bmN0aW9uIHJldHVybmVkIDAgKG9yIGZhbHNlKSwgb3IgaWYgYHRyYWNlc1NhbXBsZVJhdGVgIGlzIDAsIGl0J3MgYSBzaWduIHRoZSB0cmFuc2FjdGlvbiBzaG91bGQgYmUgZHJvcHBlZFxuICAgIGlmICghc2FtcGxlUmF0ZSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiW1RyYWNpbmddIERpc2NhcmRpbmcgdHJhbnNhY3Rpb24gYmVjYXVzZSBcIiArICh0eXBlb2Ygb3B0aW9ucy50cmFjZXNTYW1wbGVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/ICd0cmFjZXNTYW1wbGVyIHJldHVybmVkIDAgb3IgZmFsc2UnXG4gICAgICAgICAgICA6ICdhIG5lZ2F0aXZlIHNhbXBsaW5nIGRlY2lzaW9uIHdhcyBpbmhlcml0ZWQgb3IgdHJhY2VzU2FtcGxlUmF0ZSBpcyBzZXQgdG8gMCcpKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uc2FtcGxlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gICAgfVxuICAgIC8vIE5vdyB3ZSByb2xsIHRoZSBkaWNlLiBNYXRoLnJhbmRvbSBpcyBpbmNsdXNpdmUgb2YgMCwgYnV0IG5vdCBvZiAxLCBzbyBzdHJpY3QgPCBpcyBzYWZlIGhlcmUuIEluIGNhc2Ugc2FtcGxlUmF0ZSBpc1xuICAgIC8vIGEgYm9vbGVhbiwgdGhlIDwgY29tcGFyaXNvbiB3aWxsIGNhdXNlIGl0IHRvIGJlIGF1dG9tYXRpY2FsbHkgY2FzdCB0byAxIGlmIGl0J3MgdHJ1ZSBhbmQgMCBpZiBpdCdzIGZhbHNlLlxuICAgIHRyYW5zYWN0aW9uLnNhbXBsZWQgPSBNYXRoLnJhbmRvbSgpIDwgc2FtcGxlUmF0ZTtcbiAgICAvLyBpZiB3ZSdyZSBub3QgZ29pbmcgdG8ga2VlcCBpdCwgd2UncmUgZG9uZVxuICAgIGlmICghdHJhbnNhY3Rpb24uc2FtcGxlZCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiW1RyYWNpbmddIERpc2NhcmRpbmcgdHJhbnNhY3Rpb24gYmVjYXVzZSBpdCdzIG5vdCBpbmNsdWRlZCBpbiB0aGUgcmFuZG9tIHNhbXBsZSAoc2FtcGxpbmcgcmF0ZSA9IFwiICsgTnVtYmVyKHNhbXBsZVJhdGUpICsgXCIpXCIpO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gICAgfVxuICAgIC8vIGF0IHRoaXMgcG9pbnQgd2Uga25vdyB3ZSdyZSBrZWVwaW5nIHRoZSB0cmFuc2FjdGlvbiwgd2hldGhlciBiZWNhdXNlIG9mIGFuIGluaGVyaXRlZCBkZWNpc2lvbiBvciBiZWNhdXNlIGl0IGdvdFxuICAgIC8vIGx1Y2t5IHdpdGggdGhlIGRpY2Ugcm9sbFxuICAgIHRyYW5zYWN0aW9uLmluaXRTcGFuUmVjb3JkZXIoKF9hID0gb3B0aW9ucy5fZXhwZXJpbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXhTcGFucyk7XG4gICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBzdGFydGluZyBcIiArIHRyYW5zYWN0aW9uLm9wICsgXCIgdHJhbnNhY3Rpb24gLSBcIiArIHRyYW5zYWN0aW9uLm5hbWUpO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbn1cbi8qKlxuICogQ2hlY2tzIHRoZSBnaXZlbiBzYW1wbGUgcmF0ZSB0byBtYWtlIHN1cmUgaXQgaXMgdmFsaWQgdHlwZSBhbmQgdmFsdWUgKGEgYm9vbGVhbiwgb3IgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxKS5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFNhbXBsZVJhdGUocmF0ZSkge1xuICAgIC8vIHdlIG5lZWQgdG8gY2hlY2sgTmFOIGV4cGxpY2l0bHkgYmVjYXVzZSBpdCdzIG9mIHR5cGUgJ251bWJlcicgYW5kIHRoZXJlZm9yZSB3b3VsZG4ndCBnZXQgY2F1Z2h0IGJ5IHRoaXMgdHlwZWNoZWNrXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBpZiAoaXNOYU4ocmF0ZSkgfHwgISh0eXBlb2YgcmF0ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHJhdGUgPT09ICdib29sZWFuJykpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJbVHJhY2luZ10gR2l2ZW4gc2FtcGxlIHJhdGUgaXMgaW52YWxpZC4gU2FtcGxlIHJhdGUgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiBHb3QgXCIgKyBKU09OLnN0cmluZ2lmeShyYXRlKSArIFwiIG9mIHR5cGUgXCIgKyBKU09OLnN0cmluZ2lmeSh0eXBlb2YgcmF0ZSkgKyBcIi5cIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gaW4gY2FzZSBzYW1wbGVSYXRlIGlzIGEgYm9vbGVhbiwgaXQgd2lsbCBnZXQgYXV0b21hdGljYWxseSBjYXN0IHRvIDEgaWYgaXQncyB0cnVlIGFuZCAwIGlmIGl0J3MgZmFsc2VcbiAgICBpZiAocmF0ZSA8IDAgfHwgcmF0ZSA+IDEpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJbVHJhY2luZ10gR2l2ZW4gc2FtcGxlIHJhdGUgaXMgaW52YWxpZC4gU2FtcGxlIHJhdGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEuIEdvdCBcIiArIHJhdGUgKyBcIi5cIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdHJhbnNhY3Rpb24gYW5kIGFkZHMgYSBzYW1wbGluZyBkZWNpc2lvbiBpZiBpdCBkb2Vzbid0IHlldCBoYXZlIG9uZS5cbiAqXG4gKiBUaGUgSHViLnN0YXJ0VHJhbnNhY3Rpb24gbWV0aG9kIGRlbGVnYXRlcyB0byB0aGlzIG1ldGhvZCB0byBkbyBpdHMgd29yaywgcGFzc2luZyB0aGUgSHViIGluc3RhbmNlIGluIGFzIGB0aGlzYCwgYXMgaWZcbiAqIGl0IGhhZCBiZWVuIGNhbGxlZCBvbiB0aGUgaHViIGRpcmVjdGx5LiBFeGlzdHMgYXMgYSBzZXBhcmF0ZSBmdW5jdGlvbiBzbyB0aGF0IGl0IGNhbiBiZSBpbmplY3RlZCBpbnRvIHRoZSBjbGFzcyBhcyBhblxuICogXCJleHRlbnNpb24gbWV0aG9kLlwiXG4gKlxuICogQHBhcmFtIHRoaXM6IFRoZSBIdWIgc3RhcnRpbmcgdGhlIHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb25Db250ZXh0OiBEYXRhIHVzZWQgdG8gY29uZmlndXJlIHRoZSB0cmFuc2FjdGlvblxuICogQHBhcmFtIEN1c3RvbVNhbXBsaW5nQ29udGV4dDogT3B0aW9uYWwgZGF0YSB0byBiZSBwcm92aWRlZCB0byB0aGUgYHRyYWNlc1NhbXBsZXJgIGZ1bmN0aW9uIChpZiBhbnkpXG4gKlxuICogQHJldHVybnMgVGhlIG5ldyB0cmFuc2FjdGlvblxuICpcbiAqIEBzZWUge0BsaW5rIEh1Yi5zdGFydFRyYW5zYWN0aW9ufVxuICovXG5mdW5jdGlvbiBfc3RhcnRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkge1xuICAgIHZhciB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkNvbnRleHQsIHRoaXMpO1xuICAgIHJldHVybiBzYW1wbGUodGhpcywgdHJhbnNhY3Rpb24sIF9fYXNzaWduKHsgcGFyZW50U2FtcGxlZDogdHJhbnNhY3Rpb25Db250ZXh0LnBhcmVudFNhbXBsZWQsIHRyYW5zYWN0aW9uQ29udGV4dDogdHJhbnNhY3Rpb25Db250ZXh0IH0sIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkpO1xufVxuLyoqXG4gKiBDcmVhdGUgbmV3IGlkbGUgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydElkbGVUcmFuc2FjdGlvbihodWIsIHRyYW5zYWN0aW9uQ29udGV4dCwgaWRsZVRpbWVvdXQsIG9uU2NvcGUsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkge1xuICAgIHZhciB0cmFuc2FjdGlvbiA9IG5ldyBJZGxlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25Db250ZXh0LCBodWIsIGlkbGVUaW1lb3V0LCBvblNjb3BlKTtcbiAgICByZXR1cm4gc2FtcGxlKGh1YiwgdHJhbnNhY3Rpb24sIF9fYXNzaWduKHsgcGFyZW50U2FtcGxlZDogdHJhbnNhY3Rpb25Db250ZXh0LnBhcmVudFNhbXBsZWQsIHRyYW5zYWN0aW9uQ29udGV4dDogdHJhbnNhY3Rpb25Db250ZXh0IH0sIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2FkZFRyYWNpbmdFeHRlbnNpb25zKCkge1xuICAgIHZhciBjYXJyaWVyID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICBpZiAoY2Fycmllci5fX1NFTlRSWV9fKSB7XG4gICAgICAgIGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zID0gY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMgfHwge307XG4gICAgICAgIGlmICghY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMuc3RhcnRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMuc3RhcnRUcmFuc2FjdGlvbiA9IF9zdGFydFRyYW5zYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMudHJhY2VIZWFkZXJzKSB7XG4gICAgICAgICAgICBjYXJyaWVyLl9fU0VOVFJZX18uZXh0ZW5zaW9ucy50cmFjZUhlYWRlcnMgPSB0cmFjZUhlYWRlcnM7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoaXMgcGF0Y2hlcyB0aGUgZ2xvYmFsIG9iamVjdCBhbmQgaW5qZWN0cyB0aGUgVHJhY2luZyBleHRlbnNpb25zIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEV4dGVuc2lvbk1ldGhvZHMoKSB7XG4gICAgX2FkZFRyYWNpbmdFeHRlbnNpb25zKCk7XG4gICAgLy8gSWYgYW4gZXJyb3IgaGFwcGVucyBnbG9iYWxseSwgd2Ugc2hvdWxkIG1ha2Ugc3VyZSB0cmFuc2FjdGlvbiBzdGF0dXMgaXMgc2V0IHRvIGVycm9yLlxuICAgIHJlZ2lzdGVyRXJyb3JJbnN0cnVtZW50YXRpb24oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh1YmV4dGVuc2lvbnMuanMubWFwIiwiaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IFNwYW5TdGF0dXMgfSBmcm9tICcuLi9zcGFuc3RhdHVzJztcbmltcG9ydCB7IGdldEFjdGl2ZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vdXRpbHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciB0aGF0IGNhbmNlbHMgYW5kIGZpbmlzaGVzIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGUgZ2xvYmFsXG4gKiBkb2N1bWVudCBpcyBoaWRkZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckJhY2tncm91bmRUYWJEZXRlY3Rpb24oKSB7XG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYWN0aXZlVHJhbnNhY3Rpb24gPSBnZXRBY3RpdmVUcmFuc2FjdGlvbigpO1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5kb2N1bWVudC5oaWRkZW4gJiYgYWN0aXZlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiW1RyYWNpbmddIFRyYW5zYWN0aW9uOiBcIiArIFNwYW5TdGF0dXMuQ2FuY2VsbGVkICsgXCIgLT4gc2luY2UgdGFiIG1vdmVkIHRvIHRoZSBiYWNrZ3JvdW5kLCBvcDogXCIgKyBhY3RpdmVUcmFuc2FjdGlvbi5vcCk7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBzZXQgc3RhdHVzIGlmIGl0IGlzIGFscmVhZHkgc2V0LCB0aGlzIHByZXZlbnQgaW1wb3J0YW50IHN0YXR1c2VzIGxpa2VcbiAgICAgICAgICAgICAgICAvLyBlcnJvciBvciBkYXRhIGxvc3MgZnJvbSBiZWluZyBvdmVyd3JpdHRlbiBvbiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZVRyYW5zYWN0aW9uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUcmFuc2FjdGlvbi5zZXRTdGF0dXMoU3BhblN0YXR1cy5DYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY3RpdmVUcmFuc2FjdGlvbi5zZXRUYWcoJ3Zpc2liaWxpdHljaGFuZ2UnLCAnZG9jdW1lbnQuaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVHJhbnNhY3Rpb24uZmluaXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1tUcmFjaW5nXSBDb3VsZCBub3Qgc2V0IHVwIGJhY2tncm91bmQgdGFiIGRldGVjdGlvbiBkdWUgdG8gbGFjayBvZiBnbG9iYWwgZG9jdW1lbnQnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrZ3JvdW5kdGFiLmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgb25IaWRkZW4gfSBmcm9tICcuL29uSGlkZGVuJztcbnZhciBmaXJzdEhpZGRlblRpbWU7XG5leHBvcnQgdmFyIGdldEZpcnN0SGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmaXJzdEhpZGRlblRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiB0aGUgZG9jdW1lbnQgaXMgaGlkZGVuIHdoZW4gdGhpcyBjb2RlIHJ1bnMsIGFzc3VtZSBpdCB3YXMgaGlkZGVuXG4gICAgICAgIC8vIHNpbmNlIG5hdmlnYXRpb24gc3RhcnQuIFRoaXMgaXNuJ3QgYSBwZXJmZWN0IGhldXJpc3RpYywgYnV0IGl0J3MgdGhlXG4gICAgICAgIC8vIGJlc3Qgd2UgY2FuIGRvIHVudGlsIGFuIEFQSSBpcyBhdmFpbGFibGUgdG8gc3VwcG9ydCBxdWVyeWluZyBwYXN0XG4gICAgICAgIC8vIHZpc2liaWxpdHlTdGF0ZS5cbiAgICAgICAgZmlyc3RIaWRkZW5UaW1lID0gZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJyA/IDAgOiBJbmZpbml0eTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSB0aW1lIGlmL3doZW4gdGhlIGRvY3VtZW50IGJlY29tZXMgaGlkZGVuLlxuICAgICAgICBvbkhpZGRlbihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciB0aW1lU3RhbXAgPSBfYS50aW1lU3RhbXA7XG4gICAgICAgICAgICByZXR1cm4gKGZpcnN0SGlkZGVuVGltZSA9IHRpbWVTdGFtcCk7XG4gICAgICAgIH0sIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgdGltZVN0YW1wKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0SGlkZGVuVGltZTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEZpcnN0SGlkZGVuLmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIGlucHV0UHJvbWlzZTtcbmV4cG9ydCB2YXIgd2hlbklucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5wdXRQcm9taXNlKSB7XG4gICAgICAgIGlucHV0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzY3JvbGwnLCAna2V5ZG93bicsICdwb2ludGVyZG93biddLm1hcChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgciwge1xuICAgICAgICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9taXNlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdoZW5JbnB1dC5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgYmluZFJlcG9ydGVyID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBtZXRyaWMsIHBvLCBvYnNlcnZlQWxsVXBkYXRlcykge1xuICAgIHZhciBwcmV2VmFsdWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHBvICYmIG1ldHJpYy5pc0ZpbmFsKSB7XG4gICAgICAgICAgICBwby5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldHJpYy52YWx1ZSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZUFsbFVwZGF0ZXMgfHwgbWV0cmljLmlzRmluYWwgfHwgZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgICAgIG1ldHJpYy5kZWx0YSA9IG1ldHJpYy52YWx1ZSAtIChwcmV2VmFsdWUgfHwgMCk7XG4gICAgICAgICAgICAgICAgLy8gUmVwb3J0IHRoZSBtZXRyaWMgaWYgdGhlcmUncyBhIG5vbi16ZXJvIGRlbHRhLCBpZiB0aGUgbWV0cmljIGlzXG4gICAgICAgICAgICAgICAgLy8gZmluYWwsIG9yIGlmIG5vIHByZXZpb3VzIHZhbHVlIGV4aXN0cyAod2hpY2ggY2FuIGhhcHBlbiBpbiB0aGUgY2FzZVxuICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBkb2N1bWVudCBiZWNvbWluZyBoaWRkZW4gd2hlbiB0aGUgbWV0cmljIHZhbHVlIGlzIDApLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS93ZWItdml0YWxzL2lzc3Vlcy8xNFxuICAgICAgICAgICAgICAgIGlmIChtZXRyaWMuZGVsdGEgfHwgbWV0cmljLmlzRmluYWwgfHwgcHJldlZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobWV0cmljKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlID0gbWV0cmljLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZFJlcG9ydGVyLmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJRCB9IGZyb20gJy4vZ2VuZXJhdGVVbmlxdWVJRCc7XG5leHBvcnQgdmFyIGluaXRNZXRyaWMgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgeyB2YWx1ZSA9IC0xOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBkZWx0YTogMCxcbiAgICAgICAgZW50cmllczogW10sXG4gICAgICAgIGlkOiBnZW5lcmF0ZVVuaXF1ZUlEKCksXG4gICAgICAgIGlzRmluYWw6IGZhbHNlLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdE1ldHJpYy5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUGVyZm9ybWFudGx5IGdlbmVyYXRlIGEgdW5pcXVlLCAyNy1jaGFyIHN0cmluZyBieSBjb21iaW5pbmcgdGhlIGN1cnJlbnRcbiAqIHRpbWVzdGFtcCB3aXRoIGEgMTMtZGlnaXQgcmFuZG9tIG51bWJlci5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBnZW5lcmF0ZVVuaXF1ZUlEID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgXCItXCIgKyAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDllMTIgLSAxKSkgKyAxZTEyKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVVuaXF1ZUlELmpzLm1hcCIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUYWtlcyBhIHBlcmZvcm1hbmNlIGVudHJ5IHR5cGUgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24sIGFuZCBjcmVhdGVzIGFcbiAqIGBQZXJmb3JtYW5jZU9ic2VydmVyYCBpbnN0YW5jZSB0aGF0IHdpbGwgb2JzZXJ2ZSB0aGUgc3BlY2lmaWVkIGVudHJ5IHR5cGVcbiAqIHdpdGggYnVmZmVyaW5nIGVuYWJsZWQgYW5kIGNhbGwgdGhlIGNhbGxiYWNrIF9mb3IgZWFjaCBlbnRyeV8uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbHNvIGZlYXR1cmUtZGV0ZWN0cyBlbnRyeSBzdXBwb3J0IGFuZCB3cmFwcyB0aGUgbG9naWMgaW4gYVxuICogdHJ5L2NhdGNoIHRvIGF2b2lkIGVycm9ycyBpbiB1bnN1cHBvcnRpbmcgYnJvd3NlcnMuXG4gKi9cbmV4cG9ydCB2YXIgb2JzZXJ2ZSA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChQZXJmb3JtYW5jZU9ic2VydmVyLnN1cHBvcnRlZEVudHJ5VHlwZXMuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgICAgIHZhciBwbyA9IG5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLmdldEVudHJpZXMoKS5tYXAoY2FsbGJhY2spOyB9KTtcbiAgICAgICAgICAgIHBvLm9ic2VydmUoeyB0eXBlOiB0eXBlLCBidWZmZXJlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJldHVybiBwbztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgIH1cbiAgICByZXR1cm47XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZS5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBpc1VubG9hZGluZyA9IGZhbHNlO1xudmFyIGxpc3RlbmVyc0FkZGVkID0gZmFsc2U7XG52YXIgb25QYWdlSGlkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlzVW5sb2FkaW5nID0gIWV2ZW50LnBlcnNpc3RlZDtcbn07XG52YXIgYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VoaWRlJywgb25QYWdlSGlkZSk7XG4gICAgLy8gYGJlZm9yZXVubG9hZGAgaXMgbmVlZGVkIHRvIGZpeCB0aGlzIGJ1ZzpcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05ODc0MDlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkgeyB9KTtcbn07XG5leHBvcnQgdmFyIG9uSGlkZGVuID0gZnVuY3Rpb24gKGNiLCBvbmNlKSB7XG4gICAgaWYgKG9uY2UgPT09IHZvaWQgMCkgeyBvbmNlID0gZmFsc2U7IH1cbiAgICBpZiAoIWxpc3RlbmVyc0FkZGVkKSB7XG4gICAgICAgIGFkZExpc3RlbmVycygpO1xuICAgICAgICBsaXN0ZW5lcnNBZGRlZCA9IHRydWU7XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHRpbWVTdGFtcCA9IF9hLnRpbWVTdGFtcDtcbiAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgIGNiKHsgdGltZVN0YW1wOiB0aW1lU3RhbXAsIGlzVW5sb2FkaW5nOiBpc1VubG9hZGluZyB9KTtcbiAgICAgICAgfVxuICAgIH0sIHsgY2FwdHVyZTogdHJ1ZSwgb25jZTogb25jZSB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkhpZGRlbi5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgaW5pdE1ldHJpYyB9IGZyb20gJy4vbGliL2luaXRNZXRyaWMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xudmFyIGFmdGVyTG9hZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIC8vIFF1ZXVlIGEgdGFzayBzbyB0aGUgY2FsbGJhY2sgcnVucyBhZnRlciBgbG9hZEV2ZW50RW5kYC5cbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBVc2UgYHBhZ2VzaG93YCBzbyB0aGUgY2FsbGJhY2sgcnVucyBhZnRlciBgbG9hZEV2ZW50RW5kYC5cbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcigncGFnZXNob3cnLCBjYWxsYmFjayk7XG4gICAgfVxufTtcbnZhciBnZXROYXZpZ2F0aW9uRW50cnlGcm9tUGVyZm9ybWFuY2VUaW1pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVhbGx5IGFubm95aW5nIHRoYXQgVHlwZVNjcmlwdCBlcnJvcnMgd2hlbiB1c2luZyBgUGVyZm9ybWFuY2VUaW1pbmdgLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHZhciB0aW1pbmcgPSBnbG9iYWwucGVyZm9ybWFuY2UudGltaW5nO1xuICAgIHZhciBuYXZpZ2F0aW9uRW50cnkgPSB7XG4gICAgICAgIGVudHJ5VHlwZTogJ25hdmlnYXRpb24nLFxuICAgICAgICBzdGFydFRpbWU6IDAsXG4gICAgfTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGltaW5nKSB7XG4gICAgICAgIGlmIChrZXkgIT09ICduYXZpZ2F0aW9uU3RhcnQnICYmIGtleSAhPT0gJ3RvSlNPTicpIHtcbiAgICAgICAgICAgIG5hdmlnYXRpb25FbnRyeVtrZXldID0gTWF0aC5tYXgodGltaW5nW2tleV0gLSB0aW1pbmcubmF2aWdhdGlvblN0YXJ0LCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdGlvbkVudHJ5O1xufTtcbmV4cG9ydCB2YXIgZ2V0VFRGQiA9IGZ1bmN0aW9uIChvblJlcG9ydCkge1xuICAgIHZhciBtZXRyaWMgPSBpbml0TWV0cmljKCdUVEZCJyk7XG4gICAgYWZ0ZXJMb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgTmF2aWdhdGlvblRpbWluZyBMMiBlbnRyeSBpZiBhdmFpbGFibGUuXG4gICAgICAgICAgICB2YXIgbmF2aWdhdGlvbkVudHJ5ID0gZ2xvYmFsLnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoJ25hdmlnYXRpb24nKVswXSB8fCBnZXROYXZpZ2F0aW9uRW50cnlGcm9tUGVyZm9ybWFuY2VUaW1pbmcoKTtcbiAgICAgICAgICAgIG1ldHJpYy52YWx1ZSA9IG1ldHJpYy5kZWx0YSA9IG5hdmlnYXRpb25FbnRyeS5yZXNwb25zZVN0YXJ0O1xuICAgICAgICAgICAgbWV0cmljLmVudHJpZXMgPSBbbmF2aWdhdGlvbkVudHJ5XTtcbiAgICAgICAgICAgIG9uUmVwb3J0KG1ldHJpYyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICB9XG4gICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VFRGQi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luLCBnZXRHbG9iYWxPYmplY3QsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgbXNUb1NlYyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGdldENMUyB9IGZyb20gJy4vd2ViLXZpdGFscy9nZXRDTFMnO1xuaW1wb3J0IHsgZ2V0RklEIH0gZnJvbSAnLi93ZWItdml0YWxzL2dldEZJRCc7XG5pbXBvcnQgeyBnZXRMQ1AgfSBmcm9tICcuL3dlYi12aXRhbHMvZ2V0TENQJztcbmltcG9ydCB7IGdldFRURkIgfSBmcm9tICcuL3dlYi12aXRhbHMvZ2V0VFRGQic7XG5pbXBvcnQgeyBnZXRGaXJzdEhpZGRlbiB9IGZyb20gJy4vd2ViLXZpdGFscy9saWIvZ2V0Rmlyc3RIaWRkZW4nO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIENsYXNzIHRyYWNraW5nIG1ldHJpY3MgICovXG52YXIgTWV0cmljc0luc3RydW1lbnRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXRyaWNzSW5zdHJ1bWVudGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9tZWFzdXJlbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5fcGVyZm9ybWFuY2VDdXJzb3IgPSAwO1xuICAgICAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5wZXJmb3JtYW5jZSkge1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5wZXJmb3JtYW5jZS5tYXJrKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLnBlcmZvcm1hbmNlLm1hcmsoJ3NlbnRyeS10cmFjaW5nLWluaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RyYWNrQ0xTKCk7XG4gICAgICAgICAgICB0aGlzLl90cmFja0xDUCgpO1xuICAgICAgICAgICAgdGhpcy5fdHJhY2tGSUQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrVFRGQigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBBZGQgcGVyZm9ybWFuY2UgcmVsYXRlZCBzcGFucyB0byBhIHRyYW5zYWN0aW9uICovXG4gICAgTWV0cmljc0luc3RydW1lbnRhdGlvbi5wcm90b3R5cGUuYWRkUGVyZm9ybWFuY2VFbnRyaWVzID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghZ2xvYmFsIHx8ICFnbG9iYWwucGVyZm9ybWFuY2UgfHwgIWdsb2JhbC5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzIHx8ICFicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luKSB7XG4gICAgICAgICAgICAvLyBHYXRla2VlcGVyIGlmIHBlcmZvcm1hbmNlIEFQSSBub3QgYXZhaWxhYmxlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmxvZygnW1RyYWNpbmddIEFkZGluZyAmIGFkanVzdGluZyBzcGFucyB1c2luZyBQZXJmb3JtYW5jZSBBUEknKTtcbiAgICAgICAgdmFyIHRpbWVPcmlnaW4gPSBtc1RvU2VjKGJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4pO1xuICAgICAgICB2YXIgZW50cnlTY3JpcHRTcmM7XG4gICAgICAgIGlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZ28gdGhyb3VnaCBhbGwgc2NyaXB0cyBvbiB0aGUgcGFnZSBhbmQgbG9vayBmb3IgJ2RhdGEtZW50cnknXG4gICAgICAgICAgICAgICAgLy8gV2UgcmVtZW1iZXIgdGhlIG5hbWUgYW5kIG1lYXN1cmUgdGhlIHRpbWUgYmV0d2VlbiB0aGlzIHNjcmlwdCBmaW5pc2hlZCBsb2FkaW5nIGFuZFxuICAgICAgICAgICAgICAgIC8vIG91ciBtYXJrICdzZW50cnktdHJhY2luZy1pbml0J1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5zY3JpcHRzW2ldLmRhdGFzZXQuZW50cnkgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgICAgICBlbnRyeVNjcmlwdFNyYyA9IGRvY3VtZW50LnNjcmlwdHNbaV0uc3JjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5U2NyaXB0U3RhcnRUaW1lc3RhbXA7XG4gICAgICAgIHZhciB0cmFjaW5nSW5pdE1hcmtTdGFydFRpbWU7XG4gICAgICAgIGdsb2JhbC5wZXJmb3JtYW5jZVxuICAgICAgICAgICAgLmdldEVudHJpZXMoKVxuICAgICAgICAgICAgLnNsaWNlKHRoaXMuX3BlcmZvcm1hbmNlQ3Vyc29yKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRUaW1lID0gbXNUb1NlYyhlbnRyeS5zdGFydFRpbWUpO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gbXNUb1NlYyhlbnRyeS5kdXJhdGlvbik7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb24ub3AgPT09ICduYXZpZ2F0aW9uJyAmJiB0aW1lT3JpZ2luICsgc3RhcnRUaW1lIDwgdHJhbnNhY3Rpb24uc3RhcnRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGVudHJ5LmVudHJ5VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ25hdmlnYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBhZGROYXZpZ2F0aW9uU3BhbnModHJhbnNhY3Rpb24sIGVudHJ5LCB0aW1lT3JpZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFyayc6XG4gICAgICAgICAgICAgICAgY2FzZSAncGFpbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21lYXN1cmUnOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydFRpbWVzdGFtcCA9IGFkZE1lYXN1cmVTcGFucyh0cmFuc2FjdGlvbiwgZW50cnksIHN0YXJ0VGltZSwgZHVyYXRpb24sIHRpbWVPcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2luZ0luaXRNYXJrU3RhcnRUaW1lID09PSB1bmRlZmluZWQgJiYgZW50cnkubmFtZSA9PT0gJ3NlbnRyeS10cmFjaW5nLWluaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjaW5nSW5pdE1hcmtTdGFydFRpbWUgPSBzdGFydFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjYXB0dXJlIHdlYiB2aXRhbHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0SGlkZGVuID0gZ2V0Rmlyc3RIaWRkZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZXBvcnQgaWYgdGhlIHBhZ2Ugd2Fzbid0IGhpZGRlbiBwcmlvciB0byB0aGUgd2ViIHZpdGFsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkUmVjb3JkID0gZW50cnkuc3RhcnRUaW1lIDwgZmlyc3RIaWRkZW4udGltZVN0YW1wO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkubmFtZSA9PT0gJ2ZpcnN0LXBhaW50JyAmJiBzaG91bGRSZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBGUCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lYXN1cmVtZW50c1snZnAnXSA9IHsgdmFsdWU6IGVudHJ5LnN0YXJ0VGltZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lYXN1cmVtZW50c1snbWFyay5mcCddID0geyB2YWx1ZTogc3RhcnRUaW1lc3RhbXAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkubmFtZSA9PT0gJ2ZpcnN0LWNvbnRlbnRmdWwtcGFpbnQnICYmIHNob3VsZFJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZygnW01lYXN1cmVtZW50c10gQWRkaW5nIEZDUCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lYXN1cmVtZW50c1snZmNwJ10gPSB7IHZhbHVlOiBlbnRyeS5zdGFydFRpbWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlbWVudHNbJ21hcmsuZmNwJ10gPSB7IHZhbHVlOiBzdGFydFRpbWVzdGFtcCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdyZXNvdXJjZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc291cmNlTmFtZSA9IGVudHJ5Lm5hbWUucmVwbGFjZSh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRUaW1lc3RhbXAgPSBhZGRSZXNvdXJjZVNwYW5zKHRyYW5zYWN0aW9uLCBlbnRyeSwgcmVzb3VyY2VOYW1lLCBzdGFydFRpbWUsIGR1cmF0aW9uLCB0aW1lT3JpZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgcmVtZW1iZXIgdGhlIGVudHJ5IHNjcmlwdCBlbmQgdGltZSB0byBjYWxjdWxhdGUgdGhlIGRpZmZlcmVuY2UgdG8gdGhlIGZpcnN0IGluaXQgbWFya1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnlTY3JpcHRTdGFydFRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkICYmIChlbnRyeVNjcmlwdFNyYyB8fCAnJykuaW5kZXhPZihyZXNvdXJjZU5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5U2NyaXB0U3RhcnRUaW1lc3RhbXAgPSBlbmRUaW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIG90aGVyIGVudHJ5IHR5cGVzLlxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGVudHJ5U2NyaXB0U3RhcnRUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiB0cmFjaW5nSW5pdE1hcmtTdGFydFRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3N0YXJ0Q2hpbGQodHJhbnNhY3Rpb24sIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2V2YWx1YXRpb24nLFxuICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcDogdHJhY2luZ0luaXRNYXJrU3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIG9wOiAnc2NyaXB0JyxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogZW50cnlTY3JpcHRTdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BlcmZvcm1hbmNlQ3Vyc29yID0gTWF0aC5tYXgocGVyZm9ybWFuY2UuZ2V0RW50cmllcygpLmxlbmd0aCAtIDEsIDApO1xuICAgICAgICB0aGlzLl90cmFja05hdmlnYXRvcih0cmFuc2FjdGlvbik7XG4gICAgICAgIC8vIE1lYXN1cmVtZW50cyBhcmUgb25seSBhdmFpbGFibGUgZm9yIHBhZ2Vsb2FkIHRyYW5zYWN0aW9uc1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24ub3AgPT09ICdwYWdlbG9hZCcpIHtcbiAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSBhcHBsaWNhYmxlIHdlYiB2aXRhbCB2YWx1ZXMgdG8gYmUgcmVsYXRpdmUgdG8gdHJhbnNhY3Rpb24uc3RhcnRUaW1lc3RhbXBcbiAgICAgICAgICAgIHZhciB0aW1lT3JpZ2luXzEgPSBtc1RvU2VjKGJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4pO1xuICAgICAgICAgICAgWydmY3AnLCAnZnAnLCAnbGNwJywgJ3R0ZmInXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fbWVhc3VyZW1lbnRzW25hbWVdIHx8IHRpbWVPcmlnaW5fMSA+PSB0cmFuc2FjdGlvbi5zdGFydFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoZSB3ZWIgdml0YWxzLCBmY3AsIGZwLCBsY3AsIGFuZCB0dGZiLCBhbGwgbWVhc3VyZSByZWxhdGl2ZSB0byB0aW1lT3JpZ2luLlxuICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIHRpbWVPcmlnaW4gaXMgbm90IGNhcHR1cmVkIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24gc3BhbiBkYXRhLCBzbyB0aGVzZSB3ZWIgdml0YWxzIHdpbGwgbmVlZFxuICAgICAgICAgICAgICAgIC8vIHRvIGJlIGFkanVzdGVkIHRvIGJlIHJlbGF0aXZlIHRvIHRyYW5zYWN0aW9uLnN0YXJ0VGltZXN0YW1wLlxuICAgICAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IF90aGlzLl9tZWFzdXJlbWVudHNbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG1lYXN1cmVtZW50VGltZXN0YW1wID0gdGltZU9yaWdpbl8xICsgbXNUb1NlYyhvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplZFZhbHVlIHNob3VsZCBiZSBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZFZhbHVlID0gTWF0aC5hYnMoKG1lYXN1cmVtZW50VGltZXN0YW1wIC0gdHJhbnNhY3Rpb24uc3RhcnRUaW1lc3RhbXApICogMTAwMCk7XG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gbm9ybWFsaXplZFZhbHVlIC0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIltNZWFzdXJlbWVudHNdIE5vcm1hbGl6ZWQgXCIgKyBuYW1lICsgXCIgZnJvbSBcIiArIG9sZFZhbHVlICsgXCIgdG8gXCIgKyBub3JtYWxpemVkVmFsdWUgKyBcIiAoXCIgKyBkZWx0YSArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVhc3VyZW1lbnRzW25hbWVdLnZhbHVlID0gbm9ybWFsaXplZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fbWVhc3VyZW1lbnRzWydtYXJrLmZpZCddICYmIHRoaXMuX21lYXN1cmVtZW50c1snZmlkJ10pIHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgc3BhbiBmb3IgRklEXG4gICAgICAgICAgICAgICAgX3N0YXJ0Q2hpbGQodHJhbnNhY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdmaXJzdCBpbnB1dCBkZWxheScsXG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcDogdGhpcy5fbWVhc3VyZW1lbnRzWydtYXJrLmZpZCddLnZhbHVlICsgbXNUb1NlYyh0aGlzLl9tZWFzdXJlbWVudHNbJ2ZpZCddLnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6ICd3ZWIudml0YWxzJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IHRoaXMuX21lYXN1cmVtZW50c1snbWFyay5maWQnXS52YWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLnNldE1lYXN1cmVtZW50cyh0aGlzLl9tZWFzdXJlbWVudHMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogU3RhcnRzIHRyYWNraW5nIHRoZSBDdW11bGF0aXZlIExheW91dCBTaGlmdCBvbiB0aGUgY3VycmVudCBwYWdlLiAqL1xuICAgIE1ldHJpY3NJbnN0cnVtZW50YXRpb24ucHJvdG90eXBlLl90cmFja0NMUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZ2V0Q0xTKGZ1bmN0aW9uIChtZXRyaWMpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IG1ldHJpYy5lbnRyaWVzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBDTFMnKTtcbiAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlbWVudHNbJ2NscyddID0geyB2YWx1ZTogbWV0cmljLnZhbHVlIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FwdHVyZSB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIHVzZXIgYWdlbnQuXG4gICAgICovXG4gICAgTWV0cmljc0luc3RydW1lbnRhdGlvbi5wcm90b3R5cGUuX3RyYWNrTmF2aWdhdG9yID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuICAgICAgICBpZiAoIW5hdmlnYXRvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRyYWNrIG5ldHdvcmsgY29ubmVjdGl2aXR5XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gbmF2aWdhdG9yLmNvbm5lY3Rpb247XG4gICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5lZmZlY3RpdmVUeXBlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uc2V0VGFnKCdlZmZlY3RpdmVDb25uZWN0aW9uVHlwZScsIGNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uc2V0VGFnKCdjb25uZWN0aW9uVHlwZScsIGNvbm5lY3Rpb24udHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNNZWFzdXJlbWVudFZhbHVlKGNvbm5lY3Rpb24ucnR0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21lYXN1cmVtZW50c1snY29ubmVjdGlvbi5ydHQnXSA9IHsgdmFsdWU6IGNvbm5lY3Rpb24ucnR0IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNNZWFzdXJlbWVudFZhbHVlKGNvbm5lY3Rpb24uZG93bmxpbmspKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVhc3VyZW1lbnRzWydjb25uZWN0aW9uLmRvd25saW5rJ10gPSB7IHZhbHVlOiBjb25uZWN0aW9uLmRvd25saW5rIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTWVhc3VyZW1lbnRWYWx1ZShuYXZpZ2F0b3IuZGV2aWNlTWVtb3J5KSkge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uc2V0VGFnKCdkZXZpY2VNZW1vcnknLCBTdHJpbmcobmF2aWdhdG9yLmRldmljZU1lbW9yeSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc01lYXN1cmVtZW50VmFsdWUobmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5zZXRUYWcoJ2hhcmR3YXJlQ29uY3VycmVuY3knLCBTdHJpbmcobmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIFN0YXJ0cyB0cmFja2luZyB0aGUgTGFyZ2VzdCBDb250ZW50ZnVsIFBhaW50IG9uIHRoZSBjdXJyZW50IHBhZ2UuICovXG4gICAgTWV0cmljc0luc3RydW1lbnRhdGlvbi5wcm90b3R5cGUuX3RyYWNrTENQID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBnZXRMQ1AoZnVuY3Rpb24gKG1ldHJpYykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbWV0cmljLmVudHJpZXMucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRpbWVPcmlnaW4gPSBtc1RvU2VjKHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4pO1xuICAgICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IG1zVG9TZWMoZW50cnkuc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBMQ1AnKTtcbiAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlbWVudHNbJ2xjcCddID0geyB2YWx1ZTogbWV0cmljLnZhbHVlIH07XG4gICAgICAgICAgICBfdGhpcy5fbWVhc3VyZW1lbnRzWydtYXJrLmxjcCddID0geyB2YWx1ZTogdGltZU9yaWdpbiArIHN0YXJ0VGltZSB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBTdGFydHMgdHJhY2tpbmcgdGhlIEZpcnN0IElucHV0IERlbGF5IG9uIHRoZSBjdXJyZW50IHBhZ2UuICovXG4gICAgTWV0cmljc0luc3RydW1lbnRhdGlvbi5wcm90b3R5cGUuX3RyYWNrRklEID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBnZXRGSUQoZnVuY3Rpb24gKG1ldHJpYykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbWV0cmljLmVudHJpZXMucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRpbWVPcmlnaW4gPSBtc1RvU2VjKHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4pO1xuICAgICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IG1zVG9TZWMoZW50cnkuc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ1tNZWFzdXJlbWVudHNdIEFkZGluZyBGSUQnKTtcbiAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlbWVudHNbJ2ZpZCddID0geyB2YWx1ZTogbWV0cmljLnZhbHVlIH07XG4gICAgICAgICAgICBfdGhpcy5fbWVhc3VyZW1lbnRzWydtYXJrLmZpZCddID0geyB2YWx1ZTogdGltZU9yaWdpbiArIHN0YXJ0VGltZSB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBTdGFydHMgdHJhY2tpbmcgdGhlIFRpbWUgdG8gRmlyc3QgQnl0ZSBvbiB0aGUgY3VycmVudCBwYWdlLiAqL1xuICAgIE1ldHJpY3NJbnN0cnVtZW50YXRpb24ucHJvdG90eXBlLl90cmFja1RURkIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGdldFRURkIoZnVuY3Rpb24gKG1ldHJpYykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbWV0cmljLmVudHJpZXMucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmxvZygnW01lYXN1cmVtZW50c10gQWRkaW5nIFRURkInKTtcbiAgICAgICAgICAgIF90aGlzLl9tZWFzdXJlbWVudHNbJ3R0ZmInXSA9IHsgdmFsdWU6IG1ldHJpYy52YWx1ZSB9O1xuICAgICAgICAgICAgLy8gQ2FwdHVyZSB0aGUgdGltZSBzcGVudCBtYWtpbmcgdGhlIHJlcXVlc3QgYW5kIHJlY2VpdmluZyB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgIHZhciByZXF1ZXN0VGltZSA9IG1ldHJpYy52YWx1ZSAtIChfYSA9IG1ldHJpYy5lbnRyaWVzWzBdLCAoX2EgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZW50cnkpKS5yZXF1ZXN0U3RhcnQ7XG4gICAgICAgICAgICBfdGhpcy5fbWVhc3VyZW1lbnRzWyd0dGZiLnJlcXVlc3RUaW1lJ10gPSB7IHZhbHVlOiByZXF1ZXN0VGltZSB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNZXRyaWNzSW5zdHJ1bWVudGF0aW9uO1xufSgpKTtcbmV4cG9ydCB7IE1ldHJpY3NJbnN0cnVtZW50YXRpb24gfTtcbi8qKiBJbnN0cnVtZW50IG5hdmlnYXRpb24gZW50cmllcyAqL1xuZnVuY3Rpb24gYWRkTmF2aWdhdGlvblNwYW5zKHRyYW5zYWN0aW9uLCBlbnRyeSwgdGltZU9yaWdpbikge1xuICAgIGFkZFBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyh0cmFuc2FjdGlvbiwgZW50cnksICd1bmxvYWRFdmVudCcsIHRpbWVPcmlnaW4pO1xuICAgIGFkZFBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyh0cmFuc2FjdGlvbiwgZW50cnksICdyZWRpcmVjdCcsIHRpbWVPcmlnaW4pO1xuICAgIGFkZFBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyh0cmFuc2FjdGlvbiwgZW50cnksICdkb21Db250ZW50TG9hZGVkRXZlbnQnLCB0aW1lT3JpZ2luKTtcbiAgICBhZGRQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmcodHJhbnNhY3Rpb24sIGVudHJ5LCAnbG9hZEV2ZW50JywgdGltZU9yaWdpbik7XG4gICAgYWRkUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKHRyYW5zYWN0aW9uLCBlbnRyeSwgJ2Nvbm5lY3QnLCB0aW1lT3JpZ2luKTtcbiAgICBhZGRQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmcodHJhbnNhY3Rpb24sIGVudHJ5LCAnc2VjdXJlQ29ubmVjdGlvbicsIHRpbWVPcmlnaW4sICdjb25uZWN0RW5kJyk7XG4gICAgYWRkUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKHRyYW5zYWN0aW9uLCBlbnRyeSwgJ2ZldGNoJywgdGltZU9yaWdpbiwgJ2RvbWFpbkxvb2t1cFN0YXJ0Jyk7XG4gICAgYWRkUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKHRyYW5zYWN0aW9uLCBlbnRyeSwgJ2RvbWFpbkxvb2t1cCcsIHRpbWVPcmlnaW4pO1xuICAgIGFkZFJlcXVlc3QodHJhbnNhY3Rpb24sIGVudHJ5LCB0aW1lT3JpZ2luKTtcbn1cbi8qKiBDcmVhdGUgbWVhc3VyZSByZWxhdGVkIHNwYW5zICovXG5mdW5jdGlvbiBhZGRNZWFzdXJlU3BhbnModHJhbnNhY3Rpb24sIGVudHJ5LCBzdGFydFRpbWUsIGR1cmF0aW9uLCB0aW1lT3JpZ2luKSB7XG4gICAgdmFyIG1lYXN1cmVTdGFydFRpbWVzdGFtcCA9IHRpbWVPcmlnaW4gKyBzdGFydFRpbWU7XG4gICAgdmFyIG1lYXN1cmVFbmRUaW1lc3RhbXAgPSBtZWFzdXJlU3RhcnRUaW1lc3RhbXAgKyBkdXJhdGlvbjtcbiAgICBfc3RhcnRDaGlsZCh0cmFuc2FjdGlvbiwge1xuICAgICAgICBkZXNjcmlwdGlvbjogZW50cnkubmFtZSxcbiAgICAgICAgZW5kVGltZXN0YW1wOiBtZWFzdXJlRW5kVGltZXN0YW1wLFxuICAgICAgICBvcDogZW50cnkuZW50cnlUeXBlLFxuICAgICAgICBzdGFydFRpbWVzdGFtcDogbWVhc3VyZVN0YXJ0VGltZXN0YW1wLFxuICAgIH0pO1xuICAgIHJldHVybiBtZWFzdXJlU3RhcnRUaW1lc3RhbXA7XG59XG4vKiogQ3JlYXRlIHJlc291cmNlLXJlbGF0ZWQgc3BhbnMgKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRSZXNvdXJjZVNwYW5zKHRyYW5zYWN0aW9uLCBlbnRyeSwgcmVzb3VyY2VOYW1lLCBzdGFydFRpbWUsIGR1cmF0aW9uLCB0aW1lT3JpZ2luKSB7XG4gICAgLy8gd2UgYWxyZWFkeSBpbnN0cnVtZW50IGJhc2VkIG9uIGZldGNoIGFuZCB4aHIsIHNvIHdlIGRvbid0IG5lZWQgdG9cbiAgICAvLyBkdXBsaWNhdGUgc3BhbnMgaGVyZS5cbiAgICBpZiAoZW50cnkuaW5pdGlhdG9yVHlwZSA9PT0gJ3htbGh0dHByZXF1ZXN0JyB8fCBlbnRyeS5pbml0aWF0b3JUeXBlID09PSAnZmV0Y2gnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciBkYXRhID0ge307XG4gICAgaWYgKCd0cmFuc2ZlclNpemUnIGluIGVudHJ5KSB7XG4gICAgICAgIGRhdGFbJ1RyYW5zZmVyIFNpemUnXSA9IGVudHJ5LnRyYW5zZmVyU2l6ZTtcbiAgICB9XG4gICAgaWYgKCdlbmNvZGVkQm9keVNpemUnIGluIGVudHJ5KSB7XG4gICAgICAgIGRhdGFbJ0VuY29kZWQgQm9keSBTaXplJ10gPSBlbnRyeS5lbmNvZGVkQm9keVNpemU7XG4gICAgfVxuICAgIGlmICgnZGVjb2RlZEJvZHlTaXplJyBpbiBlbnRyeSkge1xuICAgICAgICBkYXRhWydEZWNvZGVkIEJvZHkgU2l6ZSddID0gZW50cnkuZGVjb2RlZEJvZHlTaXplO1xuICAgIH1cbiAgICB2YXIgc3RhcnRUaW1lc3RhbXAgPSB0aW1lT3JpZ2luICsgc3RhcnRUaW1lO1xuICAgIHZhciBlbmRUaW1lc3RhbXAgPSBzdGFydFRpbWVzdGFtcCArIGR1cmF0aW9uO1xuICAgIF9zdGFydENoaWxkKHRyYW5zYWN0aW9uLCB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiByZXNvdXJjZU5hbWUsXG4gICAgICAgIGVuZFRpbWVzdGFtcDogZW5kVGltZXN0YW1wLFxuICAgICAgICBvcDogZW50cnkuaW5pdGlhdG9yVHlwZSA/IFwicmVzb3VyY2UuXCIgKyBlbnRyeS5pbml0aWF0b3JUeXBlIDogJ3Jlc291cmNlJyxcbiAgICAgICAgc3RhcnRUaW1lc3RhbXA6IHN0YXJ0VGltZXN0YW1wLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgIH0pO1xuICAgIHJldHVybiBlbmRUaW1lc3RhbXA7XG59XG4vKiogQ3JlYXRlIHBlcmZvcm1hbmNlIG5hdmlnYXRpb24gcmVsYXRlZCBzcGFucyAqL1xuZnVuY3Rpb24gYWRkUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKHRyYW5zYWN0aW9uLCBlbnRyeSwgZXZlbnQsIHRpbWVPcmlnaW4sIGV2ZW50RW5kKSB7XG4gICAgdmFyIGVuZCA9IGV2ZW50RW5kID8gZW50cnlbZXZlbnRFbmRdIDogZW50cnlbZXZlbnQgKyBcIkVuZFwiXTtcbiAgICB2YXIgc3RhcnQgPSBlbnRyeVtldmVudCArIFwiU3RhcnRcIl07XG4gICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3N0YXJ0Q2hpbGQodHJhbnNhY3Rpb24sIHtcbiAgICAgICAgb3A6ICdicm93c2VyJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGV2ZW50LFxuICAgICAgICBzdGFydFRpbWVzdGFtcDogdGltZU9yaWdpbiArIG1zVG9TZWMoc3RhcnQpLFxuICAgICAgICBlbmRUaW1lc3RhbXA6IHRpbWVPcmlnaW4gKyBtc1RvU2VjKGVuZCksXG4gICAgfSk7XG59XG4vKiogQ3JlYXRlIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHJlbGF0ZWQgc3BhbnMgKi9cbmZ1bmN0aW9uIGFkZFJlcXVlc3QodHJhbnNhY3Rpb24sIGVudHJ5LCB0aW1lT3JpZ2luKSB7XG4gICAgX3N0YXJ0Q2hpbGQodHJhbnNhY3Rpb24sIHtcbiAgICAgICAgb3A6ICdicm93c2VyJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdyZXF1ZXN0JyxcbiAgICAgICAgc3RhcnRUaW1lc3RhbXA6IHRpbWVPcmlnaW4gKyBtc1RvU2VjKGVudHJ5LnJlcXVlc3RTdGFydCksXG4gICAgICAgIGVuZFRpbWVzdGFtcDogdGltZU9yaWdpbiArIG1zVG9TZWMoZW50cnkucmVzcG9uc2VFbmQpLFxuICAgIH0pO1xuICAgIF9zdGFydENoaWxkKHRyYW5zYWN0aW9uLCB7XG4gICAgICAgIG9wOiAnYnJvd3NlcicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAncmVzcG9uc2UnLFxuICAgICAgICBzdGFydFRpbWVzdGFtcDogdGltZU9yaWdpbiArIG1zVG9TZWMoZW50cnkucmVzcG9uc2VTdGFydCksXG4gICAgICAgIGVuZFRpbWVzdGFtcDogdGltZU9yaWdpbiArIG1zVG9TZWMoZW50cnkucmVzcG9uc2VFbmQpLFxuICAgIH0pO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gc3RhcnQgY2hpbGQgb24gdHJhbnNhY3Rpb25zLiBUaGlzIGZ1bmN0aW9uIHdpbGwgbWFrZSBzdXJlIHRoYXQgdGhlIHRyYW5zYWN0aW9uIHdpbGxcbiAqIHVzZSB0aGUgc3RhcnQgdGltZXN0YW1wIG9mIHRoZSBjcmVhdGVkIGNoaWxkIHNwYW4gaWYgaXQgaXMgZWFybGllciB0aGFuIHRoZSB0cmFuc2FjdGlvbnMgYWN0dWFsXG4gKiBzdGFydCB0aW1lc3RhbXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfc3RhcnRDaGlsZCh0cmFuc2FjdGlvbiwgX2EpIHtcbiAgICB2YXIgc3RhcnRUaW1lc3RhbXAgPSBfYS5zdGFydFRpbWVzdGFtcCwgY3R4ID0gX19yZXN0KF9hLCBbXCJzdGFydFRpbWVzdGFtcFwiXSk7XG4gICAgaWYgKHN0YXJ0VGltZXN0YW1wICYmIHRyYW5zYWN0aW9uLnN0YXJ0VGltZXN0YW1wID4gc3RhcnRUaW1lc3RhbXApIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uc3RhcnRUaW1lc3RhbXAgPSBzdGFydFRpbWVzdGFtcDtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnN0YXJ0Q2hpbGQoX19hc3NpZ24oeyBzdGFydFRpbWVzdGFtcDogc3RhcnRUaW1lc3RhbXAgfSwgY3R4KSk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgbWVhc3VyZW1lbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGlzTWVhc3VyZW1lbnRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpY3MuanMubWFwIiwiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBiaW5kUmVwb3J0ZXIgfSBmcm9tICcuL2xpYi9iaW5kUmVwb3J0ZXInO1xuaW1wb3J0IHsgaW5pdE1ldHJpYyB9IGZyb20gJy4vbGliL2luaXRNZXRyaWMnO1xuaW1wb3J0IHsgb2JzZXJ2ZSB9IGZyb20gJy4vbGliL29ic2VydmUnO1xuaW1wb3J0IHsgb25IaWRkZW4gfSBmcm9tICcuL2xpYi9vbkhpZGRlbic7XG5leHBvcnQgdmFyIGdldENMUyA9IGZ1bmN0aW9uIChvblJlcG9ydCwgcmVwb3J0QWxsQ2hhbmdlcykge1xuICAgIGlmIChyZXBvcnRBbGxDaGFuZ2VzID09PSB2b2lkIDApIHsgcmVwb3J0QWxsQ2hhbmdlcyA9IGZhbHNlOyB9XG4gICAgdmFyIG1ldHJpYyA9IGluaXRNZXRyaWMoJ0NMUycsIDApO1xuICAgIHZhciByZXBvcnQ7XG4gICAgdmFyIGVudHJ5SGFuZGxlciA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAvLyBPbmx5IGNvdW50IGxheW91dCBzaGlmdHMgd2l0aG91dCByZWNlbnQgdXNlciBpbnB1dC5cbiAgICAgICAgaWYgKCFlbnRyeS5oYWRSZWNlbnRJbnB1dCkge1xuICAgICAgICAgICAgbWV0cmljLnZhbHVlICs9IGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgbWV0cmljLmVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICByZXBvcnQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHBvID0gb2JzZXJ2ZSgnbGF5b3V0LXNoaWZ0JywgZW50cnlIYW5kbGVyKTtcbiAgICBpZiAocG8pIHtcbiAgICAgICAgcmVwb3J0ID0gYmluZFJlcG9ydGVyKG9uUmVwb3J0LCBtZXRyaWMsIHBvLCByZXBvcnRBbGxDaGFuZ2VzKTtcbiAgICAgICAgb25IaWRkZW4oZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgaXNVbmxvYWRpbmcgPSBfYS5pc1VubG9hZGluZztcbiAgICAgICAgICAgIHBvLnRha2VSZWNvcmRzKCkubWFwKGVudHJ5SGFuZGxlcik7XG4gICAgICAgICAgICBpZiAoaXNVbmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBtZXRyaWMuaXNGaW5hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENMUy5qcy5tYXAiLCIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGJpbmRSZXBvcnRlciB9IGZyb20gJy4vbGliL2JpbmRSZXBvcnRlcic7XG5pbXBvcnQgeyBnZXRGaXJzdEhpZGRlbiB9IGZyb20gJy4vbGliL2dldEZpcnN0SGlkZGVuJztcbmltcG9ydCB7IGluaXRNZXRyaWMgfSBmcm9tICcuL2xpYi9pbml0TWV0cmljJztcbmltcG9ydCB7IG9ic2VydmUgfSBmcm9tICcuL2xpYi9vYnNlcnZlJztcbmltcG9ydCB7IG9uSGlkZGVuIH0gZnJvbSAnLi9saWIvb25IaWRkZW4nO1xuaW1wb3J0IHsgd2hlbklucHV0IH0gZnJvbSAnLi9saWIvd2hlbklucHV0JztcbmV4cG9ydCB2YXIgZ2V0TENQID0gZnVuY3Rpb24gKG9uUmVwb3J0LCByZXBvcnRBbGxDaGFuZ2VzKSB7XG4gICAgaWYgKHJlcG9ydEFsbENoYW5nZXMgPT09IHZvaWQgMCkgeyByZXBvcnRBbGxDaGFuZ2VzID0gZmFsc2U7IH1cbiAgICB2YXIgbWV0cmljID0gaW5pdE1ldHJpYygnTENQJyk7XG4gICAgdmFyIGZpcnN0SGlkZGVuID0gZ2V0Rmlyc3RIaWRkZW4oKTtcbiAgICB2YXIgcmVwb3J0O1xuICAgIHZhciBlbnRyeUhhbmRsZXIgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgLy8gVGhlIHN0YXJ0VGltZSBhdHRyaWJ1dGUgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHJlbmRlclRpbWUgaWYgaXQgaXMgbm90IDAsXG4gICAgICAgIC8vIGFuZCB0aGUgdmFsdWUgb2YgdGhlIGxvYWRUaW1lIG90aGVyd2lzZS5cbiAgICAgICAgdmFyIHZhbHVlID0gZW50cnkuc3RhcnRUaW1lO1xuICAgICAgICAvLyBJZiB0aGUgcGFnZSB3YXMgaGlkZGVuIHByaW9yIHRvIHBhaW50IHRpbWUgb2YgdGhlIGVudHJ5LFxuICAgICAgICAvLyBpZ25vcmUgaXQgYW5kIG1hcmsgdGhlIG1ldHJpYyBhcyBmaW5hbCwgb3RoZXJ3aXNlIGFkZCB0aGUgZW50cnkuXG4gICAgICAgIGlmICh2YWx1ZSA8IGZpcnN0SGlkZGVuLnRpbWVTdGFtcCkge1xuICAgICAgICAgICAgbWV0cmljLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBtZXRyaWMuZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldHJpYy5pc0ZpbmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXBvcnQoKTtcbiAgICB9O1xuICAgIHZhciBwbyA9IG9ic2VydmUoJ2xhcmdlc3QtY29udGVudGZ1bC1wYWludCcsIGVudHJ5SGFuZGxlcik7XG4gICAgaWYgKHBvKSB7XG4gICAgICAgIHJlcG9ydCA9IGJpbmRSZXBvcnRlcihvblJlcG9ydCwgbWV0cmljLCBwbywgcmVwb3J0QWxsQ2hhbmdlcyk7XG4gICAgICAgIHZhciBvbkZpbmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFtZXRyaWMuaXNGaW5hbCkge1xuICAgICAgICAgICAgICAgIHBvLnRha2VSZWNvcmRzKCkubWFwKGVudHJ5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgbWV0cmljLmlzRmluYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlcG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2b2lkIHdoZW5JbnB1dCgpLnRoZW4ob25GaW5hbCk7XG4gICAgICAgIG9uSGlkZGVuKG9uRmluYWwsIHRydWUpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRMQ1AuanMubWFwIiwiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBiaW5kUmVwb3J0ZXIgfSBmcm9tICcuL2xpYi9iaW5kUmVwb3J0ZXInO1xuaW1wb3J0IHsgZ2V0Rmlyc3RIaWRkZW4gfSBmcm9tICcuL2xpYi9nZXRGaXJzdEhpZGRlbic7XG5pbXBvcnQgeyBpbml0TWV0cmljIH0gZnJvbSAnLi9saWIvaW5pdE1ldHJpYyc7XG5pbXBvcnQgeyBvYnNlcnZlIH0gZnJvbSAnLi9saWIvb2JzZXJ2ZSc7XG5pbXBvcnQgeyBvbkhpZGRlbiB9IGZyb20gJy4vbGliL29uSGlkZGVuJztcbmV4cG9ydCB2YXIgZ2V0RklEID0gZnVuY3Rpb24gKG9uUmVwb3J0KSB7XG4gICAgdmFyIG1ldHJpYyA9IGluaXRNZXRyaWMoJ0ZJRCcpO1xuICAgIHZhciBmaXJzdEhpZGRlbiA9IGdldEZpcnN0SGlkZGVuKCk7XG4gICAgdmFyIGVudHJ5SGFuZGxlciA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAvLyBPbmx5IHJlcG9ydCBpZiB0aGUgcGFnZSB3YXNuJ3QgaGlkZGVuIHByaW9yIHRvIHRoZSBmaXJzdCBpbnB1dC5cbiAgICAgICAgaWYgKGVudHJ5LnN0YXJ0VGltZSA8IGZpcnN0SGlkZGVuLnRpbWVTdGFtcCkge1xuICAgICAgICAgICAgbWV0cmljLnZhbHVlID0gZW50cnkucHJvY2Vzc2luZ1N0YXJ0IC0gZW50cnkuc3RhcnRUaW1lO1xuICAgICAgICAgICAgbWV0cmljLmVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICBtZXRyaWMuaXNGaW5hbCA9IHRydWU7XG4gICAgICAgICAgICByZXBvcnQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHBvID0gb2JzZXJ2ZSgnZmlyc3QtaW5wdXQnLCBlbnRyeUhhbmRsZXIpO1xuICAgIHZhciByZXBvcnQgPSBiaW5kUmVwb3J0ZXIob25SZXBvcnQsIG1ldHJpYywgcG8pO1xuICAgIGlmIChwbykge1xuICAgICAgICBvbkhpZGRlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwby50YWtlUmVjb3JkcygpLm1hcChlbnRyeUhhbmRsZXIpO1xuICAgICAgICAgICAgcG8uZGlzY29ubmVjdCgpO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh3aW5kb3cucGVyZk1ldHJpY3MgJiYgd2luZG93LnBlcmZNZXRyaWNzLm9uRmlyc3RJbnB1dERlbGF5KSB7XG4gICAgICAgICAgICB3aW5kb3cucGVyZk1ldHJpY3Mub25GaXJzdElucHV0RGVsYXkoZnVuY3Rpb24gKHZhbHVlLCBldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgcmVwb3J0IGlmIHRoZSBwYWdlIHdhc24ndCBoaWRkZW4gcHJpb3IgdG8gdGhlIGZpcnN0IGlucHV0LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC50aW1lU3RhbXAgPCBmaXJzdEhpZGRlbi50aW1lU3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0cmljLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG1ldHJpYy5pc0ZpbmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWV0cmljLmVudHJpZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnlUeXBlOiAnZmlyc3QtaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogZXZlbnQuY2FuY2VsYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IGV2ZW50LnRpbWVTdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nU3RhcnQ6IGV2ZW50LnRpbWVTdGFtcCArIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0RklELmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgaXNJbnN0YW5jZU9mLCBpc01hdGNoaW5nUGF0dGVybiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0QWN0aXZlVHJhbnNhY3Rpb24sIGhhc1RyYWNpbmdFbmFibGVkIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHZhciBERUZBVUxUX1RSQUNJTkdfT1JJR0lOUyA9IFsnbG9jYWxob3N0JywgL15cXC8vXTtcbmV4cG9ydCB2YXIgZGVmYXVsdFJlcXVlc3RJbnN0cnVtZW50YXRpb25PcHRpb25zID0ge1xuICAgIHRyYWNlRmV0Y2g6IHRydWUsXG4gICAgdHJhY2VYSFI6IHRydWUsXG4gICAgdHJhY2luZ09yaWdpbnM6IERFRkFVTFRfVFJBQ0lOR19PUklHSU5TLFxufTtcbi8qKiBSZWdpc3RlcnMgc3BhbiBjcmVhdG9ycyBmb3IgeGhyIGFuZCBmZXRjaCByZXF1ZXN0cyAgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJlcXVlc3RJbnN0cnVtZW50YXRpb24oX29wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgdmFyIF9hID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRSZXF1ZXN0SW5zdHJ1bWVudGF0aW9uT3B0aW9ucyksIF9vcHRpb25zKSwgdHJhY2VGZXRjaCA9IF9hLnRyYWNlRmV0Y2gsIHRyYWNlWEhSID0gX2EudHJhY2VYSFIsIHRyYWNpbmdPcmlnaW5zID0gX2EudHJhY2luZ09yaWdpbnMsIHNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0ID0gX2Euc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3Q7XG4gICAgLy8gV2Ugc2hvdWxkIGNhY2hlIHVybCAtPiBkZWNpc2lvbiBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gY29tcHV0ZVxuICAgIC8vIHJlZ2V4cCBldmVyeXRpbWUgd2UgY3JlYXRlIGEgcmVxdWVzdC5cbiAgICB2YXIgdXJsTWFwID0ge307XG4gICAgdmFyIGRlZmF1bHRTaG91bGRDcmVhdGVTcGFuID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBpZiAodXJsTWFwW3VybF0pIHtcbiAgICAgICAgICAgIHJldHVybiB1cmxNYXBbdXJsXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3JpZ2lucyA9IHRyYWNpbmdPcmlnaW5zO1xuICAgICAgICB1cmxNYXBbdXJsXSA9XG4gICAgICAgICAgICBvcmlnaW5zLnNvbWUoZnVuY3Rpb24gKG9yaWdpbikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4odXJsLCBvcmlnaW4pOyB9KSAmJlxuICAgICAgICAgICAgICAgICFpc01hdGNoaW5nUGF0dGVybih1cmwsICdzZW50cnlfa2V5Jyk7XG4gICAgICAgIHJldHVybiB1cmxNYXBbdXJsXTtcbiAgICB9O1xuICAgIC8vIFdlIHdhbnQgdGhhdCBvdXIgdXNlcnMgZG9uJ3QgaGF2ZSB0byByZS1pbXBsZW1lbnQgc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3QgdGhlbXNlbHZlc1xuICAgIC8vIFRoYXQncyB3aHkgd2UgZmlsdGVyIG91dCBhbHJlYWR5IHVud2FudGVkIFNwYW5zIGZyb20gdHJhY2luZ09yaWdpbnNcbiAgICB2YXIgc2hvdWxkQ3JlYXRlU3BhbiA9IGRlZmF1bHRTaG91bGRDcmVhdGVTcGFuO1xuICAgIGlmICh0eXBlb2Ygc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2hvdWxkQ3JlYXRlU3BhbiA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U2hvdWxkQ3JlYXRlU3Bhbih1cmwpICYmIHNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0KHVybCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBzcGFucyA9IHt9O1xuICAgIGlmICh0cmFjZUZldGNoKSB7XG4gICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICAgICAgICAgIGZldGNoQ2FsbGJhY2soaGFuZGxlckRhdGEsIHNob3VsZENyZWF0ZVNwYW4sIHNwYW5zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnZmV0Y2gnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRyYWNlWEhSKSB7XG4gICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICAgICAgICAgIHhockNhbGxiYWNrKGhhbmRsZXJEYXRhLCBzaG91bGRDcmVhdGVTcGFuLCBzcGFucyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogJ3hocicsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGFuZCB0cmFjayBmZXRjaCByZXF1ZXN0IHNwYW5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaENhbGxiYWNrKGhhbmRsZXJEYXRhLCBzaG91bGRDcmVhdGVTcGFuLCBzcGFucykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY3VycmVudENsaWVudE9wdGlvbnMgPSAoX2EgPSBnZXRDdXJyZW50SHViKClcbiAgICAgICAgLmdldENsaWVudCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0T3B0aW9ucygpO1xuICAgIGlmICghKGN1cnJlbnRDbGllbnRPcHRpb25zICYmIGhhc1RyYWNpbmdFbmFibGVkKGN1cnJlbnRDbGllbnRPcHRpb25zKSkgfHxcbiAgICAgICAgIShoYW5kbGVyRGF0YS5mZXRjaERhdGEgJiYgc2hvdWxkQ3JlYXRlU3BhbihoYW5kbGVyRGF0YS5mZXRjaERhdGEudXJsKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaGFuZGxlckRhdGEuZW5kVGltZXN0YW1wICYmIGhhbmRsZXJEYXRhLmZldGNoRGF0YS5fX3NwYW4pIHtcbiAgICAgICAgdmFyIHNwYW4gPSBzcGFuc1toYW5kbGVyRGF0YS5mZXRjaERhdGEuX19zcGFuXTtcbiAgICAgICAgaWYgKHNwYW4pIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IGhhbmRsZXJEYXRhLnJlc3BvbnNlO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyAoa21jbGIpIHJlbW92ZSB0aGlzIG9uY2UgdHlwZXMgUFIgZ29lcyB0aHJvdWdoXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0SHR0cFN0YXR1cyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Bhbi5maW5pc2goKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgIGRlbGV0ZSBzcGFuc1toYW5kbGVyRGF0YS5mZXRjaERhdGEuX19zcGFuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhY3RpdmVUcmFuc2FjdGlvbiA9IGdldEFjdGl2ZVRyYW5zYWN0aW9uKCk7XG4gICAgaWYgKGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBzcGFuID0gYWN0aXZlVHJhbnNhY3Rpb24uc3RhcnRDaGlsZCh7XG4gICAgICAgICAgICBkYXRhOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaGFuZGxlckRhdGEuZmV0Y2hEYXRhKSwgeyB0eXBlOiAnZmV0Y2gnIH0pLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGhhbmRsZXJEYXRhLmZldGNoRGF0YS5tZXRob2QgKyBcIiBcIiArIGhhbmRsZXJEYXRhLmZldGNoRGF0YS51cmwsXG4gICAgICAgICAgICBvcDogJ2h0dHAnLFxuICAgICAgICB9KTtcbiAgICAgICAgaGFuZGxlckRhdGEuZmV0Y2hEYXRhLl9fc3BhbiA9IHNwYW4uc3BhbklkO1xuICAgICAgICBzcGFuc1tzcGFuLnNwYW5JZF0gPSBzcGFuO1xuICAgICAgICB2YXIgcmVxdWVzdCA9IChoYW5kbGVyRGF0YS5hcmdzWzBdID0gaGFuZGxlckRhdGEuYXJnc1swXSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHZhciBvcHRpb25zID0gKGhhbmRsZXJEYXRhLmFyZ3NbMV0gPSBoYW5kbGVyRGF0YS5hcmdzWzFdIHx8IHt9KTtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XG4gICAgICAgIGlmIChpc0luc3RhbmNlT2YocmVxdWVzdCwgUmVxdWVzdCkpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlcnMpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGVhZGVycy5hcHBlbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoJ3NlbnRyeS10cmFjZScsIHNwYW4udG9UcmFjZXBhcmVudCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0gX19zcHJlYWQoaGVhZGVycywgW1snc2VudHJ5LXRyYWNlJywgc3Bhbi50b1RyYWNlcGFyZW50KCldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGhlYWRlcnMpLCB7ICdzZW50cnktdHJhY2UnOiBzcGFuLnRvVHJhY2VwYXJlbnQoKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7ICdzZW50cnktdHJhY2UnOiBzcGFuLnRvVHJhY2VwYXJlbnQoKSB9O1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYW5kIHRyYWNrIHhociByZXF1ZXN0IHNwYW5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB4aHJDYWxsYmFjayhoYW5kbGVyRGF0YSwgc2hvdWxkQ3JlYXRlU3Bhbiwgc3BhbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGN1cnJlbnRDbGllbnRPcHRpb25zID0gKF9hID0gZ2V0Q3VycmVudEh1YigpXG4gICAgICAgIC5nZXRDbGllbnQoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldE9wdGlvbnMoKTtcbiAgICBpZiAoIShjdXJyZW50Q2xpZW50T3B0aW9ucyAmJiBoYXNUcmFjaW5nRW5hYmxlZChjdXJyZW50Q2xpZW50T3B0aW9ucykpIHx8XG4gICAgICAgICEoaGFuZGxlckRhdGEueGhyICYmIGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfXyAmJiBzaG91bGRDcmVhdGVTcGFuKGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfXy51cmwpKSB8fFxuICAgICAgICBoYW5kbGVyRGF0YS54aHIuX19zZW50cnlfb3duX3JlcXVlc3RfXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB4aHIgPSBoYW5kbGVyRGF0YS54aHIuX19zZW50cnlfeGhyX187XG4gICAgLy8gY2hlY2sgZmlyc3QgaWYgdGhlIHJlcXVlc3QgaGFzIGZpbmlzaGVkIGFuZCBpcyB0cmFja2VkIGJ5IGFuIGV4aXN0aW5nIHNwYW4gd2hpY2ggc2hvdWxkIG5vdyBlbmRcbiAgICBpZiAoaGFuZGxlckRhdGEuZW5kVGltZXN0YW1wICYmIGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfc3Bhbl9pZF9fKSB7XG4gICAgICAgIHZhciBzcGFuID0gc3BhbnNbaGFuZGxlckRhdGEueGhyLl9fc2VudHJ5X3hocl9zcGFuX2lkX19dO1xuICAgICAgICBpZiAoc3Bhbikge1xuICAgICAgICAgICAgc3Bhbi5zZXRIdHRwU3RhdHVzKHhoci5zdGF0dXNfY29kZSk7XG4gICAgICAgICAgICBzcGFuLmZpbmlzaCgpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgZGVsZXRlIHNwYW5zW2hhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfc3Bhbl9pZF9fXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIG5vdCwgY3JlYXRlIGEgbmV3IHNwYW4gdG8gdHJhY2sgaXRcbiAgICB2YXIgYWN0aXZlVHJhbnNhY3Rpb24gPSBnZXRBY3RpdmVUcmFuc2FjdGlvbigpO1xuICAgIGlmIChhY3RpdmVUcmFuc2FjdGlvbikge1xuICAgICAgICB2YXIgc3BhbiA9IGFjdGl2ZVRyYW5zYWN0aW9uLnN0YXJ0Q2hpbGQoe1xuICAgICAgICAgICAgZGF0YTogX19hc3NpZ24oX19hc3NpZ24oe30sIHhoci5kYXRhKSwgeyB0eXBlOiAneGhyJywgbWV0aG9kOiB4aHIubWV0aG9kLCB1cmw6IHhoci51cmwgfSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogeGhyLm1ldGhvZCArIFwiIFwiICsgeGhyLnVybCxcbiAgICAgICAgICAgIG9wOiAnaHR0cCcsXG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVyRGF0YS54aHIuX19zZW50cnlfeGhyX3NwYW5faWRfXyA9IHNwYW4uc3BhbklkO1xuICAgICAgICBzcGFuc1toYW5kbGVyRGF0YS54aHIuX19zZW50cnlfeGhyX3NwYW5faWRfX10gPSBzcGFuO1xuICAgICAgICBpZiAoaGFuZGxlckRhdGEueGhyLnNldFJlcXVlc3RIZWFkZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlckRhdGEueGhyLnNldFJlcXVlc3RIZWFkZXIoJ3NlbnRyeS10cmFjZScsIHNwYW4udG9UcmFjZXBhcmVudCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgICAgLy8gRXJyb3I6IEludmFsaWRTdGF0ZUVycm9yOiBGYWlsZWQgdG8gZXhlY3V0ZSAnc2V0UmVxdWVzdEhlYWRlcicgb24gJ1hNTEh0dHBSZXF1ZXN0JzogVGhlIG9iamVjdCdzIHN0YXRlIG11c3QgYmUgT1BFTkVELlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC5qcy5tYXAiLCJpbXBvcnQgeyBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyLCBnZXRHbG9iYWxPYmplY3QsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqXG4gKiBEZWZhdWx0IGZ1bmN0aW9uIGltcGxlbWVudGluZyBwYWdlbG9hZCBhbmQgbmF2aWdhdGlvbiB0cmFuc2FjdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSb3V0aW5nSW5zdHJ1bWVudGF0aW9uKHN0YXJ0VHJhbnNhY3Rpb24sIHN0YXJ0VHJhbnNhY3Rpb25PblBhZ2VMb2FkLCBzdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZSkge1xuICAgIGlmIChzdGFydFRyYW5zYWN0aW9uT25QYWdlTG9hZCA9PT0gdm9pZCAwKSB7IHN0YXJ0VHJhbnNhY3Rpb25PblBhZ2VMb2FkID0gdHJ1ZTsgfVxuICAgIGlmIChzdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZSA9PT0gdm9pZCAwKSB7IHN0YXJ0VHJhbnNhY3Rpb25PbkxvY2F0aW9uQ2hhbmdlID0gdHJ1ZTsgfVxuICAgIGlmICghZ2xvYmFsIHx8ICFnbG9iYWwubG9jYXRpb24pIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBpbml0aWFsaXplIHJvdXRpbmcgaW5zdHJ1bWVudGF0aW9uIGR1ZSB0byBpbnZhbGlkIGxvY2F0aW9uJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHN0YXJ0aW5nVXJsID0gZ2xvYmFsLmxvY2F0aW9uLmhyZWY7XG4gICAgdmFyIGFjdGl2ZVRyYW5zYWN0aW9uO1xuICAgIGlmIChzdGFydFRyYW5zYWN0aW9uT25QYWdlTG9hZCkge1xuICAgICAgICBhY3RpdmVUcmFuc2FjdGlvbiA9IHN0YXJ0VHJhbnNhY3Rpb24oeyBuYW1lOiBnbG9iYWwubG9jYXRpb24ucGF0aG5hbWUsIG9wOiAncGFnZWxvYWQnIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhcnRUcmFuc2FjdGlvbk9uTG9jYXRpb25DaGFuZ2UpIHtcbiAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvID0gX2EudG8sIGZyb20gPSBfYS5mcm9tO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoaXMgZWFybHkgcmV0dXJuIGlzIHRoZXJlIHRvIGFjY291bnQgZm9yIHNvbWUgY2FzZXMgd2hlcmUgYSBuYXZpZ2F0aW9uIHRyYW5zYWN0aW9uIHN0YXJ0cyByaWdodCBhZnRlclxuICAgICAgICAgICAgICAgICAqIGxvbmctcnVubmluZyBwYWdlbG9hZC4gV2UgbWFrZSBzdXJlIHRoYXQgaWYgYGZyb21gIGlzIHVuZGVmaW5lZCBhbmQgYSB2YWxpZCBgc3RhcnRpbmdVUkxgIGV4aXN0cywgd2UgZG9uJ3RcbiAgICAgICAgICAgICAgICAgKiBjcmVhdGUgYW4gdW5lY2Nlc3NhcnkgbmF2aWdhdGlvbiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIFRoaXMgd2FzIGhhcmQgdG8gZHVwbGljYXRlLCBidXQgdGhpcyBiZWhhdmlvciBzdG9wcGVkIGFzIHNvb24gYXMgdGhpcyBmaXggd2FzIGFwcGxpZWQuIFRoaXMgaXNzdWUgbWlnaHQgYWxzb1xuICAgICAgICAgICAgICAgICAqIG9ubHkgYmUgY2F1c2VkIGluIGNlcnRhaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSB1c2FnZSBvZiBhIGhvdCBtb2R1bGUgcmVsb2FkZXIgaXMgY2F1c2luZ1xuICAgICAgICAgICAgICAgICAqIGVycm9ycy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkICYmIHN0YXJ0aW5nVXJsICYmIHN0YXJ0aW5nVXJsLmluZGV4T2YodG8pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydGluZ1VybCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZnJvbSAhPT0gdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmdVcmwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBGaW5pc2hpbmcgY3VycmVudCB0cmFuc2FjdGlvbiB3aXRoIG9wOiBcIiArIGFjdGl2ZVRyYW5zYWN0aW9uLm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gb3BlbiB0cmFuc2FjdGlvbiBvbiB0aGUgc2NvcGUsIHdlIG5lZWQgdG8gZmluaXNoIGl0IGJlZm9yZSBjcmVhdGluZyBhbiBuZXcgb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVHJhbnNhY3Rpb24uZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVHJhbnNhY3Rpb24gPSBzdGFydFRyYW5zYWN0aW9uKHsgbmFtZTogZ2xvYmFsLmxvY2F0aW9uLnBhdGhuYW1lLCBvcDogJ25hdmlnYXRpb24nIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnaGlzdG9yeScsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHN0YXJ0SWRsZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vaHViZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBERUZBVUxUX0lETEVfVElNRU9VVCB9IGZyb20gJy4uL2lkbGV0cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBTcGFuU3RhdHVzIH0gZnJvbSAnLi4vc3BhbnN0YXR1cyc7XG5pbXBvcnQgeyBleHRyYWN0VHJhY2VwYXJlbnREYXRhLCBzZWNUb01zIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJCYWNrZ3JvdW5kVGFiRGV0ZWN0aW9uIH0gZnJvbSAnLi9iYWNrZ3JvdW5kdGFiJztcbmltcG9ydCB7IE1ldHJpY3NJbnN0cnVtZW50YXRpb24gfSBmcm9tICcuL21ldHJpY3MnO1xuaW1wb3J0IHsgZGVmYXVsdFJlcXVlc3RJbnN0cnVtZW50YXRpb25PcHRpb25zLCByZWdpc3RlclJlcXVlc3RJbnN0cnVtZW50YXRpb24sIH0gZnJvbSAnLi9yZXF1ZXN0JztcbmltcG9ydCB7IGRlZmF1bHRSb3V0aW5nSW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi9yb3V0ZXInO1xuZXhwb3J0IHZhciBERUZBVUxUX01BWF9UUkFOU0FDVElPTl9EVVJBVElPTl9TRUNPTkRTID0gNjAwO1xudmFyIERFRkFVTFRfQlJPV1NFUl9UUkFDSU5HX09QVElPTlMgPSBfX2Fzc2lnbih7IGlkbGVUaW1lb3V0OiBERUZBVUxUX0lETEVfVElNRU9VVCwgbWFya0JhY2tncm91bmRUcmFuc2FjdGlvbnM6IHRydWUsIG1heFRyYW5zYWN0aW9uRHVyYXRpb246IERFRkFVTFRfTUFYX1RSQU5TQUNUSU9OX0RVUkFUSU9OX1NFQ09ORFMsIHJvdXRpbmdJbnN0cnVtZW50YXRpb246IGRlZmF1bHRSb3V0aW5nSW5zdHJ1bWVudGF0aW9uLCBzdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZTogdHJ1ZSwgc3RhcnRUcmFuc2FjdGlvbk9uUGFnZUxvYWQ6IHRydWUgfSwgZGVmYXVsdFJlcXVlc3RJbnN0cnVtZW50YXRpb25PcHRpb25zKTtcbi8qKlxuICogVGhlIEJyb3dzZXIgVHJhY2luZyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIGJyb3dzZXIgcGFnZWxvYWQvbmF2aWdhdGlvblxuICogYWN0aW9ucyBhcyB0cmFuc2FjdGlvbnMsIGFuZCBjYXB0dXJlcyByZXF1ZXN0cywgbWV0cmljcyBhbmQgZXJyb3JzIGFzIHNwYW5zLlxuICpcbiAqIFRoZSBpbnRlZ3JhdGlvbiBjYW4gYmUgY29uZmlndXJlZCB3aXRoIGEgdmFyaWV0eSBvZiBvcHRpb25zLCBhbmQgY2FuIGJlIGV4dGVuZGVkIHRvIHVzZVxuICogYW55IHJvdXRpbmcgbGlicmFyeS4gVGhpcyBpbnRlZ3JhdGlvbiB1c2VzIHtAc2VlIElkbGVUcmFuc2FjdGlvbn0gdG8gY3JlYXRlIHRyYW5zYWN0aW9ucy5cbiAqL1xudmFyIEJyb3dzZXJUcmFjaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJUcmFjaW5nKF9vcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gQnJvd3NlclRyYWNpbmcuaWQ7XG4gICAgICAgIHRoaXMuX21ldHJpY3MgPSBuZXcgTWV0cmljc0luc3RydW1lbnRhdGlvbigpO1xuICAgICAgICB0aGlzLl9lbWl0T3B0aW9uc1dhcm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRyYWNpbmdPcmlnaW5zID0gZGVmYXVsdFJlcXVlc3RJbnN0cnVtZW50YXRpb25PcHRpb25zLnRyYWNpbmdPcmlnaW5zO1xuICAgICAgICAvLyBOT1RFOiBMb2dnZXIgZG9lc24ndCB3b3JrIGluIGNvbnN0cnVjdG9ycywgYXMgaXQncyBpbml0aWFsaXplZCBhZnRlciBpbnRlZ3JhdGlvbnMgaW5zdGFuY2VzXG4gICAgICAgIGlmIChfb3B0aW9ucyAmJlxuICAgICAgICAgICAgX29wdGlvbnMudHJhY2luZ09yaWdpbnMgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoX29wdGlvbnMudHJhY2luZ09yaWdpbnMpICYmXG4gICAgICAgICAgICBfb3B0aW9ucy50cmFjaW5nT3JpZ2lucy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHRyYWNpbmdPcmlnaW5zID0gX29wdGlvbnMudHJhY2luZ09yaWdpbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0T3B0aW9uc1dhcm5pbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBERUZBVUxUX0JST1dTRVJfVFJBQ0lOR19PUFRJT05TKSwgX29wdGlvbnMpLCB7IHRyYWNpbmdPcmlnaW5zOiB0cmFjaW5nT3JpZ2lucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyVHJhY2luZy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKF8sIGdldEN1cnJlbnRIdWIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fZ2V0Q3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWI7XG4gICAgICAgIGlmICh0aGlzLl9lbWl0T3B0aW9uc1dhcm5pbmcpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdbVHJhY2luZ10gWW91IG5lZWQgdG8gZGVmaW5lIGB0cmFjaW5nT3JpZ2luc2AgaW4gdGhlIG9wdGlvbnMuIFNldCBhbiBhcnJheSBvZiB1cmxzIG9yIHBhdHRlcm5zIHRvIHRyYWNlLicpO1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJbVHJhY2luZ10gV2UgYWRkZWQgYSByZWFzb25hYmxlIGRlZmF1bHQgZm9yIHlvdTogXCIgKyBkZWZhdWx0UmVxdWVzdEluc3RydW1lbnRhdGlvbk9wdGlvbnMudHJhY2luZ09yaWdpbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCByb3V0aW5nSW5zdHJ1bWVudGF0aW9uID0gX2Eucm91dGluZ0luc3RydW1lbnRhdGlvbiwgc3RhcnRUcmFuc2FjdGlvbk9uTG9jYXRpb25DaGFuZ2UgPSBfYS5zdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZSwgc3RhcnRUcmFuc2FjdGlvbk9uUGFnZUxvYWQgPSBfYS5zdGFydFRyYW5zYWN0aW9uT25QYWdlTG9hZCwgbWFya0JhY2tncm91bmRUcmFuc2FjdGlvbnMgPSBfYS5tYXJrQmFja2dyb3VuZFRyYW5zYWN0aW9ucywgdHJhY2VGZXRjaCA9IF9hLnRyYWNlRmV0Y2gsIHRyYWNlWEhSID0gX2EudHJhY2VYSFIsIHRyYWNpbmdPcmlnaW5zID0gX2EudHJhY2luZ09yaWdpbnMsIHNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0ID0gX2Euc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3Q7XG4gICAgICAgIHJvdXRpbmdJbnN0cnVtZW50YXRpb24oZnVuY3Rpb24gKGNvbnRleHQpIHsgcmV0dXJuIF90aGlzLl9jcmVhdGVSb3V0ZVRyYW5zYWN0aW9uKGNvbnRleHQpOyB9LCBzdGFydFRyYW5zYWN0aW9uT25QYWdlTG9hZCwgc3RhcnRUcmFuc2FjdGlvbk9uTG9jYXRpb25DaGFuZ2UpO1xuICAgICAgICBpZiAobWFya0JhY2tncm91bmRUcmFuc2FjdGlvbnMpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyQmFja2dyb3VuZFRhYkRldGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJlZ2lzdGVyUmVxdWVzdEluc3RydW1lbnRhdGlvbih7IHRyYWNlRmV0Y2g6IHRyYWNlRmV0Y2gsIHRyYWNlWEhSOiB0cmFjZVhIUiwgdHJhY2luZ09yaWdpbnM6IHRyYWNpbmdPcmlnaW5zLCBzaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdDogc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3QgfSk7XG4gICAgfTtcbiAgICAvKiogQ3JlYXRlIHJvdXRpbmcgaWRsZSB0cmFuc2FjdGlvbi4gKi9cbiAgICBCcm93c2VyVHJhY2luZy5wcm90b3R5cGUuX2NyZWF0ZVJvdXRlVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX2dldEN1cnJlbnRIdWIpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiW1RyYWNpbmddIERpZCBub3QgY3JlYXRlIFwiICsgY29udGV4dC5vcCArIFwiIHRyYW5zYWN0aW9uIGJlY2F1c2UgX2dldEN1cnJlbnRIdWIgaXMgaW52YWxpZC5cIik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBiZWZvcmVOYXZpZ2F0ZSA9IF9hLmJlZm9yZU5hdmlnYXRlLCBpZGxlVGltZW91dCA9IF9hLmlkbGVUaW1lb3V0LCBtYXhUcmFuc2FjdGlvbkR1cmF0aW9uID0gX2EubWF4VHJhbnNhY3Rpb25EdXJhdGlvbjtcbiAgICAgICAgdmFyIHBhcmVudENvbnRleHRGcm9tSGVhZGVyID0gY29udGV4dC5vcCA9PT0gJ3BhZ2Vsb2FkJyA/IGdldEhlYWRlckNvbnRleHQoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGV4cGFuZGVkQ29udGV4dCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgcGFyZW50Q29udGV4dEZyb21IZWFkZXIpLCB7IHRyaW1FbmQ6IHRydWUgfSk7XG4gICAgICAgIHZhciBtb2RpZmllZENvbnRleHQgPSB0eXBlb2YgYmVmb3JlTmF2aWdhdGUgPT09ICdmdW5jdGlvbicgPyBiZWZvcmVOYXZpZ2F0ZShleHBhbmRlZENvbnRleHQpIDogZXhwYW5kZWRDb250ZXh0O1xuICAgICAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucywgYmVmb3JlTmF2aWdhdGUgY2FuIHJldHVybiB1bmRlZmluZWQgdG8gXCJkcm9wXCIgdGhlIHRyYW5zYWN0aW9uIChwcmV2ZW50IGl0XG4gICAgICAgIC8vIGZyb20gYmVpbmcgc2VudCB0byBTZW50cnkpLlxuICAgICAgICB2YXIgZmluYWxDb250ZXh0ID0gbW9kaWZpZWRDb250ZXh0ID09PSB1bmRlZmluZWQgPyBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXhwYW5kZWRDb250ZXh0KSwgeyBzYW1wbGVkOiBmYWxzZSB9KSA6IG1vZGlmaWVkQ29udGV4dDtcbiAgICAgICAgaWYgKGZpbmFsQ29udGV4dC5zYW1wbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBXaWxsIG5vdCBzZW5kIFwiICsgZmluYWxDb250ZXh0Lm9wICsgXCIgdHJhbnNhY3Rpb24gYmVjYXVzZSBvZiBiZWZvcmVOYXZpZ2F0ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmxvZyhcIltUcmFjaW5nXSBTdGFydGluZyBcIiArIGZpbmFsQ29udGV4dC5vcCArIFwiIHRyYW5zYWN0aW9uIG9uIHNjb3BlXCIpO1xuICAgICAgICB2YXIgaHViID0gdGhpcy5fZ2V0Q3VycmVudEh1YigpO1xuICAgICAgICB2YXIgbG9jYXRpb24gPSBnZXRHbG9iYWxPYmplY3QoKS5sb2NhdGlvbjtcbiAgICAgICAgdmFyIGlkbGVUcmFuc2FjdGlvbiA9IHN0YXJ0SWRsZVRyYW5zYWN0aW9uKGh1YiwgZmluYWxDb250ZXh0LCBpZGxlVGltZW91dCwgdHJ1ZSwgeyBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIGlkbGVUcmFuc2FjdGlvbi5yZWdpc3RlckJlZm9yZUZpbmlzaENhbGxiYWNrKGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICBfdGhpcy5fbWV0cmljcy5hZGRQZXJmb3JtYW5jZUVudHJpZXModHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgYWRqdXN0VHJhbnNhY3Rpb25EdXJhdGlvbihzZWNUb01zKG1heFRyYW5zYWN0aW9uRHVyYXRpb24pLCB0cmFuc2FjdGlvbiwgZW5kVGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpZGxlVHJhbnNhY3Rpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJUcmFjaW5nLmlkID0gJ0Jyb3dzZXJUcmFjaW5nJztcbiAgICByZXR1cm4gQnJvd3NlclRyYWNpbmc7XG59KCkpO1xuZXhwb3J0IHsgQnJvd3NlclRyYWNpbmcgfTtcbi8qKlxuICogR2V0cyB0cmFuc2FjdGlvbiBjb250ZXh0IGZyb20gYSBzZW50cnktdHJhY2UgbWV0YS5cbiAqXG4gKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBjb250ZXh0IGRhdGEgZnJvbSB0aGUgaGVhZGVyIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSdzIG5vIGhlYWRlciBvciB0aGUgaGVhZGVyIGlzIG1hbGZvcm1lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGVhZGVyQ29udGV4dCgpIHtcbiAgICB2YXIgaGVhZGVyID0gZ2V0TWV0YUNvbnRlbnQoJ3NlbnRyeS10cmFjZScpO1xuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RUcmFjZXBhcmVudERhdGEoaGVhZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIG1ldGEgdGFnICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWV0YUNvbnRlbnQobWV0YU5hbWUpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPVwiICsgbWV0YU5hbWUgKyBcIl1cIik7XG4gICAgcmV0dXJuIGVsID8gZWwuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufVxuLyoqIEFkanVzdHMgdHJhbnNhY3Rpb24gdmFsdWUgYmFzZWQgb24gbWF4IHRyYW5zYWN0aW9uIGR1cmF0aW9uICovXG5mdW5jdGlvbiBhZGp1c3RUcmFuc2FjdGlvbkR1cmF0aW9uKG1heER1cmF0aW9uLCB0cmFuc2FjdGlvbiwgZW5kVGltZXN0YW1wKSB7XG4gICAgdmFyIGRpZmYgPSBlbmRUaW1lc3RhbXAgLSB0cmFuc2FjdGlvbi5zdGFydFRpbWVzdGFtcDtcbiAgICB2YXIgaXNPdXRkYXRlZFRyYW5zYWN0aW9uID0gZW5kVGltZXN0YW1wICYmIChkaWZmID4gbWF4RHVyYXRpb24gfHwgZGlmZiA8IDApO1xuICAgIGlmIChpc091dGRhdGVkVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uc2V0U3RhdHVzKFNwYW5TdGF0dXMuRGVhZGxpbmVFeGNlZWRlZCk7XG4gICAgICAgIHRyYW5zYWN0aW9uLnNldFRhZygnbWF4VHJhbnNhY3Rpb25EdXJhdGlvbkV4Y2VlZGVkJywgJ3RydWUnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VydHJhY2luZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogRXhwcmVzcyBpbnRlZ3JhdGlvblxuICpcbiAqIFByb3ZpZGVzIGFuIHJlcXVlc3QgYW5kIGVycm9yIGhhbmRsZXIgZm9yIEV4cHJlc3MgZnJhbWV3b3JrIGFzIHdlbGwgYXMgdHJhY2luZyBjYXBhYmlsaXRpZXNcbiAqL1xudmFyIEV4cHJlc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBFeHByZXNzKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBFeHByZXNzLmlkO1xuICAgICAgICB0aGlzLl9yb3V0ZXIgPSBvcHRpb25zLnJvdXRlciB8fCBvcHRpb25zLmFwcDtcbiAgICAgICAgdGhpcy5fbWV0aG9kcyA9IChBcnJheS5pc0FycmF5KG9wdGlvbnMubWV0aG9kcykgPyBvcHRpb25zLm1ldGhvZHMgOiBbXSkuY29uY2F0KCd1c2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBFeHByZXNzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcm91dGVyKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0V4cHJlc3NJbnRlZ3JhdGlvbiBpcyBtaXNzaW5nIGFuIEV4cHJlc3MgaW5zdGFuY2UnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0cnVtZW50TWlkZGxld2FyZXModGhpcy5fcm91dGVyLCB0aGlzLl9tZXRob2RzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRXhwcmVzcy5pZCA9ICdFeHByZXNzJztcbiAgICByZXR1cm4gRXhwcmVzcztcbn0oKSk7XG5leHBvcnQgeyBFeHByZXNzIH07XG4vKipcbiAqIFdyYXBzIG9yaWdpbmFsIG1pZGRsZXdhcmUgZnVuY3Rpb24gaW4gYSB0cmFjaW5nIGNhbGwsIHdoaWNoIHN0b3JlcyB0aGUgaW5mbyBhYm91dCB0aGUgY2FsbCBhcyBhIHNwYW4sXG4gKiBhbmQgZmluaXNoZXMgaXQgb25jZSB0aGUgbWlkZGxld2FyZSBpcyBkb25lIGludm9raW5nLlxuICpcbiAqIEV4cHJlc3MgbWlkZGxld2FyZXMgaGF2ZSAzIHZhcmlvdXMgZm9ybXMsIHRodXMgd2UgaGF2ZSB0byB0YWtlIGNhcmUgb2YgYWxsIG9mIHRoZW06XG4gKiAvLyBzeW5jXG4gKiBhcHAudXNlKGZ1bmN0aW9uIChyZXEsIHJlcykgeyAuLi4gfSlcbiAqIC8vIGFzeW5jXG4gKiBhcHAudXNlKGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkgeyAuLi4gfSlcbiAqIC8vIGVycm9yIGhhbmRsZXJcbiAqIGFwcC51c2UoZnVuY3Rpb24gKGVyciwgcmVxLCByZXMsIG5leHQpIHsgLi4uIH0pXG4gKlxuICogVGhleSBhbGwgaW50ZXJuYWxseSBkZWxlZ2F0ZSB0byB0aGUgYHJvdXRlclttZXRob2RdYCBvZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaW5zdGFuY2UuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3cmFwKGZuLCBtZXRob2QpIHtcbiAgICB2YXIgYXJpdHkgPSBmbi5sZW5ndGg7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSByZXMuX19zZW50cnlfdHJhbnNhY3Rpb247XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuXzEgPSB0cmFuc2FjdGlvbi5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBmbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3A6IFwibWlkZGxld2FyZS5cIiArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuXzEuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCByZXEsIHJlcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSByZXMuX19zZW50cnlfdHJhbnNhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIHNwYW4gPSAoX2EgPSB0cmFuc2FjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXJ0Q2hpbGQoe1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZm4ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwibWlkZGxld2FyZS5cIiArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXMsIHJlcSwgcmVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQuY2FsbC5hcHBseShuZXh0LCBfX3NwcmVhZChbdGhpc10sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA0OiB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gcmVzLl9fc2VudHJ5X3RyYW5zYWN0aW9uO1xuICAgICAgICAgICAgICAgIHZhciBzcGFuID0gKF9hID0gdHJhbnNhY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGFydENoaWxkKHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGZuLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIm1pZGRsZXdhcmUuXCIgKyBtZXRob2QsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBlcnIsIHJlcSwgcmVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQuY2FsbC5hcHBseShuZXh0LCBfX3NwcmVhZChbdGhpc10sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwcmVzcyBtaWRkbGV3YXJlIHRha2VzIDItNCBhcmd1bWVudHMuIEdvdDogXCIgKyBhcml0eSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRha2VzIGFsbCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgb3JpZ2luYWwgYGFwcGAgb3IgYHJvdXRlcmAgbWV0aG9kLCBlZy4gYGFwcC51c2VgIG9yIGByb3V0ZXIudXNlYFxuICogYW5kIHdyYXBzIGV2ZXJ5IGZ1bmN0aW9uLCBhcyB3ZWxsIGFzIGFycmF5IG9mIGZ1bmN0aW9ucyB3aXRoIGEgY2FsbCB0byBvdXIgYHdyYXBgIG1ldGhvZC5cbiAqIFdlIGhhdmUgdG8gdGFrZSBjYXJlIG9mIHRoZSBhcnJheXMgYXMgd2VsbCBhcyBpdGVyYXRlIG92ZXIgYWxsIG9mIHRoZSBhcmd1bWVudHMsXG4gKiBhcyBgYXBwLnVzZWAgY2FuIGFjY2VwdCBtaWRkbGV3YXJlcyBpbiBmZXcgdmFyaW91cyBmb3Jtcy5cbiAqXG4gKiBhcHAudXNlKFs8cGF0aD5dLCA8Zm4+KVxuICogYXBwLnVzZShbPHBhdGg+XSwgPGZuPiwgLi4uPGZuPilcbiAqIGFwcC51c2UoWzxwYXRoPl0sIC4uLjxmbj5bXSlcbiAqL1xuZnVuY3Rpb24gd3JhcE1pZGRsZXdhcmVBcmdzKGFyZ3MsIG1ldGhvZCkge1xuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChhcmcsIG1ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAoYSwgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJnO1xuICAgIH0pO1xufVxuLyoqXG4gKiBQYXRjaGVzIG9yaWdpbmFsIHJvdXRlciB0byB1dGlsaXplIG91ciB0cmFjaW5nIGZ1bmN0aW9uYWxpdHlcbiAqL1xuZnVuY3Rpb24gcGF0Y2hNaWRkbGV3YXJlKHJvdXRlciwgbWV0aG9kKSB7XG4gICAgdmFyIG9yaWdpbmFsQ2FsbGJhY2sgPSByb3V0ZXJbbWV0aG9kXTtcbiAgICByb3V0ZXJbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxDYWxsYmFjay5jYWxsLmFwcGx5KG9yaWdpbmFsQ2FsbGJhY2ssIF9fc3ByZWFkKFt0aGlzXSwgd3JhcE1pZGRsZXdhcmVBcmdzKGFyZ3MsIG1ldGhvZCkpKTtcbiAgICB9O1xuICAgIHJldHVybiByb3V0ZXI7XG59XG4vKipcbiAqIFBhdGNoZXMgb3JpZ2luYWwgcm91dGVyIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE1pZGRsZXdhcmVzKHJvdXRlciwgbWV0aG9kcykge1xuICAgIGlmIChtZXRob2RzID09PSB2b2lkIDApIHsgbWV0aG9kcyA9IFtdOyB9XG4gICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIHBhdGNoTWlkZGxld2FyZShyb3V0ZXIsIG1ldGhvZCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwcmVzcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQnJvd3NlclRyYWNpbmcgfSBmcm9tICcuL2Jyb3dzZXInO1xuaW1wb3J0IHsgYWRkRXh0ZW5zaW9uTWV0aG9kcyB9IGZyb20gJy4vaHViZXh0ZW5zaW9ucyc7XG5pbXBvcnQgKiBhcyBUcmFjaW5nSW50ZWdyYXRpb25zIGZyb20gJy4vaW50ZWdyYXRpb25zJztcbnZhciBJbnRlZ3JhdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgVHJhY2luZ0ludGVncmF0aW9ucyksIHsgQnJvd3NlclRyYWNpbmc6IEJyb3dzZXJUcmFjaW5nIH0pO1xuZXhwb3J0IHsgSW50ZWdyYXRpb25zIH07XG5leHBvcnQgeyBTcGFuIH0gZnJvbSAnLi9zcGFuJztcbmV4cG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5leHBvcnQgeyByZWdpc3RlclJlcXVlc3RJbnN0cnVtZW50YXRpb24sIGRlZmF1bHRSZXF1ZXN0SW5zdHJ1bWVudGF0aW9uT3B0aW9ucywgfSBmcm9tICcuL2Jyb3dzZXInO1xuZXhwb3J0IHsgU3BhblN0YXR1cyB9IGZyb20gJy4vc3BhbnN0YXR1cyc7XG5leHBvcnQgeyBJZGxlVHJhbnNhY3Rpb24gfSBmcm9tICcuL2lkbGV0cmFuc2FjdGlvbic7XG5leHBvcnQgeyBzdGFydElkbGVUcmFuc2FjdGlvbiB9IGZyb20gJy4vaHViZXh0ZW5zaW9ucyc7XG4vLyBXZSBhcmUgcGF0Y2hpbmcgdGhlIGdsb2JhbCBvYmplY3Qgd2l0aCBvdXIgaHViIGV4dGVuc2lvbiBtZXRob2RzXG5hZGRFeHRlbnNpb25NZXRob2RzKCk7XG5leHBvcnQgeyBhZGRFeHRlbnNpb25NZXRob2RzIH07XG5leHBvcnQgeyBleHRyYWN0VHJhY2VwYXJlbnREYXRhLCBnZXRBY3RpdmVUcmFuc2FjdGlvbiwgaGFzVHJhY2luZ0VuYWJsZWQsIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCwgVFJBQ0VQQVJFTlRfUkVHRVhQLCB9IGZyb20gJy4vdXRpbHMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgU0RLIGNsaWVudCBpbnN0YW5jZS4gVGhlIGNsaWVudCBpc1xuICogaW5zdGFsbGVkIGFuZCB0aGVuIGJvdW5kIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICpcbiAqIEBwYXJhbSBjbGllbnRDbGFzcyBUaGUgY2xpZW50IGNsYXNzIHRvIGluc3RhbnRpYXRlLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0QW5kQmluZChjbGllbnRDbGFzcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICAgIGxvZ2dlci5lbmFibGUoKTtcbiAgICB9XG4gICAgdmFyIGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICB2YXIgY2xpZW50ID0gbmV3IGNsaWVudENsYXNzKG9wdGlvbnMpO1xuICAgIGh1Yi5iaW5kQ2xpZW50KGNsaWVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGsuanMubWFwIiwiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS92dWVcIjtcclxuaW1wb3J0IHsgSW50ZWdyYXRpb25zIH0gZnJvbSBcIkBzZW50cnkvdHJhY2luZ1wiO1xyXG5cclxuU2VudHJ5LmluaXQoe1xyXG4gIFZ1ZSxcclxuICBkc246XCJodHRwczovLzdkYThmNTZiY2Y5ZjRhY2Y5MmY5NWFhYzE2YzhlMGNkQG81MjY1MTcuaW5nZXN0LnNlbnRyeS5pby81NjQyMTM0XCIgLFxyXG4gIGludGVncmF0aW9uczogW25ldyBJbnRlZ3JhdGlvbnMuQnJvd3NlclRyYWNpbmcoKV0sXHJcbiAgbG9nRXJyb3JzOnRydWUsXHJcbiAgXHJcbiAgLy8gV2UgcmVjb21tZW5kIGFkanVzdGluZyB0aGlzIHZhbHVlIGluIHByb2R1Y3Rpb24sIG9yIHVzaW5nIHRyYWNlc1NhbXBsZXJcclxuICAvLyBmb3IgZmluZXIgY29udHJvbCBcclxuICB0cmFjZXNTYW1wbGVSYXRlOiAxLjAsXHJcbn0pOyIsImltcG9ydCBWdWUsIHsgQ3JlYXRlRWxlbWVudCwgVk5vZGUgfSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgeyBuYXZpZ2F0aW9uIH0gZnJvbSAnLi9jb21wb25lbnRzL25hdmlnYXRpb24nO1xyXG5pbXBvcnQgeyBsb2FkaW5nTWVzc2FnZSwgZXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL21lc3NhZ2UnO1xyXG5pbXBvcnQgeyBzdW1tYXJ5IH0gZnJvbSAnLi9jb21wb25lbnRzL3BlcmZvcm1hbmNlJztcclxuaW1wb3J0IHsgc3RvcmUkIH0gZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB7IHN1bW1hcnkgYXMgc3VtbWFyeUFjdGlvbiB9IGZyb20gJy4vYXN5bmMtYWN0aW9uJztcclxuaW1wb3J0ICcuL21haW4uY3NzJztcclxuaW1wb3J0ICcuLi9zZW50cnknO1xyXG5cclxuXHJcbmNvbnN0IGJ1dHRvblJlZnJlc2ggPSBWdWUuZXh0ZW5kKHtcclxuICByZW5kZXIoY3JlYXRlRWxlbWVudDogQ3JlYXRlRWxlbWVudCk6IFZOb2RlIHtcclxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XHJcbiAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgaWQ6ICdyZWZyZXNoJyxcclxuICAgICAgfSxcclxuICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICBpbm5lckhUTUw6ICdyZWZyZXNoJyxcclxuICAgICAgfSxcclxuICAgICAgb246IHtcclxuICAgICAgICBjbGljazogKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICBzdG9yZSQuZGlzcGF0Y2g8YW55PihzdW1tYXJ5QWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBhcHAxID0gbmV3IFZ1ZSh7XHJcbiAgZWw6ICcjcGVyZm9ybWFuY2UnLFxyXG4gIGNvbXBvbmVudHM6IHtcclxuICAgIG5hdmlnYXRpb246IG5hdmlnYXRpb24sXHJcbiAgICBsb2FkaW5nTWVzc2FnZTogbG9hZGluZ01lc3NhZ2UsXHJcbiAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcclxuICAgIGJ1dHRvblJlZnJlc2g6IGJ1dHRvblJlZnJlc2gsXHJcbiAgICBwZXJmb3JtU3VtbWFyeTogc3VtbWFyeSxcclxuICB9LFxyXG4gIHJlbmRlcihoOiBDcmVhdGVFbGVtZW50KTogVk5vZGUge1xyXG4gICAgcmV0dXJuIGgoJ2RpdicsIFtcclxuICAgICAgaChuYXZpZ2F0aW9uKSxcclxuICAgICAgaCgnaHInKSxcclxuICAgICAgaChsb2FkaW5nTWVzc2FnZSwgeyBwcm9wczogeyBsb2FkaW5nOiB0aGlzLnBlcmZvcm1hbmNlLmxvYWRpbmcgfSB9KSxcclxuICAgICAgaChlcnJvck1lc3NhZ2UsIHsgcHJvcHM6IHsgZXJyb3I6IHRoaXMucGVyZm9ybWFuY2UuZXJyb3IgfSB9KSxcclxuICAgICAgaChidXR0b25SZWZyZXNoKSxcclxuICAgICAgaChzdW1tYXJ5LCB7IHByb3BzOiB7IGRldGFpbHM6IHRoaXMucGVyZm9ybWFuY2Uuc3VtbWFyeSB9IH0pLFxyXG4gICAgXSk7XHJcbiAgfSxcclxuICBkYXRhOiB7XHJcbiAgICBwZXJmb3JtYW5jZToge30sXHJcbiAgfSxcclxuICBjcmVhdGVkKCkge1xyXG4gICAgdGhpcy5wZXJmb3JtYW5jZSA9IHN0b3JlJC5nZXRTdGF0ZSgpO1xyXG4gIH0sXHJcbiAgbW91bnRlZCgpIHtcclxuICAgIHN0b3JlJC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLnBlcmZvcm1hbmNlID0gc3RvcmUkLmdldFN0YXRlKCk7XHJcbiAgICB9KTtcclxuICAgIHN0b3JlJC5kaXNwYXRjaDxhbnk+KHN1bW1hcnlBY3Rpb24pO1xyXG4gIH0sXHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9